

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Tue Mar 12 12:26:18 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1
    48                           	psect	text37,global,reloc=2,class=CODE,delta=1
    49                           	psect	text38,global,reloc=2,class=CODE,delta=1
    50                           	psect	text39,global,reloc=2,class=CODE,delta=1
    51                           	psect	text40,global,reloc=2,class=CODE,delta=1
    52                           	psect	text41,global,reloc=2,class=CODE,delta=1
    53                           	psect	text42,global,reloc=2,class=CODE,delta=1
    54                           	psect	text43,global,reloc=2,class=CODE,delta=1
    55                           	psect	text44,global,reloc=2,class=CODE,delta=1
    56                           	psect	text45,global,reloc=2,class=CODE,delta=1
    57                           	psect	text46,global,reloc=2,class=CODE,delta=1
    58                           	psect	text47,global,reloc=2,class=CODE,delta=1
    59                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=1
    60                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=1
    61                           	psect	text50,global,reloc=2,class=CODE,delta=1
    62                           	psect	text51,global,reloc=2,class=CODE,delta=1
    63                           	psect	text52,global,reloc=2,class=CODE,delta=1
    64                           	psect	text53,global,reloc=2,class=CODE,delta=1
    65                           	psect	text54,global,reloc=2,class=CODE,delta=1
    66                           	psect	text55,global,reloc=2,class=CODE,delta=1
    67                           	psect	text56,global,reloc=2,class=CODE,delta=1
    68                           	psect	text57,global,reloc=2,class=CODE,delta=1
    69                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    70                           	psect	text59,global,reloc=2,class=CODE,delta=1
    71                           	psect	text60,global,reloc=2,class=CODE,delta=1
    72                           	psect	text61,global,reloc=2,class=CODE,delta=1
    73                           	psect	text62,global,reloc=2,class=CODE,delta=1
    74                           	psect	text63,global,reloc=2,class=CODE,delta=1
    75                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
    76                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    77                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    78                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    79                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    80   000000                     
    81                           ; Generated 21/07/2023 GMT
    82                           ; 
    83                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    84                           ; All rights reserved.
    85                           ; 
    86                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    87                           ; 
    88                           ; Redistribution and use in source and binary forms, with or without modification, are
    89                           ; permitted provided that the following conditions are met:
    90                           ; 
    91                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    92                           ;        conditions and the following disclaimer.
    93                           ; 
    94                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    95                           ;        of conditions and the following disclaimer in the documentation and/or other
    96                           ;        materials provided with the distribution. Publication is not required when
    97                           ;        this file is used in an embedded application.
    98                           ; 
    99                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   100                           ;        software without specific prior written permission.
   101                           ; 
   102                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   103                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   104                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   105                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   106                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   107                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   108                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   109                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   110                           ; 
   111                           ; 
   112                           ; Code-generator required, PIC18F67K40 Definitions
   113                           ; 
   114                           ; SFR Addresses
   115   000000                     
   116                           	psect	idataCOMRAM
   117   002B14                     __pidataCOMRAM:
   118                           	callstack 0
   119                           
   120                           ;initializer for reverseRoute@F14295
   121   002B14  01                 	db	1
   122   002B15  00                 	db	0
   123   002B16  02                 	db	2
   124   002B17  09                 	db	9
   125   002B18  0A                 	db	10
   126   002B19  0B                 	db	11
   127   002B1A  0C                 	db	12
   128   002B1B  FF                 	db	255
   129   002B1C  FF                 	db	255
   130                           
   131                           ;initializer for _turnRightPower
   132   002B1D  1C                 	db	28
   133                           
   134                           ;initializer for _turnLeftPower
   135   002B1E  1C                 	db	28
   136                           
   137                           ;initializer for _square
   138   002B1F  10                 	db	16
   139   000000                     _TRISFbits	set	3974
   140   000000                     _LATHbits	set	3968
   141   000000                     _TRISAbits	set	3969
   142   000000                     _TRISEbits	set	3973
   143   000000                     _TRISGbits	set	3975
   144   000000                     _PORTFbits	set	3982
   145   000000                     _TRISDbits	set	3972
   146   000000                     _CCPR2H	set	4006
   147   000000                     _CCPR1H	set	4010
   148   000000                     _SSP2CON2	set	3802
   149   000000                     _INT0PPS	set	3568
   150   000000                     _SSP2CLKPPS	set	3612
   151   000000                     _SSP2DATPPS	set	3613
   152   000000                     _ANSELDbits	set	3751
   153   000000                     _SSP2ADD	set	3798
   154   000000                     _SSP2CON1bits	set	3801
   155   000000                     _SSP2CON2bits	set	3802
   156   000000                     _LATAbits	set	3961
   157   000000                     _LATEbits	set	3965
   158   000000                     _LATGbits	set	3967
   159   000000                     _CCPR4H	set	3873
   160   000000                     _CCPR3H	set	3877
   161   000000                     _LATDbits	set	3964
   162   000000                     _SSP2STAT	set	3800
   163   000000                     _ANSELFbits	set	3764
   164   000000                     _SSP2BUF	set	3797
   165   000000                     _IPR0bits	set	3615
   166   000000                     _PIE0bits	set	3625
   167   000000                     _RD5PPS	set	3695
   168   000000                     _RE2PPS	set	3700
   169   000000                     _ANSELBbits	set	3738
   170   000000                     _RD6PPS	set	3696
   171   000000                     _CCP1CONbits	set	4011
   172   000000                     _CCPTMRS0bits	set	4013
   173   000000                     _T2PR	set	4028
   174   000000                     _T2CONbits	set	4029
   175   000000                     _TMR0L	set	4051
   176   000000                     _TMR0H	set	4052
   177   000000                     _T0CON0bits	set	4053
   178   000000                     _T0CON1bits	set	4054
   179   000000                     _INTCONbits	set	4082
   180   000000                     _CCP2CONbits	set	4007
   181   000000                     _ADREFbits	set	3928
   182   000000                     _CCP3CONbits	set	3878
   183   000000                     _CCP4CONbits	set	3874
   184   000000                     _TRISHbits	set	3976
   185   000000                     _TRISCbits	set	3971
   186   000000                     _PIR0bits	set	3635
   187   000000                     _RC7PPS	set	3689
   188   000000                     _RE4PPS	set	3702
   189   000000                     _RG6PPS	set	3720
   190   000000                     _T2CLKCONbits	set	4031
   191   000000                     _T2HLTbits	set	4030
   192   000000                     _ADPCH	set	3935
   193   000000                     _ADRESH	set	3940
   194   000000                     _ADCON0bits	set	3936
   195                           
   196                           ; #config settings
   197                           
   198                           	psect	cinit
   199   00287A                     __pcinit:
   200                           	callstack 0
   201   00287A                     start_initialization:
   202                           	callstack 0
   203   00287A                     __initialization:
   204                           	callstack 0
   205                           
   206                           ; Initialize objects allocated to COMRAM (12 bytes)
   207                           ; load TBLPTR registers with __pidataCOMRAM
   208   00287A  0E14               	movlw	low __pidataCOMRAM
   209   00287C  6EF6               	movwf	tblptrl,c
   210   00287E  0E2B               	movlw	high __pidataCOMRAM
   211   002880  6EF7               	movwf	tblptrh,c
   212   002882  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   213   002884  6EF8               	movwf	tblptru,c
   214   002886  EE00  F041         	lfsr	0,__pdataCOMRAM
   215   00288A  EE10 F00C          	lfsr	1,12
   216   00288E                     copy_data0:
   217   00288E  0009               	tblrd		*+
   218   002890  CFF5 FFEE          	movff	tablat,postinc0
   219   002894  50E5               	movf	postdec1,w,c
   220   002896  50E1               	movf	fsr1l,w,c
   221   002898  E1FA               	bnz	copy_data0
   222                           
   223                           ; Clear objects allocated to BANK0 (45 bytes)
   224   00289A  EE00  F060         	lfsr	0,__pbssBANK0
   225   00289E  0E2D               	movlw	45
   226   0028A0                     clear_0:
   227   0028A0  6AEE               	clrf	postinc0,c
   228   0028A2  06E8               	decf	wreg,f,c
   229   0028A4  E1FD               	bnz	clear_0
   230   0028A6                     end_of_initialization:
   231                           	callstack 0
   232   0028A6                     __end_of__initialization:
   233                           	callstack 0
   234   0028A6  904D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   235   0028A8  924D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   236   0028AA  0100               	movlb	0
   237   0028AC  EFFB  F007         	goto	_main	;jump to C main() function
   238                           
   239                           	psect	dataCOMRAM
   240   000041                     __pdataCOMRAM:
   241                           	callstack 0
   242   000041                     reverseRoute@F14295:
   243                           	callstack 0
   244   000041                     	ds	9
   245   00004A                     _turnRightPower:
   246                           	callstack 0
   247   00004A                     	ds	1
   248   00004B                     _turnLeftPower:
   249                           	callstack 0
   250   00004B                     	ds	1
   251   00004C                     _square:
   252                           	callstack 0
   253   00004C                     	ds	1
   254                           
   255                           	psect	bssBANK0
   256   000060                     __pbssBANK0:
   257                           	callstack 0
   258   000060                     _instruction_array:
   259                           	callstack 0
   260   000060                     	ds	40
   261   000088                     _increment:
   262                           	callstack 0
   263   000088                     	ds	2
   264   00008A                     _reverseRouteFlag:
   265                           	callstack 0
   266   00008A                     	ds	1
   267   00008B                     _instruction_array_index:
   268                           	callstack 0
   269   00008B                     	ds	1
   270   00008C                     _wall_detected:
   271                           	callstack 0
   272   00008C                     	ds	1
   273                           
   274                           	psect	cstackBANK0
   275   00008D                     __pcstackBANK0:
   276                           	callstack 0
   277   00008D                     main@colourCode:
   278                           	callstack 0
   279                           
   280                           ; 1 bytes @ 0x0
   281   00008D                     	ds	1
   282   00008E                     main@normRGB:
   283                           	callstack 0
   284                           
   285                           ; 8 bytes @ 0x1
   286   00008E                     	ds	8
   287   000096                     main@RGBC:
   288                           	callstack 0
   289                           
   290                           ; 8 bytes @ 0x9
   291   000096                     	ds	8
   292   00009E                     main@motorR:
   293                           	callstack 0
   294                           
   295                           ; 9 bytes @ 0x11
   296   00009E                     	ds	9
   297   0000A7                     main@motorL:
   298                           	callstack 0
   299                           
   300                           ; 9 bytes @ 0x1A
   301   0000A7                     	ds	9
   302                           
   303                           	psect	cstackCOMRAM
   304   000001                     __pcstackCOMRAM:
   305                           	callstack 0
   306   000001                     ??i2_I2C_2_Master_Idle:
   307   000001                     
   308                           ; 1 bytes @ 0x0
   309   000001                     	ds	1
   310   000002                     i2I2C_2_Master_Write@data_byte:
   311                           	callstack 0
   312                           
   313                           ; 1 bytes @ 0x1
   314   000002                     	ds	1
   315   000003                     ??_indicateInstruction:
   316   000003                     ??_I2C_2_Master_Idle:
   317   000003                     ?___wmul:
   318                           	callstack 0
   319   000003                     White@mL:
   320                           	callstack 0
   321   000003                     Black@mL:
   322                           	callstack 0
   323   000003                     initDCmotorsPWM@PWMperiod:
   324                           	callstack 0
   325   000003                     ___wmul@multiplier:
   326                           	callstack 0
   327                           
   328                           ; 2 bytes @ 0x2
   329   000003                     	ds	1
   330   000004                     ??_I2C_2_Master_Read:
   331   000004                     I2C_2_Master_Write@data_byte:
   332                           	callstack 0
   333   000004                     White@mR:
   334                           	callstack 0
   335   000004                     Black@mR:
   336                           	callstack 0
   337                           
   338                           ; 1 bytes @ 0x3
   339   000004                     	ds	1
   340   000005                     color_writetoaddr@value:
   341                           	callstack 0
   342   000005                     I2C_2_Master_Read@ack:
   343                           	callstack 0
   344   000005                     ___wmul@multiplicand:
   345                           	callstack 0
   346                           
   347                           ; 2 bytes @ 0x4
   348   000005                     	ds	1
   349   000006                     color_writetoaddr@address:
   350                           	callstack 0
   351   000006                     I2C_2_Master_Read@tmp:
   352                           	callstack 0
   353   000006                     indicateInstruction@period:
   354                           	callstack 0
   355                           
   356                           ; 1 bytes @ 0x5
   357   000006                     	ds	1
   358   000007                     ??_color_click_init:
   359   000007                     ?_readRedColor:
   360                           	callstack 0
   361   000007                     ?_readGreenColor:
   362                           	callstack 0
   363   000007                     ?_readBlueColor:
   364                           	callstack 0
   365   000007                     ?_readClearColor:
   366                           	callstack 0
   367   000007                     indicateInstruction@j:
   368                           	callstack 0
   369   000007                     ___wmul@product:
   370                           	callstack 0
   371                           
   372                           ; 2 bytes @ 0x6
   373   000007                     	ds	2
   374   000009                     ??_readRedColor:
   375   000009                     ??_readGreenColor:
   376   000009                     ??_readBlueColor:
   377   000009                     ??_readClearColor:
   378   000009                     ?___lwdiv:
   379                           	callstack 0
   380   000009                     indicateInstruction@i:
   381                           	callstack 0
   382   000009                     ___lwdiv@dividend:
   383                           	callstack 0
   384                           
   385                           ; 2 bytes @ 0x8
   386   000009                     	ds	2
   387   00000B                     ___lwdiv@divisor:
   388                           	callstack 0
   389                           
   390                           ; 2 bytes @ 0xA
   391   00000B                     	ds	1
   392   00000C                     readRedColor@tmp:
   393                           	callstack 0
   394   00000C                     readGreenColor@tmp:
   395                           	callstack 0
   396   00000C                     readBlueColor@tmp:
   397                           	callstack 0
   398   00000C                     readClearColor@tmp:
   399                           	callstack 0
   400                           
   401                           ; 2 bytes @ 0xB
   402   00000C                     	ds	1
   403   00000D                     ___lwdiv@quotient:
   404                           	callstack 0
   405                           
   406                           ; 2 bytes @ 0xC
   407   00000D                     	ds	1
   408   00000E                     readColors@RGBC:
   409                           	callstack 0
   410                           
   411                           ; 1 bytes @ 0xD
   412   00000E                     	ds	1
   413   00000F                     ??_readColors:
   414   00000F                     ___lwdiv@counter:
   415                           	callstack 0
   416                           
   417                           ; 1 bytes @ 0xE
   418   00000F                     	ds	1
   419   000010                     normalizeColors@RGBC:
   420                           	callstack 0
   421   000010                     setMotorPWM@m:
   422                           	callstack 0
   423                           
   424                           ; 1 bytes @ 0xF
   425   000010                     	ds	1
   426   000011                     ??_setMotorPWM:
   427   000011                     normalizeColors@normRGB:
   428                           	callstack 0
   429                           
   430                           ; 1 bytes @ 0x10
   431   000011                     	ds	1
   432   000012                     ??_normalizeColors:
   433                           
   434                           ; 1 bytes @ 0x11
   435   000012                     	ds	1
   436   000013                     setMotorPWM@posDuty:
   437                           	callstack 0
   438                           
   439                           ; 1 bytes @ 0x12
   440   000013                     	ds	1
   441   000014                     setMotorPWM@negDuty:
   442                           	callstack 0
   443                           
   444                           ; 1 bytes @ 0x13
   445   000014                     	ds	1
   446   000015                     stop@mL:
   447                           	callstack 0
   448   000015                     fastStop@mL:
   449                           	callstack 0
   450   000015                     trundle@mL:
   451                           	callstack 0
   452                           
   453                           ; 1 bytes @ 0x14
   454   000015                     	ds	1
   455   000016                     stop@mR:
   456                           	callstack 0
   457   000016                     fastStop@mR:
   458                           	callstack 0
   459   000016                     trundle@mR:
   460                           	callstack 0
   461                           
   462                           ; 1 bytes @ 0x15
   463   000016                     	ds	1
   464   000017                     ??_fastStop:
   465   000017                     ??_trundle:
   466   000017                     ??_stop:
   467                           
   468                           ; 1 bytes @ 0x16
   469   000017                     	ds	1
   470   000018                     stop@current_power:
   471                           	callstack 0
   472   000018                     fastStop@current_power:
   473                           	callstack 0
   474                           
   475                           ; 2 bytes @ 0x17
   476   000018                     	ds	2
   477   00001A                     normalizeColors@sum:
   478                           	callstack 0
   479   00001A                     stop@i:
   480                           	callstack 0
   481   00001A                     fastStop@i:
   482                           	callstack 0
   483   00001A                     trundle@i:
   484                           	callstack 0
   485                           
   486                           ; 2 bytes @ 0x19
   487   00001A                     	ds	2
   488   00001C                     turnLeft@mL:
   489                           	callstack 0
   490   00001C                     turnRight@mL:
   491                           	callstack 0
   492   00001C                     turn180@mL:
   493                           	callstack 0
   494   00001C                     turnLeft135@mL:
   495                           	callstack 0
   496   00001C                     turnRight135@mL:
   497                           	callstack 0
   498   00001C                     creep@mL:
   499                           	callstack 0
   500   00001C                     timed_trundle@mL:
   501                           	callstack 0
   502   00001C                     trundleSquare@mL:
   503                           	callstack 0
   504   00001C                     trundle@i_2180:
   505                           	callstack 0
   506   00001C                     _normalizeColors$3139:
   507                           	callstack 0
   508                           
   509                           ; 2 bytes @ 0x1B
   510   00001C                     	ds	1
   511   00001D                     turnLeft@mR:
   512                           	callstack 0
   513   00001D                     turnRight@mR:
   514                           	callstack 0
   515   00001D                     turn180@mR:
   516                           	callstack 0
   517   00001D                     turnLeft135@mR:
   518                           	callstack 0
   519   00001D                     turnRight135@mR:
   520                           	callstack 0
   521   00001D                     creep@mR:
   522                           	callstack 0
   523   00001D                     timed_trundle@mR:
   524                           	callstack 0
   525   00001D                     trundleSquare@mR:
   526                           	callstack 0
   527                           
   528                           ; 1 bytes @ 0x1C
   529   00001D                     	ds	1
   530   00001E                     ??_turn180:
   531   00001E                     ??_turnRight135:
   532   00001E                     ??_turnLeft135:
   533   00001E                     turnLeft@power:
   534                           	callstack 0
   535   00001E                     turnRight@power:
   536                           	callstack 0
   537   00001E                     trundle@current_power:
   538                           	callstack 0
   539   00001E                     trundleSquare@square:
   540                           	callstack 0
   541   00001E                     creep@increments:
   542                           	callstack 0
   543   00001E                     timed_trundle@increments:
   544                           	callstack 0
   545                           
   546                           ; 2 bytes @ 0x1D
   547   00001E                     	ds	1
   548   00001F                     ??_turnRight:
   549   00001F                     ??_turnLeft:
   550   00001F                     trundle@trundle_power:
   551                           	callstack 0
   552   00001F                     trundleSquare@reverse:
   553                           	callstack 0
   554                           
   555                           ; 1 bytes @ 0x1E
   556   00001F                     	ds	1
   557   000020                     ??_trundleSquare:
   558   000020                     ??_timed_trundle:
   559   000020                     creep@direction:
   560                           	callstack 0
   561   000020                     turn180@maxpower:
   562                           	callstack 0
   563   000020                     turnLeft135@maxpower:
   564                           	callstack 0
   565   000020                     turnRight135@maxpower:
   566                           	callstack 0
   567                           
   568                           ; 2 bytes @ 0x1F
   569   000020                     	ds	1
   570   000021                     ??_creep:
   571   000021                     turnLeft@maxpower:
   572                           	callstack 0
   573   000021                     turnRight@maxpower:
   574                           	callstack 0
   575                           
   576                           ; 2 bytes @ 0x20
   577   000021                     	ds	1
   578   000022                     turn180@i:
   579                           	callstack 0
   580   000022                     turnLeft135@i:
   581                           	callstack 0
   582   000022                     turnRight135@i:
   583                           	callstack 0
   584                           
   585                           ; 2 bytes @ 0x21
   586   000022                     	ds	1
   587   000023                     turnLeft@i:
   588                           	callstack 0
   589   000023                     turnRight@i:
   590                           	callstack 0
   591   000023                     timed_trundle@i:
   592                           	callstack 0
   593                           
   594                           ; 2 bytes @ 0x22
   595   000023                     	ds	1
   596   000024                     turn180@i_2108:
   597                           	callstack 0
   598   000024                     turnLeft135@i_2126:
   599                           	callstack 0
   600   000024                     turnRight135@i_2144:
   601                           	callstack 0
   602   000024                     creep@i:
   603                           	callstack 0
   604                           
   605                           ; 2 bytes @ 0x23
   606   000024                     	ds	1
   607   000025                     trundleSquare@start_increment:
   608                           	callstack 0
   609   000025                     turnLeft@i_2071:
   610                           	callstack 0
   611   000025                     turnRight@i_2090:
   612                           	callstack 0
   613   000025                     timed_trundle@i_2221:
   614                           	callstack 0
   615                           
   616                           ; 2 bytes @ 0x24
   617   000025                     	ds	1
   618   000026                     Blue@mL:
   619                           	callstack 0
   620   000026                     Orange@mL:
   621                           	callstack 0
   622   000026                     LightBlue@mL:
   623                           	callstack 0
   624   000026                     reverseOrange@mL:
   625                           	callstack 0
   626   000026                     reverseLightBlue@mL:
   627                           	callstack 0
   628   000026                     creep@i_2201:
   629                           	callstack 0
   630   000026                     trundleSquare@i:
   631                           	callstack 0
   632                           
   633                           ; 2 bytes @ 0x25
   634   000026                     	ds	1
   635   000027                     Red@mL:
   636                           	callstack 0
   637   000027                     Green@mL:
   638                           	callstack 0
   639   000027                     Blue@mR:
   640                           	callstack 0
   641   000027                     Orange@mR:
   642                           	callstack 0
   643   000027                     LightBlue@mR:
   644                           	callstack 0
   645   000027                     reverseOrange@mR:
   646                           	callstack 0
   647   000027                     reverseLightBlue@mR:
   648                           	callstack 0
   649   000027                     leftCali@mL:
   650                           	callstack 0
   651   000027                     rightCali@mL:
   652                           	callstack 0
   653   000027                     timed_trundle@current_power:
   654                           	callstack 0
   655                           
   656                           ; 1 bytes @ 0x26
   657   000027                     	ds	1
   658   000028                     Red@mR:
   659                           	callstack 0
   660   000028                     Green@mR:
   661                           	callstack 0
   662   000028                     Yellow@mL:
   663                           	callstack 0
   664   000028                     Pink@mL:
   665                           	callstack 0
   666   000028                     reverseYellow@mL:
   667                           	callstack 0
   668   000028                     reversePink@mL:
   669                           	callstack 0
   670   000028                     leftCali@mR:
   671                           	callstack 0
   672   000028                     rightCali@mR:
   673                           	callstack 0
   674   000028                     creep@current_power:
   675                           	callstack 0
   676   000028                     timed_trundle@trundle_power:
   677                           	callstack 0
   678                           
   679                           ; 1 bytes @ 0x27
   680   000028                     	ds	1
   681   000029                     ??_leftCali:
   682   000029                     ??_rightCali:
   683   000029                     Yellow@mR:
   684                           	callstack 0
   685   000029                     Pink@mR:
   686                           	callstack 0
   687   000029                     reverseYellow@mR:
   688                           	callstack 0
   689   000029                     reversePink@mR:
   690                           	callstack 0
   691   000029                     creep@creep_power:
   692                           	callstack 0
   693                           
   694                           ; 1 bytes @ 0x28
   695   000029                     	ds	1
   696   00002A                     decideColor@normRGB:
   697                           	callstack 0
   698   00002A                     executeInstruction@mL:
   699                           	callstack 0
   700                           
   701                           ; 1 bytes @ 0x29
   702   00002A                     	ds	1
   703   00002B                     decideColor@RGBC:
   704                           	callstack 0
   705   00002B                     executeInstruction@mR:
   706                           	callstack 0
   707   00002B                     leftCali@power:
   708                           	callstack 0
   709   00002B                     rightCali@power:
   710                           	callstack 0
   711                           
   712                           ; 1 bytes @ 0x2A
   713   00002B                     	ds	1
   714   00002C                     decideColor@mL:
   715                           	callstack 0
   716   00002C                     executeInstruction@colourCode:
   717                           	callstack 0
   718                           
   719                           ; 1 bytes @ 0x2B
   720   00002C                     	ds	1
   721   00002D                     ??_executeInstruction:
   722   00002D                     decideColor@mR:
   723                           	callstack 0
   724                           
   725                           ; 1 bytes @ 0x2C
   726   00002D                     	ds	1
   727   00002E                     ??_decideColor:
   728                           
   729                           ; 1 bytes @ 0x2D
   730   00002E                     	ds	1
   731   00002F                     reverseRoute@mL:
   732                           	callstack 0
   733                           
   734                           ; 1 bytes @ 0x2E
   735   00002F                     	ds	1
   736   000030                     reverseRoute@mR:
   737                           	callstack 0
   738                           
   739                           ; 1 bytes @ 0x2F
   740   000030                     	ds	1
   741   000031                     ??_reverseRoute:
   742                           
   743                           ; 1 bytes @ 0x30
   744   000031                     	ds	1
   745   000032                     reverseRoute@reverseMapping:
   746                           	callstack 0
   747                           
   748                           ; 9 bytes @ 0x31
   749   000032                     	ds	9
   750   00003B                     reverseRoute@last_increments:
   751                           	callstack 0
   752                           
   753                           ; 2 bytes @ 0x3A
   754   00003B                     	ds	2
   755   00003D                     reverseRoute@i:
   756                           	callstack 0
   757                           
   758                           ; 2 bytes @ 0x3C
   759   00003D                     	ds	2
   760   00003F                     ??_main:
   761                           
   762                           ; 1 bytes @ 0x3E
   763   00003F                     	ds	2
   764                           
   765 ;;
   766 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   767 ;;
   768 ;; *************** function _main *****************
   769 ;; Defined at:
   770 ;;		line 35 in file "main.c"
   771 ;; Parameters:    Size  Location     Type
   772 ;;		None
   773 ;; Auto vars:     Size  Location     Type
   774 ;;  colourCode      1    0[BANK0 ] unsigned char 
   775 ;;  motorL          9   26[BANK0 ] struct DC_motor
   776 ;;  motorR          9   17[BANK0 ] struct DC_motor
   777 ;;  RGBC            8    9[BANK0 ] struct colors
   778 ;;  normRGB         8    1[BANK0 ] struct normColors
   779 ;;  PWMperiod       2    0        unsigned int 
   780 ;; Return value:  Size  Location     Type
   781 ;;                  1    wreg      void 
   782 ;; Registers used:
   783 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   784 ;; Tracked objects:
   785 ;;		On entry : 0/0
   786 ;;		On exit  : 0/0
   787 ;;		Unchanged: 0/0
   788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   790 ;;      Locals:         0      35       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   791 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   792 ;;      Totals:         2      35       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   793 ;;Total ram usage:       37 bytes
   794 ;; Hardware stack levels required when called: 11
   795 ;; This function calls:
   796 ;;		_LEDturnON
   797 ;;		_Timer0_init
   798 ;;		_clearInterrupt
   799 ;;		_color_click_init
   800 ;;		_decideColor
   801 ;;		_executeInstruction
   802 ;;		_fastStop
   803 ;;		_indicateInstruction
   804 ;;		_initBoardLEDs
   805 ;;		_initButtons
   806 ;;		_initDCmotorsPWM
   807 ;;		_init_buttons_LED
   808 ;;		_interrupts_init
   809 ;;		_leftCali
   810 ;;		_normalizeColors
   811 ;;		_readColors
   812 ;;		_reverseRoute
   813 ;;		_rightCali
   814 ;;		_setMotorPWM
   815 ;;		_trundle
   816 ;; This function is called by:
   817 ;;		Startup code after reset
   818 ;; This function uses a non-reentrant model
   819 ;;
   820                           
   821                           	psect	text0
   822   000FF6                     __ptext0:
   823                           	callstack 0
   824   000FF6                     _main:
   825                           	callstack 20
   826   000FF6                     
   827                           ;main.c: 36:     color_click_init();
   828   000FF6  EC8A  F014         	call	_color_click_init	;wreg free
   829   000FFA                     
   830                           ;main.c: 37:     init_buttons_LED();
   831   000FFA  EC4B  F015         	call	_init_buttons_LED	;wreg free
   832   000FFE                     
   833                           ;main.c: 38:     initBoardLEDs();
   834   000FFE  ECA2  F015         	call	_initBoardLEDs	;wreg free
   835   001002                     
   836                           ;main.c: 39:     initButtons();
   837   001002  EC90  F015         	call	_initButtons	;wreg free
   838   001006                     
   839                           ;main.c: 48:     initDCmotorsPWM(PWMperiod);
   840   001006  0E00               	movlw	0
   841   001008  6E04               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   842   00100A  0E63               	movlw	99
   843   00100C  6E03               	movwf	initDCmotorsPWM@PWMperiod^0,c
   844   00100E  EC6C  F012         	call	_initDCmotorsPWM	;wreg free
   845   001012                     
   846                           ;main.c: 50:     struct DC_motor motorL;;main.c: 51:     motorL.power = 0;
   847   001012  0E00               	movlw	0
   848   001014  0100               	movlb	0	; () banked
   849   001016  6FA7               	movwf	main@motorL& (0+255),b
   850   001018                     
   851                           ; BSR set to: 0
   852                           ;main.c: 52:     motorL.direction = 1;
   853   001018  0E01               	movlw	1
   854   00101A  6FA8               	movwf	(main@motorL+1)& (0+255),b
   855   00101C                     
   856                           ; BSR set to: 0
   857                           ;main.c: 53:     motorL.brakemode = 1;
   858   00101C  0E01               	movlw	1
   859   00101E  6FA9               	movwf	(main@motorL+2)& (0+255),b
   860   001020                     
   861                           ; BSR set to: 0
   862                           ;main.c: 54:     motorL.PWMperiod = PWMperiod;
   863   001020  0E00               	movlw	0
   864   001022  6FAB               	movwf	(main@motorL+4)& (0+255),b
   865   001024  0E63               	movlw	99
   866   001026  6FAA               	movwf	(main@motorL+3)& (0+255),b
   867   001028                     
   868                           ; BSR set to: 0
   869                           ;main.c: 55:     motorL.posDutyHighByte = &CCPR1H;
   870   001028  0EAA               	movlw	170
   871   00102A  6FAC               	movwf	(main@motorL+5)& (0+255),b
   872   00102C  0E0F               	movlw	15
   873   00102E  6FAD               	movwf	(main@motorL+6)& (0+255),b
   874   001030                     
   875                           ; BSR set to: 0
   876                           ;main.c: 56:     motorL.negDutyHighByte = &CCPR2H;
   877   001030  0EA6               	movlw	166
   878   001032  6FAE               	movwf	(main@motorL+7)& (0+255),b
   879   001034  0E0F               	movlw	15
   880   001036  6FAF               	movwf	(main@motorL+8)& (0+255),b
   881   001038                     
   882                           ; BSR set to: 0
   883                           ;main.c: 57:     setMotorPWM(&motorL);
   884   001038  0EA7               	movlw	low main@motorL
   885   00103A  6E10               	movwf	setMotorPWM@m^0,c
   886   00103C  EC09  F00B         	call	_setMotorPWM	;wreg free
   887   001040                     
   888                           ;main.c: 58:     struct DC_motor motorR;;main.c: 59:     motorR.power = 0;
   889   001040  0E00               	movlw	0
   890   001042  0100               	movlb	0	; () banked
   891   001044  6F9E               	movwf	main@motorR& (0+255),b
   892   001046                     
   893                           ; BSR set to: 0
   894                           ;main.c: 60:     motorR.direction = 1;
   895   001046  0E01               	movlw	1
   896   001048  6F9F               	movwf	(main@motorR+1)& (0+255),b
   897   00104A                     
   898                           ; BSR set to: 0
   899                           ;main.c: 61:     motorR.brakemode = 1;
   900   00104A  0E01               	movlw	1
   901   00104C  6FA0               	movwf	(main@motorR+2)& (0+255),b
   902   00104E                     
   903                           ; BSR set to: 0
   904                           ;main.c: 62:     motorR.PWMperiod = PWMperiod;
   905   00104E  0E00               	movlw	0
   906   001050  6FA2               	movwf	(main@motorR+4)& (0+255),b
   907   001052  0E63               	movlw	99
   908   001054  6FA1               	movwf	(main@motorR+3)& (0+255),b
   909   001056                     
   910                           ; BSR set to: 0
   911                           ;main.c: 63:     motorR.posDutyHighByte = &CCPR3H;
   912   001056  0E25               	movlw	37
   913   001058  6FA3               	movwf	(main@motorR+5)& (0+255),b
   914   00105A  0E0F               	movlw	15
   915   00105C  6FA4               	movwf	(main@motorR+6)& (0+255),b
   916   00105E                     
   917                           ; BSR set to: 0
   918                           ;main.c: 64:     motorR.negDutyHighByte = &CCPR4H;
   919   00105E  0E21               	movlw	33
   920   001060  6FA5               	movwf	(main@motorR+7)& (0+255),b
   921   001062  0E0F               	movlw	15
   922   001064  6FA6               	movwf	(main@motorR+8)& (0+255),b
   923   001066                     
   924                           ; BSR set to: 0
   925                           ;main.c: 65:     setMotorPWM(&motorR);
   926   001066  0E9E               	movlw	low main@motorR
   927   001068  6E10               	movwf	setMotorPWM@m^0,c
   928   00106A  EC09  F00B         	call	_setMotorPWM	;wreg free
   929   00106E                     
   930                           ;main.c: 70:     turnLeftPower = leftCali(&motorL, &motorR);
   931   00106E  0EA7               	movlw	low main@motorL
   932   001070  6E27               	movwf	leftCali@mL^0,c
   933   001072  0E9E               	movlw	low main@motorR
   934   001074  6E28               	movwf	leftCali@mR^0,c
   935   001076  ECB5  F011         	call	_leftCali	;wreg free
   936   00107A  6E4B               	movwf	_turnLeftPower^0,c
   937   00107C                     
   938                           ;main.c: 71:     _delay((unsigned long)((500)*(64000000/4000.0)));
   939   00107C  0E29               	movlw	41
   940   00107E  6E40               	movwf	(??_main+1)^0,c
   941   001080  0E96               	movlw	150
   942   001082  6E3F               	movwf	??_main^0,c
   943   001084  0E7F               	movlw	127
   944   001086                     u1897:
   945   001086  2EE8               	decfsz	wreg,f,c
   946   001088  D7FE               	bra	u1897
   947   00108A  2E3F               	decfsz	??_main^0,f,c
   948   00108C  D7FC               	bra	u1897
   949   00108E  2E40               	decfsz	(??_main+1)^0,f,c
   950   001090  D7FA               	bra	u1897
   951   001092  0000               	nop	
   952   001094                     
   953                           ;main.c: 72:     turnRightPower = rightCali(&motorL, &motorR);
   954   001094  0EA7               	movlw	low main@motorL
   955   001096  6E27               	movwf	rightCali@mL^0,c
   956   001098  0E9E               	movlw	low main@motorR
   957   00109A  6E28               	movwf	rightCali@mR^0,c
   958   00109C  EC52  F011         	call	_rightCali	;wreg free
   959   0010A0  6E4A               	movwf	_turnRightPower^0,c
   960   0010A2                     
   961                           ;main.c: 74:     interrupts_init();
   962   0010A2  EC54  F013         	call	_interrupts_init	;wreg free
   963   0010A6                     
   964                           ;main.c: 75:     Timer0_init();
   965   0010A6  EC25  F015         	call	_Timer0_init	;wreg free
   966   0010AA                     
   967                           ;main.c: 77:     LEDturnON();
   968   0010AA  ECAC  F015         	call	_LEDturnON	;wreg free
   969   0010AE                     
   970                           ;main.c: 78:     _delay((unsigned long)((1000)*(64000000/4000.0)));
   971   0010AE  0E52               	movlw	82
   972   0010B0  6E40               	movwf	(??_main+1)^0,c
   973   0010B2  0E2B               	movlw	43
   974   0010B4  6E3F               	movwf	??_main^0,c
   975   0010B6  0E00               	movlw	0
   976   0010B8                     u1907:
   977   0010B8  2EE8               	decfsz	wreg,f,c
   978   0010BA  D7FE               	bra	u1907
   979   0010BC  2E3F               	decfsz	??_main^0,f,c
   980   0010BE  D7FC               	bra	u1907
   981   0010C0  2E40               	decfsz	(??_main+1)^0,f,c
   982   0010C2  D7FA               	bra	u1907
   983   0010C4  D000               	nop2	
   984   0010C6                     l199:
   985   0010C6  B48E               	btfsc	142,2,c	;volatile
   986   0010C8  EF68  F008         	goto	u1801
   987   0010CC  EF6A  F008         	goto	u1800
   988   0010D0                     u1801:
   989   0010D0  EF63  F008         	goto	l199
   990   0010D4                     u1800:
   991   0010D4                     
   992                           ;main.c: 81:     increment = 0;
   993   0010D4  0E00               	movlw	0
   994   0010D6  0100               	movlb	0	; () banked
   995   0010D8  6F89               	movwf	(_increment+1)& (0+255),b
   996   0010DA  0E00               	movlw	0
   997   0010DC  6F88               	movwf	_increment& (0+255),b
   998   0010DE                     l202:
   999                           
  1000                           ;main.c: 85:         if (wall_detected) {
  1001   0010DE  0100               	movlb	0	; () banked
  1002   0010E0  518C               	movf	_wall_detected& (0+255),w,b
  1003   0010E2  B4D8               	btfsc	status,2,c
  1004   0010E4  EF76  F008         	goto	u1811
  1005   0010E8  EF78  F008         	goto	u1810
  1006   0010EC                     u1811:
  1007   0010EC  EFBE  F008         	goto	l3517
  1008   0010F0                     u1810:
  1009   0010F0                     
  1010                           ; BSR set to: 0
  1011                           ;main.c: 87:             fastStop(&motorL, &motorR);
  1012   0010F0  0EA7               	movlw	low main@motorL
  1013   0010F2  6E15               	movwf	fastStop@mL^0,c
  1014   0010F4  0E9E               	movlw	low main@motorR
  1015   0010F6  6E16               	movwf	fastStop@mR^0,c
  1016   0010F8  ECEA  F012         	call	_fastStop	;wreg free
  1017   0010FC                     
  1018                           ;main.c: 89:             readColors(&RGBC);
  1019   0010FC  0E96               	movlw	low main@RGBC
  1020   0010FE  6E0E               	movwf	readColors@RGBC^0,c
  1021   001100  ECDE  F00F         	call	_readColors	;wreg free
  1022   001104                     
  1023                           ;main.c: 91:             normalizeColors(&RGBC, &normRGB);
  1024   001104  0E96               	movlw	low main@RGBC
  1025   001106  6E10               	movwf	normalizeColors@RGBC^0,c
  1026   001108  0E8E               	movlw	low main@normRGB
  1027   00110A  6E11               	movwf	normalizeColors@normRGB^0,c
  1028   00110C  ECB3  F00B         	call	_normalizeColors	;wreg free
  1029                           
  1030                           ;main.c: 93:             char colourCode = decideColor(&normRGB, &RGBC, &motorL, &motorR
      +                          );
  1031   001110  0E8E               	movlw	low main@normRGB
  1032   001112  6E2A               	movwf	decideColor@normRGB^0,c
  1033   001114  0E96               	movlw	low main@RGBC
  1034   001116  6E2B               	movwf	decideColor@RGBC^0,c
  1035   001118  0EA7               	movlw	low main@motorL
  1036   00111A  6E2C               	movwf	decideColor@mL^0,c
  1037   00111C  0E9E               	movlw	low main@motorR
  1038   00111E  6E2D               	movwf	decideColor@mR^0,c
  1039   001120  EC01  F007         	call	_decideColor	;wreg free
  1040   001124  0100               	movlb	0	; () banked
  1041   001126  6F8D               	movwf	main@colourCode& (0+255),b
  1042   001128                     
  1043                           ; BSR set to: 0
  1044                           ;main.c: 97:             indicateInstruction(colourCode);
  1045   001128  518D               	movf	main@colourCode& (0+255),w,b
  1046   00112A  EC18  F012         	call	_indicateInstruction
  1047   00112E                     
  1048                           ;main.c: 103:             instruction_array[instruction_array_index][0] = colourCode;
  1049   00112E  0100               	movlb	0	; () banked
  1050   001130  518B               	movf	_instruction_array_index& (0+255),w,b
  1051   001132  0D02               	mullw	2
  1052   001134  50F3               	movf	243,w,c
  1053   001136  0F60               	addlw	low _instruction_array
  1054   001138  6ED9               	movwf	fsr2l,c
  1055   00113A  6ADA               	clrf	fsr2h,c
  1056   00113C  C08D  FFDF         	movff	main@colourCode,indf2
  1057   001140                     
  1058                           ; BSR set to: 0
  1059                           ;main.c: 104:             instruction_array[instruction_array_index][1] = increment;
  1060   001140  518B               	movf	_instruction_array_index& (0+255),w,b
  1061   001142  0D02               	mullw	2
  1062   001144  50F3               	movf	243,w,c
  1063   001146  0F61               	addlw	low (_instruction_array+1)
  1064   001148  6ED9               	movwf	fsr2l,c
  1065   00114A  6ADA               	clrf	fsr2h,c
  1066   00114C  C088  FFDF         	movff	_increment,indf2
  1067   001150                     
  1068                           ; BSR set to: 0
  1069                           ;main.c: 105:             instruction_array_index += 1;
  1070   001150  2B8B               	incf	_instruction_array_index& (0+255),f,b
  1071   001152                     
  1072                           ; BSR set to: 0
  1073                           ;main.c: 107:             executeInstruction(&motorL, &motorR, colourCode);
  1074   001152  0EA7               	movlw	low main@motorL
  1075   001154  6E2A               	movwf	executeInstruction@mL^0,c
  1076   001156  0E9E               	movlw	low main@motorR
  1077   001158  6E2B               	movwf	executeInstruction@mR^0,c
  1078   00115A  C08D  F02C         	movff	main@colourCode,executeInstruction@colourCode
  1079   00115E  EC5D  F00A         	call	_executeInstruction	;wreg free
  1080   001162                     
  1081                           ;main.c: 108:             LEDturnON();
  1082   001162  ECAC  F015         	call	_LEDturnON	;wreg free
  1083   001166                     
  1084                           ;main.c: 109:             increment = 0;
  1085   001166  0E00               	movlw	0
  1086   001168  0100               	movlb	0	; () banked
  1087   00116A  6F89               	movwf	(_increment+1)& (0+255),b
  1088   00116C  0E00               	movlw	0
  1089   00116E  6F88               	movwf	_increment& (0+255),b
  1090   001170                     
  1091                           ; BSR set to: 0
  1092                           ;main.c: 113:             wall_detected = 0;
  1093   001170  0E00               	movlw	0
  1094   001172  6F8C               	movwf	_wall_detected& (0+255),b
  1095   001174                     
  1096                           ; BSR set to: 0
  1097                           ;main.c: 114:             clearInterrupt();
  1098   001174  EC35  F015         	call	_clearInterrupt	;wreg free
  1099   001178                     
  1100                           ;main.c: 115:             INTCONbits.GIE=1;
  1101   001178  8EF2               	bsf	242,7,c	;volatile
  1102   00117A                     
  1103                           ;main.c: 117:             LATDbits.LATD7 = 0;
  1104   00117A  9E7C               	bcf	124,7,c	;volatile
  1105   00117C                     l3517:
  1106                           
  1107                           ;main.c: 126:         if (reverseRouteFlag) {
  1108   00117C  0100               	movlb	0	; () banked
  1109   00117E  518A               	movf	_reverseRouteFlag& (0+255),w,b
  1110   001180  B4D8               	btfsc	status,2,c
  1111   001182  EFC5  F008         	goto	u1821
  1112   001186  EFC7  F008         	goto	u1820
  1113   00118A                     u1821:
  1114   00118A  EFCD  F008         	goto	l3521
  1115   00118E                     u1820:
  1116   00118E                     
  1117                           ; BSR set to: 0
  1118                           ;main.c: 127:             reverseRoute(&motorL, &motorR);
  1119   00118E  0EA7               	movlw	low main@motorL
  1120   001190  6E2F               	movwf	reverseRoute@mL^0,c
  1121   001192  0E9E               	movlw	low main@motorR
  1122   001194  6E30               	movwf	reverseRoute@mR^0,c
  1123   001196  ECEE  F010         	call	_reverseRoute	;wreg free
  1124   00119A                     l3521:
  1125                           
  1126                           ;main.c: 131:         if (!PORTFbits.RF3) {
  1127   00119A  B68E               	btfsc	142,3,c	;volatile
  1128   00119C  EFD2  F008         	goto	u1831
  1129   0011A0  EFD4  F008         	goto	u1830
  1130   0011A4                     u1831:
  1131   0011A4  EFD7  F008         	goto	l3525
  1132   0011A8                     u1830:
  1133   0011A8                     
  1134                           ;main.c: 132:             reverseRouteFlag=1;
  1135   0011A8  0E01               	movlw	1
  1136   0011AA  0100               	movlb	0	; () banked
  1137   0011AC  6F8A               	movwf	_reverseRouteFlag& (0+255),b
  1138   0011AE                     l3525:
  1139                           
  1140                           ;main.c: 135:             trundle(&motorL, &motorR);
  1141   0011AE  0EA7               	movlw	low main@motorL
  1142   0011B0  6E15               	movwf	trundle@mL^0,c
  1143   0011B2  0E9E               	movlw	low main@motorR
  1144   0011B4  6E16               	movwf	trundle@mR^0,c
  1145   0011B6  EC67  F010         	call	_trundle	;wreg free
  1146   0011BA  EF6F  F008         	goto	l202
  1147   0011BE  EF23  F000         	goto	start
  1148   0011C2                     __end_of_main:
  1149                           	callstack 0
  1150                           
  1151 ;; *************** function _trundle *****************
  1152 ;; Defined at:
  1153 ;;		line 374 in file "dc_motor.c"
  1154 ;; Parameters:    Size  Location     Type
  1155 ;;  mL              1   20[COMRAM] PTR struct DC_motor
  1156 ;;		 -> main@motorL(9), 
  1157 ;;  mR              1   21[COMRAM] PTR struct DC_motor
  1158 ;;		 -> main@motorR(9), 
  1159 ;; Auto vars:     Size  Location     Type
  1160 ;;  i               2   27[COMRAM] int 
  1161 ;;  i               2   25[COMRAM] int 
  1162 ;;  trundle_powe    1   30[COMRAM] unsigned char 
  1163 ;;  current_powe    1   29[COMRAM] unsigned char 
  1164 ;; Return value:  Size  Location     Type
  1165 ;;                  1    wreg      void 
  1166 ;; Registers used:
  1167 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1168 ;; Tracked objects:
  1169 ;;		On entry : 0/0
  1170 ;;		On exit  : 0/0
  1171 ;;		Unchanged: 0/0
  1172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1173 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1174 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1175 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1176 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1177 ;;Total ram usage:       11 bytes
  1178 ;; Hardware stack levels used: 1
  1179 ;; Hardware stack levels required when called: 6
  1180 ;; This function calls:
  1181 ;;		_setMotorPWM
  1182 ;; This function is called by:
  1183 ;;		_main
  1184 ;; This function uses a non-reentrant model
  1185 ;;
  1186                           
  1187                           	psect	text1
  1188   0020CE                     __ptext1:
  1189                           	callstack 0
  1190   0020CE                     _trundle:
  1191                           	callstack 24
  1192   0020CE                     
  1193                           ;dc_motor.c: 374: void trundle(DC_motor *mL, DC_motor *mR);dc_motor.c: 375: {;dc_motor.c
      +                          : 380:     mL->direction = 1;
  1194   0020CE  5015               	movf	trundle@mL^0,w,c
  1195   0020D0  6ED9               	movwf	fsr2l,c
  1196   0020D2  6ADA               	clrf	fsr2h,c
  1197   0020D4  0E01               	movlw	1
  1198   0020D6  26D9               	addwf	fsr2l,f,c
  1199   0020D8  0E01               	movlw	1
  1200   0020DA  6EDF               	movwf	indf2,c
  1201                           
  1202                           ;dc_motor.c: 381:     mR->direction = 1;
  1203   0020DC  5016               	movf	trundle@mR^0,w,c
  1204   0020DE  6ED9               	movwf	fsr2l,c
  1205   0020E0  6ADA               	clrf	fsr2h,c
  1206   0020E2  0E01               	movlw	1
  1207   0020E4  26D9               	addwf	fsr2l,f,c
  1208   0020E6  0E01               	movlw	1
  1209   0020E8  6EDF               	movwf	indf2,c
  1210   0020EA                     
  1211                           ;dc_motor.c: 383:     char current_power = mL->power;
  1212   0020EA  5015               	movf	trundle@mL^0,w,c
  1213   0020EC  6ED9               	movwf	fsr2l,c
  1214   0020EE  6ADA               	clrf	fsr2h,c
  1215   0020F0  50DF               	movf	indf2,w,c
  1216   0020F2  6E1E               	movwf	trundle@current_power^0,c
  1217   0020F4                     
  1218                           ;dc_motor.c: 384:     char trundle_power = 12;
  1219   0020F4  0E0C               	movlw	12
  1220   0020F6  6E1F               	movwf	trundle@trundle_power^0,c
  1221                           
  1222                           ;dc_motor.c: 386:     if (trundle_power > current_power) {
  1223   0020F8  0E0C               	movlw	12
  1224   0020FA  601E               	cpfslt	trundle@current_power^0,c
  1225   0020FC  EF82  F010         	goto	u1771
  1226   002100  EF84  F010         	goto	u1770
  1227   002104                     u1771:
  1228   002104  EFB9  F010         	goto	l586
  1229   002108                     u1770:
  1230   002108                     
  1231                           ;dc_motor.c: 387:         for (int i=current_power; i<= trundle_power; i++) {
  1232   002108  C01E  F01A         	movff	trundle@current_power,trundle@i
  1233   00210C  6A1B               	clrf	(trundle@i+1)^0,c
  1234   00210E  EFA5  F010         	goto	l3405
  1235   002112                     l3395:
  1236                           
  1237                           ;dc_motor.c: 388:             mL->power = i;
  1238   002112  5015               	movf	trundle@mL^0,w,c
  1239   002114  6ED9               	movwf	fsr2l,c
  1240   002116  6ADA               	clrf	fsr2h,c
  1241   002118  C01A  FFDF         	movff	trundle@i,indf2
  1242                           
  1243                           ;dc_motor.c: 389:             mR->power = i;
  1244   00211C  5016               	movf	trundle@mR^0,w,c
  1245   00211E  6ED9               	movwf	fsr2l,c
  1246   002120  6ADA               	clrf	fsr2h,c
  1247   002122  C01A  FFDF         	movff	trundle@i,indf2
  1248   002126                     
  1249                           ;dc_motor.c: 390:             setMotorPWM(mL);
  1250   002126  C015  F010         	movff	trundle@mL,setMotorPWM@m
  1251   00212A  EC09  F00B         	call	_setMotorPWM	;wreg free
  1252   00212E                     
  1253                           ;dc_motor.c: 391:             setMotorPWM(mR);
  1254   00212E  C016  F010         	movff	trundle@mR,setMotorPWM@m
  1255   002132  EC09  F00B         	call	_setMotorPWM	;wreg free
  1256   002136                     
  1257                           ;dc_motor.c: 392:             _delay((unsigned long)((5)*(64000000/4000.0)));
  1258   002136  0E68               	movlw	104
  1259   002138  6E17               	movwf	??_trundle^0,c
  1260   00213A  0EE4               	movlw	228
  1261   00213C                     u1917:
  1262   00213C  2EE8               	decfsz	wreg,f,c
  1263   00213E  D7FE               	bra	u1917
  1264   002140  2E17               	decfsz	??_trundle^0,f,c
  1265   002142  D7FC               	bra	u1917
  1266   002144  D000               	nop2	
  1267   002146                     
  1268                           ;dc_motor.c: 393:         }
  1269   002146  4A1A               	infsnz	trundle@i^0,f,c
  1270   002148  2A1B               	incf	(trundle@i+1)^0,f,c
  1271   00214A                     l3405:
  1272   00214A  501F               	movf	trundle@trundle_power^0,w,c
  1273   00214C  6E17               	movwf	??_trundle^0,c
  1274   00214E  6A18               	clrf	(??_trundle+1)^0,c
  1275   002150  501A               	movf	trundle@i^0,w,c
  1276   002152  5C17               	subwf	??_trundle^0,w,c
  1277   002154  5018               	movf	(??_trundle+1)^0,w,c
  1278   002156  0A80               	xorlw	128
  1279   002158  6E19               	movwf	(??_trundle+2)^0,c
  1280   00215A  501B               	movf	(trundle@i+1)^0,w,c
  1281   00215C  0A80               	xorlw	128
  1282   00215E  5819               	subwfb	(??_trundle+2)^0,w,c
  1283   002160  B0D8               	btfsc	status,0,c
  1284   002162  EFB5  F010         	goto	u1781
  1285   002166  EFB7  F010         	goto	u1780
  1286   00216A                     u1781:
  1287   00216A  EF89  F010         	goto	l3395
  1288   00216E                     u1780:
  1289   00216E  EFED  F010         	goto	l594
  1290   002172                     l586:
  1291                           
  1292                           ;dc_motor.c: 396:         for (int i=current_power; i>= trundle_power; i--) {
  1293   002172  C01E  F01C         	movff	trundle@current_power,trundle@i_2180
  1294   002176  6A1D               	clrf	(trundle@i_2180+1)^0,c
  1295   002178  EFDB  F010         	goto	l3417
  1296   00217C                     l3407:
  1297                           
  1298                           ;dc_motor.c: 397:             mL->power = i;
  1299   00217C  5015               	movf	trundle@mL^0,w,c
  1300   00217E  6ED9               	movwf	fsr2l,c
  1301   002180  6ADA               	clrf	fsr2h,c
  1302   002182  C01C  FFDF         	movff	trundle@i_2180,indf2
  1303                           
  1304                           ;dc_motor.c: 398:             mR->power = i;
  1305   002186  5016               	movf	trundle@mR^0,w,c
  1306   002188  6ED9               	movwf	fsr2l,c
  1307   00218A  6ADA               	clrf	fsr2h,c
  1308   00218C  C01C  FFDF         	movff	trundle@i_2180,indf2
  1309   002190                     
  1310                           ;dc_motor.c: 399:             setMotorPWM(mL);
  1311   002190  C015  F010         	movff	trundle@mL,setMotorPWM@m
  1312   002194  EC09  F00B         	call	_setMotorPWM	;wreg free
  1313   002198                     
  1314                           ;dc_motor.c: 400:             setMotorPWM(mR);
  1315   002198  C016  F010         	movff	trundle@mR,setMotorPWM@m
  1316   00219C  EC09  F00B         	call	_setMotorPWM	;wreg free
  1317   0021A0                     
  1318                           ;dc_motor.c: 401:             _delay((unsigned long)((5)*(64000000/4000.0)));
  1319   0021A0  0E68               	movlw	104
  1320   0021A2  6E17               	movwf	??_trundle^0,c
  1321   0021A4  0EE4               	movlw	228
  1322   0021A6                     u1927:
  1323   0021A6  2EE8               	decfsz	wreg,f,c
  1324   0021A8  D7FE               	bra	u1927
  1325   0021AA  2E17               	decfsz	??_trundle^0,f,c
  1326   0021AC  D7FC               	bra	u1927
  1327   0021AE  D000               	nop2	
  1328   0021B0                     
  1329                           ;dc_motor.c: 402:         }
  1330   0021B0  061C               	decf	trundle@i_2180^0,f,c
  1331   0021B2  A0D8               	btfss	status,0,c
  1332   0021B4  061D               	decf	(trundle@i_2180+1)^0,f,c
  1333   0021B6                     l3417:
  1334   0021B6  501F               	movf	trundle@trundle_power^0,w,c
  1335   0021B8  6E17               	movwf	??_trundle^0,c
  1336   0021BA  6A18               	clrf	(??_trundle+1)^0,c
  1337   0021BC  5017               	movf	??_trundle^0,w,c
  1338   0021BE  5C1C               	subwf	trundle@i_2180^0,w,c
  1339   0021C0  501D               	movf	(trundle@i_2180+1)^0,w,c
  1340   0021C2  0A80               	xorlw	128
  1341   0021C4  6E19               	movwf	(??_trundle+2)^0,c
  1342   0021C6  5018               	movf	(??_trundle+1)^0,w,c
  1343   0021C8  0A80               	xorlw	128
  1344   0021CA  5819               	subwfb	(??_trundle+2)^0,w,c
  1345   0021CC  B0D8               	btfsc	status,0,c
  1346   0021CE  EFEB  F010         	goto	u1791
  1347   0021D2  EFED  F010         	goto	u1790
  1348   0021D6                     u1791:
  1349   0021D6  EFBE  F010         	goto	l3407
  1350   0021DA                     u1790:
  1351   0021DA                     l594:
  1352   0021DA  0012               	return		;funcret
  1353   0021DC                     __end_of_trundle:
  1354                           	callstack 0
  1355                           
  1356 ;; *************** function _rightCali *****************
  1357 ;; Defined at:
  1358 ;;		line 119 in file "dc_motor.c"
  1359 ;; Parameters:    Size  Location     Type
  1360 ;;  mL              1   38[COMRAM] PTR struct DC_motor
  1361 ;;		 -> main@motorL(9), 
  1362 ;;  mR              1   39[COMRAM] PTR struct DC_motor
  1363 ;;		 -> main@motorR(9), 
  1364 ;; Auto vars:     Size  Location     Type
  1365 ;;  power           1   42[COMRAM] unsigned char 
  1366 ;; Return value:  Size  Location     Type
  1367 ;;                  1    wreg      unsigned char 
  1368 ;; Registers used:
  1369 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1370 ;; Tracked objects:
  1371 ;;		On entry : 0/0
  1372 ;;		On exit  : 0/0
  1373 ;;		Unchanged: 0/0
  1374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1375 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1376 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1377 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1378 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1379 ;;Total ram usage:        5 bytes
  1380 ;; Hardware stack levels used: 1
  1381 ;; Hardware stack levels required when called: 8
  1382 ;; This function calls:
  1383 ;;		_turnRight
  1384 ;; This function is called by:
  1385 ;;		_main
  1386 ;; This function uses a non-reentrant model
  1387 ;;
  1388                           
  1389                           	psect	text2
  1390   0022A4                     __ptext2:
  1391                           	callstack 0
  1392   0022A4                     _rightCali:
  1393                           	callstack 22
  1394   0022A4                     l503:
  1395   0022A4  B48E               	btfsc	142,2,c	;volatile
  1396   0022A6  EF57  F011         	goto	u1631
  1397   0022AA  EF59  F011         	goto	u1630
  1398   0022AE                     u1631:
  1399   0022AE  EF52  F011         	goto	l503
  1400   0022B2                     u1630:
  1401   0022B2                     
  1402                           ;dc_motor.c: 121:     char power = 26;
  1403   0022B2  0E1A               	movlw	26
  1404   0022B4  6E2B               	movwf	rightCali@power^0,c
  1405                           
  1406                           ;dc_motor.c: 122:     while (PORTFbits.RF2 || PORTFbits.RF3) {
  1407   0022B6  EFA5  F011         	goto	l3283
  1408   0022BA                     l3265:
  1409                           
  1410                           ;dc_motor.c: 123:         _delay((unsigned long)((1000)*(64000000/4000.0)));
  1411   0022BA  0E52               	movlw	82
  1412   0022BC  6E2A               	movwf	(??_rightCali+1)^0,c
  1413   0022BE  0E2B               	movlw	43
  1414   0022C0  6E29               	movwf	??_rightCali^0,c
  1415   0022C2  0E00               	movlw	0
  1416   0022C4                     u1937:
  1417   0022C4  2EE8               	decfsz	wreg,f,c
  1418   0022C6  D7FE               	bra	u1937
  1419   0022C8  2E29               	decfsz	??_rightCali^0,f,c
  1420   0022CA  D7FC               	bra	u1937
  1421   0022CC  2E2A               	decfsz	(??_rightCali+1)^0,f,c
  1422   0022CE  D7FA               	bra	u1937
  1423   0022D0  D000               	nop2	
  1424   0022D2                     
  1425                           ;dc_motor.c: 124:         turnRight(mL,mR,power);
  1426   0022D2  C027  F01C         	movff	rightCali@mL,turnRight@mL
  1427   0022D6  C028  F01D         	movff	rightCali@mR,turnRight@mR
  1428   0022DA  C02B  F01E         	movff	rightCali@power,turnRight@power
  1429   0022DE  EC55  F00C         	call	_turnRight	;wreg free
  1430   0022E2                     l508:
  1431   0022E2  A48E               	btfss	142,2,c	;volatile
  1432   0022E4  EF76  F011         	goto	u1641
  1433   0022E8  EF78  F011         	goto	u1640
  1434   0022EC                     u1641:
  1435   0022EC  EF7F  F011         	goto	l3271
  1436   0022F0                     u1640:
  1437   0022F0  B68E               	btfsc	142,3,c	;volatile
  1438   0022F2  EF7D  F011         	goto	u1651
  1439   0022F6  EF7F  F011         	goto	u1650
  1440   0022FA                     u1651:
  1441   0022FA  EF71  F011         	goto	l508
  1442   0022FE                     u1650:
  1443   0022FE                     l3271:
  1444                           
  1445                           ;dc_motor.c: 127:         _delay((unsigned long)((80)*(64000000/4000.0)));
  1446   0022FE  0E07               	movlw	7
  1447   002300  6E2A               	movwf	(??_rightCali+1)^0,c
  1448   002302  0E7F               	movlw	127
  1449   002304  6E29               	movwf	??_rightCali^0,c
  1450   002306  0E50               	movlw	80
  1451   002308                     u1947:
  1452   002308  2EE8               	decfsz	wreg,f,c
  1453   00230A  D7FE               	bra	u1947
  1454   00230C  2E29               	decfsz	??_rightCali^0,f,c
  1455   00230E  D7FC               	bra	u1947
  1456   002310  2E2A               	decfsz	(??_rightCali+1)^0,f,c
  1457   002312  D7FA               	bra	u1947
  1458   002314                     
  1459                           ;dc_motor.c: 128:         if(!PORTFbits.RF2 && !PORTFbits.RF3) {
  1460   002314  B48E               	btfsc	142,2,c	;volatile
  1461   002316  EF8F  F011         	goto	u1661
  1462   00231A  EF91  F011         	goto	u1660
  1463   00231E                     u1661:
  1464   00231E  EF9A  F011         	goto	l513
  1465   002322                     u1660:
  1466   002322  B68E               	btfsc	142,3,c	;volatile
  1467   002324  EF96  F011         	goto	u1671
  1468   002328  EF98  F011         	goto	u1670
  1469   00232C                     u1671:
  1470   00232C  EF9A  F011         	goto	l513
  1471   002330                     u1670:
  1472   002330  EFA5  F011         	goto	l3283
  1473   002334                     l513:
  1474                           
  1475                           ;dc_motor.c: 130:             if(!PORTFbits.RF2){
  1476   002334  B48E               	btfsc	142,2,c	;volatile
  1477   002336  EF9F  F011         	goto	u1681
  1478   00233A  EFA1  F011         	goto	u1680
  1479   00233E                     u1681:
  1480   00233E  EFA4  F011         	goto	l3281
  1481   002342                     u1680:
  1482   002342                     
  1483                           ;dc_motor.c: 131:                 power++;
  1484   002342  2A2B               	incf	rightCali@power^0,f,c
  1485                           
  1486                           ;dc_motor.c: 132:             }
  1487   002344  EFA5  F011         	goto	l3283
  1488   002348                     l3281:
  1489                           
  1490                           ;dc_motor.c: 134:                 power--;
  1491   002348  062B               	decf	rightCali@power^0,f,c
  1492   00234A                     l3283:
  1493                           
  1494                           ;dc_motor.c: 122:     while (PORTFbits.RF2 || PORTFbits.RF3) {
  1495   00234A  B48E               	btfsc	142,2,c	;volatile
  1496   00234C  EFAA  F011         	goto	u1691
  1497   002350  EFAC  F011         	goto	u1690
  1498   002354                     u1691:
  1499   002354  EF5D  F011         	goto	l3265
  1500   002358                     u1690:
  1501   002358  B68E               	btfsc	142,3,c	;volatile
  1502   00235A  EFB1  F011         	goto	u1701
  1503   00235E  EFB3  F011         	goto	u1700
  1504   002362                     u1701:
  1505   002362  EF5D  F011         	goto	l3265
  1506   002366                     u1700:
  1507   002366                     
  1508                           ;dc_motor.c: 138:     return power;
  1509   002366  502B               	movf	rightCali@power^0,w,c
  1510   002368  0012               	return		;funcret
  1511   00236A                     __end_of_rightCali:
  1512                           	callstack 0
  1513                           
  1514 ;; *************** function _reverseRoute *****************
  1515 ;; Defined at:
  1516 ;;		line 117 in file "instructions.c"
  1517 ;; Parameters:    Size  Location     Type
  1518 ;;  mL              1   46[COMRAM] PTR struct DC_motor
  1519 ;;		 -> main@motorL(9), 
  1520 ;;  mR              1   47[COMRAM] PTR struct DC_motor
  1521 ;;		 -> main@motorR(9), 
  1522 ;; Auto vars:     Size  Location     Type
  1523 ;;  i               2   60[COMRAM] int 
  1524 ;;  reverseMappi    9   49[COMRAM] unsigned char [9]
  1525 ;;  last_increme    2   58[COMRAM] int 
  1526 ;; Return value:  Size  Location     Type
  1527 ;;                  1    wreg      void 
  1528 ;; Registers used:
  1529 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1530 ;; Tracked objects:
  1531 ;;		On entry : 0/0
  1532 ;;		On exit  : 0/0
  1533 ;;		Unchanged: 0/0
  1534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1535 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1536 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1537 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1538 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1539 ;;Total ram usage:       16 bytes
  1540 ;; Hardware stack levels used: 1
  1541 ;; Hardware stack levels required when called: 10
  1542 ;; This function calls:
  1543 ;;		_executeInstruction
  1544 ;;		_stop
  1545 ;;		_timed_trundle
  1546 ;;		_turn180
  1547 ;; This function is called by:
  1548 ;;		_main
  1549 ;; This function uses a non-reentrant model
  1550 ;;
  1551                           
  1552                           	psect	text3
  1553   0021DC                     __ptext3:
  1554                           	callstack 0
  1555   0021DC                     _reverseRoute:
  1556                           	callstack 20
  1557   0021DC                     
  1558                           ;instructions.c: 119:     int last_increments = increment;
  1559   0021DC  C088  F03B         	movff	_increment,reverseRoute@last_increments
  1560   0021E0  C089  F03C         	movff	_increment+1,reverseRoute@last_increments+1
  1561   0021E4                     
  1562                           ;instructions.c: 120:     turn180(mL, mR);
  1563   0021E4  C02F  F01C         	movff	reverseRoute@mL,turn180@mL
  1564   0021E8  C030  F01D         	movff	reverseRoute@mR,turn180@mR
  1565   0021EC  ECB7  F00E         	call	_turn180	;wreg free
  1566                           
  1567                           ;instructions.c: 121:     timed_trundle(mL, mR, last_increments);
  1568   0021F0  C02F  F01C         	movff	reverseRoute@mL,timed_trundle@mL
  1569   0021F4  C030  F01D         	movff	reverseRoute@mR,timed_trundle@mR
  1570   0021F8  C03B  F01E         	movff	reverseRoute@last_increments,timed_trundle@increments
  1571   0021FC  C03C  F01F         	movff	reverseRoute@last_increments+1,timed_trundle@increments+1
  1572   002200  ECE1  F008         	call	_timed_trundle	;wreg free
  1573   002204                     
  1574                           ;instructions.c: 124:     char reverseMapping[9] = {1, 0, 2, 9, 10, 11, 12, -1, -1};
  1575   002204  EE20  F041         	lfsr	2,reverseRoute@F14295
  1576   002208  EE10  F032         	lfsr	1,reverseRoute@reverseMapping
  1577   00220C  0E08               	movlw	8
  1578   00220E                     u1741:
  1579   00220E  CFDB FFE3          	movff	plusw2,plusw1
  1580   002212  06E8               	decf	wreg,f,c
  1581   002214  E2FC               	bc	u1741
  1582   002216                     
  1583                           ;instructions.c: 125:     for (int i = instruction_array_index; i >= 0; i--) {
  1584   002216  C08B  F03D         	movff	_instruction_array_index,reverseRoute@i
  1585   00221A  6A3E               	clrf	(reverseRoute@i+1)^0,c
  1586   00221C                     l3373:
  1587   00221C  BE3E               	btfsc	(reverseRoute@i+1)^0,7,c
  1588   00221E  EF15  F011         	goto	u1750
  1589   002222  EF13  F011         	goto	u1751
  1590   002226                     u1751:
  1591   002226  EF17  F011         	goto	l3377
  1592   00222A                     u1750:
  1593   00222A  EF41  F011         	goto	l3383
  1594   00222E                     l3377:
  1595                           
  1596                           ;instructions.c: 126:         executeInstruction(mL, mR, reverseMapping[instruction_arra
      +                          y[i][0]]);
  1597   00222E  C02F  F02A         	movff	reverseRoute@mL,executeInstruction@mL
  1598   002232  C030  F02B         	movff	reverseRoute@mR,executeInstruction@mR
  1599   002236  503D               	movf	reverseRoute@i^0,w,c
  1600   002238  0D02               	mullw	2
  1601   00223A  50F3               	movf	243,w,c
  1602   00223C  0F60               	addlw	low _instruction_array
  1603   00223E  6ED9               	movwf	fsr2l,c
  1604   002240  6ADA               	clrf	fsr2h,c
  1605   002242  50DF               	movf	indf2,w,c
  1606   002244  6E31               	movwf	??_reverseRoute^0,c
  1607   002246  5031               	movf	??_reverseRoute^0,w,c
  1608   002248  0F32               	addlw	low reverseRoute@reverseMapping
  1609   00224A  6ED9               	movwf	fsr2l,c
  1610   00224C  6ADA               	clrf	fsr2h,c
  1611   00224E  50DF               	movf	indf2,w,c
  1612   002250  6E2C               	movwf	executeInstruction@colourCode^0,c
  1613   002252  EC5D  F00A         	call	_executeInstruction	;wreg free
  1614                           
  1615                           ;instructions.c: 127:         timed_trundle(mL, mR, instruction_array[i][1]);
  1616   002256  C02F  F01C         	movff	reverseRoute@mL,timed_trundle@mL
  1617   00225A  C030  F01D         	movff	reverseRoute@mR,timed_trundle@mR
  1618   00225E  503D               	movf	reverseRoute@i^0,w,c
  1619   002260  0D02               	mullw	2
  1620   002262  50F3               	movf	243,w,c
  1621   002264  0F61               	addlw	low (_instruction_array+1)
  1622   002266  6ED9               	movwf	fsr2l,c
  1623   002268  6ADA               	clrf	fsr2h,c
  1624   00226A  50DF               	movf	indf2,w,c
  1625   00226C  6E31               	movwf	??_reverseRoute^0,c
  1626   00226E  5031               	movf	??_reverseRoute^0,w,c
  1627   002270  6E1E               	movwf	timed_trundle@increments^0,c
  1628   002272  6A1F               	clrf	(timed_trundle@increments+1)^0,c
  1629   002274  ECE1  F008         	call	_timed_trundle	;wreg free
  1630   002278                     
  1631                           ;instructions.c: 128:     }
  1632   002278  063D               	decf	reverseRoute@i^0,f,c
  1633   00227A  A0D8               	btfss	status,0,c
  1634   00227C  063E               	decf	(reverseRoute@i+1)^0,f,c
  1635   00227E  EF0E  F011         	goto	l3373
  1636   002282                     l3383:
  1637                           
  1638                           ;instructions.c: 129:     stop(mL, mR);
  1639   002282  C02F  F015         	movff	reverseRoute@mL,stop@mL
  1640   002286  C030  F016         	movff	reverseRoute@mR,stop@mR
  1641   00228A  EC1F  F013         	call	_stop	;wreg free
  1642   00228E                     
  1643                           ;instructions.c: 130:     instruction_array_index = 0;
  1644   00228E  0E00               	movlw	0
  1645   002290  0100               	movlb	0	; () banked
  1646   002292  6F8B               	movwf	_instruction_array_index& (0+255),b
  1647   002294                     l414:
  1648   002294  B48E               	btfsc	142,2,c	;volatile
  1649   002296  EF4F  F011         	goto	u1761
  1650   00229A  EF51  F011         	goto	u1760
  1651   00229E                     u1761:
  1652   00229E  EF4A  F011         	goto	l414
  1653   0022A2                     u1760:
  1654   0022A2  0012               	return		;funcret
  1655   0022A4                     __end_of_reverseRoute:
  1656                           	callstack 0
  1657                           
  1658 ;; *************** function _timed_trundle *****************
  1659 ;; Defined at:
  1660 ;;		line 442 in file "dc_motor.c"
  1661 ;; Parameters:    Size  Location     Type
  1662 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  1663 ;;		 -> main@motorL(9), 
  1664 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  1665 ;;		 -> main@motorR(9), 
  1666 ;;  increments      2   29[COMRAM] int 
  1667 ;; Auto vars:     Size  Location     Type
  1668 ;;  i               2   36[COMRAM] int 
  1669 ;;  i               2   34[COMRAM] int 
  1670 ;;  trundle_powe    1   39[COMRAM] unsigned char 
  1671 ;;  current_powe    1   38[COMRAM] unsigned char 
  1672 ;; Return value:  Size  Location     Type
  1673 ;;                  1    wreg      void 
  1674 ;; Registers used:
  1675 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1676 ;; Tracked objects:
  1677 ;;		On entry : 0/0
  1678 ;;		On exit  : 0/0
  1679 ;;		Unchanged: 0/0
  1680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1681 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1682 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1683 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1684 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1685 ;;Total ram usage:       13 bytes
  1686 ;; Hardware stack levels used: 1
  1687 ;; Hardware stack levels required when called: 7
  1688 ;; This function calls:
  1689 ;;		_setMotorPWM
  1690 ;;		_stop
  1691 ;; This function is called by:
  1692 ;;		_reverseRoute
  1693 ;; This function uses a non-reentrant model
  1694 ;;
  1695                           
  1696                           	psect	text4
  1697   0011C2                     __ptext4:
  1698                           	callstack 0
  1699   0011C2                     _timed_trundle:
  1700                           	callstack 22
  1701   0011C2                     
  1702                           ;dc_motor.c: 443:     if (mL->power != 0 || mR->power != 0) {
  1703   0011C2  501C               	movf	timed_trundle@mL^0,w,c
  1704   0011C4  6ED9               	movwf	fsr2l,c
  1705   0011C6  6ADA               	clrf	fsr2h,c
  1706   0011C8  50DF               	movf	indf2,w,c
  1707   0011CA  A4D8               	btfss	status,2,c
  1708   0011CC  EFEA  F008         	goto	u1391
  1709   0011D0  EFEC  F008         	goto	u1390
  1710   0011D4                     u1391:
  1711   0011D4  EFF7  F008         	goto	l3061
  1712   0011D8                     u1390:
  1713   0011D8  501D               	movf	timed_trundle@mR^0,w,c
  1714   0011DA  6ED9               	movwf	fsr2l,c
  1715   0011DC  6ADA               	clrf	fsr2h,c
  1716   0011DE  50DF               	movf	indf2,w,c
  1717   0011E0  B4D8               	btfsc	status,2,c
  1718   0011E2  EFF5  F008         	goto	u1401
  1719   0011E6  EFF7  F008         	goto	u1400
  1720   0011EA                     u1401:
  1721   0011EA  EFFD  F008         	goto	l3063
  1722   0011EE                     u1400:
  1723   0011EE                     l3061:
  1724                           
  1725                           ;dc_motor.c: 444:         stop(mL, mR);
  1726   0011EE  C01C  F015         	movff	timed_trundle@mL,stop@mL
  1727   0011F2  C01D  F016         	movff	timed_trundle@mR,stop@mR
  1728   0011F6  EC1F  F013         	call	_stop	;wreg free
  1729   0011FA                     l3063:
  1730                           
  1731                           ;dc_motor.c: 446:     increment = 0;
  1732   0011FA  0E00               	movlw	0
  1733   0011FC  0100               	movlb	0	; () banked
  1734   0011FE  6F89               	movwf	(_increment+1)& (0+255),b
  1735   001200  0E00               	movlw	0
  1736   001202  6F88               	movwf	_increment& (0+255),b
  1737   001204                     
  1738                           ; BSR set to: 0
  1739                           ;dc_motor.c: 448:     mL->direction = 1;
  1740   001204  501C               	movf	timed_trundle@mL^0,w,c
  1741   001206  6ED9               	movwf	fsr2l,c
  1742   001208  6ADA               	clrf	fsr2h,c
  1743   00120A  0E01               	movlw	1
  1744   00120C  26D9               	addwf	fsr2l,f,c
  1745   00120E  0E01               	movlw	1
  1746   001210  6EDF               	movwf	indf2,c
  1747   001212                     
  1748                           ; BSR set to: 0
  1749                           ;dc_motor.c: 449:     mR->direction = 1;
  1750   001212  501D               	movf	timed_trundle@mR^0,w,c
  1751   001214  6ED9               	movwf	fsr2l,c
  1752   001216  6ADA               	clrf	fsr2h,c
  1753   001218  0E01               	movlw	1
  1754   00121A  26D9               	addwf	fsr2l,f,c
  1755   00121C  0E01               	movlw	1
  1756   00121E  6EDF               	movwf	indf2,c
  1757   001220                     
  1758                           ; BSR set to: 0
  1759                           ;dc_motor.c: 451:     char current_power = mL->power;
  1760   001220  501C               	movf	timed_trundle@mL^0,w,c
  1761   001222  6ED9               	movwf	fsr2l,c
  1762   001224  6ADA               	clrf	fsr2h,c
  1763   001226  50DF               	movf	indf2,w,c
  1764   001228  6E27               	movwf	timed_trundle@current_power^0,c
  1765   00122A                     
  1766                           ; BSR set to: 0
  1767                           ;dc_motor.c: 452:     char trundle_power = 10;
  1768   00122A  0E0A               	movlw	10
  1769   00122C  6E28               	movwf	timed_trundle@trundle_power^0,c
  1770   00122E                     
  1771                           ; BSR set to: 0
  1772                           ;dc_motor.c: 454:     if (trundle_power > current_power) {
  1773   00122E  0E0A               	movlw	10
  1774   001230  6027               	cpfslt	timed_trundle@current_power^0,c
  1775   001232  EF1D  F009         	goto	u1411
  1776   001236  EF1F  F009         	goto	u1410
  1777   00123A                     u1411:
  1778   00123A  EF54  F009         	goto	l617
  1779   00123E                     u1410:
  1780   00123E                     
  1781                           ; BSR set to: 0
  1782                           ;dc_motor.c: 455:         for (int i=current_power; i<= trundle_power; i++) {
  1783   00123E  C027  F023         	movff	timed_trundle@current_power,timed_trundle@i
  1784   001242  6A24               	clrf	(timed_trundle@i+1)^0,c
  1785   001244  EF40  F009         	goto	l3087
  1786   001248                     l3077:
  1787                           
  1788                           ;dc_motor.c: 456:             mL->power = i;
  1789   001248  501C               	movf	timed_trundle@mL^0,w,c
  1790   00124A  6ED9               	movwf	fsr2l,c
  1791   00124C  6ADA               	clrf	fsr2h,c
  1792   00124E  C023  FFDF         	movff	timed_trundle@i,indf2
  1793                           
  1794                           ;dc_motor.c: 457:             mR->power = i;
  1795   001252  501D               	movf	timed_trundle@mR^0,w,c
  1796   001254  6ED9               	movwf	fsr2l,c
  1797   001256  6ADA               	clrf	fsr2h,c
  1798   001258  C023  FFDF         	movff	timed_trundle@i,indf2
  1799   00125C                     
  1800                           ;dc_motor.c: 458:             setMotorPWM(mL);
  1801   00125C  C01C  F010         	movff	timed_trundle@mL,setMotorPWM@m
  1802   001260  EC09  F00B         	call	_setMotorPWM	;wreg free
  1803   001264                     
  1804                           ;dc_motor.c: 459:             setMotorPWM(mR);
  1805   001264  C01D  F010         	movff	timed_trundle@mR,setMotorPWM@m
  1806   001268  EC09  F00B         	call	_setMotorPWM	;wreg free
  1807   00126C                     
  1808                           ;dc_motor.c: 460:             _delay((unsigned long)((5)*(64000000/4000.0)));
  1809   00126C  0E68               	movlw	104
  1810   00126E  6E20               	movwf	??_timed_trundle^0,c
  1811   001270  0EE4               	movlw	228
  1812   001272                     u1957:
  1813   001272  2EE8               	decfsz	wreg,f,c
  1814   001274  D7FE               	bra	u1957
  1815   001276  2E20               	decfsz	??_timed_trundle^0,f,c
  1816   001278  D7FC               	bra	u1957
  1817   00127A  D000               	nop2	
  1818   00127C                     
  1819                           ;dc_motor.c: 461:         }
  1820   00127C  4A23               	infsnz	timed_trundle@i^0,f,c
  1821   00127E  2A24               	incf	(timed_trundle@i+1)^0,f,c
  1822   001280                     l3087:
  1823   001280  5028               	movf	timed_trundle@trundle_power^0,w,c
  1824   001282  6E20               	movwf	??_timed_trundle^0,c
  1825   001284  6A21               	clrf	(??_timed_trundle+1)^0,c
  1826   001286  5023               	movf	timed_trundle@i^0,w,c
  1827   001288  5C20               	subwf	??_timed_trundle^0,w,c
  1828   00128A  5021               	movf	(??_timed_trundle+1)^0,w,c
  1829   00128C  0A80               	xorlw	128
  1830   00128E  6E22               	movwf	(??_timed_trundle+2)^0,c
  1831   001290  5024               	movf	(timed_trundle@i+1)^0,w,c
  1832   001292  0A80               	xorlw	128
  1833   001294  5822               	subwfb	(??_timed_trundle+2)^0,w,c
  1834   001296  B0D8               	btfsc	status,0,c
  1835   001298  EF50  F009         	goto	u1421
  1836   00129C  EF52  F009         	goto	u1420
  1837   0012A0                     u1421:
  1838   0012A0  EF24  F009         	goto	l3077
  1839   0012A4                     u1420:
  1840   0012A4  EF88  F009         	goto	l3101
  1841   0012A8                     l617:
  1842                           
  1843                           ; BSR set to: 0
  1844                           ;dc_motor.c: 464:         for (int i=current_power; i>= trundle_power; i--) {
  1845   0012A8  C027  F025         	movff	timed_trundle@current_power,timed_trundle@i_2221
  1846   0012AC  6A26               	clrf	(timed_trundle@i_2221+1)^0,c
  1847   0012AE  EF76  F009         	goto	l3099
  1848   0012B2                     l3089:
  1849                           
  1850                           ;dc_motor.c: 465:             mL->power = i;
  1851   0012B2  501C               	movf	timed_trundle@mL^0,w,c
  1852   0012B4  6ED9               	movwf	fsr2l,c
  1853   0012B6  6ADA               	clrf	fsr2h,c
  1854   0012B8  C025  FFDF         	movff	timed_trundle@i_2221,indf2
  1855                           
  1856                           ;dc_motor.c: 466:             mR->power = i;
  1857   0012BC  501D               	movf	timed_trundle@mR^0,w,c
  1858   0012BE  6ED9               	movwf	fsr2l,c
  1859   0012C0  6ADA               	clrf	fsr2h,c
  1860   0012C2  C025  FFDF         	movff	timed_trundle@i_2221,indf2
  1861   0012C6                     
  1862                           ;dc_motor.c: 467:             setMotorPWM(mL);
  1863   0012C6  C01C  F010         	movff	timed_trundle@mL,setMotorPWM@m
  1864   0012CA  EC09  F00B         	call	_setMotorPWM	;wreg free
  1865   0012CE                     
  1866                           ;dc_motor.c: 468:             setMotorPWM(mR);
  1867   0012CE  C01D  F010         	movff	timed_trundle@mR,setMotorPWM@m
  1868   0012D2  EC09  F00B         	call	_setMotorPWM	;wreg free
  1869   0012D6                     
  1870                           ;dc_motor.c: 469:             _delay((unsigned long)((5)*(64000000/4000.0)));
  1871   0012D6  0E68               	movlw	104
  1872   0012D8  6E20               	movwf	??_timed_trundle^0,c
  1873   0012DA  0EE4               	movlw	228
  1874   0012DC                     u1967:
  1875   0012DC  2EE8               	decfsz	wreg,f,c
  1876   0012DE  D7FE               	bra	u1967
  1877   0012E0  2E20               	decfsz	??_timed_trundle^0,f,c
  1878   0012E2  D7FC               	bra	u1967
  1879   0012E4  D000               	nop2	
  1880   0012E6                     
  1881                           ;dc_motor.c: 470:         }
  1882   0012E6  0625               	decf	timed_trundle@i_2221^0,f,c
  1883   0012E8  A0D8               	btfss	status,0,c
  1884   0012EA  0626               	decf	(timed_trundle@i_2221+1)^0,f,c
  1885   0012EC                     l3099:
  1886   0012EC  5028               	movf	timed_trundle@trundle_power^0,w,c
  1887   0012EE  6E20               	movwf	??_timed_trundle^0,c
  1888   0012F0  6A21               	clrf	(??_timed_trundle+1)^0,c
  1889   0012F2  5020               	movf	??_timed_trundle^0,w,c
  1890   0012F4  5C25               	subwf	timed_trundle@i_2221^0,w,c
  1891   0012F6  5026               	movf	(timed_trundle@i_2221+1)^0,w,c
  1892   0012F8  0A80               	xorlw	128
  1893   0012FA  6E22               	movwf	(??_timed_trundle+2)^0,c
  1894   0012FC  5021               	movf	(??_timed_trundle+1)^0,w,c
  1895   0012FE  0A80               	xorlw	128
  1896   001300  5822               	subwfb	(??_timed_trundle+2)^0,w,c
  1897   001302  B0D8               	btfsc	status,0,c
  1898   001304  EF86  F009         	goto	u1431
  1899   001308  EF88  F009         	goto	u1430
  1900   00130C                     u1431:
  1901   00130C  EF59  F009         	goto	l3089
  1902   001310                     u1430:
  1903   001310                     l3101:
  1904   001310  501E               	movf	timed_trundle@increments^0,w,c
  1905   001312  0100               	movlb	0	; () banked
  1906   001314  5D88               	subwf	_increment& (0+255),w,b
  1907   001316  5189               	movf	(_increment+1)& (0+255),w,b
  1908   001318  0A80               	xorlw	128
  1909   00131A  6E20               	movwf	??_timed_trundle^0,c
  1910   00131C  501F               	movf	(timed_trundle@increments+1)^0,w,c
  1911   00131E  0A80               	xorlw	128
  1912   001320  5820               	subwfb	??_timed_trundle^0,w,c
  1913   001322  A0D8               	btfss	status,0,c
  1914   001324  EF96  F009         	goto	u1441
  1915   001328  EF98  F009         	goto	u1440
  1916   00132C                     u1441:
  1917   00132C  EF88  F009         	goto	l3101
  1918   001330                     u1440:
  1919   001330                     
  1920                           ; BSR set to: 0
  1921                           ;dc_motor.c: 474:     stop(mL, mR);
  1922   001330  C01C  F015         	movff	timed_trundle@mL,stop@mL
  1923   001334  C01D  F016         	movff	timed_trundle@mR,stop@mR
  1924   001338  EC1F  F013         	call	_stop	;wreg free
  1925   00133C  0012               	return		;funcret
  1926   00133E                     __end_of_timed_trundle:
  1927                           	callstack 0
  1928                           
  1929 ;; *************** function _executeInstruction *****************
  1930 ;; Defined at:
  1931 ;;		line 8 in file "instructions.c"
  1932 ;; Parameters:    Size  Location     Type
  1933 ;;  mL              1   41[COMRAM] PTR struct DC_motor
  1934 ;;		 -> main@motorL(9), 
  1935 ;;  mR              1   42[COMRAM] PTR struct DC_motor
  1936 ;;		 -> main@motorR(9), 
  1937 ;;  colourCode      1   43[COMRAM] unsigned char 
  1938 ;; Auto vars:     Size  Location     Type
  1939 ;;		None
  1940 ;; Return value:  Size  Location     Type
  1941 ;;                  1    wreg      void 
  1942 ;; Registers used:
  1943 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1944 ;; Tracked objects:
  1945 ;;		On entry : 0/0
  1946 ;;		On exit  : 0/0
  1947 ;;		Unchanged: 0/0
  1948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1949 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1950 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1951 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1952 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1953 ;;Total ram usage:        5 bytes
  1954 ;; Hardware stack levels used: 1
  1955 ;; Hardware stack levels required when called: 9
  1956 ;; This function calls:
  1957 ;;		_Black
  1958 ;;		_Blue
  1959 ;;		_Green
  1960 ;;		_LightBlue
  1961 ;;		_Orange
  1962 ;;		_Pink
  1963 ;;		_Red
  1964 ;;		_White
  1965 ;;		_Yellow
  1966 ;;		_reverseLightBlue
  1967 ;;		_reverseOrange
  1968 ;;		_reversePink
  1969 ;;		_reverseYellow
  1970 ;; This function is called by:
  1971 ;;		_main
  1972 ;;		_reverseRoute
  1973 ;; This function uses a non-reentrant model
  1974 ;;
  1975                           
  1976                           	psect	text5
  1977   0014BA                     __ptext5:
  1978                           	callstack 0
  1979   0014BA                     _executeInstruction:
  1980                           	callstack 20
  1981   0014BA                     
  1982                           ;instructions.c: 9:     switch (colourCode) {
  1983   0014BA  EFC7  F00A         	goto	l3049
  1984   0014BE                     l3021:
  1985                           
  1986                           ;instructions.c: 11:             Red(mL, mR);
  1987   0014BE  C02A  F027         	movff	executeInstruction@mL,Red@mL
  1988   0014C2  C02B  F028         	movff	executeInstruction@mR,Red@mR
  1989   0014C6  EC55  F015         	call	_Red	;wreg free
  1990                           
  1991                           ;instructions.c: 12:             break;
  1992   0014CA  EF08  F00B         	goto	l368
  1993   0014CE                     l3023:
  1994                           
  1995                           ;instructions.c: 14:             Green(mL, mR);
  1996   0014CE  C02A  F027         	movff	executeInstruction@mL,Green@mL
  1997   0014D2  C02B  F028         	movff	executeInstruction@mR,Green@mR
  1998   0014D6  EC5E  F015         	call	_Green	;wreg free
  1999                           
  2000                           ;instructions.c: 15:             break;
  2001   0014DA  EF08  F00B         	goto	l368
  2002   0014DE                     l3025:
  2003                           
  2004                           ;instructions.c: 17:             Blue(mL, mR);
  2005   0014DE  C02A  F026         	movff	executeInstruction@mL,Blue@mL
  2006   0014E2  C02B  F027         	movff	executeInstruction@mR,Blue@mR
  2007   0014E6  EC83  F015         	call	_Blue	;wreg free
  2008                           
  2009                           ;instructions.c: 18:             break;
  2010   0014EA  EF08  F00B         	goto	l368
  2011   0014EE                     l3027:
  2012                           
  2013                           ;instructions.c: 20:             Yellow(mL, mR);
  2014   0014EE  C02A  F028         	movff	executeInstruction@mL,Yellow@mL
  2015   0014F2  C02B  F029         	movff	executeInstruction@mR,Yellow@mR
  2016   0014F6  ECDC  F014         	call	_Yellow	;wreg free
  2017                           
  2018                           ;instructions.c: 21:             break;
  2019   0014FA  EF08  F00B         	goto	l368
  2020   0014FE                     l3029:
  2021                           
  2022                           ;instructions.c: 23:             Pink(mL, mR);
  2023   0014FE  C02A  F028         	movff	executeInstruction@mL,Pink@mL
  2024   001502  C02B  F029         	movff	executeInstruction@mR,Pink@mR
  2025   001506  ECEF  F014         	call	_Pink	;wreg free
  2026                           
  2027                           ;instructions.c: 24:             break;
  2028   00150A  EF08  F00B         	goto	l368
  2029   00150E                     l3031:
  2030                           
  2031                           ;instructions.c: 26:             Orange(mL, mR);
  2032   00150E  C02A  F026         	movff	executeInstruction@mL,Orange@mL
  2033   001512  C02B  F027         	movff	executeInstruction@mR,Orange@mR
  2034   001516  EC75  F015         	call	_Orange	;wreg free
  2035                           
  2036                           ;instructions.c: 27:             break;
  2037   00151A  EF08  F00B         	goto	l368
  2038   00151E                     l3033:
  2039                           
  2040                           ;instructions.c: 29:             LightBlue(mL, mR);
  2041   00151E  C02A  F026         	movff	executeInstruction@mL,LightBlue@mL
  2042   001522  C02B  F027         	movff	executeInstruction@mR,LightBlue@mR
  2043   001526  EC7C  F015         	call	_LightBlue	;wreg free
  2044                           
  2045                           ;instructions.c: 30:             break;
  2046   00152A  EF08  F00B         	goto	l368
  2047   00152E                     l3035:
  2048                           
  2049                           ;instructions.c: 32:             White(mL, mR);
  2050   00152E  C02A  F003         	movff	executeInstruction@mL,White@mL
  2051   001532  C02B  F004         	movff	executeInstruction@mR,White@mR
  2052   001536  ECCA  F015         	call	_White	;wreg free
  2053                           
  2054                           ;instructions.c: 33:             break;
  2055   00153A  EF08  F00B         	goto	l368
  2056   00153E                     l3037:
  2057                           
  2058                           ;instructions.c: 35:             Black(mL, mR);
  2059   00153E  C02A  F003         	movff	executeInstruction@mL,Black@mL
  2060   001542  C02B  F004         	movff	executeInstruction@mR,Black@mR
  2061   001546  ECCE  F015         	call	_Black	;wreg free
  2062                           
  2063                           ;instructions.c: 36:             break;
  2064   00154A  EF08  F00B         	goto	l368
  2065   00154E                     l3039:
  2066                           
  2067                           ;instructions.c: 38:             reverseYellow(mL, mR);
  2068   00154E  C02A  F028         	movff	executeInstruction@mL,reverseYellow@mL
  2069   001552  C02B  F029         	movff	executeInstruction@mR,reverseYellow@mR
  2070   001556  EC58  F014         	call	_reverseYellow	;wreg free
  2071                           
  2072                           ;instructions.c: 39:             break;
  2073   00155A  EF08  F00B         	goto	l368
  2074   00155E                     l3041:
  2075                           
  2076                           ;instructions.c: 41:             reversePink(mL, mR);
  2077   00155E  C02A  F028         	movff	executeInstruction@mL,reversePink@mL
  2078   001562  C02B  F029         	movff	executeInstruction@mR,reversePink@mR
  2079   001566  EC71  F014         	call	_reversePink	;wreg free
  2080                           
  2081                           ;instructions.c: 42:             break;
  2082   00156A  EF08  F00B         	goto	l368
  2083   00156E                     l3043:
  2084                           
  2085                           ;instructions.c: 44:             reverseOrange(mL, mR);
  2086   00156E  C02A  F026         	movff	executeInstruction@mL,reverseOrange@mL
  2087   001572  C02B  F027         	movff	executeInstruction@mR,reverseOrange@mR
  2088   001576  EC67  F015         	call	_reverseOrange	;wreg free
  2089                           
  2090                           ;instructions.c: 45:             break;
  2091   00157A  EF08  F00B         	goto	l368
  2092   00157E                     l3045:
  2093                           
  2094                           ;instructions.c: 47:             reverseLightBlue(mL, mR);
  2095   00157E  C02A  F026         	movff	executeInstruction@mL,reverseLightBlue@mL
  2096   001582  C02B  F027         	movff	executeInstruction@mR,reverseLightBlue@mR
  2097   001586  EC6E  F015         	call	_reverseLightBlue	;wreg free
  2098                           
  2099                           ;instructions.c: 48:             break;
  2100   00158A  EF08  F00B         	goto	l368
  2101   00158E                     l3049:
  2102   00158E  502C               	movf	executeInstruction@colourCode^0,w,c
  2103   001590  6E2D               	movwf	??_executeInstruction^0,c
  2104   001592  6A2E               	clrf	(??_executeInstruction+1)^0,c
  2105                           
  2106                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2107                           ; Switch size 1, requested type "simple"
  2108                           ; Number of cases is 1, Range of values is 0 to 0
  2109                           ; switch strategies available:
  2110                           ; Name         Instructions Cycles
  2111                           ; simple_byte            4     3 (average)
  2112                           ;	Chosen strategy is simple_byte
  2113   001594  502E               	movf	(??_executeInstruction+1)^0,w,c
  2114   001596  0A00               	xorlw	0	; case 0
  2115   001598  B4D8               	btfsc	status,2,c
  2116   00159A  EFD1  F00A         	goto	l3609
  2117   00159E  EF08  F00B         	goto	l368
  2118   0015A2                     l3609:
  2119                           
  2120                           ; Switch size 1, requested type "simple"
  2121                           ; Number of cases is 13, Range of values is 0 to 12
  2122                           ; switch strategies available:
  2123                           ; Name         Instructions Cycles
  2124                           ; simple_byte           40    21 (average)
  2125                           ;	Chosen strategy is simple_byte
  2126   0015A2  502D               	movf	??_executeInstruction^0,w,c
  2127   0015A4  0A00               	xorlw	0	; case 0
  2128   0015A6  B4D8               	btfsc	status,2,c
  2129   0015A8  EF5F  F00A         	goto	l3021
  2130   0015AC  0A01               	xorlw	1	; case 1
  2131   0015AE  B4D8               	btfsc	status,2,c
  2132   0015B0  EF67  F00A         	goto	l3023
  2133   0015B4  0A03               	xorlw	3	; case 2
  2134   0015B6  B4D8               	btfsc	status,2,c
  2135   0015B8  EF6F  F00A         	goto	l3025
  2136   0015BC  0A01               	xorlw	1	; case 3
  2137   0015BE  B4D8               	btfsc	status,2,c
  2138   0015C0  EF77  F00A         	goto	l3027
  2139   0015C4  0A07               	xorlw	7	; case 4
  2140   0015C6  B4D8               	btfsc	status,2,c
  2141   0015C8  EF7F  F00A         	goto	l3029
  2142   0015CC  0A01               	xorlw	1	; case 5
  2143   0015CE  B4D8               	btfsc	status,2,c
  2144   0015D0  EF87  F00A         	goto	l3031
  2145   0015D4  0A03               	xorlw	3	; case 6
  2146   0015D6  B4D8               	btfsc	status,2,c
  2147   0015D8  EF8F  F00A         	goto	l3033
  2148   0015DC  0A01               	xorlw	1	; case 7
  2149   0015DE  B4D8               	btfsc	status,2,c
  2150   0015E0  EF97  F00A         	goto	l3035
  2151   0015E4  0A0F               	xorlw	15	; case 8
  2152   0015E6  B4D8               	btfsc	status,2,c
  2153   0015E8  EF9F  F00A         	goto	l3037
  2154   0015EC  0A01               	xorlw	1	; case 9
  2155   0015EE  B4D8               	btfsc	status,2,c
  2156   0015F0  EFA7  F00A         	goto	l3039
  2157   0015F4  0A03               	xorlw	3	; case 10
  2158   0015F6  B4D8               	btfsc	status,2,c
  2159   0015F8  EFAF  F00A         	goto	l3041
  2160   0015FC  0A01               	xorlw	1	; case 11
  2161   0015FE  B4D8               	btfsc	status,2,c
  2162   001600  EFB7  F00A         	goto	l3043
  2163   001604  0A07               	xorlw	7	; case 12
  2164   001606  B4D8               	btfsc	status,2,c
  2165   001608  EFBF  F00A         	goto	l3045
  2166   00160C  EF08  F00B         	goto	l368
  2167   001610                     l368:
  2168   001610  0012               	return		;funcret
  2169   001612                     __end_of_executeInstruction:
  2170                           	callstack 0
  2171                           
  2172 ;; *************** function _reverseYellow *****************
  2173 ;; Defined at:
  2174 ;;		line 94 in file "instructions.c"
  2175 ;; Parameters:    Size  Location     Type
  2176 ;;  mL              1   39[COMRAM] PTR struct DC_motor
  2177 ;;		 -> main@motorL(9), 
  2178 ;;  mR              1   40[COMRAM] PTR struct DC_motor
  2179 ;;		 -> main@motorR(9), 
  2180 ;; Auto vars:     Size  Location     Type
  2181 ;;		None
  2182 ;; Return value:  Size  Location     Type
  2183 ;;                  1    wreg      void 
  2184 ;; Registers used:
  2185 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2186 ;; Tracked objects:
  2187 ;;		On entry : 0/0
  2188 ;;		On exit  : 0/0
  2189 ;;		Unchanged: 0/0
  2190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2191 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2192 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2193 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2194 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2195 ;;Total ram usage:        2 bytes
  2196 ;; Hardware stack levels used: 1
  2197 ;; Hardware stack levels required when called: 8
  2198 ;; This function calls:
  2199 ;;		_trundleSquare
  2200 ;;		_turn180
  2201 ;;		_turnLeft
  2202 ;; This function is called by:
  2203 ;;		_executeInstruction
  2204 ;; This function uses a non-reentrant model
  2205 ;;
  2206                           
  2207                           	psect	text6
  2208   0028B0                     __ptext6:
  2209                           	callstack 0
  2210   0028B0                     _reverseYellow:
  2211                           	callstack 20
  2212   0028B0                     
  2213                           ;instructions.c: 95:     turnLeft(mL, mR, turnLeftPower);
  2214   0028B0  C028  F01C         	movff	reverseYellow@mL,turnLeft@mL
  2215   0028B4  C029  F01D         	movff	reverseYellow@mR,turnLeft@mR
  2216   0028B8  C04B  F01E         	movff	_turnLeftPower,turnLeft@power
  2217   0028BC  ECEF  F00C         	call	_turnLeft	;wreg free
  2218   0028C0  C028  F01C         	movff	reverseYellow@mL,trundleSquare@mL
  2219   0028C4  C029  F01D         	movff	reverseYellow@mR,trundleSquare@mR
  2220   0028C8  0E10               	movlw	16
  2221   0028CA  6E1E               	movwf	trundleSquare@square^0,c
  2222   0028CC  0E00               	movlw	0
  2223   0028CE  6E1F               	movwf	trundleSquare@reverse^0,c
  2224   0028D0  EC4E  F00F         	call	_trundleSquare	;wreg free
  2225                           
  2226                           ;instructions.c: 97:     turn180(mL, mR);
  2227   0028D4  C028  F01C         	movff	reverseYellow@mL,turn180@mL
  2228   0028D8  C029  F01D         	movff	reverseYellow@mR,turn180@mR
  2229   0028DC  ECB7  F00E         	call	_turn180	;wreg free
  2230   0028E0  0012               	return		;funcret
  2231   0028E2                     __end_of_reverseYellow:
  2232                           	callstack 0
  2233                           
  2234 ;; *************** function _reversePink *****************
  2235 ;; Defined at:
  2236 ;;		line 100 in file "instructions.c"
  2237 ;; Parameters:    Size  Location     Type
  2238 ;;  mL              1   39[COMRAM] PTR struct DC_motor
  2239 ;;		 -> main@motorL(9), 
  2240 ;;  mR              1   40[COMRAM] PTR struct DC_motor
  2241 ;;		 -> main@motorR(9), 
  2242 ;; Auto vars:     Size  Location     Type
  2243 ;;		None
  2244 ;; Return value:  Size  Location     Type
  2245 ;;                  1    wreg      void 
  2246 ;; Registers used:
  2247 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2248 ;; Tracked objects:
  2249 ;;		On entry : 0/0
  2250 ;;		On exit  : 0/0
  2251 ;;		Unchanged: 0/0
  2252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2253 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2254 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2255 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2256 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2257 ;;Total ram usage:        2 bytes
  2258 ;; Hardware stack levels used: 1
  2259 ;; Hardware stack levels required when called: 8
  2260 ;; This function calls:
  2261 ;;		_trundleSquare
  2262 ;;		_turn180
  2263 ;;		_turnRight
  2264 ;; This function is called by:
  2265 ;;		_executeInstruction
  2266 ;; This function uses a non-reentrant model
  2267 ;;
  2268                           
  2269                           	psect	text7
  2270   0028E2                     __ptext7:
  2271                           	callstack 0
  2272   0028E2                     _reversePink:
  2273                           	callstack 20
  2274   0028E2                     
  2275                           ;instructions.c: 101:     turnRight(mL, mR, turnRightPower);
  2276   0028E2  C028  F01C         	movff	reversePink@mL,turnRight@mL
  2277   0028E6  C029  F01D         	movff	reversePink@mR,turnRight@mR
  2278   0028EA  C04A  F01E         	movff	_turnRightPower,turnRight@power
  2279   0028EE  EC55  F00C         	call	_turnRight	;wreg free
  2280   0028F2  C028  F01C         	movff	reversePink@mL,trundleSquare@mL
  2281   0028F6  C029  F01D         	movff	reversePink@mR,trundleSquare@mR
  2282   0028FA  0E10               	movlw	16
  2283   0028FC  6E1E               	movwf	trundleSquare@square^0,c
  2284   0028FE  0E00               	movlw	0
  2285   002900  6E1F               	movwf	trundleSquare@reverse^0,c
  2286   002902  EC4E  F00F         	call	_trundleSquare	;wreg free
  2287                           
  2288                           ;instructions.c: 103:     turn180(mL, mR);
  2289   002906  C028  F01C         	movff	reversePink@mL,turn180@mL
  2290   00290A  C029  F01D         	movff	reversePink@mR,turn180@mR
  2291   00290E  ECB7  F00E         	call	_turn180	;wreg free
  2292   002912  0012               	return		;funcret
  2293   002914                     __end_of_reversePink:
  2294                           	callstack 0
  2295                           
  2296 ;; *************** function _reverseOrange *****************
  2297 ;; Defined at:
  2298 ;;		line 107 in file "instructions.c"
  2299 ;; Parameters:    Size  Location     Type
  2300 ;;  mL              1   37[COMRAM] PTR struct DC_motor
  2301 ;;		 -> main@motorL(9), 
  2302 ;;  mR              1   38[COMRAM] PTR struct DC_motor
  2303 ;;		 -> main@motorR(9), 
  2304 ;; Auto vars:     Size  Location     Type
  2305 ;;		None
  2306 ;; Return value:  Size  Location     Type
  2307 ;;                  1    wreg      void 
  2308 ;; Registers used:
  2309 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2310 ;; Tracked objects:
  2311 ;;		On entry : 0/0
  2312 ;;		On exit  : 0/0
  2313 ;;		Unchanged: 0/0
  2314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2315 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2316 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2317 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2318 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2319 ;;Total ram usage:        2 bytes
  2320 ;; Hardware stack levels used: 1
  2321 ;; Hardware stack levels required when called: 8
  2322 ;; This function calls:
  2323 ;;		_turnRight135
  2324 ;; This function is called by:
  2325 ;;		_executeInstruction
  2326 ;; This function uses a non-reentrant model
  2327 ;;
  2328                           
  2329                           	psect	text8
  2330   002ACE                     __ptext8:
  2331                           	callstack 0
  2332   002ACE                     _reverseOrange:
  2333                           	callstack 20
  2334   002ACE                     
  2335                           ;instructions.c: 108:     turnRight135(mL, mR);
  2336   002ACE  C026  F01C         	movff	reverseOrange@mL,turnRight135@mL
  2337   002AD2  C027  F01D         	movff	reverseOrange@mR,turnRight135@mR
  2338   002AD6  EC89  F00D         	call	_turnRight135	;wreg free
  2339   002ADA  0012               	return		;funcret
  2340   002ADC                     __end_of_reverseOrange:
  2341                           	callstack 0
  2342                           
  2343 ;; *************** function _reverseLightBlue *****************
  2344 ;; Defined at:
  2345 ;;		line 111 in file "instructions.c"
  2346 ;; Parameters:    Size  Location     Type
  2347 ;;  mL              1   37[COMRAM] PTR struct DC_motor
  2348 ;;		 -> main@motorL(9), 
  2349 ;;  mR              1   38[COMRAM] PTR struct DC_motor
  2350 ;;		 -> main@motorR(9), 
  2351 ;; Auto vars:     Size  Location     Type
  2352 ;;		None
  2353 ;; Return value:  Size  Location     Type
  2354 ;;                  1    wreg      void 
  2355 ;; Registers used:
  2356 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2357 ;; Tracked objects:
  2358 ;;		On entry : 0/0
  2359 ;;		On exit  : 0/0
  2360 ;;		Unchanged: 0/0
  2361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2362 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2363 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2364 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2365 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2366 ;;Total ram usage:        2 bytes
  2367 ;; Hardware stack levels used: 1
  2368 ;; Hardware stack levels required when called: 8
  2369 ;; This function calls:
  2370 ;;		_turnLeft135
  2371 ;; This function is called by:
  2372 ;;		_executeInstruction
  2373 ;; This function uses a non-reentrant model
  2374 ;;
  2375                           
  2376                           	psect	text9
  2377   002ADC                     __ptext9:
  2378                           	callstack 0
  2379   002ADC                     _reverseLightBlue:
  2380                           	callstack 20
  2381   002ADC                     
  2382                           ;instructions.c: 112:     turnLeft135(mL, mR);
  2383   002ADC  C026  F01C         	movff	reverseLightBlue@mL,turnLeft135@mL
  2384   002AE0  C027  F01D         	movff	reverseLightBlue@mR,turnLeft135@mR
  2385   002AE4  EC20  F00E         	call	_turnLeft135	;wreg free
  2386   002AE8  0012               	return		;funcret
  2387   002AEA                     __end_of_reverseLightBlue:
  2388                           	callstack 0
  2389                           
  2390 ;; *************** function _Yellow *****************
  2391 ;; Defined at:
  2392 ;;		line 65 in file "instructions.c"
  2393 ;; Parameters:    Size  Location     Type
  2394 ;;  mL              1   39[COMRAM] PTR struct DC_motor
  2395 ;;		 -> main@motorL(9), 
  2396 ;;  mR              1   40[COMRAM] PTR struct DC_motor
  2397 ;;		 -> main@motorR(9), 
  2398 ;; Auto vars:     Size  Location     Type
  2399 ;;		None
  2400 ;; Return value:  Size  Location     Type
  2401 ;;                  1    wreg      void 
  2402 ;; Registers used:
  2403 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2404 ;; Tracked objects:
  2405 ;;		On entry : 0/0
  2406 ;;		On exit  : 0/0
  2407 ;;		Unchanged: 0/0
  2408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2409 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2410 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2411 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2412 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2413 ;;Total ram usage:        2 bytes
  2414 ;; Hardware stack levels used: 1
  2415 ;; Hardware stack levels required when called: 8
  2416 ;; This function calls:
  2417 ;;		_trundleSquare
  2418 ;;		_turnRight
  2419 ;; This function is called by:
  2420 ;;		_executeInstruction
  2421 ;; This function uses a non-reentrant model
  2422 ;;
  2423                           
  2424                           	psect	text10
  2425   0029B8                     __ptext10:
  2426                           	callstack 0
  2427   0029B8                     _Yellow:
  2428                           	callstack 20
  2429   0029B8  C028  F01C         	movff	Yellow@mL,trundleSquare@mL
  2430   0029BC  C029  F01D         	movff	Yellow@mR,trundleSquare@mR
  2431   0029C0  0E10               	movlw	16
  2432   0029C2  6E1E               	movwf	trundleSquare@square^0,c
  2433   0029C4  0E01               	movlw	1
  2434   0029C6  6E1F               	movwf	trundleSquare@reverse^0,c
  2435   0029C8  EC4E  F00F         	call	_trundleSquare	;wreg free
  2436                           
  2437                           ;instructions.c: 67:     turnRight(mL, mR, turnRightPower);
  2438   0029CC  C028  F01C         	movff	Yellow@mL,turnRight@mL
  2439   0029D0  C029  F01D         	movff	Yellow@mR,turnRight@mR
  2440   0029D4  C04A  F01E         	movff	_turnRightPower,turnRight@power
  2441   0029D8  EC55  F00C         	call	_turnRight	;wreg free
  2442   0029DC  0012               	return		;funcret
  2443   0029DE                     __end_of_Yellow:
  2444                           	callstack 0
  2445                           
  2446 ;; *************** function _White *****************
  2447 ;; Defined at:
  2448 ;;		line 84 in file "instructions.c"
  2449 ;; Parameters:    Size  Location     Type
  2450 ;;  mL              1    2[COMRAM] PTR struct DC_motor
  2451 ;;		 -> main@motorL(9), 
  2452 ;;  mR              1    3[COMRAM] PTR struct DC_motor
  2453 ;;		 -> main@motorR(9), 
  2454 ;; Auto vars:     Size  Location     Type
  2455 ;;		None
  2456 ;; Return value:  Size  Location     Type
  2457 ;;                  1    wreg      void 
  2458 ;; Registers used:
  2459 ;;		wreg, status,2
  2460 ;; Tracked objects:
  2461 ;;		On entry : 0/0
  2462 ;;		On exit  : 0/0
  2463 ;;		Unchanged: 0/0
  2464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2465 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2466 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2467 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2468 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2469 ;;Total ram usage:        2 bytes
  2470 ;; Hardware stack levels used: 1
  2471 ;; Hardware stack levels required when called: 4
  2472 ;; This function calls:
  2473 ;;		Nothing
  2474 ;; This function is called by:
  2475 ;;		_executeInstruction
  2476 ;; This function uses a non-reentrant model
  2477 ;;
  2478                           
  2479                           	psect	text11
  2480   002B94                     __ptext11:
  2481                           	callstack 0
  2482   002B94                     _White:
  2483                           	callstack 24
  2484   002B94                     
  2485                           ;instructions.c: 85:     reverseRouteFlag=1;
  2486   002B94  0E01               	movlw	1
  2487   002B96  0100               	movlb	0	; () banked
  2488   002B98  6F8A               	movwf	_reverseRouteFlag& (0+255),b
  2489   002B9A                     
  2490                           ; BSR set to: 0
  2491   002B9A  0012               	return		;funcret
  2492   002B9C                     __end_of_White:
  2493                           	callstack 0
  2494                           
  2495 ;; *************** function _Red *****************
  2496 ;; Defined at:
  2497 ;;		line 53 in file "instructions.c"
  2498 ;; Parameters:    Size  Location     Type
  2499 ;;  mL              1   38[COMRAM] PTR struct DC_motor
  2500 ;;		 -> main@motorL(9), 
  2501 ;;  mR              1   39[COMRAM] PTR struct DC_motor
  2502 ;;		 -> main@motorR(9), 
  2503 ;; Auto vars:     Size  Location     Type
  2504 ;;		None
  2505 ;; Return value:  Size  Location     Type
  2506 ;;                  1    wreg      void 
  2507 ;; Registers used:
  2508 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2509 ;; Tracked objects:
  2510 ;;		On entry : 0/0
  2511 ;;		On exit  : 0/0
  2512 ;;		Unchanged: 0/0
  2513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2514 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2515 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2516 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2517 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2518 ;;Total ram usage:        2 bytes
  2519 ;; Hardware stack levels used: 1
  2520 ;; Hardware stack levels required when called: 8
  2521 ;; This function calls:
  2522 ;;		_turnRight
  2523 ;; This function is called by:
  2524 ;;		_executeInstruction
  2525 ;; This function uses a non-reentrant model
  2526 ;;
  2527                           
  2528                           	psect	text12
  2529   002AAA                     __ptext12:
  2530                           	callstack 0
  2531   002AAA                     _Red:
  2532                           	callstack 20
  2533   002AAA                     
  2534                           ;instructions.c: 54:     turnRight(mL, mR, turnRightPower);
  2535   002AAA  C027  F01C         	movff	Red@mL,turnRight@mL
  2536   002AAE  C028  F01D         	movff	Red@mR,turnRight@mR
  2537   002AB2  C04A  F01E         	movff	_turnRightPower,turnRight@power
  2538   002AB6  EC55  F00C         	call	_turnRight	;wreg free
  2539   002ABA  0012               	return		;funcret
  2540   002ABC                     __end_of_Red:
  2541                           	callstack 0
  2542                           
  2543 ;; *************** function _turnRight *****************
  2544 ;; Defined at:
  2545 ;;		line 193 in file "dc_motor.c"
  2546 ;; Parameters:    Size  Location     Type
  2547 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  2548 ;;		 -> main@motorL(9), 
  2549 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  2550 ;;		 -> main@motorR(9), 
  2551 ;;  power           1   29[COMRAM] unsigned char 
  2552 ;; Auto vars:     Size  Location     Type
  2553 ;;  i               2   36[COMRAM] int 
  2554 ;;  i               2   34[COMRAM] int 
  2555 ;;  maxpower        2   32[COMRAM] int 
  2556 ;; Return value:  Size  Location     Type
  2557 ;;                  1    wreg      void 
  2558 ;; Registers used:
  2559 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2560 ;; Tracked objects:
  2561 ;;		On entry : 0/0
  2562 ;;		On exit  : 0/0
  2563 ;;		Unchanged: 0/0
  2564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2565 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2566 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2567 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2568 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2569 ;;Total ram usage:       11 bytes
  2570 ;; Hardware stack levels used: 1
  2571 ;; Hardware stack levels required when called: 7
  2572 ;; This function calls:
  2573 ;;		_setMotorPWM
  2574 ;;		_stop
  2575 ;; This function is called by:
  2576 ;;		_Red
  2577 ;;		_Yellow
  2578 ;;		_reversePink
  2579 ;;		_rightCali
  2580 ;; This function uses a non-reentrant model
  2581 ;;
  2582                           
  2583                           	psect	text13
  2584   0018AA                     __ptext13:
  2585                           	callstack 0
  2586   0018AA                     _turnRight:
  2587                           	callstack 22
  2588   0018AA                     
  2589                           ;dc_motor.c: 193: void turnRight(DC_motor *mL, DC_motor *mR, char power);dc_motor.c: 194
      +                          : {;dc_motor.c: 196:     if (mL->power != 0 || mR->power != 0) {
  2590   0018AA  501C               	movf	turnRight@mL^0,w,c
  2591   0018AC  6ED9               	movwf	fsr2l,c
  2592   0018AE  6ADA               	clrf	fsr2h,c
  2593   0018B0  50DF               	movf	indf2,w,c
  2594   0018B2  A4D8               	btfss	status,2,c
  2595   0018B4  EF5E  F00C         	goto	u1061
  2596   0018B8  EF60  F00C         	goto	u1060
  2597   0018BC                     u1061:
  2598   0018BC  EF6B  F00C         	goto	l2593
  2599   0018C0                     u1060:
  2600   0018C0  501D               	movf	turnRight@mR^0,w,c
  2601   0018C2  6ED9               	movwf	fsr2l,c
  2602   0018C4  6ADA               	clrf	fsr2h,c
  2603   0018C6  50DF               	movf	indf2,w,c
  2604   0018C8  B4D8               	btfsc	status,2,c
  2605   0018CA  EF69  F00C         	goto	u1071
  2606   0018CE  EF6B  F00C         	goto	u1070
  2607   0018D2                     u1071:
  2608   0018D2  EF71  F00C         	goto	l2595
  2609   0018D6                     u1070:
  2610   0018D6                     l2593:
  2611                           
  2612                           ;dc_motor.c: 197:         stop(mL, mR);
  2613   0018D6  C01C  F015         	movff	turnRight@mL,stop@mL
  2614   0018DA  C01D  F016         	movff	turnRight@mR,stop@mR
  2615   0018DE  EC1F  F013         	call	_stop	;wreg free
  2616   0018E2                     l2595:
  2617                           
  2618                           ;dc_motor.c: 201:     mL->direction = 1;
  2619   0018E2  501C               	movf	turnRight@mL^0,w,c
  2620   0018E4  6ED9               	movwf	fsr2l,c
  2621   0018E6  6ADA               	clrf	fsr2h,c
  2622   0018E8  0E01               	movlw	1
  2623   0018EA  26D9               	addwf	fsr2l,f,c
  2624   0018EC  0E01               	movlw	1
  2625   0018EE  6EDF               	movwf	indf2,c
  2626   0018F0                     
  2627                           ;dc_motor.c: 202:     mR->direction = 0;
  2628   0018F0  501D               	movf	turnRight@mR^0,w,c
  2629   0018F2  6ED9               	movwf	fsr2l,c
  2630   0018F4  6ADA               	clrf	fsr2h,c
  2631   0018F6  0E01               	movlw	1
  2632   0018F8  26D9               	addwf	fsr2l,f,c
  2633   0018FA  6ADF               	clrf	indf2,c
  2634   0018FC                     
  2635                           ;dc_motor.c: 203:     int maxpower = power;
  2636   0018FC  C01E  F021         	movff	turnRight@power,turnRight@maxpower
  2637   001900  6A22               	clrf	(turnRight@maxpower+1)^0,c
  2638   001902                     
  2639                           ;dc_motor.c: 206:     for (int i = 0; i < maxpower; i++) {
  2640   001902  0E00               	movlw	0
  2641   001904  6E24               	movwf	(turnRight@i+1)^0,c
  2642   001906  0E00               	movlw	0
  2643   001908  6E23               	movwf	turnRight@i^0,c
  2644   00190A  EFA7  F00C         	goto	l2613
  2645   00190E                     l2603:
  2646                           
  2647                           ;dc_motor.c: 207:         mL->power = i;
  2648   00190E  501C               	movf	turnRight@mL^0,w,c
  2649   001910  6ED9               	movwf	fsr2l,c
  2650   001912  6ADA               	clrf	fsr2h,c
  2651   001914  C023  FFDF         	movff	turnRight@i,indf2
  2652                           
  2653                           ;dc_motor.c: 208:         mR->power = i;
  2654   001918  501D               	movf	turnRight@mR^0,w,c
  2655   00191A  6ED9               	movwf	fsr2l,c
  2656   00191C  6ADA               	clrf	fsr2h,c
  2657   00191E  C023  FFDF         	movff	turnRight@i,indf2
  2658   001922                     
  2659                           ;dc_motor.c: 209:         setMotorPWM(mL);
  2660   001922  C01C  F010         	movff	turnRight@mL,setMotorPWM@m
  2661   001926  EC09  F00B         	call	_setMotorPWM	;wreg free
  2662   00192A                     
  2663                           ;dc_motor.c: 210:         setMotorPWM(mR);
  2664   00192A  C01D  F010         	movff	turnRight@mR,setMotorPWM@m
  2665   00192E  EC09  F00B         	call	_setMotorPWM	;wreg free
  2666   001932                     
  2667                           ;dc_motor.c: 211:         _delay((unsigned long)((15)*(64000000/4000.0)));
  2668   001932  0E02               	movlw	2
  2669   001934  6E20               	movwf	(??_turnRight+1)^0,c
  2670   001936  0E38               	movlw	56
  2671   001938  6E1F               	movwf	??_turnRight^0,c
  2672   00193A  0EAD               	movlw	173
  2673   00193C                     u1977:
  2674   00193C  2EE8               	decfsz	wreg,f,c
  2675   00193E  D7FE               	bra	u1977
  2676   001940  2E1F               	decfsz	??_turnRight^0,f,c
  2677   001942  D7FC               	bra	u1977
  2678   001944  2E20               	decfsz	(??_turnRight+1)^0,f,c
  2679   001946  D7FA               	bra	u1977
  2680   001948  0000               	nop	
  2681   00194A                     
  2682                           ;dc_motor.c: 213:     }
  2683   00194A  4A23               	infsnz	turnRight@i^0,f,c
  2684   00194C  2A24               	incf	(turnRight@i+1)^0,f,c
  2685   00194E                     l2613:
  2686   00194E  5021               	movf	turnRight@maxpower^0,w,c
  2687   001950  5C23               	subwf	turnRight@i^0,w,c
  2688   001952  5024               	movf	(turnRight@i+1)^0,w,c
  2689   001954  0A80               	xorlw	128
  2690   001956  6E1F               	movwf	??_turnRight^0,c
  2691   001958  5022               	movf	(turnRight@maxpower+1)^0,w,c
  2692   00195A  0A80               	xorlw	128
  2693   00195C  581F               	subwfb	??_turnRight^0,w,c
  2694   00195E  A0D8               	btfss	status,0,c
  2695   001960  EFB4  F00C         	goto	u1081
  2696   001964  EFB6  F00C         	goto	u1080
  2697   001968                     u1081:
  2698   001968  EF87  F00C         	goto	l2603
  2699   00196C                     u1080:
  2700   00196C                     
  2701                           ;dc_motor.c: 215:     _delay((unsigned long)((250)*(64000000/4000.0)));
  2702   00196C  0E15               	movlw	21
  2703   00196E  6E20               	movwf	(??_turnRight+1)^0,c
  2704   001970  0E4B               	movlw	75
  2705   001972  6E1F               	movwf	??_turnRight^0,c
  2706   001974  0EBE               	movlw	190
  2707   001976                     u1987:
  2708   001976  2EE8               	decfsz	wreg,f,c
  2709   001978  D7FE               	bra	u1987
  2710   00197A  2E1F               	decfsz	??_turnRight^0,f,c
  2711   00197C  D7FC               	bra	u1987
  2712   00197E  2E20               	decfsz	(??_turnRight+1)^0,f,c
  2713   001980  D7FA               	bra	u1987
  2714   001982  D000               	nop2	
  2715   001984                     
  2716                           ;dc_motor.c: 218:     for (int i = maxpower; i >= 0; i--) {
  2717   001984  C021  F025         	movff	turnRight@maxpower,turnRight@i_2090
  2718   001988  C022  F026         	movff	turnRight@maxpower+1,turnRight@i_2090+1
  2719   00198C                     l2619:
  2720   00198C  BE26               	btfsc	(turnRight@i_2090+1)^0,7,c
  2721   00198E  EFCD  F00C         	goto	u1090
  2722   001992  EFCB  F00C         	goto	u1091
  2723   001996                     u1091:
  2724   001996  EFCF  F00C         	goto	l2623
  2725   00199A                     u1090:
  2726   00199A  EFEE  F00C         	goto	l545
  2727   00199E                     l2623:
  2728                           
  2729                           ;dc_motor.c: 219:         mL->power = i;
  2730   00199E  501C               	movf	turnRight@mL^0,w,c
  2731   0019A0  6ED9               	movwf	fsr2l,c
  2732   0019A2  6ADA               	clrf	fsr2h,c
  2733   0019A4  C025  FFDF         	movff	turnRight@i_2090,indf2
  2734                           
  2735                           ;dc_motor.c: 220:         mR->power = i;
  2736   0019A8  501D               	movf	turnRight@mR^0,w,c
  2737   0019AA  6ED9               	movwf	fsr2l,c
  2738   0019AC  6ADA               	clrf	fsr2h,c
  2739   0019AE  C025  FFDF         	movff	turnRight@i_2090,indf2
  2740   0019B2                     
  2741                           ;dc_motor.c: 221:         setMotorPWM(mL);
  2742   0019B2  C01C  F010         	movff	turnRight@mL,setMotorPWM@m
  2743   0019B6  EC09  F00B         	call	_setMotorPWM	;wreg free
  2744   0019BA                     
  2745                           ;dc_motor.c: 222:         setMotorPWM(mR);
  2746   0019BA  C01D  F010         	movff	turnRight@mR,setMotorPWM@m
  2747   0019BE  EC09  F00B         	call	_setMotorPWM	;wreg free
  2748   0019C2                     
  2749                           ;dc_motor.c: 223:         _delay((unsigned long)((5)*(64000000/4000.0)));
  2750   0019C2  0E68               	movlw	104
  2751   0019C4  6E1F               	movwf	??_turnRight^0,c
  2752   0019C6  0EE4               	movlw	228
  2753   0019C8                     u1997:
  2754   0019C8  2EE8               	decfsz	wreg,f,c
  2755   0019CA  D7FE               	bra	u1997
  2756   0019CC  2E1F               	decfsz	??_turnRight^0,f,c
  2757   0019CE  D7FC               	bra	u1997
  2758   0019D0  D000               	nop2	
  2759   0019D2                     
  2760                           ;dc_motor.c: 225:     }
  2761   0019D2  0625               	decf	turnRight@i_2090^0,f,c
  2762   0019D4  A0D8               	btfss	status,0,c
  2763   0019D6  0626               	decf	(turnRight@i_2090+1)^0,f,c
  2764   0019D8  EFC6  F00C         	goto	l2619
  2765   0019DC                     l545:
  2766   0019DC  0012               	return		;funcret
  2767   0019DE                     __end_of_turnRight:
  2768                           	callstack 0
  2769                           
  2770 ;; *************** function _Pink *****************
  2771 ;; Defined at:
  2772 ;;		line 70 in file "instructions.c"
  2773 ;; Parameters:    Size  Location     Type
  2774 ;;  mL              1   39[COMRAM] PTR struct DC_motor
  2775 ;;		 -> main@motorL(9), 
  2776 ;;  mR              1   40[COMRAM] PTR struct DC_motor
  2777 ;;		 -> main@motorR(9), 
  2778 ;; Auto vars:     Size  Location     Type
  2779 ;;		None
  2780 ;; Return value:  Size  Location     Type
  2781 ;;                  1    wreg      void 
  2782 ;; Registers used:
  2783 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2784 ;; Tracked objects:
  2785 ;;		On entry : 0/0
  2786 ;;		On exit  : 0/0
  2787 ;;		Unchanged: 0/0
  2788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2789 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2790 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2792 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2793 ;;Total ram usage:        2 bytes
  2794 ;; Hardware stack levels used: 1
  2795 ;; Hardware stack levels required when called: 8
  2796 ;; This function calls:
  2797 ;;		_trundleSquare
  2798 ;;		_turnLeft
  2799 ;; This function is called by:
  2800 ;;		_executeInstruction
  2801 ;; This function uses a non-reentrant model
  2802 ;;
  2803                           
  2804                           	psect	text14
  2805   0029DE                     __ptext14:
  2806                           	callstack 0
  2807   0029DE                     _Pink:
  2808                           	callstack 20
  2809   0029DE  C028  F01C         	movff	Pink@mL,trundleSquare@mL
  2810   0029E2  C029  F01D         	movff	Pink@mR,trundleSquare@mR
  2811   0029E6  0E10               	movlw	16
  2812   0029E8  6E1E               	movwf	trundleSquare@square^0,c
  2813   0029EA  0E01               	movlw	1
  2814   0029EC  6E1F               	movwf	trundleSquare@reverse^0,c
  2815   0029EE  EC4E  F00F         	call	_trundleSquare	;wreg free
  2816                           
  2817                           ;instructions.c: 72:     turnLeft(mL, mR, turnLeftPower);
  2818   0029F2  C028  F01C         	movff	Pink@mL,turnLeft@mL
  2819   0029F6  C029  F01D         	movff	Pink@mR,turnLeft@mR
  2820   0029FA  C04B  F01E         	movff	_turnLeftPower,turnLeft@power
  2821   0029FE  ECEF  F00C         	call	_turnLeft	;wreg free
  2822   002A02  0012               	return		;funcret
  2823   002A04                     __end_of_Pink:
  2824                           	callstack 0
  2825                           
  2826 ;; *************** function _trundleSquare *****************
  2827 ;; Defined at:
  2828 ;;		line 478 in file "dc_motor.c"
  2829 ;; Parameters:    Size  Location     Type
  2830 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  2831 ;;		 -> main@motorL(9), 
  2832 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  2833 ;;		 -> main@motorR(9), 
  2834 ;;  square          1   29[COMRAM] unsigned char 
  2835 ;;  reverse         1   30[COMRAM] unsigned char 
  2836 ;; Auto vars:     Size  Location     Type
  2837 ;;  i               2   37[COMRAM] int 
  2838 ;;  start_increm    1   36[COMRAM] unsigned char 
  2839 ;; Return value:  Size  Location     Type
  2840 ;;                  1    wreg      void 
  2841 ;; Registers used:
  2842 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2843 ;; Tracked objects:
  2844 ;;		On entry : 0/0
  2845 ;;		On exit  : 0/0
  2846 ;;		Unchanged: 0/0
  2847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2848 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2849 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2850 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2851 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2852 ;;Total ram usage:       12 bytes
  2853 ;; Hardware stack levels used: 1
  2854 ;; Hardware stack levels required when called: 7
  2855 ;; This function calls:
  2856 ;;		_setMotorPWM
  2857 ;;		_stop
  2858 ;; This function is called by:
  2859 ;;		_Yellow
  2860 ;;		_Pink
  2861 ;;		_reverseYellow
  2862 ;;		_reversePink
  2863 ;; This function uses a non-reentrant model
  2864 ;;
  2865                           
  2866                           	psect	text15
  2867   001E9C                     __ptext15:
  2868                           	callstack 0
  2869   001E9C                     _trundleSquare:
  2870                           	callstack 20
  2871   001E9C                     
  2872                           ;dc_motor.c: 480:     if (mL->power != 0 || mR->power != 0) {
  2873   001E9C  501C               	movf	trundleSquare@mL^0,w,c
  2874   001E9E  6ED9               	movwf	fsr2l,c
  2875   001EA0  6ADA               	clrf	fsr2h,c
  2876   001EA2  50DF               	movf	indf2,w,c
  2877   001EA4  A4D8               	btfss	status,2,c
  2878   001EA6  EF57  F00F         	goto	u1181
  2879   001EAA  EF59  F00F         	goto	u1180
  2880   001EAE                     u1181:
  2881   001EAE  EF64  F00F         	goto	l2731
  2882   001EB2                     u1180:
  2883   001EB2  501D               	movf	trundleSquare@mR^0,w,c
  2884   001EB4  6ED9               	movwf	fsr2l,c
  2885   001EB6  6ADA               	clrf	fsr2h,c
  2886   001EB8  50DF               	movf	indf2,w,c
  2887   001EBA  B4D8               	btfsc	status,2,c
  2888   001EBC  EF62  F00F         	goto	u1191
  2889   001EC0  EF64  F00F         	goto	u1190
  2890   001EC4                     u1191:
  2891   001EC4  EF6A  F00F         	goto	l2733
  2892   001EC8                     u1190:
  2893   001EC8                     l2731:
  2894                           
  2895                           ;dc_motor.c: 481:         stop(mL, mR);
  2896   001EC8  C01C  F015         	movff	trundleSquare@mL,stop@mL
  2897   001ECC  C01D  F016         	movff	trundleSquare@mR,stop@mR
  2898   001ED0  EC1F  F013         	call	_stop	;wreg free
  2899   001ED4                     l2733:
  2900                           
  2901                           ;dc_motor.c: 484:     if (reverse == 1) {
  2902   001ED4  041F               	decf	trundleSquare@reverse^0,w,c
  2903   001ED6  A4D8               	btfss	status,2,c
  2904   001ED8  EF70  F00F         	goto	u1201
  2905   001EDC  EF72  F00F         	goto	u1200
  2906   001EE0                     u1201:
  2907   001EE0  EF80  F00F         	goto	l2737
  2908   001EE4                     u1200:
  2909   001EE4                     
  2910                           ;dc_motor.c: 485:         mL->direction = 0;
  2911   001EE4  501C               	movf	trundleSquare@mL^0,w,c
  2912   001EE6  6ED9               	movwf	fsr2l,c
  2913   001EE8  6ADA               	clrf	fsr2h,c
  2914   001EEA  0E01               	movlw	1
  2915   001EEC  26D9               	addwf	fsr2l,f,c
  2916   001EEE  6ADF               	clrf	indf2,c
  2917                           
  2918                           ;dc_motor.c: 486:         mR->direction = 0;
  2919   001EF0  501D               	movf	trundleSquare@mR^0,w,c
  2920   001EF2  6ED9               	movwf	fsr2l,c
  2921   001EF4  6ADA               	clrf	fsr2h,c
  2922   001EF6  0E01               	movlw	1
  2923   001EF8  26D9               	addwf	fsr2l,f,c
  2924   001EFA  6ADF               	clrf	indf2,c
  2925                           
  2926                           ;dc_motor.c: 487:     }
  2927   001EFC  EF8E  F00F         	goto	l2739
  2928   001F00                     l2737:
  2929                           
  2930                           ;dc_motor.c: 489:         mL->direction = 1;
  2931   001F00  501C               	movf	trundleSquare@mL^0,w,c
  2932   001F02  6ED9               	movwf	fsr2l,c
  2933   001F04  6ADA               	clrf	fsr2h,c
  2934   001F06  0E01               	movlw	1
  2935   001F08  26D9               	addwf	fsr2l,f,c
  2936   001F0A  0E01               	movlw	1
  2937   001F0C  6EDF               	movwf	indf2,c
  2938                           
  2939                           ;dc_motor.c: 490:         mR->direction = 1;
  2940   001F0E  501D               	movf	trundleSquare@mR^0,w,c
  2941   001F10  6ED9               	movwf	fsr2l,c
  2942   001F12  6ADA               	clrf	fsr2h,c
  2943   001F14  0E01               	movlw	1
  2944   001F16  26D9               	addwf	fsr2l,f,c
  2945   001F18  0E01               	movlw	1
  2946   001F1A  6EDF               	movwf	indf2,c
  2947   001F1C                     l2739:
  2948                           
  2949                           ;dc_motor.c: 493:     for (int i=0; i<= 20; i++) {
  2950   001F1C  0E00               	movlw	0
  2951   001F1E  6E27               	movwf	(trundleSquare@i+1)^0,c
  2952   001F20  0E00               	movlw	0
  2953   001F22  6E26               	movwf	trundleSquare@i^0,c
  2954   001F24                     l2745:
  2955                           
  2956                           ;dc_motor.c: 494:         mL->power = i;
  2957   001F24  501C               	movf	trundleSquare@mL^0,w,c
  2958   001F26  6ED9               	movwf	fsr2l,c
  2959   001F28  6ADA               	clrf	fsr2h,c
  2960   001F2A  C026  FFDF         	movff	trundleSquare@i,indf2
  2961                           
  2962                           ;dc_motor.c: 495:         mR->power = i;
  2963   001F2E  501D               	movf	trundleSquare@mR^0,w,c
  2964   001F30  6ED9               	movwf	fsr2l,c
  2965   001F32  6ADA               	clrf	fsr2h,c
  2966   001F34  C026  FFDF         	movff	trundleSquare@i,indf2
  2967   001F38                     
  2968                           ;dc_motor.c: 496:         setMotorPWM(mL);
  2969   001F38  C01C  F010         	movff	trundleSquare@mL,setMotorPWM@m
  2970   001F3C  EC09  F00B         	call	_setMotorPWM	;wreg free
  2971   001F40                     
  2972                           ;dc_motor.c: 497:         setMotorPWM(mR);
  2973   001F40  C01D  F010         	movff	trundleSquare@mR,setMotorPWM@m
  2974   001F44  EC09  F00B         	call	_setMotorPWM	;wreg free
  2975   001F48                     
  2976                           ;dc_motor.c: 498:         _delay((unsigned long)((5)*(64000000/4000.0)));
  2977   001F48  0E68               	movlw	104
  2978   001F4A  6E20               	movwf	??_trundleSquare^0,c
  2979   001F4C  0EE4               	movlw	228
  2980   001F4E                     u2007:
  2981   001F4E  2EE8               	decfsz	wreg,f,c
  2982   001F50  D7FE               	bra	u2007
  2983   001F52  2E20               	decfsz	??_trundleSquare^0,f,c
  2984   001F54  D7FC               	bra	u2007
  2985   001F56  D000               	nop2	
  2986   001F58                     
  2987                           ;dc_motor.c: 499:     }
  2988   001F58  4A26               	infsnz	trundleSquare@i^0,f,c
  2989   001F5A  2A27               	incf	(trundleSquare@i+1)^0,f,c
  2990   001F5C  BE27               	btfsc	(trundleSquare@i+1)^0,7,c
  2991   001F5E  EFBA  F00F         	goto	u1211
  2992   001F62  5027               	movf	(trundleSquare@i+1)^0,w,c
  2993   001F64  E109               	bnz	u1210
  2994   001F66  0E15               	movlw	21
  2995   001F68  5C26               	subwf	trundleSquare@i^0,w,c
  2996   001F6A  A0D8               	btfss	status,0,c
  2997   001F6C  EFBA  F00F         	goto	u1211
  2998   001F70  EFBC  F00F         	goto	u1210
  2999   001F74                     u1211:
  3000   001F74  EF92  F00F         	goto	l2745
  3001   001F78                     u1210:
  3002   001F78                     
  3003                           ;dc_motor.c: 502:     char start_increment = increment;
  3004   001F78  C088  F025         	movff	_increment,trundleSquare@start_increment
  3005   001F7C                     l2757:
  3006   001F7C  501E               	movf	trundleSquare@square^0,w,c
  3007   001F7E  6E20               	movwf	??_trundleSquare^0,c
  3008   001F80  6A21               	clrf	(??_trundleSquare+1)^0,c
  3009   001F82  5025               	movf	trundleSquare@start_increment^0,w,c
  3010   001F84  0100               	movlb	0	; () banked
  3011   001F86  5D88               	subwf	_increment& (0+255),w,b
  3012   001F88  6E22               	movwf	(??_trundleSquare+2)^0,c
  3013   001F8A  0E00               	movlw	0
  3014   001F8C  5989               	subwfb	(_increment+1)& (0+255),w,b
  3015   001F8E  6E23               	movwf	(??_trundleSquare+3)^0,c
  3016   001F90  5020               	movf	??_trundleSquare^0,w,c
  3017   001F92  5C22               	subwf	(??_trundleSquare+2)^0,w,c
  3018   001F94  5023               	movf	(??_trundleSquare+3)^0,w,c
  3019   001F96  0A80               	xorlw	128
  3020   001F98  6E24               	movwf	(??_trundleSquare+4)^0,c
  3021   001F9A  5021               	movf	(??_trundleSquare+1)^0,w,c
  3022   001F9C  0A80               	xorlw	128
  3023   001F9E  5824               	subwfb	(??_trundleSquare+4)^0,w,c
  3024   001FA0  A0D8               	btfss	status,0,c
  3025   001FA2  EFD5  F00F         	goto	u1221
  3026   001FA6  EFD7  F00F         	goto	u1220
  3027   001FAA                     u1221:
  3028   001FAA  EFBE  F00F         	goto	l2757
  3029   001FAE                     u1220:
  3030   001FAE                     
  3031                           ; BSR set to: 0
  3032                           ;dc_motor.c: 504:     stop(mL, mR);
  3033   001FAE  C01C  F015         	movff	trundleSquare@mL,stop@mL
  3034   001FB2  C01D  F016         	movff	trundleSquare@mR,stop@mR
  3035   001FB6  EC1F  F013         	call	_stop	;wreg free
  3036   001FBA  0012               	return		;funcret
  3037   001FBC                     __end_of_trundleSquare:
  3038                           	callstack 0
  3039                           
  3040 ;; *************** function _Orange *****************
  3041 ;; Defined at:
  3042 ;;		line 76 in file "instructions.c"
  3043 ;; Parameters:    Size  Location     Type
  3044 ;;  mL              1   37[COMRAM] PTR struct DC_motor
  3045 ;;		 -> main@motorL(9), 
  3046 ;;  mR              1   38[COMRAM] PTR struct DC_motor
  3047 ;;		 -> main@motorR(9), 
  3048 ;; Auto vars:     Size  Location     Type
  3049 ;;		None
  3050 ;; Return value:  Size  Location     Type
  3051 ;;                  1    wreg      void 
  3052 ;; Registers used:
  3053 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3054 ;; Tracked objects:
  3055 ;;		On entry : 0/0
  3056 ;;		On exit  : 0/0
  3057 ;;		Unchanged: 0/0
  3058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3059 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3060 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3061 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3062 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3063 ;;Total ram usage:        2 bytes
  3064 ;; Hardware stack levels used: 1
  3065 ;; Hardware stack levels required when called: 8
  3066 ;; This function calls:
  3067 ;;		_turnRight135
  3068 ;; This function is called by:
  3069 ;;		_executeInstruction
  3070 ;; This function uses a non-reentrant model
  3071 ;;
  3072                           
  3073                           	psect	text16
  3074   002AEA                     __ptext16:
  3075                           	callstack 0
  3076   002AEA                     _Orange:
  3077                           	callstack 20
  3078   002AEA                     
  3079                           ;instructions.c: 77:     turnRight135(mL, mR);
  3080   002AEA  C026  F01C         	movff	Orange@mL,turnRight135@mL
  3081   002AEE  C027  F01D         	movff	Orange@mR,turnRight135@mR
  3082   002AF2  EC89  F00D         	call	_turnRight135	;wreg free
  3083   002AF6  0012               	return		;funcret
  3084   002AF8                     __end_of_Orange:
  3085                           	callstack 0
  3086                           
  3087 ;; *************** function _turnRight135 *****************
  3088 ;; Defined at:
  3089 ;;		line 318 in file "dc_motor.c"
  3090 ;; Parameters:    Size  Location     Type
  3091 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  3092 ;;		 -> main@motorL(9), 
  3093 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  3094 ;;		 -> main@motorR(9), 
  3095 ;; Auto vars:     Size  Location     Type
  3096 ;;  i               2   35[COMRAM] int 
  3097 ;;  i               2   33[COMRAM] int 
  3098 ;;  maxpower        2   31[COMRAM] int 
  3099 ;; Return value:  Size  Location     Type
  3100 ;;                  1    wreg      void 
  3101 ;; Registers used:
  3102 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3103 ;; Tracked objects:
  3104 ;;		On entry : 0/0
  3105 ;;		On exit  : 0/0
  3106 ;;		Unchanged: 0/0
  3107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3108 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3109 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3110 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3111 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3112 ;;Total ram usage:       10 bytes
  3113 ;; Hardware stack levels used: 1
  3114 ;; Hardware stack levels required when called: 7
  3115 ;; This function calls:
  3116 ;;		_setMotorPWM
  3117 ;;		_stop
  3118 ;; This function is called by:
  3119 ;;		_Orange
  3120 ;;		_reverseOrange
  3121 ;; This function uses a non-reentrant model
  3122 ;;
  3123                           
  3124                           	psect	text17
  3125   001B12                     __ptext17:
  3126                           	callstack 0
  3127   001B12                     _turnRight135:
  3128                           	callstack 20
  3129   001B12                     
  3130                           ;dc_motor.c: 318: void turnRight135(DC_motor *mL, DC_motor *mR);dc_motor.c: 319: {;dc_mo
      +                          tor.c: 321:     if (mL->power != 0 || mR->power != 0) {
  3131   001B12  501C               	movf	turnRight135@mL^0,w,c
  3132   001B14  6ED9               	movwf	fsr2l,c
  3133   001B16  6ADA               	clrf	fsr2h,c
  3134   001B18  50DF               	movf	indf2,w,c
  3135   001B1A  A4D8               	btfss	status,2,c
  3136   001B1C  EF92  F00D         	goto	u1231
  3137   001B20  EF94  F00D         	goto	u1230
  3138   001B24                     u1231:
  3139   001B24  EF9F  F00D         	goto	l2765
  3140   001B28                     u1230:
  3141   001B28  501D               	movf	turnRight135@mR^0,w,c
  3142   001B2A  6ED9               	movwf	fsr2l,c
  3143   001B2C  6ADA               	clrf	fsr2h,c
  3144   001B2E  50DF               	movf	indf2,w,c
  3145   001B30  B4D8               	btfsc	status,2,c
  3146   001B32  EF9D  F00D         	goto	u1241
  3147   001B36  EF9F  F00D         	goto	u1240
  3148   001B3A                     u1241:
  3149   001B3A  EFA5  F00D         	goto	l2767
  3150   001B3E                     u1240:
  3151   001B3E                     l2765:
  3152                           
  3153                           ;dc_motor.c: 322:         stop(mL, mR);
  3154   001B3E  C01C  F015         	movff	turnRight135@mL,stop@mL
  3155   001B42  C01D  F016         	movff	turnRight135@mR,stop@mR
  3156   001B46  EC1F  F013         	call	_stop	;wreg free
  3157   001B4A                     l2767:
  3158                           
  3159                           ;dc_motor.c: 326:     mL->direction = 1;
  3160   001B4A  501C               	movf	turnRight135@mL^0,w,c
  3161   001B4C  6ED9               	movwf	fsr2l,c
  3162   001B4E  6ADA               	clrf	fsr2h,c
  3163   001B50  0E01               	movlw	1
  3164   001B52  26D9               	addwf	fsr2l,f,c
  3165   001B54  0E01               	movlw	1
  3166   001B56  6EDF               	movwf	indf2,c
  3167   001B58                     
  3168                           ;dc_motor.c: 327:     mR->direction = 0;
  3169   001B58  501D               	movf	turnRight135@mR^0,w,c
  3170   001B5A  6ED9               	movwf	fsr2l,c
  3171   001B5C  6ADA               	clrf	fsr2h,c
  3172   001B5E  0E01               	movlw	1
  3173   001B60  26D9               	addwf	fsr2l,f,c
  3174   001B62  6ADF               	clrf	indf2,c
  3175   001B64                     
  3176                           ;dc_motor.c: 328:     int maxpower = 40;
  3177   001B64  0E00               	movlw	0
  3178   001B66  6E21               	movwf	(turnRight135@maxpower+1)^0,c
  3179   001B68  0E28               	movlw	40
  3180   001B6A  6E20               	movwf	turnRight135@maxpower^0,c
  3181   001B6C                     
  3182                           ;dc_motor.c: 331:     for (int i = 0; i < maxpower; i++) {
  3183   001B6C  0E00               	movlw	0
  3184   001B6E  6E23               	movwf	(turnRight135@i+1)^0,c
  3185   001B70  0E00               	movlw	0
  3186   001B72  6E22               	movwf	turnRight135@i^0,c
  3187   001B74  EFD8  F00D         	goto	l2785
  3188   001B78                     l2775:
  3189                           
  3190                           ;dc_motor.c: 332:         mL->power = i;
  3191   001B78  501C               	movf	turnRight135@mL^0,w,c
  3192   001B7A  6ED9               	movwf	fsr2l,c
  3193   001B7C  6ADA               	clrf	fsr2h,c
  3194   001B7E  C022  FFDF         	movff	turnRight135@i,indf2
  3195                           
  3196                           ;dc_motor.c: 333:         mR->power = i;
  3197   001B82  501D               	movf	turnRight135@mR^0,w,c
  3198   001B84  6ED9               	movwf	fsr2l,c
  3199   001B86  6ADA               	clrf	fsr2h,c
  3200   001B88  C022  FFDF         	movff	turnRight135@i,indf2
  3201   001B8C                     
  3202                           ;dc_motor.c: 334:         setMotorPWM(mL);
  3203   001B8C  C01C  F010         	movff	turnRight135@mL,setMotorPWM@m
  3204   001B90  EC09  F00B         	call	_setMotorPWM	;wreg free
  3205   001B94                     
  3206                           ;dc_motor.c: 335:         setMotorPWM(mR);
  3207   001B94  C01D  F010         	movff	turnRight135@mR,setMotorPWM@m
  3208   001B98  EC09  F00B         	call	_setMotorPWM	;wreg free
  3209   001B9C                     
  3210                           ;dc_motor.c: 336:         _delay((unsigned long)((5)*(64000000/4000.0)));
  3211   001B9C  0E68               	movlw	104
  3212   001B9E  6E1E               	movwf	??_turnRight135^0,c
  3213   001BA0  0EE4               	movlw	228
  3214   001BA2                     u2017:
  3215   001BA2  2EE8               	decfsz	wreg,f,c
  3216   001BA4  D7FE               	bra	u2017
  3217   001BA6  2E1E               	decfsz	??_turnRight135^0,f,c
  3218   001BA8  D7FC               	bra	u2017
  3219   001BAA  D000               	nop2	
  3220   001BAC                     
  3221                           ;dc_motor.c: 338:     }
  3222   001BAC  4A22               	infsnz	turnRight135@i^0,f,c
  3223   001BAE  2A23               	incf	(turnRight135@i+1)^0,f,c
  3224   001BB0                     l2785:
  3225   001BB0  5020               	movf	turnRight135@maxpower^0,w,c
  3226   001BB2  5C22               	subwf	turnRight135@i^0,w,c
  3227   001BB4  5023               	movf	(turnRight135@i+1)^0,w,c
  3228   001BB6  0A80               	xorlw	128
  3229   001BB8  6E1E               	movwf	??_turnRight135^0,c
  3230   001BBA  5021               	movf	(turnRight135@maxpower+1)^0,w,c
  3231   001BBC  0A80               	xorlw	128
  3232   001BBE  581E               	subwfb	??_turnRight135^0,w,c
  3233   001BC0  A0D8               	btfss	status,0,c
  3234   001BC2  EFE5  F00D         	goto	u1251
  3235   001BC6  EFE7  F00D         	goto	u1250
  3236   001BCA                     u1251:
  3237   001BCA  EFBC  F00D         	goto	l2775
  3238   001BCE                     u1250:
  3239   001BCE                     
  3240                           ;dc_motor.c: 340:     _delay((unsigned long)((410)*(64000000/4000.0)));
  3241   001BCE  0E22               	movlw	34
  3242   001BD0  6E1F               	movwf	(??_turnRight135+1)^0,c
  3243   001BD2  0E48               	movlw	72
  3244   001BD4  6E1E               	movwf	??_turnRight135^0,c
  3245   001BD6  0E62               	movlw	98
  3246   001BD8                     u2027:
  3247   001BD8  2EE8               	decfsz	wreg,f,c
  3248   001BDA  D7FE               	bra	u2027
  3249   001BDC  2E1E               	decfsz	??_turnRight135^0,f,c
  3250   001BDE  D7FC               	bra	u2027
  3251   001BE0  2E1F               	decfsz	(??_turnRight135+1)^0,f,c
  3252   001BE2  D7FA               	bra	u2027
  3253   001BE4  D000               	nop2	
  3254   001BE6                     
  3255                           ;dc_motor.c: 343:     for (int i = maxpower; i >= 0; i--) {
  3256   001BE6  C020  F024         	movff	turnRight135@maxpower,turnRight135@i_2144
  3257   001BEA  C021  F025         	movff	turnRight135@maxpower+1,turnRight135@i_2144+1
  3258   001BEE                     l2791:
  3259   001BEE  BE25               	btfsc	(turnRight135@i_2144+1)^0,7,c
  3260   001BF0  EFFE  F00D         	goto	u1260
  3261   001BF4  EFFC  F00D         	goto	u1261
  3262   001BF8                     u1261:
  3263   001BF8  EF00  F00E         	goto	l2795
  3264   001BFC                     u1260:
  3265   001BFC  EF1F  F00E         	goto	l578
  3266   001C00                     l2795:
  3267                           
  3268                           ;dc_motor.c: 344:         mL->power = i;
  3269   001C00  501C               	movf	turnRight135@mL^0,w,c
  3270   001C02  6ED9               	movwf	fsr2l,c
  3271   001C04  6ADA               	clrf	fsr2h,c
  3272   001C06  C024  FFDF         	movff	turnRight135@i_2144,indf2
  3273                           
  3274                           ;dc_motor.c: 345:         mR->power = i;
  3275   001C0A  501D               	movf	turnRight135@mR^0,w,c
  3276   001C0C  6ED9               	movwf	fsr2l,c
  3277   001C0E  6ADA               	clrf	fsr2h,c
  3278   001C10  C024  FFDF         	movff	turnRight135@i_2144,indf2
  3279   001C14                     
  3280                           ;dc_motor.c: 346:         setMotorPWM(mL);
  3281   001C14  C01C  F010         	movff	turnRight135@mL,setMotorPWM@m
  3282   001C18  EC09  F00B         	call	_setMotorPWM	;wreg free
  3283   001C1C                     
  3284                           ;dc_motor.c: 347:         setMotorPWM(mR);
  3285   001C1C  C01D  F010         	movff	turnRight135@mR,setMotorPWM@m
  3286   001C20  EC09  F00B         	call	_setMotorPWM	;wreg free
  3287   001C24                     
  3288                           ;dc_motor.c: 348:         _delay((unsigned long)((5)*(64000000/4000.0)));
  3289   001C24  0E68               	movlw	104
  3290   001C26  6E1E               	movwf	??_turnRight135^0,c
  3291   001C28  0EE4               	movlw	228
  3292   001C2A                     u2037:
  3293   001C2A  2EE8               	decfsz	wreg,f,c
  3294   001C2C  D7FE               	bra	u2037
  3295   001C2E  2E1E               	decfsz	??_turnRight135^0,f,c
  3296   001C30  D7FC               	bra	u2037
  3297   001C32  D000               	nop2	
  3298   001C34                     
  3299                           ;dc_motor.c: 350:     }
  3300   001C34  0624               	decf	turnRight135@i_2144^0,f,c
  3301   001C36  A0D8               	btfss	status,0,c
  3302   001C38  0625               	decf	(turnRight135@i_2144+1)^0,f,c
  3303   001C3A  EFF7  F00D         	goto	l2791
  3304   001C3E                     l578:
  3305   001C3E  0012               	return		;funcret
  3306   001C40                     __end_of_turnRight135:
  3307                           	callstack 0
  3308                           
  3309 ;; *************** function _LightBlue *****************
  3310 ;; Defined at:
  3311 ;;		line 80 in file "instructions.c"
  3312 ;; Parameters:    Size  Location     Type
  3313 ;;  mL              1   37[COMRAM] PTR struct DC_motor
  3314 ;;		 -> main@motorL(9), 
  3315 ;;  mR              1   38[COMRAM] PTR struct DC_motor
  3316 ;;		 -> main@motorR(9), 
  3317 ;; Auto vars:     Size  Location     Type
  3318 ;;		None
  3319 ;; Return value:  Size  Location     Type
  3320 ;;                  1    wreg      void 
  3321 ;; Registers used:
  3322 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3323 ;; Tracked objects:
  3324 ;;		On entry : 0/0
  3325 ;;		On exit  : 0/0
  3326 ;;		Unchanged: 0/0
  3327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3328 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3329 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3330 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3331 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3332 ;;Total ram usage:        2 bytes
  3333 ;; Hardware stack levels used: 1
  3334 ;; Hardware stack levels required when called: 8
  3335 ;; This function calls:
  3336 ;;		_turnLeft135
  3337 ;; This function is called by:
  3338 ;;		_executeInstruction
  3339 ;; This function uses a non-reentrant model
  3340 ;;
  3341                           
  3342                           	psect	text18
  3343   002AF8                     __ptext18:
  3344                           	callstack 0
  3345   002AF8                     _LightBlue:
  3346                           	callstack 20
  3347   002AF8                     
  3348                           ;instructions.c: 81:     turnLeft135(mL, mR);
  3349   002AF8  C026  F01C         	movff	LightBlue@mL,turnLeft135@mL
  3350   002AFC  C027  F01D         	movff	LightBlue@mR,turnLeft135@mR
  3351   002B00  EC20  F00E         	call	_turnLeft135	;wreg free
  3352   002B04  0012               	return		;funcret
  3353   002B06                     __end_of_LightBlue:
  3354                           	callstack 0
  3355                           
  3356 ;; *************** function _turnLeft135 *****************
  3357 ;; Defined at:
  3358 ;;		line 281 in file "dc_motor.c"
  3359 ;; Parameters:    Size  Location     Type
  3360 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  3361 ;;		 -> main@motorL(9), 
  3362 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  3363 ;;		 -> main@motorR(9), 
  3364 ;; Auto vars:     Size  Location     Type
  3365 ;;  i               2   35[COMRAM] int 
  3366 ;;  i               2   33[COMRAM] int 
  3367 ;;  maxpower        2   31[COMRAM] int 
  3368 ;; Return value:  Size  Location     Type
  3369 ;;                  1    wreg      void 
  3370 ;; Registers used:
  3371 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3372 ;; Tracked objects:
  3373 ;;		On entry : 0/0
  3374 ;;		On exit  : 0/0
  3375 ;;		Unchanged: 0/0
  3376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3377 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3378 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3379 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3380 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3381 ;;Total ram usage:       10 bytes
  3382 ;; Hardware stack levels used: 1
  3383 ;; Hardware stack levels required when called: 7
  3384 ;; This function calls:
  3385 ;;		_setMotorPWM
  3386 ;;		_stop
  3387 ;; This function is called by:
  3388 ;;		_LightBlue
  3389 ;;		_reverseLightBlue
  3390 ;; This function uses a non-reentrant model
  3391 ;;
  3392                           
  3393                           	psect	text19
  3394   001C40                     __ptext19:
  3395                           	callstack 0
  3396   001C40                     _turnLeft135:
  3397                           	callstack 20
  3398   001C40                     
  3399                           ;dc_motor.c: 281: void turnLeft135(DC_motor *mL, DC_motor *mR);dc_motor.c: 282: {;dc_mot
      +                          or.c: 284:     if (mL->power != 0 || mR->power != 0) {
  3400   001C40  501C               	movf	turnLeft135@mL^0,w,c
  3401   001C42  6ED9               	movwf	fsr2l,c
  3402   001C44  6ADA               	clrf	fsr2h,c
  3403   001C46  50DF               	movf	indf2,w,c
  3404   001C48  A4D8               	btfss	status,2,c
  3405   001C4A  EF29  F00E         	goto	u1271
  3406   001C4E  EF2B  F00E         	goto	u1270
  3407   001C52                     u1271:
  3408   001C52  EF36  F00E         	goto	l2811
  3409   001C56                     u1270:
  3410   001C56  501D               	movf	turnLeft135@mR^0,w,c
  3411   001C58  6ED9               	movwf	fsr2l,c
  3412   001C5A  6ADA               	clrf	fsr2h,c
  3413   001C5C  50DF               	movf	indf2,w,c
  3414   001C5E  B4D8               	btfsc	status,2,c
  3415   001C60  EF34  F00E         	goto	u1281
  3416   001C64  EF36  F00E         	goto	u1280
  3417   001C68                     u1281:
  3418   001C68  EF3C  F00E         	goto	l2813
  3419   001C6C                     u1280:
  3420   001C6C                     l2811:
  3421                           
  3422                           ;dc_motor.c: 285:         stop(mL, mR);
  3423   001C6C  C01C  F015         	movff	turnLeft135@mL,stop@mL
  3424   001C70  C01D  F016         	movff	turnLeft135@mR,stop@mR
  3425   001C74  EC1F  F013         	call	_stop	;wreg free
  3426   001C78                     l2813:
  3427                           
  3428                           ;dc_motor.c: 289:     mL->direction = 0;
  3429   001C78  501C               	movf	turnLeft135@mL^0,w,c
  3430   001C7A  6ED9               	movwf	fsr2l,c
  3431   001C7C  6ADA               	clrf	fsr2h,c
  3432   001C7E  0E01               	movlw	1
  3433   001C80  26D9               	addwf	fsr2l,f,c
  3434   001C82  6ADF               	clrf	indf2,c
  3435   001C84                     
  3436                           ;dc_motor.c: 290:     mR->direction = 1;
  3437   001C84  501D               	movf	turnLeft135@mR^0,w,c
  3438   001C86  6ED9               	movwf	fsr2l,c
  3439   001C88  6ADA               	clrf	fsr2h,c
  3440   001C8A  0E01               	movlw	1
  3441   001C8C  26D9               	addwf	fsr2l,f,c
  3442   001C8E  0E01               	movlw	1
  3443   001C90  6EDF               	movwf	indf2,c
  3444   001C92                     
  3445                           ;dc_motor.c: 291:     int maxpower = 40;
  3446   001C92  0E00               	movlw	0
  3447   001C94  6E21               	movwf	(turnLeft135@maxpower+1)^0,c
  3448   001C96  0E28               	movlw	40
  3449   001C98  6E20               	movwf	turnLeft135@maxpower^0,c
  3450   001C9A                     
  3451                           ;dc_motor.c: 294:     for (int i = 0; i < maxpower; i++) {
  3452   001C9A  0E00               	movlw	0
  3453   001C9C  6E23               	movwf	(turnLeft135@i+1)^0,c
  3454   001C9E  0E00               	movlw	0
  3455   001CA0  6E22               	movwf	turnLeft135@i^0,c
  3456   001CA2  EF6F  F00E         	goto	l2831
  3457   001CA6                     l2821:
  3458                           
  3459                           ;dc_motor.c: 295:         mL->power = i;
  3460   001CA6  501C               	movf	turnLeft135@mL^0,w,c
  3461   001CA8  6ED9               	movwf	fsr2l,c
  3462   001CAA  6ADA               	clrf	fsr2h,c
  3463   001CAC  C022  FFDF         	movff	turnLeft135@i,indf2
  3464                           
  3465                           ;dc_motor.c: 296:         mR->power = i;
  3466   001CB0  501D               	movf	turnLeft135@mR^0,w,c
  3467   001CB2  6ED9               	movwf	fsr2l,c
  3468   001CB4  6ADA               	clrf	fsr2h,c
  3469   001CB6  C022  FFDF         	movff	turnLeft135@i,indf2
  3470   001CBA                     
  3471                           ;dc_motor.c: 297:         setMotorPWM(mL);
  3472   001CBA  C01C  F010         	movff	turnLeft135@mL,setMotorPWM@m
  3473   001CBE  EC09  F00B         	call	_setMotorPWM	;wreg free
  3474   001CC2                     
  3475                           ;dc_motor.c: 298:         setMotorPWM(mR);
  3476   001CC2  C01D  F010         	movff	turnLeft135@mR,setMotorPWM@m
  3477   001CC6  EC09  F00B         	call	_setMotorPWM	;wreg free
  3478   001CCA                     
  3479                           ;dc_motor.c: 299:         _delay((unsigned long)((5)*(64000000/4000.0)));
  3480   001CCA  0E68               	movlw	104
  3481   001CCC  6E1E               	movwf	??_turnLeft135^0,c
  3482   001CCE  0EE4               	movlw	228
  3483   001CD0                     u2047:
  3484   001CD0  2EE8               	decfsz	wreg,f,c
  3485   001CD2  D7FE               	bra	u2047
  3486   001CD4  2E1E               	decfsz	??_turnLeft135^0,f,c
  3487   001CD6  D7FC               	bra	u2047
  3488   001CD8  D000               	nop2	
  3489   001CDA                     
  3490                           ;dc_motor.c: 301:     }
  3491   001CDA  4A22               	infsnz	turnLeft135@i^0,f,c
  3492   001CDC  2A23               	incf	(turnLeft135@i+1)^0,f,c
  3493   001CDE                     l2831:
  3494   001CDE  5020               	movf	turnLeft135@maxpower^0,w,c
  3495   001CE0  5C22               	subwf	turnLeft135@i^0,w,c
  3496   001CE2  5023               	movf	(turnLeft135@i+1)^0,w,c
  3497   001CE4  0A80               	xorlw	128
  3498   001CE6  6E1E               	movwf	??_turnLeft135^0,c
  3499   001CE8  5021               	movf	(turnLeft135@maxpower+1)^0,w,c
  3500   001CEA  0A80               	xorlw	128
  3501   001CEC  581E               	subwfb	??_turnLeft135^0,w,c
  3502   001CEE  A0D8               	btfss	status,0,c
  3503   001CF0  EF7C  F00E         	goto	u1291
  3504   001CF4  EF7E  F00E         	goto	u1290
  3505   001CF8                     u1291:
  3506   001CF8  EF53  F00E         	goto	l2821
  3507   001CFC                     u1290:
  3508   001CFC                     
  3509                           ;dc_motor.c: 303:     _delay((unsigned long)((410)*(64000000/4000.0)));
  3510   001CFC  0E22               	movlw	34
  3511   001CFE  6E1F               	movwf	(??_turnLeft135+1)^0,c
  3512   001D00  0E48               	movlw	72
  3513   001D02  6E1E               	movwf	??_turnLeft135^0,c
  3514   001D04  0E62               	movlw	98
  3515   001D06                     u2057:
  3516   001D06  2EE8               	decfsz	wreg,f,c
  3517   001D08  D7FE               	bra	u2057
  3518   001D0A  2E1E               	decfsz	??_turnLeft135^0,f,c
  3519   001D0C  D7FC               	bra	u2057
  3520   001D0E  2E1F               	decfsz	(??_turnLeft135+1)^0,f,c
  3521   001D10  D7FA               	bra	u2057
  3522   001D12  D000               	nop2	
  3523   001D14                     
  3524                           ;dc_motor.c: 306:     for (int i = maxpower; i >= 0; i--) {
  3525   001D14  C020  F024         	movff	turnLeft135@maxpower,turnLeft135@i_2126
  3526   001D18  C021  F025         	movff	turnLeft135@maxpower+1,turnLeft135@i_2126+1
  3527   001D1C                     l2837:
  3528   001D1C  BE25               	btfsc	(turnLeft135@i_2126+1)^0,7,c
  3529   001D1E  EF95  F00E         	goto	u1300
  3530   001D22  EF93  F00E         	goto	u1301
  3531   001D26                     u1301:
  3532   001D26  EF97  F00E         	goto	l2841
  3533   001D2A                     u1300:
  3534   001D2A  EFB6  F00E         	goto	l567
  3535   001D2E                     l2841:
  3536                           
  3537                           ;dc_motor.c: 307:         mL->power = i;
  3538   001D2E  501C               	movf	turnLeft135@mL^0,w,c
  3539   001D30  6ED9               	movwf	fsr2l,c
  3540   001D32  6ADA               	clrf	fsr2h,c
  3541   001D34  C024  FFDF         	movff	turnLeft135@i_2126,indf2
  3542                           
  3543                           ;dc_motor.c: 308:         mR->power = i;
  3544   001D38  501D               	movf	turnLeft135@mR^0,w,c
  3545   001D3A  6ED9               	movwf	fsr2l,c
  3546   001D3C  6ADA               	clrf	fsr2h,c
  3547   001D3E  C024  FFDF         	movff	turnLeft135@i_2126,indf2
  3548   001D42                     
  3549                           ;dc_motor.c: 309:         setMotorPWM(mL);
  3550   001D42  C01C  F010         	movff	turnLeft135@mL,setMotorPWM@m
  3551   001D46  EC09  F00B         	call	_setMotorPWM	;wreg free
  3552   001D4A                     
  3553                           ;dc_motor.c: 310:         setMotorPWM(mR);
  3554   001D4A  C01D  F010         	movff	turnLeft135@mR,setMotorPWM@m
  3555   001D4E  EC09  F00B         	call	_setMotorPWM	;wreg free
  3556   001D52                     
  3557                           ;dc_motor.c: 311:         _delay((unsigned long)((5)*(64000000/4000.0)));
  3558   001D52  0E68               	movlw	104
  3559   001D54  6E1E               	movwf	??_turnLeft135^0,c
  3560   001D56  0EE4               	movlw	228
  3561   001D58                     u2067:
  3562   001D58  2EE8               	decfsz	wreg,f,c
  3563   001D5A  D7FE               	bra	u2067
  3564   001D5C  2E1E               	decfsz	??_turnLeft135^0,f,c
  3565   001D5E  D7FC               	bra	u2067
  3566   001D60  D000               	nop2	
  3567   001D62                     
  3568                           ;dc_motor.c: 313:     }
  3569   001D62  0624               	decf	turnLeft135@i_2126^0,f,c
  3570   001D64  A0D8               	btfss	status,0,c
  3571   001D66  0625               	decf	(turnLeft135@i_2126+1)^0,f,c
  3572   001D68  EF8E  F00E         	goto	l2837
  3573   001D6C                     l567:
  3574   001D6C  0012               	return		;funcret
  3575   001D6E                     __end_of_turnLeft135:
  3576                           	callstack 0
  3577                           
  3578 ;; *************** function _Green *****************
  3579 ;; Defined at:
  3580 ;;		line 57 in file "instructions.c"
  3581 ;; Parameters:    Size  Location     Type
  3582 ;;  mL              1   38[COMRAM] PTR struct DC_motor
  3583 ;;		 -> main@motorL(9), 
  3584 ;;  mR              1   39[COMRAM] PTR struct DC_motor
  3585 ;;		 -> main@motorR(9), 
  3586 ;; Auto vars:     Size  Location     Type
  3587 ;;		None
  3588 ;; Return value:  Size  Location     Type
  3589 ;;                  1    wreg      void 
  3590 ;; Registers used:
  3591 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3592 ;; Tracked objects:
  3593 ;;		On entry : 0/0
  3594 ;;		On exit  : 0/0
  3595 ;;		Unchanged: 0/0
  3596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3597 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3598 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3599 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3600 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3601 ;;Total ram usage:        2 bytes
  3602 ;; Hardware stack levels used: 1
  3603 ;; Hardware stack levels required when called: 8
  3604 ;; This function calls:
  3605 ;;		_turnLeft
  3606 ;; This function is called by:
  3607 ;;		_executeInstruction
  3608 ;; This function uses a non-reentrant model
  3609 ;;
  3610                           
  3611                           	psect	text20
  3612   002ABC                     __ptext20:
  3613                           	callstack 0
  3614   002ABC                     _Green:
  3615                           	callstack 20
  3616   002ABC                     
  3617                           ;instructions.c: 58:     turnLeft(mL, mR, turnLeftPower);
  3618   002ABC  C027  F01C         	movff	Green@mL,turnLeft@mL
  3619   002AC0  C028  F01D         	movff	Green@mR,turnLeft@mR
  3620   002AC4  C04B  F01E         	movff	_turnLeftPower,turnLeft@power
  3621   002AC8  ECEF  F00C         	call	_turnLeft	;wreg free
  3622   002ACC  0012               	return		;funcret
  3623   002ACE                     __end_of_Green:
  3624                           	callstack 0
  3625                           
  3626 ;; *************** function _Blue *****************
  3627 ;; Defined at:
  3628 ;;		line 61 in file "instructions.c"
  3629 ;; Parameters:    Size  Location     Type
  3630 ;;  mL              1   37[COMRAM] PTR struct DC_motor
  3631 ;;		 -> main@motorL(9), 
  3632 ;;  mR              1   38[COMRAM] PTR struct DC_motor
  3633 ;;		 -> main@motorR(9), 
  3634 ;; Auto vars:     Size  Location     Type
  3635 ;;		None
  3636 ;; Return value:  Size  Location     Type
  3637 ;;                  1    wreg      void 
  3638 ;; Registers used:
  3639 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3640 ;; Tracked objects:
  3641 ;;		On entry : 0/0
  3642 ;;		On exit  : 0/0
  3643 ;;		Unchanged: 0/0
  3644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3645 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3646 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3647 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3648 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3649 ;;Total ram usage:        2 bytes
  3650 ;; Hardware stack levels used: 1
  3651 ;; Hardware stack levels required when called: 8
  3652 ;; This function calls:
  3653 ;;		_turn180
  3654 ;; This function is called by:
  3655 ;;		_executeInstruction
  3656 ;; This function uses a non-reentrant model
  3657 ;;
  3658                           
  3659                           	psect	text21
  3660   002B06                     __ptext21:
  3661                           	callstack 0
  3662   002B06                     _Blue:
  3663                           	callstack 20
  3664   002B06                     
  3665                           ;instructions.c: 62:     turn180(mL, mR);
  3666   002B06  C026  F01C         	movff	Blue@mL,turn180@mL
  3667   002B0A  C027  F01D         	movff	Blue@mR,turn180@mR
  3668   002B0E  ECB7  F00E         	call	_turn180	;wreg free
  3669   002B12  0012               	return		;funcret
  3670   002B14                     __end_of_Blue:
  3671                           	callstack 0
  3672                           
  3673 ;; *************** function _turn180 *****************
  3674 ;; Defined at:
  3675 ;;		line 244 in file "dc_motor.c"
  3676 ;; Parameters:    Size  Location     Type
  3677 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  3678 ;;		 -> main@motorL(9), 
  3679 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  3680 ;;		 -> main@motorR(9), 
  3681 ;; Auto vars:     Size  Location     Type
  3682 ;;  i               2   35[COMRAM] int 
  3683 ;;  i               2   33[COMRAM] int 
  3684 ;;  maxpower        2   31[COMRAM] int 
  3685 ;; Return value:  Size  Location     Type
  3686 ;;                  1    wreg      void 
  3687 ;; Registers used:
  3688 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3689 ;; Tracked objects:
  3690 ;;		On entry : 0/0
  3691 ;;		On exit  : 0/0
  3692 ;;		Unchanged: 0/0
  3693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3694 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3695 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3696 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3697 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3698 ;;Total ram usage:       10 bytes
  3699 ;; Hardware stack levels used: 1
  3700 ;; Hardware stack levels required when called: 7
  3701 ;; This function calls:
  3702 ;;		_setMotorPWM
  3703 ;;		_stop
  3704 ;; This function is called by:
  3705 ;;		_Blue
  3706 ;;		_reverseYellow
  3707 ;;		_reversePink
  3708 ;;		_reverseRoute
  3709 ;; This function uses a non-reentrant model
  3710 ;;
  3711                           
  3712                           	psect	text22
  3713   001D6E                     __ptext22:
  3714                           	callstack 0
  3715   001D6E                     _turn180:
  3716                           	callstack 22
  3717   001D6E                     
  3718                           ;dc_motor.c: 244: void turn180(DC_motor *mL, DC_motor *mR);dc_motor.c: 245: {;dc_motor.c
      +                          : 247:     if (mL->power != 0 || mR->power != 0) {
  3719   001D6E  501C               	movf	turn180@mL^0,w,c
  3720   001D70  6ED9               	movwf	fsr2l,c
  3721   001D72  6ADA               	clrf	fsr2h,c
  3722   001D74  50DF               	movf	indf2,w,c
  3723   001D76  A4D8               	btfss	status,2,c
  3724   001D78  EFC0  F00E         	goto	u1141
  3725   001D7C  EFC2  F00E         	goto	u1140
  3726   001D80                     u1141:
  3727   001D80  EFCD  F00E         	goto	l2685
  3728   001D84                     u1140:
  3729   001D84  501D               	movf	turn180@mR^0,w,c
  3730   001D86  6ED9               	movwf	fsr2l,c
  3731   001D88  6ADA               	clrf	fsr2h,c
  3732   001D8A  50DF               	movf	indf2,w,c
  3733   001D8C  B4D8               	btfsc	status,2,c
  3734   001D8E  EFCB  F00E         	goto	u1151
  3735   001D92  EFCD  F00E         	goto	u1150
  3736   001D96                     u1151:
  3737   001D96  EFD3  F00E         	goto	l2687
  3738   001D9A                     u1150:
  3739   001D9A                     l2685:
  3740                           
  3741                           ;dc_motor.c: 248:         stop(mL, mR);
  3742   001D9A  C01C  F015         	movff	turn180@mL,stop@mL
  3743   001D9E  C01D  F016         	movff	turn180@mR,stop@mR
  3744   001DA2  EC1F  F013         	call	_stop	;wreg free
  3745   001DA6                     l2687:
  3746                           
  3747                           ;dc_motor.c: 252:     mL->direction = 0;
  3748   001DA6  501C               	movf	turn180@mL^0,w,c
  3749   001DA8  6ED9               	movwf	fsr2l,c
  3750   001DAA  6ADA               	clrf	fsr2h,c
  3751   001DAC  0E01               	movlw	1
  3752   001DAE  26D9               	addwf	fsr2l,f,c
  3753   001DB0  6ADF               	clrf	indf2,c
  3754   001DB2                     
  3755                           ;dc_motor.c: 253:     mR->direction = 1;
  3756   001DB2  501D               	movf	turn180@mR^0,w,c
  3757   001DB4  6ED9               	movwf	fsr2l,c
  3758   001DB6  6ADA               	clrf	fsr2h,c
  3759   001DB8  0E01               	movlw	1
  3760   001DBA  26D9               	addwf	fsr2l,f,c
  3761   001DBC  0E01               	movlw	1
  3762   001DBE  6EDF               	movwf	indf2,c
  3763   001DC0                     
  3764                           ;dc_motor.c: 254:     int maxpower = 40;
  3765   001DC0  0E00               	movlw	0
  3766   001DC2  6E21               	movwf	(turn180@maxpower+1)^0,c
  3767   001DC4  0E28               	movlw	40
  3768   001DC6  6E20               	movwf	turn180@maxpower^0,c
  3769   001DC8                     
  3770                           ;dc_motor.c: 257:     for (int i = 0; i < maxpower; i++) {
  3771   001DC8  0E00               	movlw	0
  3772   001DCA  6E23               	movwf	(turn180@i+1)^0,c
  3773   001DCC  0E00               	movlw	0
  3774   001DCE  6E22               	movwf	turn180@i^0,c
  3775   001DD0  EF06  F00F         	goto	l2705
  3776   001DD4                     l2695:
  3777                           
  3778                           ;dc_motor.c: 258:         mL->power = i;
  3779   001DD4  501C               	movf	turn180@mL^0,w,c
  3780   001DD6  6ED9               	movwf	fsr2l,c
  3781   001DD8  6ADA               	clrf	fsr2h,c
  3782   001DDA  C022  FFDF         	movff	turn180@i,indf2
  3783                           
  3784                           ;dc_motor.c: 259:         mR->power = i;
  3785   001DDE  501D               	movf	turn180@mR^0,w,c
  3786   001DE0  6ED9               	movwf	fsr2l,c
  3787   001DE2  6ADA               	clrf	fsr2h,c
  3788   001DE4  C022  FFDF         	movff	turn180@i,indf2
  3789   001DE8                     
  3790                           ;dc_motor.c: 260:         setMotorPWM(mL);
  3791   001DE8  C01C  F010         	movff	turn180@mL,setMotorPWM@m
  3792   001DEC  EC09  F00B         	call	_setMotorPWM	;wreg free
  3793   001DF0                     
  3794                           ;dc_motor.c: 261:         setMotorPWM(mR);
  3795   001DF0  C01D  F010         	movff	turn180@mR,setMotorPWM@m
  3796   001DF4  EC09  F00B         	call	_setMotorPWM	;wreg free
  3797   001DF8                     
  3798                           ;dc_motor.c: 262:         _delay((unsigned long)((5)*(64000000/4000.0)));
  3799   001DF8  0E68               	movlw	104
  3800   001DFA  6E1E               	movwf	??_turn180^0,c
  3801   001DFC  0EE4               	movlw	228
  3802   001DFE                     u2077:
  3803   001DFE  2EE8               	decfsz	wreg,f,c
  3804   001E00  D7FE               	bra	u2077
  3805   001E02  2E1E               	decfsz	??_turn180^0,f,c
  3806   001E04  D7FC               	bra	u2077
  3807   001E06  D000               	nop2	
  3808   001E08                     
  3809                           ;dc_motor.c: 264:     }
  3810   001E08  4A22               	infsnz	turn180@i^0,f,c
  3811   001E0A  2A23               	incf	(turn180@i+1)^0,f,c
  3812   001E0C                     l2705:
  3813   001E0C  5020               	movf	turn180@maxpower^0,w,c
  3814   001E0E  5C22               	subwf	turn180@i^0,w,c
  3815   001E10  5023               	movf	(turn180@i+1)^0,w,c
  3816   001E12  0A80               	xorlw	128
  3817   001E14  6E1E               	movwf	??_turn180^0,c
  3818   001E16  5021               	movf	(turn180@maxpower+1)^0,w,c
  3819   001E18  0A80               	xorlw	128
  3820   001E1A  581E               	subwfb	??_turn180^0,w,c
  3821   001E1C  A0D8               	btfss	status,0,c
  3822   001E1E  EF13  F00F         	goto	u1161
  3823   001E22  EF15  F00F         	goto	u1160
  3824   001E26                     u1161:
  3825   001E26  EFEA  F00E         	goto	l2695
  3826   001E2A                     u1160:
  3827   001E2A                     
  3828                           ;dc_motor.c: 266:     _delay((unsigned long)((500)*(64000000/4000.0)));
  3829   001E2A  0E29               	movlw	41
  3830   001E2C  6E1F               	movwf	(??_turn180+1)^0,c
  3831   001E2E  0E96               	movlw	150
  3832   001E30  6E1E               	movwf	??_turn180^0,c
  3833   001E32  0E7F               	movlw	127
  3834   001E34                     u2087:
  3835   001E34  2EE8               	decfsz	wreg,f,c
  3836   001E36  D7FE               	bra	u2087
  3837   001E38  2E1E               	decfsz	??_turn180^0,f,c
  3838   001E3A  D7FC               	bra	u2087
  3839   001E3C  2E1F               	decfsz	(??_turn180+1)^0,f,c
  3840   001E3E  D7FA               	bra	u2087
  3841   001E40  0000               	nop	
  3842   001E42                     
  3843                           ;dc_motor.c: 269:     for (int i = maxpower; i >= 0; i--) {
  3844   001E42  C020  F024         	movff	turn180@maxpower,turn180@i_2108
  3845   001E46  C021  F025         	movff	turn180@maxpower+1,turn180@i_2108+1
  3846   001E4A                     l2711:
  3847   001E4A  BE25               	btfsc	(turn180@i_2108+1)^0,7,c
  3848   001E4C  EF2C  F00F         	goto	u1170
  3849   001E50  EF2A  F00F         	goto	u1171
  3850   001E54                     u1171:
  3851   001E54  EF2E  F00F         	goto	l2715
  3852   001E58                     u1170:
  3853   001E58  EF4D  F00F         	goto	l556
  3854   001E5C                     l2715:
  3855                           
  3856                           ;dc_motor.c: 270:         mL->power = i;
  3857   001E5C  501C               	movf	turn180@mL^0,w,c
  3858   001E5E  6ED9               	movwf	fsr2l,c
  3859   001E60  6ADA               	clrf	fsr2h,c
  3860   001E62  C024  FFDF         	movff	turn180@i_2108,indf2
  3861                           
  3862                           ;dc_motor.c: 271:         mR->power = i;
  3863   001E66  501D               	movf	turn180@mR^0,w,c
  3864   001E68  6ED9               	movwf	fsr2l,c
  3865   001E6A  6ADA               	clrf	fsr2h,c
  3866   001E6C  C024  FFDF         	movff	turn180@i_2108,indf2
  3867   001E70                     
  3868                           ;dc_motor.c: 272:         setMotorPWM(mL);
  3869   001E70  C01C  F010         	movff	turn180@mL,setMotorPWM@m
  3870   001E74  EC09  F00B         	call	_setMotorPWM	;wreg free
  3871   001E78                     
  3872                           ;dc_motor.c: 273:         setMotorPWM(mR);
  3873   001E78  C01D  F010         	movff	turn180@mR,setMotorPWM@m
  3874   001E7C  EC09  F00B         	call	_setMotorPWM	;wreg free
  3875   001E80                     
  3876                           ;dc_motor.c: 274:         _delay((unsigned long)((5)*(64000000/4000.0)));
  3877   001E80  0E68               	movlw	104
  3878   001E82  6E1E               	movwf	??_turn180^0,c
  3879   001E84  0EE4               	movlw	228
  3880   001E86                     u2097:
  3881   001E86  2EE8               	decfsz	wreg,f,c
  3882   001E88  D7FE               	bra	u2097
  3883   001E8A  2E1E               	decfsz	??_turn180^0,f,c
  3884   001E8C  D7FC               	bra	u2097
  3885   001E8E  D000               	nop2	
  3886   001E90                     
  3887                           ;dc_motor.c: 276:     }
  3888   001E90  0624               	decf	turn180@i_2108^0,f,c
  3889   001E92  A0D8               	btfss	status,0,c
  3890   001E94  0625               	decf	(turn180@i_2108+1)^0,f,c
  3891   001E96  EF25  F00F         	goto	l2711
  3892   001E9A                     l556:
  3893   001E9A  0012               	return		;funcret
  3894   001E9C                     __end_of_turn180:
  3895                           	callstack 0
  3896                           
  3897 ;; *************** function _Black *****************
  3898 ;; Defined at:
  3899 ;;		line 88 in file "instructions.c"
  3900 ;; Parameters:    Size  Location     Type
  3901 ;;  mL              1    2[COMRAM] PTR struct DC_motor
  3902 ;;		 -> main@motorL(9), 
  3903 ;;  mR              1    3[COMRAM] PTR struct DC_motor
  3904 ;;		 -> main@motorR(9), 
  3905 ;; Auto vars:     Size  Location     Type
  3906 ;;		None
  3907 ;; Return value:  Size  Location     Type
  3908 ;;                  1    wreg      void 
  3909 ;; Registers used:
  3910 ;;		None
  3911 ;; Tracked objects:
  3912 ;;		On entry : 0/0
  3913 ;;		On exit  : 0/0
  3914 ;;		Unchanged: 0/0
  3915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3916 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3917 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3918 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3919 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3920 ;;Total ram usage:        2 bytes
  3921 ;; Hardware stack levels used: 1
  3922 ;; Hardware stack levels required when called: 4
  3923 ;; This function calls:
  3924 ;;		Nothing
  3925 ;; This function is called by:
  3926 ;;		_executeInstruction
  3927 ;; This function uses a non-reentrant model
  3928 ;;
  3929                           
  3930                           	psect	text23
  3931   002B9C                     __ptext23:
  3932                           	callstack 0
  3933   002B9C                     _Black:
  3934                           	callstack 24
  3935   002B9C  0012               	return		;funcret
  3936   002B9E                     __end_of_Black:
  3937                           	callstack 0
  3938                           
  3939 ;; *************** function _leftCali *****************
  3940 ;; Defined at:
  3941 ;;		line 96 in file "dc_motor.c"
  3942 ;; Parameters:    Size  Location     Type
  3943 ;;  mL              1   38[COMRAM] PTR struct DC_motor
  3944 ;;		 -> main@motorL(9), 
  3945 ;;  mR              1   39[COMRAM] PTR struct DC_motor
  3946 ;;		 -> main@motorR(9), 
  3947 ;; Auto vars:     Size  Location     Type
  3948 ;;  power           1   42[COMRAM] unsigned char 
  3949 ;; Return value:  Size  Location     Type
  3950 ;;                  1    wreg      unsigned char 
  3951 ;; Registers used:
  3952 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3953 ;; Tracked objects:
  3954 ;;		On entry : 0/0
  3955 ;;		On exit  : 0/0
  3956 ;;		Unchanged: 0/0
  3957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3958 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3959 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3960 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3961 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3962 ;;Total ram usage:        5 bytes
  3963 ;; Hardware stack levels used: 1
  3964 ;; Hardware stack levels required when called: 8
  3965 ;; This function calls:
  3966 ;;		_turnLeft
  3967 ;; This function is called by:
  3968 ;;		_main
  3969 ;; This function uses a non-reentrant model
  3970 ;;
  3971                           
  3972                           	psect	text24
  3973   00236A                     __ptext24:
  3974                           	callstack 0
  3975   00236A                     _leftCali:
  3976                           	callstack 22
  3977   00236A                     l485:
  3978   00236A  B48E               	btfsc	142,2,c	;volatile
  3979   00236C  EFBA  F011         	goto	u1551
  3980   002370  EFBC  F011         	goto	u1550
  3981   002374                     u1551:
  3982   002374  EFB5  F011         	goto	l485
  3983   002378                     u1550:
  3984   002378                     
  3985                           ;dc_motor.c: 98:     char power = 26;
  3986   002378  0E1A               	movlw	26
  3987   00237A  6E2B               	movwf	leftCali@power^0,c
  3988                           
  3989                           ;dc_motor.c: 99:     while (PORTFbits.RF2 || PORTFbits.RF3) {
  3990   00237C  EF08  F012         	goto	l3253
  3991   002380                     l3235:
  3992                           
  3993                           ;dc_motor.c: 100:         _delay((unsigned long)((1000)*(64000000/4000.0)));
  3994   002380  0E52               	movlw	82
  3995   002382  6E2A               	movwf	(??_leftCali+1)^0,c
  3996   002384  0E2B               	movlw	43
  3997   002386  6E29               	movwf	??_leftCali^0,c
  3998   002388  0E00               	movlw	0
  3999   00238A                     u2107:
  4000   00238A  2EE8               	decfsz	wreg,f,c
  4001   00238C  D7FE               	bra	u2107
  4002   00238E  2E29               	decfsz	??_leftCali^0,f,c
  4003   002390  D7FC               	bra	u2107
  4004   002392  2E2A               	decfsz	(??_leftCali+1)^0,f,c
  4005   002394  D7FA               	bra	u2107
  4006   002396  D000               	nop2	
  4007   002398                     
  4008                           ;dc_motor.c: 101:         turnLeft(mL,mR,power);
  4009   002398  C027  F01C         	movff	leftCali@mL,turnLeft@mL
  4010   00239C  C028  F01D         	movff	leftCali@mR,turnLeft@mR
  4011   0023A0  C02B  F01E         	movff	leftCali@power,turnLeft@power
  4012   0023A4  ECEF  F00C         	call	_turnLeft	;wreg free
  4013   0023A8                     l490:
  4014   0023A8  A48E               	btfss	142,2,c	;volatile
  4015   0023AA  EFD9  F011         	goto	u1561
  4016   0023AE  EFDB  F011         	goto	u1560
  4017   0023B2                     u1561:
  4018   0023B2  EFE2  F011         	goto	l3241
  4019   0023B6                     u1560:
  4020   0023B6  B68E               	btfsc	142,3,c	;volatile
  4021   0023B8  EFE0  F011         	goto	u1571
  4022   0023BC  EFE2  F011         	goto	u1570
  4023   0023C0                     u1571:
  4024   0023C0  EFD4  F011         	goto	l490
  4025   0023C4                     u1570:
  4026   0023C4                     l3241:
  4027                           
  4028                           ;dc_motor.c: 104:         _delay((unsigned long)((80)*(64000000/4000.0)));
  4029   0023C4  0E07               	movlw	7
  4030   0023C6  6E2A               	movwf	(??_leftCali+1)^0,c
  4031   0023C8  0E7F               	movlw	127
  4032   0023CA  6E29               	movwf	??_leftCali^0,c
  4033   0023CC  0E50               	movlw	80
  4034   0023CE                     u2117:
  4035   0023CE  2EE8               	decfsz	wreg,f,c
  4036   0023D0  D7FE               	bra	u2117
  4037   0023D2  2E29               	decfsz	??_leftCali^0,f,c
  4038   0023D4  D7FC               	bra	u2117
  4039   0023D6  2E2A               	decfsz	(??_leftCali+1)^0,f,c
  4040   0023D8  D7FA               	bra	u2117
  4041   0023DA                     
  4042                           ;dc_motor.c: 105:         if(!PORTFbits.RF2 && !PORTFbits.RF3) {
  4043   0023DA  B48E               	btfsc	142,2,c	;volatile
  4044   0023DC  EFF2  F011         	goto	u1581
  4045   0023E0  EFF4  F011         	goto	u1580
  4046   0023E4                     u1581:
  4047   0023E4  EFFD  F011         	goto	l495
  4048   0023E8                     u1580:
  4049   0023E8  B68E               	btfsc	142,3,c	;volatile
  4050   0023EA  EFF9  F011         	goto	u1591
  4051   0023EE  EFFB  F011         	goto	u1590
  4052   0023F2                     u1591:
  4053   0023F2  EFFD  F011         	goto	l495
  4054   0023F6                     u1590:
  4055   0023F6  EF08  F012         	goto	l3253
  4056   0023FA                     l495:
  4057                           
  4058                           ;dc_motor.c: 107:             if(!PORTFbits.RF2){
  4059   0023FA  B48E               	btfsc	142,2,c	;volatile
  4060   0023FC  EF02  F012         	goto	u1601
  4061   002400  EF04  F012         	goto	u1600
  4062   002404                     u1601:
  4063   002404  EF07  F012         	goto	l3251
  4064   002408                     u1600:
  4065   002408                     
  4066                           ;dc_motor.c: 108:                 power--;
  4067   002408  062B               	decf	leftCali@power^0,f,c
  4068                           
  4069                           ;dc_motor.c: 109:             }
  4070   00240A  EF08  F012         	goto	l3253
  4071   00240E                     l3251:
  4072                           
  4073                           ;dc_motor.c: 111:                 power++;
  4074   00240E  2A2B               	incf	leftCali@power^0,f,c
  4075   002410                     l3253:
  4076                           
  4077                           ;dc_motor.c: 99:     while (PORTFbits.RF2 || PORTFbits.RF3) {
  4078   002410  B48E               	btfsc	142,2,c	;volatile
  4079   002412  EF0D  F012         	goto	u1611
  4080   002416  EF0F  F012         	goto	u1610
  4081   00241A                     u1611:
  4082   00241A  EFC0  F011         	goto	l3235
  4083   00241E                     u1610:
  4084   00241E  B68E               	btfsc	142,3,c	;volatile
  4085   002420  EF14  F012         	goto	u1621
  4086   002424  EF16  F012         	goto	u1620
  4087   002428                     u1621:
  4088   002428  EFC0  F011         	goto	l3235
  4089   00242C                     u1620:
  4090   00242C                     
  4091                           ;dc_motor.c: 115:     return power;
  4092   00242C  502B               	movf	leftCali@power^0,w,c
  4093   00242E  0012               	return		;funcret
  4094   002430                     __end_of_leftCali:
  4095                           	callstack 0
  4096                           
  4097 ;; *************** function _turnLeft *****************
  4098 ;; Defined at:
  4099 ;;		line 156 in file "dc_motor.c"
  4100 ;; Parameters:    Size  Location     Type
  4101 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  4102 ;;		 -> main@motorL(9), 
  4103 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  4104 ;;		 -> main@motorR(9), 
  4105 ;;  power           1   29[COMRAM] unsigned char 
  4106 ;; Auto vars:     Size  Location     Type
  4107 ;;  i               2   36[COMRAM] int 
  4108 ;;  i               2   34[COMRAM] int 
  4109 ;;  maxpower        2   32[COMRAM] int 
  4110 ;; Return value:  Size  Location     Type
  4111 ;;                  1    wreg      void 
  4112 ;; Registers used:
  4113 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4114 ;; Tracked objects:
  4115 ;;		On entry : 0/0
  4116 ;;		On exit  : 0/0
  4117 ;;		Unchanged: 0/0
  4118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4119 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4120 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4121 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4122 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4123 ;;Total ram usage:       11 bytes
  4124 ;; Hardware stack levels used: 1
  4125 ;; Hardware stack levels required when called: 7
  4126 ;; This function calls:
  4127 ;;		_setMotorPWM
  4128 ;;		_stop
  4129 ;; This function is called by:
  4130 ;;		_Green
  4131 ;;		_Pink
  4132 ;;		_reverseYellow
  4133 ;;		_leftCali
  4134 ;; This function uses a non-reentrant model
  4135 ;;
  4136                           
  4137                           	psect	text25
  4138   0019DE                     __ptext25:
  4139                           	callstack 0
  4140   0019DE                     _turnLeft:
  4141                           	callstack 20
  4142   0019DE                     
  4143                           ;dc_motor.c: 156: void turnLeft(DC_motor *mL, DC_motor *mR, char power);dc_motor.c: 157:
      +                           {;dc_motor.c: 159:     if (mL->power != 0 || mR->power != 0) {
  4144   0019DE  501C               	movf	turnLeft@mL^0,w,c
  4145   0019E0  6ED9               	movwf	fsr2l,c
  4146   0019E2  6ADA               	clrf	fsr2h,c
  4147   0019E4  50DF               	movf	indf2,w,c
  4148   0019E6  A4D8               	btfss	status,2,c
  4149   0019E8  EFF8  F00C         	goto	u1101
  4150   0019EC  EFFA  F00C         	goto	u1100
  4151   0019F0                     u1101:
  4152   0019F0  EF05  F00D         	goto	l2639
  4153   0019F4                     u1100:
  4154   0019F4  501D               	movf	turnLeft@mR^0,w,c
  4155   0019F6  6ED9               	movwf	fsr2l,c
  4156   0019F8  6ADA               	clrf	fsr2h,c
  4157   0019FA  50DF               	movf	indf2,w,c
  4158   0019FC  B4D8               	btfsc	status,2,c
  4159   0019FE  EF03  F00D         	goto	u1111
  4160   001A02  EF05  F00D         	goto	u1110
  4161   001A06                     u1111:
  4162   001A06  EF0B  F00D         	goto	l2641
  4163   001A0A                     u1110:
  4164   001A0A                     l2639:
  4165                           
  4166                           ;dc_motor.c: 160:         stop(mL, mR);
  4167   001A0A  C01C  F015         	movff	turnLeft@mL,stop@mL
  4168   001A0E  C01D  F016         	movff	turnLeft@mR,stop@mR
  4169   001A12  EC1F  F013         	call	_stop	;wreg free
  4170   001A16                     l2641:
  4171                           
  4172                           ;dc_motor.c: 164:     mL->direction = 0;
  4173   001A16  501C               	movf	turnLeft@mL^0,w,c
  4174   001A18  6ED9               	movwf	fsr2l,c
  4175   001A1A  6ADA               	clrf	fsr2h,c
  4176   001A1C  0E01               	movlw	1
  4177   001A1E  26D9               	addwf	fsr2l,f,c
  4178   001A20  6ADF               	clrf	indf2,c
  4179   001A22                     
  4180                           ;dc_motor.c: 165:     mR->direction = 1;
  4181   001A22  501D               	movf	turnLeft@mR^0,w,c
  4182   001A24  6ED9               	movwf	fsr2l,c
  4183   001A26  6ADA               	clrf	fsr2h,c
  4184   001A28  0E01               	movlw	1
  4185   001A2A  26D9               	addwf	fsr2l,f,c
  4186   001A2C  0E01               	movlw	1
  4187   001A2E  6EDF               	movwf	indf2,c
  4188   001A30                     
  4189                           ;dc_motor.c: 166:     int maxpower = power;
  4190   001A30  C01E  F021         	movff	turnLeft@power,turnLeft@maxpower
  4191   001A34  6A22               	clrf	(turnLeft@maxpower+1)^0,c
  4192   001A36                     
  4193                           ;dc_motor.c: 169:     for (int i = 0; i < maxpower; i++) {
  4194   001A36  0E00               	movlw	0
  4195   001A38  6E24               	movwf	(turnLeft@i+1)^0,c
  4196   001A3A  0E00               	movlw	0
  4197   001A3C  6E23               	movwf	turnLeft@i^0,c
  4198   001A3E  EF41  F00D         	goto	l2659
  4199   001A42                     l2649:
  4200                           
  4201                           ;dc_motor.c: 170:         mL->power = i;
  4202   001A42  501C               	movf	turnLeft@mL^0,w,c
  4203   001A44  6ED9               	movwf	fsr2l,c
  4204   001A46  6ADA               	clrf	fsr2h,c
  4205   001A48  C023  FFDF         	movff	turnLeft@i,indf2
  4206                           
  4207                           ;dc_motor.c: 171:         mR->power = i;
  4208   001A4C  501D               	movf	turnLeft@mR^0,w,c
  4209   001A4E  6ED9               	movwf	fsr2l,c
  4210   001A50  6ADA               	clrf	fsr2h,c
  4211   001A52  C023  FFDF         	movff	turnLeft@i,indf2
  4212   001A56                     
  4213                           ;dc_motor.c: 172:         setMotorPWM(mL);
  4214   001A56  C01C  F010         	movff	turnLeft@mL,setMotorPWM@m
  4215   001A5A  EC09  F00B         	call	_setMotorPWM	;wreg free
  4216   001A5E                     
  4217                           ;dc_motor.c: 173:         setMotorPWM(mR);
  4218   001A5E  C01D  F010         	movff	turnLeft@mR,setMotorPWM@m
  4219   001A62  EC09  F00B         	call	_setMotorPWM	;wreg free
  4220   001A66                     
  4221                           ;dc_motor.c: 174:         _delay((unsigned long)((15)*(64000000/4000.0)));
  4222   001A66  0E02               	movlw	2
  4223   001A68  6E20               	movwf	(??_turnLeft+1)^0,c
  4224   001A6A  0E38               	movlw	56
  4225   001A6C  6E1F               	movwf	??_turnLeft^0,c
  4226   001A6E  0EAD               	movlw	173
  4227   001A70                     u2127:
  4228   001A70  2EE8               	decfsz	wreg,f,c
  4229   001A72  D7FE               	bra	u2127
  4230   001A74  2E1F               	decfsz	??_turnLeft^0,f,c
  4231   001A76  D7FC               	bra	u2127
  4232   001A78  2E20               	decfsz	(??_turnLeft+1)^0,f,c
  4233   001A7A  D7FA               	bra	u2127
  4234   001A7C  0000               	nop	
  4235   001A7E                     
  4236                           ;dc_motor.c: 176:     }
  4237   001A7E  4A23               	infsnz	turnLeft@i^0,f,c
  4238   001A80  2A24               	incf	(turnLeft@i+1)^0,f,c
  4239   001A82                     l2659:
  4240   001A82  5021               	movf	turnLeft@maxpower^0,w,c
  4241   001A84  5C23               	subwf	turnLeft@i^0,w,c
  4242   001A86  5024               	movf	(turnLeft@i+1)^0,w,c
  4243   001A88  0A80               	xorlw	128
  4244   001A8A  6E1F               	movwf	??_turnLeft^0,c
  4245   001A8C  5022               	movf	(turnLeft@maxpower+1)^0,w,c
  4246   001A8E  0A80               	xorlw	128
  4247   001A90  581F               	subwfb	??_turnLeft^0,w,c
  4248   001A92  A0D8               	btfss	status,0,c
  4249   001A94  EF4E  F00D         	goto	u1121
  4250   001A98  EF50  F00D         	goto	u1120
  4251   001A9C                     u1121:
  4252   001A9C  EF21  F00D         	goto	l2649
  4253   001AA0                     u1120:
  4254   001AA0                     
  4255                           ;dc_motor.c: 178:     _delay((unsigned long)((280)*(64000000/4000.0)));
  4256   001AA0  0E17               	movlw	23
  4257   001AA2  6E20               	movwf	(??_turnLeft+1)^0,c
  4258   001AA4  0EBB               	movlw	187
  4259   001AA6  6E1F               	movwf	??_turnLeft^0,c
  4260   001AA8  0E1D               	movlw	29
  4261   001AAA                     u2137:
  4262   001AAA  2EE8               	decfsz	wreg,f,c
  4263   001AAC  D7FE               	bra	u2137
  4264   001AAE  2E1F               	decfsz	??_turnLeft^0,f,c
  4265   001AB0  D7FC               	bra	u2137
  4266   001AB2  2E20               	decfsz	(??_turnLeft+1)^0,f,c
  4267   001AB4  D7FA               	bra	u2137
  4268   001AB6  0000               	nop	
  4269   001AB8                     
  4270                           ;dc_motor.c: 181:     for (int i = maxpower; i >= 0; i--) {
  4271   001AB8  C021  F025         	movff	turnLeft@maxpower,turnLeft@i_2071
  4272   001ABC  C022  F026         	movff	turnLeft@maxpower+1,turnLeft@i_2071+1
  4273   001AC0                     l2665:
  4274   001AC0  BE26               	btfsc	(turnLeft@i_2071+1)^0,7,c
  4275   001AC2  EF67  F00D         	goto	u1130
  4276   001AC6  EF65  F00D         	goto	u1131
  4277   001ACA                     u1131:
  4278   001ACA  EF69  F00D         	goto	l2669
  4279   001ACE                     u1130:
  4280   001ACE  EF88  F00D         	goto	l534
  4281   001AD2                     l2669:
  4282                           
  4283                           ;dc_motor.c: 182:         mL->power = i;
  4284   001AD2  501C               	movf	turnLeft@mL^0,w,c
  4285   001AD4  6ED9               	movwf	fsr2l,c
  4286   001AD6  6ADA               	clrf	fsr2h,c
  4287   001AD8  C025  FFDF         	movff	turnLeft@i_2071,indf2
  4288                           
  4289                           ;dc_motor.c: 183:         mR->power = i;
  4290   001ADC  501D               	movf	turnLeft@mR^0,w,c
  4291   001ADE  6ED9               	movwf	fsr2l,c
  4292   001AE0  6ADA               	clrf	fsr2h,c
  4293   001AE2  C025  FFDF         	movff	turnLeft@i_2071,indf2
  4294   001AE6                     
  4295                           ;dc_motor.c: 184:         setMotorPWM(mL);
  4296   001AE6  C01C  F010         	movff	turnLeft@mL,setMotorPWM@m
  4297   001AEA  EC09  F00B         	call	_setMotorPWM	;wreg free
  4298   001AEE                     
  4299                           ;dc_motor.c: 185:         setMotorPWM(mR);
  4300   001AEE  C01D  F010         	movff	turnLeft@mR,setMotorPWM@m
  4301   001AF2  EC09  F00B         	call	_setMotorPWM	;wreg free
  4302   001AF6                     
  4303                           ;dc_motor.c: 186:         _delay((unsigned long)((5)*(64000000/4000.0)));
  4304   001AF6  0E68               	movlw	104
  4305   001AF8  6E1F               	movwf	??_turnLeft^0,c
  4306   001AFA  0EE4               	movlw	228
  4307   001AFC                     u2147:
  4308   001AFC  2EE8               	decfsz	wreg,f,c
  4309   001AFE  D7FE               	bra	u2147
  4310   001B00  2E1F               	decfsz	??_turnLeft^0,f,c
  4311   001B02  D7FC               	bra	u2147
  4312   001B04  D000               	nop2	
  4313   001B06                     
  4314                           ;dc_motor.c: 188:     }
  4315   001B06  0625               	decf	turnLeft@i_2071^0,f,c
  4316   001B08  A0D8               	btfss	status,0,c
  4317   001B0A  0626               	decf	(turnLeft@i_2071+1)^0,f,c
  4318   001B0C  EF60  F00D         	goto	l2665
  4319   001B10                     l534:
  4320   001B10  0012               	return		;funcret
  4321   001B12                     __end_of_turnLeft:
  4322                           	callstack 0
  4323                           
  4324 ;; *************** function _interrupts_init *****************
  4325 ;; Defined at:
  4326 ;;		line 14 in file "interrupts.c"
  4327 ;; Parameters:    Size  Location     Type
  4328 ;;		None
  4329 ;; Auto vars:     Size  Location     Type
  4330 ;;		None
  4331 ;; Return value:  Size  Location     Type
  4332 ;;                  1    wreg      void 
  4333 ;; Registers used:
  4334 ;;		wreg, status,2, status,0, cstack
  4335 ;; Tracked objects:
  4336 ;;		On entry : 0/0
  4337 ;;		On exit  : 0/0
  4338 ;;		Unchanged: 0/0
  4339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4341 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4343 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4344 ;;Total ram usage:        0 bytes
  4345 ;; Hardware stack levels used: 1
  4346 ;; Hardware stack levels required when called: 7
  4347 ;; This function calls:
  4348 ;;		_clearInterrupt
  4349 ;;		_color_writetoaddr
  4350 ;; This function is called by:
  4351 ;;		_main
  4352 ;; This function uses a non-reentrant model
  4353 ;;
  4354                           
  4355                           	psect	text26
  4356   0026A8                     __ptext26:
  4357                           	callstack 0
  4358   0026A8                     _interrupts_init:
  4359                           	callstack 23
  4360   0026A8                     
  4361                           ;interrupts.c: 21:     INT0PPS = 0x08;
  4362   0026A8  0E08               	movlw	8
  4363   0026AA  010D               	movlb	13	; () banked
  4364   0026AC  6FF0               	movwf	240,b	;volatile
  4365   0026AE                     
  4366                           ; BSR set to: 13
  4367                           ;interrupts.c: 22:     PIE0bits.INT0IE = 1;
  4368   0026AE  010E               	movlb	14	; () banked
  4369   0026B0  8129               	bsf	41,0,b	;volatile
  4370   0026B2                     
  4371                           ; BSR set to: 14
  4372                           ;interrupts.c: 23:     INTCONbits.INT0EDG = 0;
  4373   0026B2  90F2               	bcf	242,0,c	;volatile
  4374   0026B4                     
  4375                           ; BSR set to: 14
  4376                           ;interrupts.c: 24:     IPR0bits.INT0IP = 0;
  4377   0026B4  911F               	bcf	31,0,b	;volatile
  4378   0026B6                     
  4379                           ; BSR set to: 14
  4380                           ;interrupts.c: 25:     ANSELBbits.ANSELB0 = 0;
  4381   0026B6  919A               	bcf	154,0,b	;volatile
  4382   0026B8                     
  4383                           ; BSR set to: 14
  4384                           ;interrupts.c: 28:     color_writetoaddr(0x04, 0x00);
  4385   0026B8  0E00               	movlw	0
  4386   0026BA  6E05               	movwf	color_writetoaddr@value^0,c
  4387   0026BC  0E04               	movlw	4
  4388   0026BE  EC15  F015         	call	_color_writetoaddr
  4389   0026C2                     
  4390                           ;interrupts.c: 29:     color_writetoaddr(0x05, 0x01);
  4391   0026C2  0E01               	movlw	1
  4392   0026C4  6E05               	movwf	color_writetoaddr@value^0,c
  4393   0026C6  0E05               	movlw	5
  4394   0026C8  EC15  F015         	call	_color_writetoaddr
  4395   0026CC                     
  4396                           ;interrupts.c: 30:     color_writetoaddr(0x06, 0b00000000);
  4397   0026CC  0E00               	movlw	0
  4398   0026CE  6E05               	movwf	color_writetoaddr@value^0,c
  4399   0026D0  0E06               	movlw	6
  4400   0026D2  EC15  F015         	call	_color_writetoaddr
  4401   0026D6                     
  4402                           ;interrupts.c: 31:     color_writetoaddr(0x07, 0b00000010);
  4403   0026D6  0E02               	movlw	2
  4404   0026D8  6E05               	movwf	color_writetoaddr@value^0,c
  4405   0026DA  0E07               	movlw	7
  4406   0026DC  EC15  F015         	call	_color_writetoaddr
  4407   0026E0                     
  4408                           ;interrupts.c: 37:     color_writetoaddr(0x0C, 0b0011);
  4409   0026E0  0E03               	movlw	3
  4410   0026E2  6E05               	movwf	color_writetoaddr@value^0,c
  4411   0026E4  0E0C               	movlw	12
  4412   0026E6  EC15  F015         	call	_color_writetoaddr
  4413   0026EA                     
  4414                           ;interrupts.c: 40:     PIE0bits.TMR0IE = 1;
  4415   0026EA  010E               	movlb	14	; () banked
  4416   0026EC  8B29               	bsf	41,5,b	;volatile
  4417   0026EE                     
  4418                           ; BSR set to: 14
  4419                           ;interrupts.c: 41:     INTCONbits.PEIE=1;
  4420   0026EE  8CF2               	bsf	242,6,c	;volatile
  4421   0026F0                     
  4422                           ; BSR set to: 14
  4423                           ;interrupts.c: 53:     clearInterrupt();
  4424   0026F0  EC35  F015         	call	_clearInterrupt	;wreg free
  4425   0026F4                     
  4426                           ;interrupts.c: 56:     INTCONbits.GIE=1;
  4427   0026F4  8EF2               	bsf	242,7,c	;volatile
  4428   0026F6  0012               	return		;funcret
  4429   0026F8                     __end_of_interrupts_init:
  4430                           	callstack 0
  4431                           
  4432 ;; *************** function _clearInterrupt *****************
  4433 ;; Defined at:
  4434 ;;		line 99 in file "interrupts.c"
  4435 ;; Parameters:    Size  Location     Type
  4436 ;;		None
  4437 ;; Auto vars:     Size  Location     Type
  4438 ;;		None
  4439 ;; Return value:  Size  Location     Type
  4440 ;;                  1    wreg      void 
  4441 ;; Registers used:
  4442 ;;		wreg, status,2, status,0, cstack
  4443 ;; Tracked objects:
  4444 ;;		On entry : 0/0
  4445 ;;		On exit  : 0/0
  4446 ;;		Unchanged: 0/0
  4447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4449 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4450 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4451 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4452 ;;Total ram usage:        0 bytes
  4453 ;; Hardware stack levels used: 1
  4454 ;; Hardware stack levels required when called: 6
  4455 ;; This function calls:
  4456 ;;		_I2C_2_Master_Start
  4457 ;;		_I2C_2_Master_Stop
  4458 ;;		_I2C_2_Master_Write
  4459 ;; This function is called by:
  4460 ;;		_main
  4461 ;;		_interrupts_init
  4462 ;; This function uses a non-reentrant model
  4463 ;;
  4464                           
  4465                           	psect	text27
  4466   002A6A                     __ptext27:
  4467                           	callstack 0
  4468   002A6A                     _clearInterrupt:
  4469                           	callstack 23
  4470   002A6A                     
  4471                           ;interrupts.c: 100:     I2C_2_Master_Start();
  4472   002A6A  ECBB  F015         	call	_I2C_2_Master_Start	;wreg free
  4473                           
  4474                           ;interrupts.c: 101:     I2C_2_Master_Write(0x52 | 0x00);
  4475   002A6E  0E52               	movlw	82
  4476   002A70  EC96  F015         	call	_I2C_2_Master_Write
  4477                           
  4478                           ;interrupts.c: 102:     I2C_2_Master_Write(0xe0 | 0x06 );
  4479   002A74  0EE6               	movlw	230
  4480   002A76  EC96  F015         	call	_I2C_2_Master_Write
  4481                           
  4482                           ;interrupts.c: 103:     I2C_2_Master_Stop();
  4483   002A7A  ECB6  F015         	call	_I2C_2_Master_Stop	;wreg free
  4484   002A7E  0012               	return		;funcret
  4485   002A80                     __end_of_clearInterrupt:
  4486                           	callstack 0
  4487                           
  4488 ;; *************** function _init_buttons_LED *****************
  4489 ;; Defined at:
  4490 ;;		line 8 in file "interact.c"
  4491 ;; Parameters:    Size  Location     Type
  4492 ;;		None
  4493 ;; Auto vars:     Size  Location     Type
  4494 ;;		None
  4495 ;; Return value:  Size  Location     Type
  4496 ;;                  1    wreg      void 
  4497 ;; Registers used:
  4498 ;;		None
  4499 ;; Tracked objects:
  4500 ;;		On entry : 0/0
  4501 ;;		On exit  : 0/0
  4502 ;;		Unchanged: 0/0
  4503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4504 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4505 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4506 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4507 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4508 ;;Total ram usage:        0 bytes
  4509 ;; Hardware stack levels used: 1
  4510 ;; Hardware stack levels required when called: 4
  4511 ;; This function calls:
  4512 ;;		Nothing
  4513 ;; This function is called by:
  4514 ;;		_main
  4515 ;; This function uses a non-reentrant model
  4516 ;;
  4517                           
  4518                           	psect	text28
  4519   002A96                     __ptext28:
  4520                           	callstack 0
  4521   002A96                     _init_buttons_LED:
  4522                           	callstack 26
  4523   002A96                     
  4524                           ;interact.c: 10:     TRISGbits.TRISG0 = 0;
  4525   002A96  9087               	bcf	135,0,c	;volatile
  4526                           
  4527                           ;interact.c: 11:     TRISEbits.TRISE7 = 0;
  4528   002A98  9E85               	bcf	133,7,c	;volatile
  4529                           
  4530                           ;interact.c: 12:     TRISAbits.TRISA3 = 0;
  4531   002A9A  9681               	bcf	129,3,c	;volatile
  4532                           
  4533                           ;interact.c: 13:     TRISDbits.TRISD3 = 0;
  4534   002A9C  9684               	bcf	132,3,c	;volatile
  4535                           
  4536                           ;interact.c: 14:     TRISHbits.TRISH1 = 0;
  4537   002A9E  9288               	bcf	136,1,c	;volatile
  4538                           
  4539                           ;interact.c: 15:     TRISDbits.TRISD4 = 0;
  4540   002AA0  9884               	bcf	132,4,c	;volatile
  4541                           
  4542                           ;interact.c: 19:     LATGbits.LATG0 = 0;
  4543   002AA2  907F               	bcf	127,0,c	;volatile
  4544                           
  4545                           ;interact.c: 20:     LATEbits.LATE7 = 0;
  4546   002AA4  9E7D               	bcf	125,7,c	;volatile
  4547                           
  4548                           ;interact.c: 21:     LATAbits.LATA3 = 0;
  4549   002AA6  9679               	bcf	121,3,c	;volatile
  4550   002AA8  0012               	return		;funcret
  4551   002AAA                     __end_of_init_buttons_LED:
  4552                           	callstack 0
  4553                           
  4554 ;; *************** function _initDCmotorsPWM *****************
  4555 ;; Defined at:
  4556 ;;		line 4 in file "dc_motor.c"
  4557 ;; Parameters:    Size  Location     Type
  4558 ;;  PWMperiod       2    2[COMRAM] unsigned int 
  4559 ;; Auto vars:     Size  Location     Type
  4560 ;;		None
  4561 ;; Return value:  Size  Location     Type
  4562 ;;                  1    wreg      void 
  4563 ;; Registers used:
  4564 ;;		wreg, status,2
  4565 ;; Tracked objects:
  4566 ;;		On entry : 0/0
  4567 ;;		On exit  : 0/0
  4568 ;;		Unchanged: 0/0
  4569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4570 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4571 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4572 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4573 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4574 ;;Total ram usage:        2 bytes
  4575 ;; Hardware stack levels used: 1
  4576 ;; Hardware stack levels required when called: 4
  4577 ;; This function calls:
  4578 ;;		Nothing
  4579 ;; This function is called by:
  4580 ;;		_main
  4581 ;; This function uses a non-reentrant model
  4582 ;;
  4583                           
  4584                           	psect	text29
  4585   0024D8                     __ptext29:
  4586                           	callstack 0
  4587   0024D8                     _initDCmotorsPWM:
  4588                           	callstack 26
  4589   0024D8                     
  4590                           ;dc_motor.c: 6:     TRISEbits.TRISE2 = 0;
  4591   0024D8  9485               	bcf	133,2,c	;volatile
  4592                           
  4593                           ;dc_motor.c: 7:     TRISEbits.TRISE4 = 0;
  4594   0024DA  9885               	bcf	133,4,c	;volatile
  4595                           
  4596                           ;dc_motor.c: 8:     TRISCbits.TRISC7 = 0;
  4597   0024DC  9E83               	bcf	131,7,c	;volatile
  4598                           
  4599                           ;dc_motor.c: 9:     TRISGbits.TRISG6 = 0;
  4600   0024DE  9C87               	bcf	135,6,c	;volatile
  4601   0024E0                     
  4602                           ;dc_motor.c: 12:     RE2PPS=0x05;
  4603   0024E0  0E05               	movlw	5
  4604   0024E2  010E               	movlb	14	; () banked
  4605   0024E4  6F74               	movwf	116,b	;volatile
  4606                           
  4607                           ;dc_motor.c: 13:     RE4PPS=0x06;
  4608   0024E6  0E06               	movlw	6
  4609   0024E8  6F76               	movwf	118,b	;volatile
  4610                           
  4611                           ;dc_motor.c: 14:     RC7PPS=0x07;
  4612   0024EA  0E07               	movlw	7
  4613   0024EC  6F69               	movwf	105,b	;volatile
  4614                           
  4615                           ;dc_motor.c: 15:     RG6PPS=0x08;
  4616   0024EE  0E08               	movlw	8
  4617   0024F0  6F88               	movwf	136,b	;volatile
  4618                           
  4619                           ;dc_motor.c: 18:     T2CONbits.CKPS=0b100;
  4620   0024F2  50BD               	movf	189,w,c	;volatile
  4621   0024F4  0B8F               	andlw	-113
  4622   0024F6  0940               	iorlw	64
  4623   0024F8  6EBD               	movwf	189,c	;volatile
  4624                           
  4625                           ;dc_motor.c: 19:     T2HLTbits.MODE=0b00000;
  4626   0024FA  0EE0               	movlw	-32
  4627   0024FC  16BE               	andwf	190,f,c	;volatile
  4628                           
  4629                           ;dc_motor.c: 20:     T2CLKCONbits.CS=0b0001;
  4630   0024FE  50BF               	movf	191,w,c	;volatile
  4631   002500  0BF0               	andlw	-16
  4632   002502  0901               	iorlw	1
  4633   002504  6EBF               	movwf	191,c	;volatile
  4634   002506                     
  4635                           ; BSR set to: 14
  4636                           ;dc_motor.c: 24:     T2PR=PWMperiod;
  4637   002506  C003  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  4638   00250A                     
  4639                           ; BSR set to: 14
  4640                           ;dc_motor.c: 25:     T2CONbits.ON=1;
  4641   00250A  8EBD               	bsf	189,7,c	;volatile
  4642                           
  4643                           ;dc_motor.c: 29:     CCPR1H=0;
  4644   00250C  0E00               	movlw	0
  4645   00250E  6EAA               	movwf	170,c	;volatile
  4646                           
  4647                           ;dc_motor.c: 30:     CCPR2H=0;
  4648   002510  0E00               	movlw	0
  4649   002512  6EA6               	movwf	166,c	;volatile
  4650                           
  4651                           ;dc_motor.c: 31:     CCPR3H=0;
  4652   002514  0E00               	movlw	0
  4653   002516  010F               	movlb	15	; () banked
  4654   002518  6F25               	movwf	37,b	;volatile
  4655                           
  4656                           ;dc_motor.c: 32:     CCPR4H=0;
  4657   00251A  0E00               	movlw	0
  4658   00251C  6F21               	movwf	33,b	;volatile
  4659                           
  4660                           ;dc_motor.c: 35:     CCPTMRS0bits.C1TSEL=0;
  4661   00251E  0EFC               	movlw	-4
  4662   002520  16AD               	andwf	173,f,c	;volatile
  4663                           
  4664                           ;dc_motor.c: 36:     CCPTMRS0bits.C2TSEL=0;
  4665   002522  0EF3               	movlw	-13
  4666   002524  16AD               	andwf	173,f,c	;volatile
  4667                           
  4668                           ;dc_motor.c: 37:     CCPTMRS0bits.C3TSEL=0;
  4669   002526  0ECF               	movlw	-49
  4670   002528  16AD               	andwf	173,f,c	;volatile
  4671                           
  4672                           ;dc_motor.c: 38:     CCPTMRS0bits.C4TSEL=0;
  4673   00252A  0E3F               	movlw	-193
  4674   00252C  16AD               	andwf	173,f,c	;volatile
  4675   00252E                     
  4676                           ; BSR set to: 15
  4677                           ;dc_motor.c: 41:     CCP1CONbits.FMT=1;
  4678   00252E  88AB               	bsf	171,4,c	;volatile
  4679                           
  4680                           ;dc_motor.c: 42:     CCP1CONbits.CCP1MODE=0b1100;
  4681   002530  50AB               	movf	171,w,c	;volatile
  4682   002532  0BF0               	andlw	-16
  4683   002534  090C               	iorlw	12
  4684   002536  6EAB               	movwf	171,c	;volatile
  4685   002538                     
  4686                           ; BSR set to: 15
  4687                           ;dc_motor.c: 43:     CCP1CONbits.EN=1;
  4688   002538  8EAB               	bsf	171,7,c	;volatile
  4689   00253A                     
  4690                           ; BSR set to: 15
  4691                           ;dc_motor.c: 45:     CCP2CONbits.FMT=1;
  4692   00253A  88A7               	bsf	167,4,c	;volatile
  4693                           
  4694                           ;dc_motor.c: 46:     CCP2CONbits.CCP2MODE=0b1100;
  4695   00253C  50A7               	movf	167,w,c	;volatile
  4696   00253E  0BF0               	andlw	-16
  4697   002540  090C               	iorlw	12
  4698   002542  6EA7               	movwf	167,c	;volatile
  4699   002544                     
  4700                           ; BSR set to: 15
  4701                           ;dc_motor.c: 47:     CCP2CONbits.EN=1;
  4702   002544  8EA7               	bsf	167,7,c	;volatile
  4703   002546                     
  4704                           ; BSR set to: 15
  4705                           ;dc_motor.c: 49:     CCP3CONbits.FMT=1;
  4706   002546  8926               	bsf	38,4,b	;volatile
  4707                           
  4708                           ;dc_motor.c: 50:     CCP3CONbits.CCP3MODE=0b1100;
  4709   002548  5126               	movf	38,w,b	;volatile
  4710   00254A  0BF0               	andlw	-16
  4711   00254C  090C               	iorlw	12
  4712   00254E  6F26               	movwf	38,b	;volatile
  4713   002550                     
  4714                           ; BSR set to: 15
  4715                           ;dc_motor.c: 51:     CCP3CONbits.EN=1;
  4716   002550  8F26               	bsf	38,7,b	;volatile
  4717   002552                     
  4718                           ; BSR set to: 15
  4719                           ;dc_motor.c: 53:     CCP4CONbits.FMT=1;
  4720   002552  8922               	bsf	34,4,b	;volatile
  4721                           
  4722                           ;dc_motor.c: 54:     CCP4CONbits.CCP4MODE=0b1100;
  4723   002554  5122               	movf	34,w,b	;volatile
  4724   002556  0BF0               	andlw	-16
  4725   002558  090C               	iorlw	12
  4726   00255A  6F22               	movwf	34,b	;volatile
  4727   00255C                     
  4728                           ; BSR set to: 15
  4729                           ;dc_motor.c: 55:     CCP4CONbits.EN=1;
  4730   00255C  8F22               	bsf	34,7,b	;volatile
  4731   00255E                     
  4732                           ; BSR set to: 15
  4733   00255E  0012               	return		;funcret
  4734   002560                     __end_of_initDCmotorsPWM:
  4735                           	callstack 0
  4736                           
  4737 ;; *************** function _initButtons *****************
  4738 ;; Defined at:
  4739 ;;		line 12 in file "feedback.c"
  4740 ;; Parameters:    Size  Location     Type
  4741 ;;		None
  4742 ;; Auto vars:     Size  Location     Type
  4743 ;;		None
  4744 ;; Return value:  Size  Location     Type
  4745 ;;                  1    wreg      void 
  4746 ;; Registers used:
  4747 ;;		None
  4748 ;; Tracked objects:
  4749 ;;		On entry : 0/0
  4750 ;;		On exit  : 0/0
  4751 ;;		Unchanged: 0/0
  4752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4753 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4754 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4755 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4756 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4757 ;;Total ram usage:        0 bytes
  4758 ;; Hardware stack levels used: 1
  4759 ;; Hardware stack levels required when called: 4
  4760 ;; This function calls:
  4761 ;;		Nothing
  4762 ;; This function is called by:
  4763 ;;		_main
  4764 ;; This function uses a non-reentrant model
  4765 ;;
  4766                           
  4767                           	psect	text30
  4768   002B20                     __ptext30:
  4769                           	callstack 0
  4770   002B20                     _initButtons:
  4771                           	callstack 26
  4772   002B20                     
  4773                           ;feedback.c: 13:     TRISFbits.TRISF2 = 1;
  4774   002B20  8486               	bsf	134,2,c	;volatile
  4775                           
  4776                           ;feedback.c: 14:     ANSELFbits.ANSELF2=0;
  4777   002B22  010E               	movlb	14	; () banked
  4778   002B24  95B4               	bcf	180,2,b	;volatile
  4779                           
  4780                           ;feedback.c: 15:     TRISFbits.TRISF3 = 1;
  4781   002B26  8686               	bsf	134,3,c	;volatile
  4782                           
  4783                           ;feedback.c: 16:     ANSELFbits.ANSELF3=0;
  4784   002B28  97B4               	bcf	180,3,b	;volatile
  4785   002B2A                     
  4786                           ; BSR set to: 14
  4787   002B2A  0012               	return		;funcret
  4788   002B2C                     __end_of_initButtons:
  4789                           	callstack 0
  4790                           
  4791 ;; *************** function _initBoardLEDs *****************
  4792 ;; Defined at:
  4793 ;;		line 5 in file "feedback.c"
  4794 ;; Parameters:    Size  Location     Type
  4795 ;;		None
  4796 ;; Auto vars:     Size  Location     Type
  4797 ;;		None
  4798 ;; Return value:  Size  Location     Type
  4799 ;;                  1    wreg      void 
  4800 ;; Registers used:
  4801 ;;		None
  4802 ;; Tracked objects:
  4803 ;;		On entry : 0/0
  4804 ;;		On exit  : 0/0
  4805 ;;		Unchanged: 0/0
  4806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4807 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4808 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4809 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4810 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4811 ;;Total ram usage:        0 bytes
  4812 ;; Hardware stack levels used: 1
  4813 ;; Hardware stack levels required when called: 4
  4814 ;; This function calls:
  4815 ;;		Nothing
  4816 ;; This function is called by:
  4817 ;;		_main
  4818 ;; This function uses a non-reentrant model
  4819 ;;
  4820                           
  4821                           	psect	text31
  4822   002B44                     __ptext31:
  4823                           	callstack 0
  4824   002B44                     _initBoardLEDs:
  4825                           	callstack 26
  4826   002B44                     
  4827                           ;feedback.c: 6:     TRISDbits.TRISD7 = 0;
  4828   002B44  9E84               	bcf	132,7,c	;volatile
  4829                           
  4830                           ;feedback.c: 7:     LATDbits.LATD7 = 0;
  4831   002B46  9E7C               	bcf	124,7,c	;volatile
  4832                           
  4833                           ;feedback.c: 8:     TRISHbits.TRISH3 = 0;
  4834   002B48  9688               	bcf	136,3,c	;volatile
  4835                           
  4836                           ;feedback.c: 9:     LATHbits.LATH3 = 0;
  4837   002B4A  9680               	bcf	128,3,c	;volatile
  4838   002B4C  0012               	return		;funcret
  4839   002B4E                     __end_of_initBoardLEDs:
  4840                           	callstack 0
  4841                           
  4842 ;; *************** function _indicateInstruction *****************
  4843 ;; Defined at:
  4844 ;;		line 31 in file "feedback.c"
  4845 ;; Parameters:    Size  Location     Type
  4846 ;;  period          1    wreg     unsigned char 
  4847 ;; Auto vars:     Size  Location     Type
  4848 ;;  period          1    5[COMRAM] unsigned char 
  4849 ;;  j               2    6[COMRAM] int 
  4850 ;;  i               2    8[COMRAM] int 
  4851 ;; Return value:  Size  Location     Type
  4852 ;;                  1    wreg      void 
  4853 ;; Registers used:
  4854 ;;		wreg, status,2, status,0
  4855 ;; Tracked objects:
  4856 ;;		On entry : 0/0
  4857 ;;		On exit  : 0/0
  4858 ;;		Unchanged: 0/0
  4859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4860 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4861 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4862 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4863 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4864 ;;Total ram usage:        8 bytes
  4865 ;; Hardware stack levels used: 1
  4866 ;; Hardware stack levels required when called: 4
  4867 ;; This function calls:
  4868 ;;		Nothing
  4869 ;; This function is called by:
  4870 ;;		_main
  4871 ;; This function uses a non-reentrant model
  4872 ;;
  4873                           
  4874                           	psect	text32
  4875   002430                     __ptext32:
  4876                           	callstack 0
  4877   002430                     _indicateInstruction:
  4878                           	callstack 26
  4879                           
  4880                           ;incstack = 0
  4881                           ;indicateInstruction@period stored from wreg
  4882   002430  6E06               	movwf	indicateInstruction@period^0,c
  4883   002432                     
  4884                           ;feedback.c: 32:     for (int i = 0; i < 2; i++) {
  4885   002432  0E00               	movlw	0
  4886   002434  6E0A               	movwf	(indicateInstruction@i+1)^0,c
  4887   002436  0E00               	movlw	0
  4888   002438  6E09               	movwf	indicateInstruction@i^0,c
  4889   00243A                     l3353:
  4890                           
  4891                           ;feedback.c: 33:         for (int j = 0; j < period; j++) {
  4892   00243A  0E00               	movlw	0
  4893   00243C  6E08               	movwf	(indicateInstruction@j+1)^0,c
  4894   00243E  0E00               	movlw	0
  4895   002440  6E07               	movwf	indicateInstruction@j^0,c
  4896   002442  EF3D  F012         	goto	l679
  4897   002446                     l680:
  4898                           
  4899                           ;feedback.c: 34:             LATHbits.LATH3 = 1;
  4900   002446  8680               	bsf	128,3,c	;volatile
  4901   002448                     
  4902                           ;feedback.c: 35:             _delay((unsigned long)((150)*(64000000/4000.0)));
  4903   002448  0E0D               	movlw	13
  4904   00244A  6E04               	movwf	(??_indicateInstruction+1)^0,c
  4905   00244C  0E2D               	movlw	45
  4906   00244E  6E03               	movwf	??_indicateInstruction^0,c
  4907   002450  0ED8               	movlw	216
  4908   002452                     u2157:
  4909   002452  2EE8               	decfsz	wreg,f,c
  4910   002454  D7FE               	bra	u2157
  4911   002456  2E03               	decfsz	??_indicateInstruction^0,f,c
  4912   002458  D7FC               	bra	u2157
  4913   00245A  2E04               	decfsz	(??_indicateInstruction+1)^0,f,c
  4914   00245C  D7FA               	bra	u2157
  4915   00245E                     
  4916                           ;feedback.c: 36:             LATHbits.LATH3 = 0;
  4917   00245E  9680               	bcf	128,3,c	;volatile
  4918                           
  4919                           ;feedback.c: 37:             _delay((unsigned long)((150)*(64000000/4000.0)));
  4920   002460  0E0D               	movlw	13
  4921   002462  6E04               	movwf	(??_indicateInstruction+1)^0,c
  4922   002464  0E2D               	movlw	45
  4923   002466  6E03               	movwf	??_indicateInstruction^0,c
  4924   002468  0ED8               	movlw	216
  4925   00246A                     u2167:
  4926   00246A  2EE8               	decfsz	wreg,f,c
  4927   00246C  D7FE               	bra	u2167
  4928   00246E  2E03               	decfsz	??_indicateInstruction^0,f,c
  4929   002470  D7FC               	bra	u2167
  4930   002472  2E04               	decfsz	(??_indicateInstruction+1)^0,f,c
  4931   002474  D7FA               	bra	u2167
  4932   002476                     
  4933                           ;feedback.c: 38:         }
  4934   002476  4A07               	infsnz	indicateInstruction@j^0,f,c
  4935   002478  2A08               	incf	(indicateInstruction@j+1)^0,f,c
  4936   00247A                     l679:
  4937   00247A  5006               	movf	indicateInstruction@period^0,w,c
  4938   00247C  6E03               	movwf	??_indicateInstruction^0,c
  4939   00247E  6A04               	clrf	(??_indicateInstruction+1)^0,c
  4940   002480  5003               	movf	??_indicateInstruction^0,w,c
  4941   002482  5C07               	subwf	indicateInstruction@j^0,w,c
  4942   002484  5008               	movf	(indicateInstruction@j+1)^0,w,c
  4943   002486  0A80               	xorlw	128
  4944   002488  6E05               	movwf	(??_indicateInstruction+2)^0,c
  4945   00248A  5004               	movf	(??_indicateInstruction+1)^0,w,c
  4946   00248C  0A80               	xorlw	128
  4947   00248E  5805               	subwfb	(??_indicateInstruction+2)^0,w,c
  4948   002490  A0D8               	btfss	status,0,c
  4949   002492  EF4D  F012         	goto	u1721
  4950   002496  EF4F  F012         	goto	u1720
  4951   00249A                     u1721:
  4952   00249A  EF23  F012         	goto	l680
  4953   00249E                     u1720:
  4954   00249E                     
  4955                           ;feedback.c: 39:         _delay((unsigned long)((500)*(64000000/4000.0)));
  4956   00249E  0E29               	movlw	41
  4957   0024A0  6E04               	movwf	(??_indicateInstruction+1)^0,c
  4958   0024A2  0E96               	movlw	150
  4959   0024A4  6E03               	movwf	??_indicateInstruction^0,c
  4960   0024A6  0E7F               	movlw	127
  4961   0024A8                     u2177:
  4962   0024A8  2EE8               	decfsz	wreg,f,c
  4963   0024AA  D7FE               	bra	u2177
  4964   0024AC  2E03               	decfsz	??_indicateInstruction^0,f,c
  4965   0024AE  D7FC               	bra	u2177
  4966   0024B0  2E04               	decfsz	(??_indicateInstruction+1)^0,f,c
  4967   0024B2  D7FA               	bra	u2177
  4968   0024B4  0000               	nop	
  4969   0024B6                     
  4970                           ;feedback.c: 40:     }
  4971   0024B6  4A09               	infsnz	indicateInstruction@i^0,f,c
  4972   0024B8  2A0A               	incf	(indicateInstruction@i+1)^0,f,c
  4973   0024BA  BE0A               	btfsc	(indicateInstruction@i+1)^0,7,c
  4974   0024BC  EF69  F012         	goto	u1731
  4975   0024C0  500A               	movf	(indicateInstruction@i+1)^0,w,c
  4976   0024C2  E109               	bnz	u1730
  4977   0024C4  0E02               	movlw	2
  4978   0024C6  5C09               	subwf	indicateInstruction@i^0,w,c
  4979   0024C8  A0D8               	btfss	status,0,c
  4980   0024CA  EF69  F012         	goto	u1731
  4981   0024CE  EF6B  F012         	goto	u1730
  4982   0024D2                     u1731:
  4983   0024D2  EF1D  F012         	goto	l3353
  4984   0024D6                     u1730:
  4985   0024D6  0012               	return		;funcret
  4986   0024D8                     __end_of_indicateInstruction:
  4987                           	callstack 0
  4988                           
  4989 ;; *************** function _fastStop *****************
  4990 ;; Defined at:
  4991 ;;		line 141 in file "dc_motor.c"
  4992 ;; Parameters:    Size  Location     Type
  4993 ;;  mL              1   20[COMRAM] PTR struct DC_motor
  4994 ;;		 -> main@motorL(9), 
  4995 ;;  mR              1   21[COMRAM] PTR struct DC_motor
  4996 ;;		 -> main@motorR(9), 
  4997 ;; Auto vars:     Size  Location     Type
  4998 ;;  i               2   25[COMRAM] int 
  4999 ;;  current_powe    2   23[COMRAM] unsigned int 
  5000 ;; Return value:  Size  Location     Type
  5001 ;;                  1    wreg      void 
  5002 ;; Registers used:
  5003 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5004 ;; Tracked objects:
  5005 ;;		On entry : 0/0
  5006 ;;		On exit  : 0/0
  5007 ;;		Unchanged: 0/0
  5008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5009 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5010 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5011 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5012 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5013 ;;Total ram usage:        7 bytes
  5014 ;; Hardware stack levels used: 1
  5015 ;; Hardware stack levels required when called: 6
  5016 ;; This function calls:
  5017 ;;		_setMotorPWM
  5018 ;; This function is called by:
  5019 ;;		_main
  5020 ;; This function uses a non-reentrant model
  5021 ;;
  5022                           
  5023                           	psect	text33
  5024   0025D4                     __ptext33:
  5025                           	callstack 0
  5026   0025D4                     _fastStop:
  5027                           	callstack 24
  5028   0025D4                     
  5029                           ;dc_motor.c: 141: void fastStop(DC_motor *mL, DC_motor *mR);dc_motor.c: 142: {;dc_motor.
      +                          c: 144:     unsigned int current_power = mL->power;
  5030   0025D4  5015               	movf	fastStop@mL^0,w,c
  5031   0025D6  6ED9               	movwf	fsr2l,c
  5032   0025D8  6ADA               	clrf	fsr2h,c
  5033   0025DA  50DF               	movf	indf2,w,c
  5034   0025DC  6E17               	movwf	??_fastStop^0,c
  5035   0025DE  5017               	movf	??_fastStop^0,w,c
  5036   0025E0  6E18               	movwf	fastStop@current_power^0,c
  5037   0025E2  6A19               	clrf	(fastStop@current_power+1)^0,c
  5038   0025E4                     
  5039                           ;dc_motor.c: 146:     for (int i=current_power; i>= 0; i--) {
  5040   0025E4  C018  F01A         	movff	fastStop@current_power,fastStop@i
  5041   0025E8  C019  F01B         	movff	fastStop@current_power+1,fastStop@i+1
  5042   0025EC                     l3331:
  5043   0025EC  BE1B               	btfsc	(fastStop@i+1)^0,7,c
  5044   0025EE  EFFD  F012         	goto	u1710
  5045   0025F2  EFFB  F012         	goto	u1711
  5046   0025F6                     u1711:
  5047   0025F6  EFFF  F012         	goto	l3335
  5048   0025FA                     u1710:
  5049   0025FA  EF1E  F013         	goto	l523
  5050   0025FE                     l3335:
  5051                           
  5052                           ;dc_motor.c: 147:         mL->power = i;
  5053   0025FE  5015               	movf	fastStop@mL^0,w,c
  5054   002600  6ED9               	movwf	fsr2l,c
  5055   002602  6ADA               	clrf	fsr2h,c
  5056   002604  C01A  FFDF         	movff	fastStop@i,indf2
  5057                           
  5058                           ;dc_motor.c: 148:         mR->power = i;
  5059   002608  5016               	movf	fastStop@mR^0,w,c
  5060   00260A  6ED9               	movwf	fsr2l,c
  5061   00260C  6ADA               	clrf	fsr2h,c
  5062   00260E  C01A  FFDF         	movff	fastStop@i,indf2
  5063   002612                     
  5064                           ;dc_motor.c: 149:         setMotorPWM(mL);
  5065   002612  C015  F010         	movff	fastStop@mL,setMotorPWM@m
  5066   002616  EC09  F00B         	call	_setMotorPWM	;wreg free
  5067   00261A                     
  5068                           ;dc_motor.c: 150:         setMotorPWM(mR);
  5069   00261A  C016  F010         	movff	fastStop@mR,setMotorPWM@m
  5070   00261E  EC09  F00B         	call	_setMotorPWM	;wreg free
  5071   002622                     
  5072                           ;dc_motor.c: 151:         _delay((unsigned long)((1)*(64000000/4000.0)));
  5073   002622  0E15               	movlw	21
  5074   002624  6E17               	movwf	??_fastStop^0,c
  5075   002626  0EC6               	movlw	198
  5076   002628                     u2187:
  5077   002628  2EE8               	decfsz	wreg,f,c
  5078   00262A  D7FE               	bra	u2187
  5079   00262C  2E17               	decfsz	??_fastStop^0,f,c
  5080   00262E  D7FC               	bra	u2187
  5081   002630  D000               	nop2	
  5082   002632                     
  5083                           ;dc_motor.c: 152:     }
  5084   002632  061A               	decf	fastStop@i^0,f,c
  5085   002634  A0D8               	btfss	status,0,c
  5086   002636  061B               	decf	(fastStop@i+1)^0,f,c
  5087   002638  EFF6  F012         	goto	l3331
  5088   00263C                     l523:
  5089   00263C  0012               	return		;funcret
  5090   00263E                     __end_of_fastStop:
  5091                           	callstack 0
  5092                           
  5093 ;; *************** function _decideColor *****************
  5094 ;; Defined at:
  5095 ;;		line 161 in file "color.c"
  5096 ;; Parameters:    Size  Location     Type
  5097 ;;  normRGB         1   41[COMRAM] PTR struct normColors
  5098 ;;		 -> main@normRGB(8), 
  5099 ;;  RGBC            1   42[COMRAM] PTR struct colors
  5100 ;;		 -> main@RGBC(8), 
  5101 ;;  mL              1   43[COMRAM] PTR struct DC_motor
  5102 ;;		 -> main@motorL(9), 
  5103 ;;  mR              1   44[COMRAM] PTR struct DC_motor
  5104 ;;		 -> main@motorR(9), 
  5105 ;; Auto vars:     Size  Location     Type
  5106 ;;		None
  5107 ;; Return value:  Size  Location     Type
  5108 ;;                  1    wreg      unsigned char 
  5109 ;; Registers used:
  5110 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5111 ;; Tracked objects:
  5112 ;;		On entry : 0/0
  5113 ;;		On exit  : 0/0
  5114 ;;		Unchanged: 0/0
  5115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5116 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5117 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5118 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5119 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5120 ;;Total ram usage:        6 bytes
  5121 ;; Hardware stack levels used: 1
  5122 ;; Hardware stack levels required when called: 8
  5123 ;; This function calls:
  5124 ;;		_LEDturnON
  5125 ;;		_creep
  5126 ;;		_normalizeColors
  5127 ;;		_readColors
  5128 ;; This function is called by:
  5129 ;;		_main
  5130 ;; This function uses a non-reentrant model
  5131 ;;
  5132                           
  5133                           	psect	text34
  5134   000E02                     __ptext34:
  5135                           	callstack 0
  5136   000E02                     _decideColor:
  5137                           	callstack 22
  5138   000E02                     
  5139                           ;color.c: 162:     if (normRGB->normBlue > 17) {
  5140   000E02  502A               	movf	decideColor@normRGB^0,w,c
  5141   000E04  6ED9               	movwf	fsr2l,c
  5142   000E06  6ADA               	clrf	fsr2h,c
  5143   000E08  0E04               	movlw	4
  5144   000E0A  26D9               	addwf	fsr2l,f,c
  5145   000E0C  0E01               	movlw	1
  5146   000E0E  50DB               	movf	plusw2,w,c
  5147   000E10  E109               	bnz	u1450
  5148   000E12  0E12               	movlw	18
  5149   000E14  5CDE               	subwf	postinc2,w,c
  5150   000E16  A0D8               	btfss	status,0,c
  5151   000E18  EF10  F007         	goto	u1451
  5152   000E1C  EF12  F007         	goto	u1450
  5153   000E20                     u1451:
  5154   000E20  EF21  F007         	goto	l3133
  5155   000E24                     u1450:
  5156   000E24                     
  5157                           ;color.c: 163:         creep(mL, mR, 16, 0);
  5158   000E24  C02C  F01C         	movff	decideColor@mL,creep@mL
  5159   000E28  C02D  F01D         	movff	decideColor@mR,creep@mR
  5160   000E2C  0E00               	movlw	0
  5161   000E2E  6E1F               	movwf	(creep@increments+1)^0,c
  5162   000E30  0E10               	movlw	16
  5163   000E32  6E1E               	movwf	creep@increments^0,c
  5164   000E34  0E00               	movlw	0
  5165   000E36  6E20               	movwf	creep@direction^0,c
  5166   000E38  EC9F  F009         	call	_creep	;wreg free
  5167   000E3C                     
  5168                           ;color.c: 164:         return 2;
  5169   000E3C  0E02               	movlw	2
  5170   000E3E  EFFA  F007         	goto	l64
  5171   000E42                     l3133:
  5172                           
  5173                           ;color.c: 166:     if (normRGB->normBlue > 12 && normRGB->normRed < 50) {
  5174   000E42  502A               	movf	decideColor@normRGB^0,w,c
  5175   000E44  6ED9               	movwf	fsr2l,c
  5176   000E46  6ADA               	clrf	fsr2h,c
  5177   000E48  0E04               	movlw	4
  5178   000E4A  26D9               	addwf	fsr2l,f,c
  5179   000E4C  0E01               	movlw	1
  5180   000E4E  50DB               	movf	plusw2,w,c
  5181   000E50  E109               	bnz	u1460
  5182   000E52  0E0D               	movlw	13
  5183   000E54  5CDE               	subwf	postinc2,w,c
  5184   000E56  A0D8               	btfss	status,0,c
  5185   000E58  EF30  F007         	goto	u1461
  5186   000E5C  EF32  F007         	goto	u1460
  5187   000E60                     u1461:
  5188   000E60  EF44  F007         	goto	l3141
  5189   000E64                     u1460:
  5190   000E64  502A               	movf	decideColor@normRGB^0,w,c
  5191   000E66  6ED9               	movwf	fsr2l,c
  5192   000E68  6ADA               	clrf	fsr2h,c
  5193   000E6A  0E01               	movlw	1
  5194   000E6C  50DB               	movf	plusw2,w,c
  5195   000E6E  E107               	bnz	u1471
  5196   000E70  0E32               	movlw	50
  5197   000E72  5CDE               	subwf	postinc2,w,c
  5198   000E74  B0D8               	btfsc	status,0,c
  5199   000E76  EF3F  F007         	goto	u1471
  5200   000E7A  EF41  F007         	goto	u1470
  5201   000E7E                     u1471:
  5202   000E7E  EF44  F007         	goto	l3141
  5203   000E82                     u1470:
  5204   000E82                     
  5205                           ;color.c: 167:         return 6;
  5206   000E82  0E06               	movlw	6
  5207   000E84  EFFA  F007         	goto	l64
  5208   000E88                     l3141:
  5209                           
  5210                           ;color.c: 169:     if (normRGB->normRed > 70,normRGB->normGreen < 22) {
  5211   000E88  502A               	movf	decideColor@normRGB^0,w,c
  5212   000E8A  6ED9               	movwf	fsr2l,c
  5213   000E8C  6ADA               	clrf	fsr2h,c
  5214   000E8E  0E02               	movlw	2
  5215   000E90  26D9               	addwf	fsr2l,f,c
  5216   000E92  0E01               	movlw	1
  5217   000E94  50DB               	movf	plusw2,w,c
  5218   000E96  E107               	bnz	u1481
  5219   000E98  0E16               	movlw	22
  5220   000E9A  5CDE               	subwf	postinc2,w,c
  5221   000E9C  B0D8               	btfsc	status,0,c
  5222   000E9E  EF53  F007         	goto	u1481
  5223   000EA2  EF55  F007         	goto	u1480
  5224   000EA6                     u1481:
  5225   000EA6  EF58  F007         	goto	l3149
  5226   000EAA                     u1480:
  5227   000EAA                     
  5228                           ;color.c: 170:         return 0;
  5229   000EAA  0E00               	movlw	0
  5230   000EAC  EFFA  F007         	goto	l64
  5231   000EB0                     l3149:
  5232                           
  5233                           ;color.c: 174:         LEDturnON();
  5234   000EB0  ECAC  F015         	call	_LEDturnON	;wreg free
  5235   000EB4                     
  5236                           ;color.c: 175:         _delay((unsigned long)((1000)*(64000000/4000.0)));
  5237   000EB4  0E52               	movlw	82
  5238   000EB6  6E2F               	movwf	(??_decideColor+1)^0,c
  5239   000EB8  0E2B               	movlw	43
  5240   000EBA  6E2E               	movwf	??_decideColor^0,c
  5241   000EBC  0E00               	movlw	0
  5242   000EBE                     u2197:
  5243   000EBE  2EE8               	decfsz	wreg,f,c
  5244   000EC0  D7FE               	bra	u2197
  5245   000EC2  2E2E               	decfsz	??_decideColor^0,f,c
  5246   000EC4  D7FC               	bra	u2197
  5247   000EC6  2E2F               	decfsz	(??_decideColor+1)^0,f,c
  5248   000EC8  D7FA               	bra	u2197
  5249   000ECA  D000               	nop2	
  5250   000ECC                     
  5251                           ;color.c: 176:         creep(mL, mR, 8, 1);
  5252   000ECC  C02C  F01C         	movff	decideColor@mL,creep@mL
  5253   000ED0  C02D  F01D         	movff	decideColor@mR,creep@mR
  5254   000ED4  0E00               	movlw	0
  5255   000ED6  6E1F               	movwf	(creep@increments+1)^0,c
  5256   000ED8  0E08               	movlw	8
  5257   000EDA  6E1E               	movwf	creep@increments^0,c
  5258   000EDC  0E01               	movlw	1
  5259   000EDE  6E20               	movwf	creep@direction^0,c
  5260   000EE0  EC9F  F009         	call	_creep	;wreg free
  5261   000EE4                     
  5262                           ;color.c: 177:         readColors(RGBC);
  5263   000EE4  C02B  F00E         	movff	decideColor@RGBC,readColors@RGBC
  5264   000EE8  ECDE  F00F         	call	_readColors	;wreg free
  5265   000EEC                     
  5266                           ;color.c: 178:         normalizeColors(RGBC, normRGB);
  5267   000EEC  C02B  F010         	movff	decideColor@RGBC,normalizeColors@RGBC
  5268   000EF0  C02A  F011         	movff	decideColor@normRGB,normalizeColors@normRGB
  5269   000EF4  ECB3  F00B         	call	_normalizeColors	;wreg free
  5270   000EF8                     
  5271                           ;color.c: 179:         creep(mL, mR, 16, 0);
  5272   000EF8  C02C  F01C         	movff	decideColor@mL,creep@mL
  5273   000EFC  C02D  F01D         	movff	decideColor@mR,creep@mR
  5274   000F00  0E00               	movlw	0
  5275   000F02  6E1F               	movwf	(creep@increments+1)^0,c
  5276   000F04  0E10               	movlw	16
  5277   000F06  6E1E               	movwf	creep@increments^0,c
  5278   000F08  0E00               	movlw	0
  5279   000F0A  6E20               	movwf	creep@direction^0,c
  5280   000F0C  EC9F  F009         	call	_creep	;wreg free
  5281   000F10                     
  5282                           ;color.c: 182:         if (normRGB->clear < 0x300) {
  5283   000F10  502A               	movf	decideColor@normRGB^0,w,c
  5284   000F12  6ED9               	movwf	fsr2l,c
  5285   000F14  6ADA               	clrf	fsr2h,c
  5286   000F16  0E06               	movlw	6
  5287   000F18  26D9               	addwf	fsr2l,f,c
  5288   000F1A  52DE               	movf	postinc2,f,c
  5289   000F1C  0E03               	movlw	3
  5290   000F1E  5CDE               	subwf	postinc2,w,c
  5291   000F20  B0D8               	btfsc	status,0,c
  5292   000F22  EF95  F007         	goto	u1491
  5293   000F26  EF97  F007         	goto	u1490
  5294   000F2A                     u1491:
  5295   000F2A  EF9A  F007         	goto	l3167
  5296   000F2E                     u1490:
  5297   000F2E                     
  5298                           ;color.c: 183:             return 8;
  5299   000F2E  0E08               	movlw	8
  5300   000F30  EFFA  F007         	goto	l64
  5301   000F34                     l3167:
  5302                           
  5303                           ;color.c: 185:         if (normRGB->normGreen > 48) {
  5304   000F34  502A               	movf	decideColor@normRGB^0,w,c
  5305   000F36  6ED9               	movwf	fsr2l,c
  5306   000F38  6ADA               	clrf	fsr2h,c
  5307   000F3A  0E02               	movlw	2
  5308   000F3C  26D9               	addwf	fsr2l,f,c
  5309   000F3E  0E01               	movlw	1
  5310   000F40  50DB               	movf	plusw2,w,c
  5311   000F42  E109               	bnz	u1500
  5312   000F44  0E31               	movlw	49
  5313   000F46  5CDE               	subwf	postinc2,w,c
  5314   000F48  A0D8               	btfss	status,0,c
  5315   000F4A  EFA9  F007         	goto	u1501
  5316   000F4E  EFAB  F007         	goto	u1500
  5317   000F52                     u1501:
  5318   000F52  EFAE  F007         	goto	l3173
  5319   000F56                     u1500:
  5320   000F56                     
  5321                           ;color.c: 186:             return 1;
  5322   000F56  0E01               	movlw	1
  5323   000F58  EFFA  F007         	goto	l64
  5324   000F5C                     l3173:
  5325                           
  5326                           ;color.c: 188:         if (normRGB->normRed > 60 && normRGB->normGreen < 30) {
  5327   000F5C  502A               	movf	decideColor@normRGB^0,w,c
  5328   000F5E  6ED9               	movwf	fsr2l,c
  5329   000F60  6ADA               	clrf	fsr2h,c
  5330   000F62  0E01               	movlw	1
  5331   000F64  50DB               	movf	plusw2,w,c
  5332   000F66  E109               	bnz	u1510
  5333   000F68  0E3D               	movlw	61
  5334   000F6A  5CDE               	subwf	postinc2,w,c
  5335   000F6C  A0D8               	btfss	status,0,c
  5336   000F6E  EFBB  F007         	goto	u1511
  5337   000F72  EFBD  F007         	goto	u1510
  5338   000F76                     u1511:
  5339   000F76  EFD1  F007         	goto	l3181
  5340   000F7A                     u1510:
  5341   000F7A  502A               	movf	decideColor@normRGB^0,w,c
  5342   000F7C  6ED9               	movwf	fsr2l,c
  5343   000F7E  6ADA               	clrf	fsr2h,c
  5344   000F80  0E02               	movlw	2
  5345   000F82  26D9               	addwf	fsr2l,f,c
  5346   000F84  0E01               	movlw	1
  5347   000F86  50DB               	movf	plusw2,w,c
  5348   000F88  E107               	bnz	u1521
  5349   000F8A  0E1E               	movlw	30
  5350   000F8C  5CDE               	subwf	postinc2,w,c
  5351   000F8E  B0D8               	btfsc	status,0,c
  5352   000F90  EFCC  F007         	goto	u1521
  5353   000F94  EFCE  F007         	goto	u1520
  5354   000F98                     u1521:
  5355   000F98  EFD1  F007         	goto	l3181
  5356   000F9C                     u1520:
  5357   000F9C                     
  5358                           ;color.c: 189:             return 5;
  5359   000F9C  0E05               	movlw	5
  5360   000F9E  EFFA  F007         	goto	l64
  5361   000FA2                     l3181:
  5362                           
  5363                           ;color.c: 191:         if (normRGB->normBlue < 7) {
  5364   000FA2  502A               	movf	decideColor@normRGB^0,w,c
  5365   000FA4  6ED9               	movwf	fsr2l,c
  5366   000FA6  6ADA               	clrf	fsr2h,c
  5367   000FA8  0E04               	movlw	4
  5368   000FAA  26D9               	addwf	fsr2l,f,c
  5369   000FAC  0E01               	movlw	1
  5370   000FAE  50DB               	movf	plusw2,w,c
  5371   000FB0  E107               	bnz	u1531
  5372   000FB2  0E07               	movlw	7
  5373   000FB4  5CDE               	subwf	postinc2,w,c
  5374   000FB6  B0D8               	btfsc	status,0,c
  5375   000FB8  EFE0  F007         	goto	u1531
  5376   000FBC  EFE2  F007         	goto	u1530
  5377   000FC0                     u1531:
  5378   000FC0  EFE5  F007         	goto	l3189
  5379   000FC4                     u1530:
  5380   000FC4                     
  5381                           ;color.c: 192:             return 3;
  5382   000FC4  0E03               	movlw	3
  5383   000FC6  EFFA  F007         	goto	l64
  5384   000FCA                     l3189:
  5385                           
  5386                           ;color.c: 195:             if (normRGB->normGreen > 34) {
  5387   000FCA  502A               	movf	decideColor@normRGB^0,w,c
  5388   000FCC  6ED9               	movwf	fsr2l,c
  5389   000FCE  6ADA               	clrf	fsr2h,c
  5390   000FD0  0E02               	movlw	2
  5391   000FD2  26D9               	addwf	fsr2l,f,c
  5392   000FD4  0E01               	movlw	1
  5393   000FD6  50DB               	movf	plusw2,w,c
  5394   000FD8  E109               	bnz	u1540
  5395   000FDA  0E23               	movlw	35
  5396   000FDC  5CDE               	subwf	postinc2,w,c
  5397   000FDE  A0D8               	btfss	status,0,c
  5398   000FE0  EFF4  F007         	goto	u1541
  5399   000FE4  EFF6  F007         	goto	u1540
  5400   000FE8                     u1541:
  5401   000FE8  EFF9  F007         	goto	l3197
  5402   000FEC                     u1540:
  5403   000FEC                     
  5404                           ;color.c: 196:                 return 7;
  5405   000FEC  0E07               	movlw	7
  5406   000FEE  EFFA  F007         	goto	l64
  5407   000FF2                     l3197:
  5408                           
  5409                           ;color.c: 199:                 return 4;
  5410   000FF2  0E04               	movlw	4
  5411   000FF4                     l64:
  5412   000FF4  0012               	return		;funcret
  5413   000FF6                     __end_of_decideColor:
  5414                           	callstack 0
  5415                           
  5416 ;; *************** function _readColors *****************
  5417 ;; Defined at:
  5418 ;;		line 130 in file "color.c"
  5419 ;; Parameters:    Size  Location     Type
  5420 ;;  RGBC            1   13[COMRAM] PTR struct colors
  5421 ;;		 -> main@RGBC(8), 
  5422 ;; Auto vars:     Size  Location     Type
  5423 ;;		None
  5424 ;; Return value:  Size  Location     Type
  5425 ;;                  1    wreg      void 
  5426 ;; Registers used:
  5427 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5428 ;; Tracked objects:
  5429 ;;		On entry : 0/0
  5430 ;;		On exit  : 0/0
  5431 ;;		Unchanged: 0/0
  5432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5433 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5434 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5435 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5436 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5437 ;;Total ram usage:        3 bytes
  5438 ;; Hardware stack levels used: 1
  5439 ;; Hardware stack levels required when called: 7
  5440 ;; This function calls:
  5441 ;;		_LEDturnOFF
  5442 ;;		_LEDturnON
  5443 ;;		_readBlueColor
  5444 ;;		_readClearColor
  5445 ;;		_readGreenColor
  5446 ;;		_readRedColor
  5447 ;; This function is called by:
  5448 ;;		_decideColor
  5449 ;;		_main
  5450 ;; This function uses a non-reentrant model
  5451 ;;
  5452                           
  5453                           	psect	text35
  5454   001FBC                     __ptext35:
  5455                           	callstack 0
  5456   001FBC                     _readColors:
  5457                           	callstack 23
  5458   001FBC                     
  5459                           ;color.c: 133:     LEDturnON();
  5460   001FBC  ECAC  F015         	call	_LEDturnON	;wreg free
  5461   001FC0                     
  5462                           ;color.c: 134:     RGBC->clear = readClearColor();
  5463   001FC0  ECCC  F013         	call	_readClearColor	;wreg free
  5464   001FC4  500E               	movf	readColors@RGBC^0,w,c
  5465   001FC6  6ED9               	movwf	fsr2l,c
  5466   001FC8  6ADA               	clrf	fsr2h,c
  5467   001FCA  0E06               	movlw	6
  5468   001FCC  26D9               	addwf	fsr2l,f,c
  5469   001FCE  C007  FFDE         	movff	?_readClearColor,postinc2
  5470   001FD2  C008  FFDD         	movff	?_readClearColor+1,postdec2
  5471   001FD6                     
  5472                           ;color.c: 135:     _delay((unsigned long)((100)*(64000000/4000.0)));
  5473   001FD6  0E09               	movlw	9
  5474   001FD8  6E10               	movwf	(??_readColors+1)^0,c
  5475   001FDA  0E1E               	movlw	30
  5476   001FDC  6E0F               	movwf	??_readColors^0,c
  5477   001FDE  0EE4               	movlw	228
  5478   001FE0                     u2207:
  5479   001FE0  2EE8               	decfsz	wreg,f,c
  5480   001FE2  D7FE               	bra	u2207
  5481   001FE4  2E0F               	decfsz	??_readColors^0,f,c
  5482   001FE6  D7FC               	bra	u2207
  5483   001FE8  2E10               	decfsz	(??_readColors+1)^0,f,c
  5484   001FEA  D7FA               	bra	u2207
  5485   001FEC  D000               	nop2	
  5486   001FEE                     
  5487                           ;color.c: 136:     LEDturnOFF();
  5488   001FEE  ECB1  F015         	call	_LEDturnOFF	;wreg free
  5489   001FF2                     
  5490                           ;color.c: 139:     LATGbits.LATG0 = 1;
  5491   001FF2  807F               	bsf	127,0,c	;volatile
  5492   001FF4                     
  5493                           ;color.c: 140:     _delay((unsigned long)((100)*(64000000/4000.0)));
  5494   001FF4  0E09               	movlw	9
  5495   001FF6  6E10               	movwf	(??_readColors+1)^0,c
  5496   001FF8  0E1E               	movlw	30
  5497   001FFA  6E0F               	movwf	??_readColors^0,c
  5498   001FFC  0EE4               	movlw	228
  5499   001FFE                     u2217:
  5500   001FFE  2EE8               	decfsz	wreg,f,c
  5501   002000  D7FE               	bra	u2217
  5502   002002  2E0F               	decfsz	??_readColors^0,f,c
  5503   002004  D7FC               	bra	u2217
  5504   002006  2E10               	decfsz	(??_readColors+1)^0,f,c
  5505   002008  D7FA               	bra	u2217
  5506   00200A  D000               	nop2	
  5507                           
  5508                           ;color.c: 141:     RGBC->red = readRedColor();
  5509   00200C  EC7C  F013         	call	_readRedColor	;wreg free
  5510   002010  500E               	movf	readColors@RGBC^0,w,c
  5511   002012  6ED9               	movwf	fsr2l,c
  5512   002014  6ADA               	clrf	fsr2h,c
  5513   002016  C007  FFDE         	movff	?_readRedColor,postinc2
  5514   00201A  C008  FFDD         	movff	?_readRedColor+1,postdec2
  5515   00201E                     
  5516                           ;color.c: 142:     _delay((unsigned long)((100)*(64000000/4000.0)));
  5517   00201E  0E09               	movlw	9
  5518   002020  6E10               	movwf	(??_readColors+1)^0,c
  5519   002022  0E1E               	movlw	30
  5520   002024  6E0F               	movwf	??_readColors^0,c
  5521   002026  0EE4               	movlw	228
  5522   002028                     u2227:
  5523   002028  2EE8               	decfsz	wreg,f,c
  5524   00202A  D7FE               	bra	u2227
  5525   00202C  2E0F               	decfsz	??_readColors^0,f,c
  5526   00202E  D7FC               	bra	u2227
  5527   002030  2E10               	decfsz	(??_readColors+1)^0,f,c
  5528   002032  D7FA               	bra	u2227
  5529   002034  D000               	nop2	
  5530   002036                     
  5531                           ;color.c: 143:     LATGbits.LATG0 = 0;
  5532   002036  907F               	bcf	127,0,c	;volatile
  5533   002038                     
  5534                           ;color.c: 146:     LATEbits.LATE7 = 1;
  5535   002038  8E7D               	bsf	125,7,c	;volatile
  5536   00203A                     
  5537                           ;color.c: 147:     _delay((unsigned long)((100)*(64000000/4000.0)));
  5538   00203A  0E09               	movlw	9
  5539   00203C  6E10               	movwf	(??_readColors+1)^0,c
  5540   00203E  0E1E               	movlw	30
  5541   002040  6E0F               	movwf	??_readColors^0,c
  5542   002042  0EE4               	movlw	228
  5543   002044                     u2237:
  5544   002044  2EE8               	decfsz	wreg,f,c
  5545   002046  D7FE               	bra	u2237
  5546   002048  2E0F               	decfsz	??_readColors^0,f,c
  5547   00204A  D7FC               	bra	u2237
  5548   00204C  2E10               	decfsz	(??_readColors+1)^0,f,c
  5549   00204E  D7FA               	bra	u2237
  5550   002050  D000               	nop2	
  5551                           
  5552                           ;color.c: 148:     RGBC->green = readGreenColor();
  5553   002052  ECA4  F013         	call	_readGreenColor	;wreg free
  5554   002056  500E               	movf	readColors@RGBC^0,w,c
  5555   002058  6ED9               	movwf	fsr2l,c
  5556   00205A  6ADA               	clrf	fsr2h,c
  5557   00205C  0E02               	movlw	2
  5558   00205E  26D9               	addwf	fsr2l,f,c
  5559   002060  C007  FFDE         	movff	?_readGreenColor,postinc2
  5560   002064  C008  FFDD         	movff	?_readGreenColor+1,postdec2
  5561   002068                     
  5562                           ;color.c: 149:     _delay((unsigned long)((100)*(64000000/4000.0)));
  5563   002068  0E09               	movlw	9
  5564   00206A  6E10               	movwf	(??_readColors+1)^0,c
  5565   00206C  0E1E               	movlw	30
  5566   00206E  6E0F               	movwf	??_readColors^0,c
  5567   002070  0EE4               	movlw	228
  5568   002072                     u2247:
  5569   002072  2EE8               	decfsz	wreg,f,c
  5570   002074  D7FE               	bra	u2247
  5571   002076  2E0F               	decfsz	??_readColors^0,f,c
  5572   002078  D7FC               	bra	u2247
  5573   00207A  2E10               	decfsz	(??_readColors+1)^0,f,c
  5574   00207C  D7FA               	bra	u2247
  5575   00207E  D000               	nop2	
  5576   002080                     
  5577                           ;color.c: 150:     LATEbits.LATE7 = 0;
  5578   002080  9E7D               	bcf	125,7,c	;volatile
  5579   002082                     
  5580                           ;color.c: 153:     LATAbits.LATA3 = 1;
  5581   002082  8679               	bsf	121,3,c	;volatile
  5582   002084                     
  5583                           ;color.c: 154:     _delay((unsigned long)((100)*(64000000/4000.0)));
  5584   002084  0E09               	movlw	9
  5585   002086  6E10               	movwf	(??_readColors+1)^0,c
  5586   002088  0E1E               	movlw	30
  5587   00208A  6E0F               	movwf	??_readColors^0,c
  5588   00208C  0EE4               	movlw	228
  5589   00208E                     u2257:
  5590   00208E  2EE8               	decfsz	wreg,f,c
  5591   002090  D7FE               	bra	u2257
  5592   002092  2E0F               	decfsz	??_readColors^0,f,c
  5593   002094  D7FC               	bra	u2257
  5594   002096  2E10               	decfsz	(??_readColors+1)^0,f,c
  5595   002098  D7FA               	bra	u2257
  5596   00209A  D000               	nop2	
  5597                           
  5598                           ;color.c: 155:     RGBC->blue = readBlueColor();
  5599   00209C  ECF4  F013         	call	_readBlueColor	;wreg free
  5600   0020A0  500E               	movf	readColors@RGBC^0,w,c
  5601   0020A2  6ED9               	movwf	fsr2l,c
  5602   0020A4  6ADA               	clrf	fsr2h,c
  5603   0020A6  0E04               	movlw	4
  5604   0020A8  26D9               	addwf	fsr2l,f,c
  5605   0020AA  C007  FFDE         	movff	?_readBlueColor,postinc2
  5606   0020AE  C008  FFDD         	movff	?_readBlueColor+1,postdec2
  5607   0020B2                     
  5608                           ;color.c: 156:     _delay((unsigned long)((100)*(64000000/4000.0)));
  5609   0020B2  0E09               	movlw	9
  5610   0020B4  6E10               	movwf	(??_readColors+1)^0,c
  5611   0020B6  0E1E               	movlw	30
  5612   0020B8  6E0F               	movwf	??_readColors^0,c
  5613   0020BA  0EE4               	movlw	228
  5614   0020BC                     u2267:
  5615   0020BC  2EE8               	decfsz	wreg,f,c
  5616   0020BE  D7FE               	bra	u2267
  5617   0020C0  2E0F               	decfsz	??_readColors^0,f,c
  5618   0020C2  D7FC               	bra	u2267
  5619   0020C4  2E10               	decfsz	(??_readColors+1)^0,f,c
  5620   0020C6  D7FA               	bra	u2267
  5621   0020C8  D000               	nop2	
  5622   0020CA                     
  5623                           ;color.c: 157:     LATAbits.LATA3 = 0;
  5624   0020CA  9679               	bcf	121,3,c	;volatile
  5625   0020CC  0012               	return		;funcret
  5626   0020CE                     __end_of_readColors:
  5627                           	callstack 0
  5628                           
  5629 ;; *************** function _readRedColor *****************
  5630 ;; Defined at:
  5631 ;;		line 57 in file "color.c"
  5632 ;; Parameters:    Size  Location     Type
  5633 ;;		None
  5634 ;; Auto vars:     Size  Location     Type
  5635 ;;  tmp             2   11[COMRAM] unsigned int 
  5636 ;; Return value:  Size  Location     Type
  5637 ;;                  2    6[COMRAM] unsigned int 
  5638 ;; Registers used:
  5639 ;;		wreg, status,2, status,0, cstack
  5640 ;; Tracked objects:
  5641 ;;		On entry : 0/0
  5642 ;;		On exit  : 0/0
  5643 ;;		Unchanged: 0/0
  5644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5645 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5646 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5647 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5648 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5649 ;;Total ram usage:        7 bytes
  5650 ;; Hardware stack levels used: 1
  5651 ;; Hardware stack levels required when called: 6
  5652 ;; This function calls:
  5653 ;;		_I2C_2_Master_Read
  5654 ;;		_I2C_2_Master_RepStart
  5655 ;;		_I2C_2_Master_Start
  5656 ;;		_I2C_2_Master_Stop
  5657 ;;		_I2C_2_Master_Write
  5658 ;; This function is called by:
  5659 ;;		_readColors
  5660 ;; This function uses a non-reentrant model
  5661 ;;
  5662                           
  5663                           	psect	text36
  5664   0026F8                     __ptext36:
  5665                           	callstack 0
  5666   0026F8                     _readRedColor:
  5667                           	callstack 23
  5668   0026F8                     
  5669                           ;color.c: 59:  unsigned int tmp;;color.c: 60:  I2C_2_Master_Start();
  5670   0026F8  ECBB  F015         	call	_I2C_2_Master_Start	;wreg free
  5671                           
  5672                           ;color.c: 61:  I2C_2_Master_Write(0x52 | 0x00);
  5673   0026FC  0E52               	movlw	82
  5674   0026FE  EC96  F015         	call	_I2C_2_Master_Write
  5675                           
  5676                           ;color.c: 62:  I2C_2_Master_Write(0xA0 | 0x16);
  5677   002702  0EB6               	movlw	182
  5678   002704  EC96  F015         	call	_I2C_2_Master_Write
  5679                           
  5680                           ;color.c: 63:  I2C_2_Master_RepStart();
  5681   002708  ECA7  F015         	call	_I2C_2_Master_RepStart	;wreg free
  5682                           
  5683                           ;color.c: 64:  I2C_2_Master_Write(0x52 | 0x01);
  5684   00270C  0E53               	movlw	83
  5685   00270E  EC96  F015         	call	_I2C_2_Master_Write
  5686                           
  5687                           ;color.c: 65:  tmp=I2C_2_Master_Read(1);
  5688   002712  0E01               	movlw	1
  5689   002714  EC1C  F014         	call	_I2C_2_Master_Read
  5690   002718  6E09               	movwf	??_readRedColor^0,c
  5691   00271A  5009               	movf	??_readRedColor^0,w,c
  5692   00271C  6E0C               	movwf	readRedColor@tmp^0,c
  5693   00271E  6A0D               	clrf	(readRedColor@tmp+1)^0,c
  5694                           
  5695                           ;color.c: 66:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5696   002720  0E00               	movlw	0
  5697   002722  EC1C  F014         	call	_I2C_2_Master_Read
  5698   002726  6E09               	movwf	??_readRedColor^0,c
  5699   002728  5009               	movf	??_readRedColor^0,w,c
  5700   00272A  6E0B               	movwf	(??_readRedColor+2)^0,c
  5701   00272C  6A0A               	clrf	(??_readRedColor+1)^0,c
  5702   00272E  500C               	movf	readRedColor@tmp^0,w,c
  5703   002730  100A               	iorwf	(??_readRedColor+1)^0,w,c
  5704   002732  6E0C               	movwf	readRedColor@tmp^0,c
  5705   002734  500D               	movf	(readRedColor@tmp+1)^0,w,c
  5706   002736  100B               	iorwf	(??_readRedColor+2)^0,w,c
  5707   002738  6E0D               	movwf	(readRedColor@tmp+1)^0,c
  5708                           
  5709                           ;color.c: 67:  I2C_2_Master_Stop();
  5710   00273A  ECB6  F015         	call	_I2C_2_Master_Stop	;wreg free
  5711   00273E                     
  5712                           ;color.c: 68:  return tmp;
  5713   00273E  C00C  F007         	movff	readRedColor@tmp,?_readRedColor
  5714   002742  C00D  F008         	movff	readRedColor@tmp+1,?_readRedColor+1
  5715   002746  0012               	return		;funcret
  5716   002748                     __end_of_readRedColor:
  5717                           	callstack 0
  5718                           
  5719 ;; *************** function _readGreenColor *****************
  5720 ;; Defined at:
  5721 ;;		line 72 in file "color.c"
  5722 ;; Parameters:    Size  Location     Type
  5723 ;;		None
  5724 ;; Auto vars:     Size  Location     Type
  5725 ;;  tmp             2   11[COMRAM] unsigned int 
  5726 ;; Return value:  Size  Location     Type
  5727 ;;                  2    6[COMRAM] unsigned int 
  5728 ;; Registers used:
  5729 ;;		wreg, status,2, status,0, cstack
  5730 ;; Tracked objects:
  5731 ;;		On entry : 0/0
  5732 ;;		On exit  : 0/0
  5733 ;;		Unchanged: 0/0
  5734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5735 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5736 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5737 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5738 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5739 ;;Total ram usage:        7 bytes
  5740 ;; Hardware stack levels used: 1
  5741 ;; Hardware stack levels required when called: 6
  5742 ;; This function calls:
  5743 ;;		_I2C_2_Master_Read
  5744 ;;		_I2C_2_Master_RepStart
  5745 ;;		_I2C_2_Master_Start
  5746 ;;		_I2C_2_Master_Stop
  5747 ;;		_I2C_2_Master_Write
  5748 ;; This function is called by:
  5749 ;;		_readColors
  5750 ;; This function uses a non-reentrant model
  5751 ;;
  5752                           
  5753                           	psect	text37
  5754   002748                     __ptext37:
  5755                           	callstack 0
  5756   002748                     _readGreenColor:
  5757                           	callstack 23
  5758   002748                     
  5759                           ;color.c: 74:  unsigned int tmp;;color.c: 75:  I2C_2_Master_Start();
  5760   002748  ECBB  F015         	call	_I2C_2_Master_Start	;wreg free
  5761                           
  5762                           ;color.c: 76:  I2C_2_Master_Write(0x52 | 0x00);
  5763   00274C  0E52               	movlw	82
  5764   00274E  EC96  F015         	call	_I2C_2_Master_Write
  5765                           
  5766                           ;color.c: 77:  I2C_2_Master_Write(0xA0 | 0x18);
  5767   002752  0EB8               	movlw	184
  5768   002754  EC96  F015         	call	_I2C_2_Master_Write
  5769                           
  5770                           ;color.c: 78:  I2C_2_Master_RepStart();
  5771   002758  ECA7  F015         	call	_I2C_2_Master_RepStart	;wreg free
  5772                           
  5773                           ;color.c: 79:  I2C_2_Master_Write(0x52 | 0x01);
  5774   00275C  0E53               	movlw	83
  5775   00275E  EC96  F015         	call	_I2C_2_Master_Write
  5776                           
  5777                           ;color.c: 80:  tmp=I2C_2_Master_Read(1);
  5778   002762  0E01               	movlw	1
  5779   002764  EC1C  F014         	call	_I2C_2_Master_Read
  5780   002768  6E09               	movwf	??_readGreenColor^0,c
  5781   00276A  5009               	movf	??_readGreenColor^0,w,c
  5782   00276C  6E0C               	movwf	readGreenColor@tmp^0,c
  5783   00276E  6A0D               	clrf	(readGreenColor@tmp+1)^0,c
  5784                           
  5785                           ;color.c: 81:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5786   002770  0E00               	movlw	0
  5787   002772  EC1C  F014         	call	_I2C_2_Master_Read
  5788   002776  6E09               	movwf	??_readGreenColor^0,c
  5789   002778  5009               	movf	??_readGreenColor^0,w,c
  5790   00277A  6E0B               	movwf	(??_readGreenColor+2)^0,c
  5791   00277C  6A0A               	clrf	(??_readGreenColor+1)^0,c
  5792   00277E  500C               	movf	readGreenColor@tmp^0,w,c
  5793   002780  100A               	iorwf	(??_readGreenColor+1)^0,w,c
  5794   002782  6E0C               	movwf	readGreenColor@tmp^0,c
  5795   002784  500D               	movf	(readGreenColor@tmp+1)^0,w,c
  5796   002786  100B               	iorwf	(??_readGreenColor+2)^0,w,c
  5797   002788  6E0D               	movwf	(readGreenColor@tmp+1)^0,c
  5798                           
  5799                           ;color.c: 82:  I2C_2_Master_Stop();
  5800   00278A  ECB6  F015         	call	_I2C_2_Master_Stop	;wreg free
  5801   00278E                     
  5802                           ;color.c: 83:  return tmp;
  5803   00278E  C00C  F007         	movff	readGreenColor@tmp,?_readGreenColor
  5804   002792  C00D  F008         	movff	readGreenColor@tmp+1,?_readGreenColor+1
  5805   002796  0012               	return		;funcret
  5806   002798                     __end_of_readGreenColor:
  5807                           	callstack 0
  5808                           
  5809 ;; *************** function _readClearColor *****************
  5810 ;; Defined at:
  5811 ;;		line 102 in file "color.c"
  5812 ;; Parameters:    Size  Location     Type
  5813 ;;		None
  5814 ;; Auto vars:     Size  Location     Type
  5815 ;;  tmp             2   11[COMRAM] unsigned int 
  5816 ;; Return value:  Size  Location     Type
  5817 ;;                  2    6[COMRAM] unsigned int 
  5818 ;; Registers used:
  5819 ;;		wreg, status,2, status,0, cstack
  5820 ;; Tracked objects:
  5821 ;;		On entry : 0/0
  5822 ;;		On exit  : 0/0
  5823 ;;		Unchanged: 0/0
  5824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5825 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5826 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5827 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5828 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5829 ;;Total ram usage:        7 bytes
  5830 ;; Hardware stack levels used: 1
  5831 ;; Hardware stack levels required when called: 6
  5832 ;; This function calls:
  5833 ;;		_I2C_2_Master_Read
  5834 ;;		_I2C_2_Master_RepStart
  5835 ;;		_I2C_2_Master_Start
  5836 ;;		_I2C_2_Master_Stop
  5837 ;;		_I2C_2_Master_Write
  5838 ;; This function is called by:
  5839 ;;		_readColors
  5840 ;; This function uses a non-reentrant model
  5841 ;;
  5842                           
  5843                           	psect	text38
  5844   002798                     __ptext38:
  5845                           	callstack 0
  5846   002798                     _readClearColor:
  5847                           	callstack 23
  5848   002798                     
  5849                           ;color.c: 104:  unsigned int tmp;;color.c: 105:  I2C_2_Master_Start();
  5850   002798  ECBB  F015         	call	_I2C_2_Master_Start	;wreg free
  5851                           
  5852                           ;color.c: 106:  I2C_2_Master_Write(0x52 | 0x00);
  5853   00279C  0E52               	movlw	82
  5854   00279E  EC96  F015         	call	_I2C_2_Master_Write
  5855                           
  5856                           ;color.c: 107:  I2C_2_Master_Write(0xA0 | 0x14);
  5857   0027A2  0EB4               	movlw	180
  5858   0027A4  EC96  F015         	call	_I2C_2_Master_Write
  5859                           
  5860                           ;color.c: 108:  I2C_2_Master_RepStart();
  5861   0027A8  ECA7  F015         	call	_I2C_2_Master_RepStart	;wreg free
  5862                           
  5863                           ;color.c: 109:  I2C_2_Master_Write(0x52 | 0x01);
  5864   0027AC  0E53               	movlw	83
  5865   0027AE  EC96  F015         	call	_I2C_2_Master_Write
  5866                           
  5867                           ;color.c: 110:  tmp=I2C_2_Master_Read(1);
  5868   0027B2  0E01               	movlw	1
  5869   0027B4  EC1C  F014         	call	_I2C_2_Master_Read
  5870   0027B8  6E09               	movwf	??_readClearColor^0,c
  5871   0027BA  5009               	movf	??_readClearColor^0,w,c
  5872   0027BC  6E0C               	movwf	readClearColor@tmp^0,c
  5873   0027BE  6A0D               	clrf	(readClearColor@tmp+1)^0,c
  5874                           
  5875                           ;color.c: 111:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5876   0027C0  0E00               	movlw	0
  5877   0027C2  EC1C  F014         	call	_I2C_2_Master_Read
  5878   0027C6  6E09               	movwf	??_readClearColor^0,c
  5879   0027C8  5009               	movf	??_readClearColor^0,w,c
  5880   0027CA  6E0B               	movwf	(??_readClearColor+2)^0,c
  5881   0027CC  6A0A               	clrf	(??_readClearColor+1)^0,c
  5882   0027CE  500C               	movf	readClearColor@tmp^0,w,c
  5883   0027D0  100A               	iorwf	(??_readClearColor+1)^0,w,c
  5884   0027D2  6E0C               	movwf	readClearColor@tmp^0,c
  5885   0027D4  500D               	movf	(readClearColor@tmp+1)^0,w,c
  5886   0027D6  100B               	iorwf	(??_readClearColor+2)^0,w,c
  5887   0027D8  6E0D               	movwf	(readClearColor@tmp+1)^0,c
  5888                           
  5889                           ;color.c: 112:  I2C_2_Master_Stop();
  5890   0027DA  ECB6  F015         	call	_I2C_2_Master_Stop	;wreg free
  5891   0027DE                     
  5892                           ;color.c: 113:  return tmp;
  5893   0027DE  C00C  F007         	movff	readClearColor@tmp,?_readClearColor
  5894   0027E2  C00D  F008         	movff	readClearColor@tmp+1,?_readClearColor+1
  5895   0027E6  0012               	return		;funcret
  5896   0027E8                     __end_of_readClearColor:
  5897                           	callstack 0
  5898                           
  5899 ;; *************** function _readBlueColor *****************
  5900 ;; Defined at:
  5901 ;;		line 87 in file "color.c"
  5902 ;; Parameters:    Size  Location     Type
  5903 ;;		None
  5904 ;; Auto vars:     Size  Location     Type
  5905 ;;  tmp             2   11[COMRAM] unsigned int 
  5906 ;; Return value:  Size  Location     Type
  5907 ;;                  2    6[COMRAM] unsigned int 
  5908 ;; Registers used:
  5909 ;;		wreg, status,2, status,0, cstack
  5910 ;; Tracked objects:
  5911 ;;		On entry : 0/0
  5912 ;;		On exit  : 0/0
  5913 ;;		Unchanged: 0/0
  5914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5915 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5916 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5917 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5918 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5919 ;;Total ram usage:        7 bytes
  5920 ;; Hardware stack levels used: 1
  5921 ;; Hardware stack levels required when called: 6
  5922 ;; This function calls:
  5923 ;;		_I2C_2_Master_Read
  5924 ;;		_I2C_2_Master_RepStart
  5925 ;;		_I2C_2_Master_Start
  5926 ;;		_I2C_2_Master_Stop
  5927 ;;		_I2C_2_Master_Write
  5928 ;; This function is called by:
  5929 ;;		_readColors
  5930 ;; This function uses a non-reentrant model
  5931 ;;
  5932                           
  5933                           	psect	text39
  5934   0027E8                     __ptext39:
  5935                           	callstack 0
  5936   0027E8                     _readBlueColor:
  5937                           	callstack 23
  5938   0027E8                     
  5939                           ;color.c: 89:  unsigned int tmp;;color.c: 90:  I2C_2_Master_Start();
  5940   0027E8  ECBB  F015         	call	_I2C_2_Master_Start	;wreg free
  5941                           
  5942                           ;color.c: 91:  I2C_2_Master_Write(0x52 | 0x00);
  5943   0027EC  0E52               	movlw	82
  5944   0027EE  EC96  F015         	call	_I2C_2_Master_Write
  5945                           
  5946                           ;color.c: 92:  I2C_2_Master_Write(0xA0 | 0x1A);
  5947   0027F2  0EBA               	movlw	186
  5948   0027F4  EC96  F015         	call	_I2C_2_Master_Write
  5949                           
  5950                           ;color.c: 93:  I2C_2_Master_RepStart();
  5951   0027F8  ECA7  F015         	call	_I2C_2_Master_RepStart	;wreg free
  5952                           
  5953                           ;color.c: 94:  I2C_2_Master_Write(0x52 | 0x01);
  5954   0027FC  0E53               	movlw	83
  5955   0027FE  EC96  F015         	call	_I2C_2_Master_Write
  5956                           
  5957                           ;color.c: 95:  tmp=I2C_2_Master_Read(1);
  5958   002802  0E01               	movlw	1
  5959   002804  EC1C  F014         	call	_I2C_2_Master_Read
  5960   002808  6E09               	movwf	??_readBlueColor^0,c
  5961   00280A  5009               	movf	??_readBlueColor^0,w,c
  5962   00280C  6E0C               	movwf	readBlueColor@tmp^0,c
  5963   00280E  6A0D               	clrf	(readBlueColor@tmp+1)^0,c
  5964                           
  5965                           ;color.c: 96:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5966   002810  0E00               	movlw	0
  5967   002812  EC1C  F014         	call	_I2C_2_Master_Read
  5968   002816  6E09               	movwf	??_readBlueColor^0,c
  5969   002818  5009               	movf	??_readBlueColor^0,w,c
  5970   00281A  6E0B               	movwf	(??_readBlueColor+2)^0,c
  5971   00281C  6A0A               	clrf	(??_readBlueColor+1)^0,c
  5972   00281E  500C               	movf	readBlueColor@tmp^0,w,c
  5973   002820  100A               	iorwf	(??_readBlueColor+1)^0,w,c
  5974   002822  6E0C               	movwf	readBlueColor@tmp^0,c
  5975   002824  500D               	movf	(readBlueColor@tmp+1)^0,w,c
  5976   002826  100B               	iorwf	(??_readBlueColor+2)^0,w,c
  5977   002828  6E0D               	movwf	(readBlueColor@tmp+1)^0,c
  5978                           
  5979                           ;color.c: 97:  I2C_2_Master_Stop();
  5980   00282A  ECB6  F015         	call	_I2C_2_Master_Stop	;wreg free
  5981   00282E                     
  5982                           ;color.c: 98:  return tmp;
  5983   00282E  C00C  F007         	movff	readBlueColor@tmp,?_readBlueColor
  5984   002832  C00D  F008         	movff	readBlueColor@tmp+1,?_readBlueColor+1
  5985   002836  0012               	return		;funcret
  5986   002838                     __end_of_readBlueColor:
  5987                           	callstack 0
  5988                           
  5989 ;; *************** function _I2C_2_Master_RepStart *****************
  5990 ;; Defined at:
  5991 ;;		line 37 in file "i2c.c"
  5992 ;; Parameters:    Size  Location     Type
  5993 ;;		None
  5994 ;; Auto vars:     Size  Location     Type
  5995 ;;		None
  5996 ;; Return value:  Size  Location     Type
  5997 ;;                  1    wreg      void 
  5998 ;; Registers used:
  5999 ;;		wreg, status,2, status,0, cstack
  6000 ;; Tracked objects:
  6001 ;;		On entry : 0/0
  6002 ;;		On exit  : 0/0
  6003 ;;		Unchanged: 0/0
  6004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6005 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6006 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6007 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6008 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6009 ;;Total ram usage:        0 bytes
  6010 ;; Hardware stack levels used: 1
  6011 ;; Hardware stack levels required when called: 5
  6012 ;; This function calls:
  6013 ;;		_I2C_2_Master_Idle
  6014 ;; This function is called by:
  6015 ;;		_readRedColor
  6016 ;;		_readGreenColor
  6017 ;;		_readBlueColor
  6018 ;;		_readClearColor
  6019 ;;		_color_readdoublefromaddress
  6020 ;;		_color_readfromaddress
  6021 ;; This function uses a non-reentrant model
  6022 ;;
  6023                           
  6024                           	psect	text40
  6025   002B4E                     __ptext40:
  6026                           	callstack 0
  6027   002B4E                     _I2C_2_Master_RepStart:
  6028                           	callstack 23
  6029   002B4E                     
  6030                           ;i2c.c: 39:   I2C_2_Master_Idle();
  6031   002B4E  ECB4  F014         	call	_I2C_2_Master_Idle	;wreg free
  6032   002B52                     
  6033                           ;i2c.c: 40:   SSP2CON2bits.RSEN = 1;
  6034   002B52  010E               	movlb	14	; () banked
  6035   002B54  83DA               	bsf	218,1,b	;volatile
  6036   002B56                     
  6037                           ; BSR set to: 14
  6038   002B56  0012               	return		;funcret
  6039   002B58                     __end_of_I2C_2_Master_RepStart:
  6040                           	callstack 0
  6041                           
  6042 ;; *************** function _I2C_2_Master_Read *****************
  6043 ;; Defined at:
  6044 ;;		line 55 in file "i2c.c"
  6045 ;; Parameters:    Size  Location     Type
  6046 ;;  ack             1    wreg     unsigned char 
  6047 ;; Auto vars:     Size  Location     Type
  6048 ;;  ack             1    4[COMRAM] unsigned char 
  6049 ;;  tmp             1    5[COMRAM] unsigned char 
  6050 ;; Return value:  Size  Location     Type
  6051 ;;                  1    wreg      unsigned char 
  6052 ;; Registers used:
  6053 ;;		wreg, status,2, status,0, cstack
  6054 ;; Tracked objects:
  6055 ;;		On entry : 0/0
  6056 ;;		On exit  : 0/0
  6057 ;;		Unchanged: 0/0
  6058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6059 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6060 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6061 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6062 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6063 ;;Total ram usage:        3 bytes
  6064 ;; Hardware stack levels used: 1
  6065 ;; Hardware stack levels required when called: 5
  6066 ;; This function calls:
  6067 ;;		_I2C_2_Master_Idle
  6068 ;; This function is called by:
  6069 ;;		_readRedColor
  6070 ;;		_readGreenColor
  6071 ;;		_readBlueColor
  6072 ;;		_readClearColor
  6073 ;;		_color_readdoublefromaddress
  6074 ;;		_color_readfromaddress
  6075 ;; This function uses a non-reentrant model
  6076 ;;
  6077                           
  6078                           	psect	text41
  6079   002838                     __ptext41:
  6080                           	callstack 0
  6081   002838                     _I2C_2_Master_Read:
  6082                           	callstack 23
  6083                           
  6084                           ; BSR set to: 14
  6085                           ;incstack = 0
  6086                           ;I2C_2_Master_Read@ack stored from wreg
  6087   002838  6E05               	movwf	I2C_2_Master_Read@ack^0,c
  6088   00283A                     
  6089                           ;i2c.c: 55: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 56: {;i2c.c: 57:  
      +                           unsigned char tmp;;i2c.c: 58:   I2C_2_Master_Idle();
  6090   00283A  ECB4  F014         	call	_I2C_2_Master_Idle	;wreg free
  6091   00283E                     
  6092                           ;i2c.c: 59:   SSP2CON2bits.RCEN = 1;
  6093   00283E  010E               	movlb	14	; () banked
  6094   002840  87DA               	bsf	218,3,b	;volatile
  6095                           
  6096                           ;i2c.c: 60:   I2C_2_Master_Idle();
  6097   002842  ECB4  F014         	call	_I2C_2_Master_Idle	;wreg free
  6098   002846                     
  6099                           ;i2c.c: 61:   tmp = SSP2BUF;
  6100   002846  CED5 F006          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  6101                           
  6102                           ;i2c.c: 62:   I2C_2_Master_Idle();
  6103   00284A  ECB4  F014         	call	_I2C_2_Master_Idle	;wreg free
  6104   00284E                     
  6105                           ;i2c.c: 63:   SSP2CON2bits.ACKDT = !ack;
  6106   00284E  5005               	movf	I2C_2_Master_Read@ack^0,w,c
  6107   002850  B4D8               	btfsc	status,2,c
  6108   002852  EF2D  F014         	goto	u1041
  6109   002856  EF31  F014         	goto	u1040
  6110   00285A                     u1041:
  6111   00285A  6A04               	clrf	??_I2C_2_Master_Read^0,c
  6112   00285C  2A04               	incf	??_I2C_2_Master_Read^0,f,c
  6113   00285E  EF32  F014         	goto	u1058
  6114   002862                     u1040:
  6115   002862  6A04               	clrf	??_I2C_2_Master_Read^0,c
  6116   002864                     u1058:
  6117   002864  3A04               	swapf	??_I2C_2_Master_Read^0,f,c
  6118   002866  4604               	rlncf	??_I2C_2_Master_Read^0,f,c
  6119   002868  010E               	movlb	14	; () banked
  6120   00286A  51DA               	movf	218,w,b	;volatile
  6121   00286C  1804               	xorwf	??_I2C_2_Master_Read^0,w,c
  6122   00286E  0BDF               	andlw	-33
  6123   002870  1804               	xorwf	??_I2C_2_Master_Read^0,w,c
  6124   002872  6FDA               	movwf	218,b	;volatile
  6125   002874                     
  6126                           ; BSR set to: 14
  6127                           ;i2c.c: 64:   SSP2CON2bits.ACKEN = 1;
  6128   002874  89DA               	bsf	218,4,b	;volatile
  6129   002876                     
  6130                           ; BSR set to: 14
  6131                           ;i2c.c: 65:   return tmp;
  6132   002876  5006               	movf	I2C_2_Master_Read@tmp^0,w,c
  6133   002878                     
  6134                           ; BSR set to: 14
  6135   002878  0012               	return		;funcret
  6136   00287A                     __end_of_I2C_2_Master_Read:
  6137                           	callstack 0
  6138                           
  6139 ;; *************** function _LEDturnON *****************
  6140 ;; Defined at:
  6141 ;;		line 25 in file "interact.c"
  6142 ;; Parameters:    Size  Location     Type
  6143 ;;		None
  6144 ;; Auto vars:     Size  Location     Type
  6145 ;;		None
  6146 ;; Return value:  Size  Location     Type
  6147 ;;                  1    wreg      void 
  6148 ;; Registers used:
  6149 ;;		None
  6150 ;; Tracked objects:
  6151 ;;		On entry : 0/0
  6152 ;;		On exit  : 0/0
  6153 ;;		Unchanged: 0/0
  6154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6155 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6156 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6157 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6158 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6159 ;;Total ram usage:        0 bytes
  6160 ;; Hardware stack levels used: 1
  6161 ;; Hardware stack levels required when called: 4
  6162 ;; This function calls:
  6163 ;;		Nothing
  6164 ;; This function is called by:
  6165 ;;		_readColors
  6166 ;;		_decideColor
  6167 ;;		_main
  6168 ;; This function uses a non-reentrant model
  6169 ;;
  6170                           
  6171                           	psect	text42
  6172   002B58                     __ptext42:
  6173                           	callstack 0
  6174   002B58                     _LEDturnON:
  6175                           	callstack 25
  6176   002B58                     
  6177                           ;interact.c: 26:     LATDbits.LATD3 = 1;
  6178   002B58  867C               	bsf	124,3,c	;volatile
  6179                           
  6180                           ;interact.c: 28:     LATGbits.LATG0 = 1;
  6181   002B5A  807F               	bsf	127,0,c	;volatile
  6182                           
  6183                           ;interact.c: 29:     LATEbits.LATE7 = 1;
  6184   002B5C  8E7D               	bsf	125,7,c	;volatile
  6185                           
  6186                           ;interact.c: 30:     LATAbits.LATA3 = 1;
  6187   002B5E  8679               	bsf	121,3,c	;volatile
  6188   002B60  0012               	return		;funcret
  6189   002B62                     __end_of_LEDturnON:
  6190                           	callstack 0
  6191                           
  6192 ;; *************** function _LEDturnOFF *****************
  6193 ;; Defined at:
  6194 ;;		line 33 in file "interact.c"
  6195 ;; Parameters:    Size  Location     Type
  6196 ;;		None
  6197 ;; Auto vars:     Size  Location     Type
  6198 ;;		None
  6199 ;; Return value:  Size  Location     Type
  6200 ;;                  1    wreg      void 
  6201 ;; Registers used:
  6202 ;;		None
  6203 ;; Tracked objects:
  6204 ;;		On entry : 0/0
  6205 ;;		On exit  : 0/0
  6206 ;;		Unchanged: 0/0
  6207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6208 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6209 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6210 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6211 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6212 ;;Total ram usage:        0 bytes
  6213 ;; Hardware stack levels used: 1
  6214 ;; Hardware stack levels required when called: 4
  6215 ;; This function calls:
  6216 ;;		Nothing
  6217 ;; This function is called by:
  6218 ;;		_readColors
  6219 ;; This function uses a non-reentrant model
  6220 ;;
  6221                           
  6222                           	psect	text43
  6223   002B62                     __ptext43:
  6224                           	callstack 0
  6225   002B62                     _LEDturnOFF:
  6226                           	callstack 25
  6227   002B62                     
  6228                           ;interact.c: 34:     LATDbits.LATD3 = 0;
  6229   002B62  967C               	bcf	124,3,c	;volatile
  6230                           
  6231                           ;interact.c: 37:     LATGbits.LATG0 = 0;
  6232   002B64  907F               	bcf	127,0,c	;volatile
  6233                           
  6234                           ;interact.c: 38:     LATEbits.LATE7 = 0;
  6235   002B66  9E7D               	bcf	125,7,c	;volatile
  6236                           
  6237                           ;interact.c: 39:     LATAbits.LATA3 = 0;
  6238   002B68  9679               	bcf	121,3,c	;volatile
  6239   002B6A  0012               	return		;funcret
  6240   002B6C                     __end_of_LEDturnOFF:
  6241                           	callstack 0
  6242                           
  6243 ;; *************** function _normalizeColors *****************
  6244 ;; Defined at:
  6245 ;;		line 118 in file "color.c"
  6246 ;; Parameters:    Size  Location     Type
  6247 ;;  RGBC            1   15[COMRAM] PTR struct colors
  6248 ;;		 -> main@RGBC(8), 
  6249 ;;  normRGB         1   16[COMRAM] PTR struct normColors
  6250 ;;		 -> main@normRGB(8), 
  6251 ;; Auto vars:     Size  Location     Type
  6252 ;;  sum             2   25[COMRAM] unsigned int 
  6253 ;; Return value:  Size  Location     Type
  6254 ;;                  1    wreg      void 
  6255 ;; Registers used:
  6256 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  6257 ;; Tracked objects:
  6258 ;;		On entry : 0/0
  6259 ;;		On exit  : 0/0
  6260 ;;		Unchanged: 0/0
  6261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6262 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6263 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6264 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6265 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6266 ;;Total ram usage:       14 bytes
  6267 ;; Hardware stack levels used: 1
  6268 ;; Hardware stack levels required when called: 5
  6269 ;; This function calls:
  6270 ;;		___lwdiv
  6271 ;; This function is called by:
  6272 ;;		_decideColor
  6273 ;;		_main
  6274 ;; This function uses a non-reentrant model
  6275 ;;
  6276                           
  6277                           	psect	text44
  6278   001766                     __ptext44:
  6279                           	callstack 0
  6280   001766                     _normalizeColors:
  6281                           	callstack 25
  6282   001766                     
  6283                           ;color.c: 119:     unsigned int sum = (RGBC->red) + (RGBC->green) + (RGBC->blue);
  6284   001766  5010               	movf	normalizeColors@RGBC^0,w,c
  6285   001768  6ED9               	movwf	fsr2l,c
  6286   00176A  6ADA               	clrf	fsr2h,c
  6287   00176C  0E04               	movlw	4
  6288   00176E  26D9               	addwf	fsr2l,f,c
  6289   001770  CFDE F012          	movff	postinc2,??_normalizeColors
  6290   001774  CFDD F013          	movff	postdec2,??_normalizeColors+1
  6291   001778  5010               	movf	normalizeColors@RGBC^0,w,c
  6292   00177A  6ED9               	movwf	fsr2l,c
  6293   00177C  6ADA               	clrf	fsr2h,c
  6294   00177E  0E02               	movlw	2
  6295   001780  26D9               	addwf	fsr2l,f,c
  6296   001782  CFDE F014          	movff	postinc2,??_normalizeColors+2
  6297   001786  CFDD F015          	movff	postdec2,??_normalizeColors+3
  6298   00178A  5010               	movf	normalizeColors@RGBC^0,w,c
  6299   00178C  6ED9               	movwf	fsr2l,c
  6300   00178E  6ADA               	clrf	fsr2h,c
  6301   001790  CFDE F016          	movff	postinc2,??_normalizeColors+4
  6302   001794  CFDD F017          	movff	postdec2,??_normalizeColors+5
  6303   001798  5014               	movf	(??_normalizeColors+2)^0,w,c
  6304   00179A  2416               	addwf	(??_normalizeColors+4)^0,w,c
  6305   00179C  6E18               	movwf	(??_normalizeColors+6)^0,c
  6306   00179E  5015               	movf	(??_normalizeColors+3)^0,w,c
  6307   0017A0  2017               	addwfc	(??_normalizeColors+5)^0,w,c
  6308   0017A2  6E19               	movwf	(??_normalizeColors+7)^0,c
  6309   0017A4  5012               	movf	??_normalizeColors^0,w,c
  6310   0017A6  2418               	addwf	(??_normalizeColors+6)^0,w,c
  6311   0017A8  6E1A               	movwf	normalizeColors@sum^0,c
  6312   0017AA  5013               	movf	(??_normalizeColors+1)^0,w,c
  6313   0017AC  2019               	addwfc	(??_normalizeColors+7)^0,w,c
  6314   0017AE  6E1B               	movwf	(normalizeColors@sum+1)^0,c
  6315   0017B0                     
  6316                           ;color.c: 123:     normRGB->normRed = (RGBC->red) / ((sum)/100);
  6317   0017B0  0E00               	movlw	0
  6318   0017B2  6E0C               	movwf	(___lwdiv@divisor+1)^0,c
  6319   0017B4  0E64               	movlw	100
  6320   0017B6  6E0B               	movwf	___lwdiv@divisor^0,c
  6321   0017B8  C01A  F009         	movff	normalizeColors@sum,___lwdiv@dividend
  6322   0017BC  C01B  F00A         	movff	normalizeColors@sum+1,___lwdiv@dividend+1
  6323   0017C0  ECB0  F012         	call	___lwdiv	;wreg free
  6324   0017C4  C009  F01C         	movff	?___lwdiv,_normalizeColors$3139
  6325   0017C8  C00A  F01D         	movff	?___lwdiv+1,_normalizeColors$3139+1
  6326   0017CC                     
  6327                           ;color.c: 123:     normRGB->normRed = (RGBC->red) / ((sum)/100);
  6328   0017CC  5010               	movf	normalizeColors@RGBC^0,w,c
  6329   0017CE  6ED9               	movwf	fsr2l,c
  6330   0017D0  6ADA               	clrf	fsr2h,c
  6331   0017D2  CFDE F009          	movff	postinc2,___lwdiv@dividend
  6332   0017D6  CFDD F00A          	movff	postdec2,___lwdiv@dividend+1
  6333   0017DA  C01C  F00B         	movff	_normalizeColors$3139,___lwdiv@divisor
  6334   0017DE  C01D  F00C         	movff	_normalizeColors$3139+1,___lwdiv@divisor+1
  6335   0017E2  ECB0  F012         	call	___lwdiv	;wreg free
  6336   0017E6  5011               	movf	normalizeColors@normRGB^0,w,c
  6337   0017E8  6ED9               	movwf	fsr2l,c
  6338   0017EA  6ADA               	clrf	fsr2h,c
  6339   0017EC  C009  FFDE         	movff	?___lwdiv,postinc2
  6340   0017F0  C00A  FFDD         	movff	?___lwdiv+1,postdec2
  6341   0017F4                     
  6342                           ;color.c: 124:     normRGB->normGreen = (RGBC->green) / ((sum)/100);
  6343   0017F4  0E00               	movlw	0
  6344   0017F6  6E0C               	movwf	(___lwdiv@divisor+1)^0,c
  6345   0017F8  0E64               	movlw	100
  6346   0017FA  6E0B               	movwf	___lwdiv@divisor^0,c
  6347   0017FC  C01A  F009         	movff	normalizeColors@sum,___lwdiv@dividend
  6348   001800  C01B  F00A         	movff	normalizeColors@sum+1,___lwdiv@dividend+1
  6349   001804  ECB0  F012         	call	___lwdiv	;wreg free
  6350   001808  C009  F01C         	movff	?___lwdiv,_normalizeColors$3139
  6351   00180C  C00A  F01D         	movff	?___lwdiv+1,_normalizeColors$3139+1
  6352   001810                     
  6353                           ;color.c: 124:     normRGB->normGreen = (RGBC->green) / ((sum)/100);
  6354   001810  5010               	movf	normalizeColors@RGBC^0,w,c
  6355   001812  6ED9               	movwf	fsr2l,c
  6356   001814  6ADA               	clrf	fsr2h,c
  6357   001816  0E02               	movlw	2
  6358   001818  26D9               	addwf	fsr2l,f,c
  6359   00181A  CFDE F009          	movff	postinc2,___lwdiv@dividend
  6360   00181E  CFDD F00A          	movff	postdec2,___lwdiv@dividend+1
  6361   001822  C01C  F00B         	movff	_normalizeColors$3139,___lwdiv@divisor
  6362   001826  C01D  F00C         	movff	_normalizeColors$3139+1,___lwdiv@divisor+1
  6363   00182A  ECB0  F012         	call	___lwdiv	;wreg free
  6364   00182E  5011               	movf	normalizeColors@normRGB^0,w,c
  6365   001830  6ED9               	movwf	fsr2l,c
  6366   001832  6ADA               	clrf	fsr2h,c
  6367   001834  0E02               	movlw	2
  6368   001836  26D9               	addwf	fsr2l,f,c
  6369   001838  C009  FFDE         	movff	?___lwdiv,postinc2
  6370   00183C  C00A  FFDD         	movff	?___lwdiv+1,postdec2
  6371   001840                     
  6372                           ;color.c: 125:     normRGB->normBlue = (RGBC->blue) / ((sum)/100);
  6373   001840  0E00               	movlw	0
  6374   001842  6E0C               	movwf	(___lwdiv@divisor+1)^0,c
  6375   001844  0E64               	movlw	100
  6376   001846  6E0B               	movwf	___lwdiv@divisor^0,c
  6377   001848  C01A  F009         	movff	normalizeColors@sum,___lwdiv@dividend
  6378   00184C  C01B  F00A         	movff	normalizeColors@sum+1,___lwdiv@dividend+1
  6379   001850  ECB0  F012         	call	___lwdiv	;wreg free
  6380   001854  C009  F01C         	movff	?___lwdiv,_normalizeColors$3139
  6381   001858  C00A  F01D         	movff	?___lwdiv+1,_normalizeColors$3139+1
  6382   00185C                     
  6383                           ;color.c: 125:     normRGB->normBlue = (RGBC->blue) / ((sum)/100);
  6384   00185C  5010               	movf	normalizeColors@RGBC^0,w,c
  6385   00185E  6ED9               	movwf	fsr2l,c
  6386   001860  6ADA               	clrf	fsr2h,c
  6387   001862  0E04               	movlw	4
  6388   001864  26D9               	addwf	fsr2l,f,c
  6389   001866  CFDE F009          	movff	postinc2,___lwdiv@dividend
  6390   00186A  CFDD F00A          	movff	postdec2,___lwdiv@dividend+1
  6391   00186E  C01C  F00B         	movff	_normalizeColors$3139,___lwdiv@divisor
  6392   001872  C01D  F00C         	movff	_normalizeColors$3139+1,___lwdiv@divisor+1
  6393   001876  ECB0  F012         	call	___lwdiv	;wreg free
  6394   00187A  5011               	movf	normalizeColors@normRGB^0,w,c
  6395   00187C  6ED9               	movwf	fsr2l,c
  6396   00187E  6ADA               	clrf	fsr2h,c
  6397   001880  0E04               	movlw	4
  6398   001882  26D9               	addwf	fsr2l,f,c
  6399   001884  C009  FFDE         	movff	?___lwdiv,postinc2
  6400   001888  C00A  FFDD         	movff	?___lwdiv+1,postdec2
  6401   00188C                     
  6402                           ;color.c: 126:     normRGB->clear = RGBC->clear;
  6403   00188C  5010               	movf	normalizeColors@RGBC^0,w,c
  6404   00188E  6ED9               	movwf	fsr2l,c
  6405   001890  6ADA               	clrf	fsr2h,c
  6406   001892  0E06               	movlw	6
  6407   001894  26D9               	addwf	fsr2l,f,c
  6408   001896  5011               	movf	normalizeColors@normRGB^0,w,c
  6409   001898  6EE1               	movwf	fsr1l,c
  6410   00189A  6AE2               	clrf	fsr1h,c
  6411   00189C  0E06               	movlw	6
  6412   00189E  26E1               	addwf	fsr1l,f,c
  6413   0018A0  CFDE FFE6          	movff	postinc2,postinc1
  6414   0018A4  CFDD FFE5          	movff	postdec2,postdec1
  6415   0018A8  0012               	return		;funcret
  6416   0018AA                     __end_of_normalizeColors:
  6417                           	callstack 0
  6418                           
  6419 ;; *************** function _creep *****************
  6420 ;; Defined at:
  6421 ;;		line 407 in file "dc_motor.c"
  6422 ;; Parameters:    Size  Location     Type
  6423 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  6424 ;;		 -> main@motorL(9), 
  6425 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  6426 ;;		 -> main@motorR(9), 
  6427 ;;  increments      2   29[COMRAM] int 
  6428 ;;  direction       1   31[COMRAM] unsigned char 
  6429 ;; Auto vars:     Size  Location     Type
  6430 ;;  i               2   37[COMRAM] int 
  6431 ;;  i               2   35[COMRAM] int 
  6432 ;;  creep_power     1   40[COMRAM] unsigned char 
  6433 ;;  current_powe    1   39[COMRAM] unsigned char 
  6434 ;; Return value:  Size  Location     Type
  6435 ;;                  1    wreg      void 
  6436 ;; Registers used:
  6437 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6438 ;; Tracked objects:
  6439 ;;		On entry : 0/0
  6440 ;;		On exit  : 0/0
  6441 ;;		Unchanged: 0/0
  6442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6443 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6444 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6445 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6446 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6447 ;;Total ram usage:       14 bytes
  6448 ;; Hardware stack levels used: 1
  6449 ;; Hardware stack levels required when called: 7
  6450 ;; This function calls:
  6451 ;;		_setMotorPWM
  6452 ;;		_stop
  6453 ;; This function is called by:
  6454 ;;		_decideColor
  6455 ;; This function uses a non-reentrant model
  6456 ;;
  6457                           
  6458                           	psect	text45
  6459   00133E                     __ptext45:
  6460                           	callstack 0
  6461   00133E                     _creep:
  6462                           	callstack 22
  6463   00133E                     
  6464                           ;dc_motor.c: 408:     if (mL->power != 0 || mR->power != 0) {
  6465   00133E  501C               	movf	creep@mL^0,w,c
  6466   001340  6ED9               	movwf	fsr2l,c
  6467   001342  6ADA               	clrf	fsr2h,c
  6468   001344  50DF               	movf	indf2,w,c
  6469   001346  A4D8               	btfss	status,2,c
  6470   001348  EFA8  F009         	goto	u1331
  6471   00134C  EFAA  F009         	goto	u1330
  6472   001350                     u1331:
  6473   001350  EFB5  F009         	goto	l2975
  6474   001354                     u1330:
  6475   001354  501D               	movf	creep@mR^0,w,c
  6476   001356  6ED9               	movwf	fsr2l,c
  6477   001358  6ADA               	clrf	fsr2h,c
  6478   00135A  50DF               	movf	indf2,w,c
  6479   00135C  B4D8               	btfsc	status,2,c
  6480   00135E  EFB3  F009         	goto	u1341
  6481   001362  EFB5  F009         	goto	u1340
  6482   001366                     u1341:
  6483   001366  EFBB  F009         	goto	l2977
  6484   00136A                     u1340:
  6485   00136A                     l2975:
  6486                           
  6487                           ;dc_motor.c: 409:         stop(mL, mR);
  6488   00136A  C01C  F015         	movff	creep@mL,stop@mL
  6489   00136E  C01D  F016         	movff	creep@mR,stop@mR
  6490   001372  EC1F  F013         	call	_stop	;wreg free
  6491   001376                     l2977:
  6492                           
  6493                           ;dc_motor.c: 411:     increment = 0;
  6494   001376  0E00               	movlw	0
  6495   001378  0100               	movlb	0	; () banked
  6496   00137A  6F89               	movwf	(_increment+1)& (0+255),b
  6497   00137C  0E00               	movlw	0
  6498   00137E  6F88               	movwf	_increment& (0+255),b
  6499   001380                     
  6500                           ; BSR set to: 0
  6501                           ;dc_motor.c: 413:     mL->direction = direction;
  6502   001380  501C               	movf	creep@mL^0,w,c
  6503   001382  6ED9               	movwf	fsr2l,c
  6504   001384  6ADA               	clrf	fsr2h,c
  6505   001386  0E01               	movlw	1
  6506   001388  26D9               	addwf	fsr2l,f,c
  6507   00138A  C020  FFDF         	movff	creep@direction,indf2
  6508   00138E                     
  6509                           ; BSR set to: 0
  6510                           ;dc_motor.c: 414:     mR->direction = direction;
  6511   00138E  501D               	movf	creep@mR^0,w,c
  6512   001390  6ED9               	movwf	fsr2l,c
  6513   001392  6ADA               	clrf	fsr2h,c
  6514   001394  0E01               	movlw	1
  6515   001396  26D9               	addwf	fsr2l,f,c
  6516   001398  C020  FFDF         	movff	creep@direction,indf2
  6517   00139C                     
  6518                           ; BSR set to: 0
  6519                           ;dc_motor.c: 416:     char current_power = mL->power;
  6520   00139C  501C               	movf	creep@mL^0,w,c
  6521   00139E  6ED9               	movwf	fsr2l,c
  6522   0013A0  6ADA               	clrf	fsr2h,c
  6523   0013A2  50DF               	movf	indf2,w,c
  6524   0013A4  6E28               	movwf	creep@current_power^0,c
  6525   0013A6                     
  6526                           ; BSR set to: 0
  6527                           ;dc_motor.c: 417:     char creep_power = 10;
  6528   0013A6  0E0A               	movlw	10
  6529   0013A8  6E29               	movwf	creep@creep_power^0,c
  6530   0013AA                     
  6531                           ; BSR set to: 0
  6532                           ;dc_motor.c: 419:     if (creep_power > current_power) {
  6533   0013AA  0E0A               	movlw	10
  6534   0013AC  6028               	cpfslt	creep@current_power^0,c
  6535   0013AE  EFDB  F009         	goto	u1351
  6536   0013B2  EFDD  F009         	goto	u1350
  6537   0013B6                     u1351:
  6538   0013B6  EF12  F00A         	goto	l600
  6539   0013BA                     u1350:
  6540   0013BA                     
  6541                           ; BSR set to: 0
  6542                           ;dc_motor.c: 420:         for (int i=current_power; i<= creep_power; i++) {
  6543   0013BA  C028  F024         	movff	creep@current_power,creep@i
  6544   0013BE  6A25               	clrf	(creep@i+1)^0,c
  6545   0013C0  EFFE  F009         	goto	l3001
  6546   0013C4                     l2991:
  6547                           
  6548                           ;dc_motor.c: 421:             mL->power = i;
  6549   0013C4  501C               	movf	creep@mL^0,w,c
  6550   0013C6  6ED9               	movwf	fsr2l,c
  6551   0013C8  6ADA               	clrf	fsr2h,c
  6552   0013CA  C024  FFDF         	movff	creep@i,indf2
  6553                           
  6554                           ;dc_motor.c: 422:             mR->power = i;
  6555   0013CE  501D               	movf	creep@mR^0,w,c
  6556   0013D0  6ED9               	movwf	fsr2l,c
  6557   0013D2  6ADA               	clrf	fsr2h,c
  6558   0013D4  C024  FFDF         	movff	creep@i,indf2
  6559   0013D8                     
  6560                           ;dc_motor.c: 423:             setMotorPWM(mL);
  6561   0013D8  C01C  F010         	movff	creep@mL,setMotorPWM@m
  6562   0013DC  EC09  F00B         	call	_setMotorPWM	;wreg free
  6563   0013E0                     
  6564                           ;dc_motor.c: 424:             setMotorPWM(mR);
  6565   0013E0  C01D  F010         	movff	creep@mR,setMotorPWM@m
  6566   0013E4  EC09  F00B         	call	_setMotorPWM	;wreg free
  6567   0013E8                     
  6568                           ;dc_motor.c: 425:             _delay((unsigned long)((5)*(64000000/4000.0)));
  6569   0013E8  0E68               	movlw	104
  6570   0013EA  6E21               	movwf	??_creep^0,c
  6571   0013EC  0EE4               	movlw	228
  6572   0013EE                     u2277:
  6573   0013EE  2EE8               	decfsz	wreg,f,c
  6574   0013F0  D7FE               	bra	u2277
  6575   0013F2  2E21               	decfsz	??_creep^0,f,c
  6576   0013F4  D7FC               	bra	u2277
  6577   0013F6  D000               	nop2	
  6578   0013F8                     
  6579                           ;dc_motor.c: 426:         }
  6580   0013F8  4A24               	infsnz	creep@i^0,f,c
  6581   0013FA  2A25               	incf	(creep@i+1)^0,f,c
  6582   0013FC                     l3001:
  6583   0013FC  5029               	movf	creep@creep_power^0,w,c
  6584   0013FE  6E21               	movwf	??_creep^0,c
  6585   001400  6A22               	clrf	(??_creep+1)^0,c
  6586   001402  5024               	movf	creep@i^0,w,c
  6587   001404  5C21               	subwf	??_creep^0,w,c
  6588   001406  5022               	movf	(??_creep+1)^0,w,c
  6589   001408  0A80               	xorlw	128
  6590   00140A  6E23               	movwf	(??_creep+2)^0,c
  6591   00140C  5025               	movf	(creep@i+1)^0,w,c
  6592   00140E  0A80               	xorlw	128
  6593   001410  5823               	subwfb	(??_creep+2)^0,w,c
  6594   001412  B0D8               	btfsc	status,0,c
  6595   001414  EF0E  F00A         	goto	u1361
  6596   001418  EF10  F00A         	goto	u1360
  6597   00141C                     u1361:
  6598   00141C  EFE2  F009         	goto	l2991
  6599   001420                     u1360:
  6600   001420  EF46  F00A         	goto	l3015
  6601   001424                     l600:
  6602                           
  6603                           ; BSR set to: 0
  6604                           ;dc_motor.c: 429:         for (int i=current_power; i>= creep_power; i--) {
  6605   001424  C028  F026         	movff	creep@current_power,creep@i_2201
  6606   001428  6A27               	clrf	(creep@i_2201+1)^0,c
  6607   00142A  EF34  F00A         	goto	l3013
  6608   00142E                     l3003:
  6609                           
  6610                           ;dc_motor.c: 430:             mL->power = i;
  6611   00142E  501C               	movf	creep@mL^0,w,c
  6612   001430  6ED9               	movwf	fsr2l,c
  6613   001432  6ADA               	clrf	fsr2h,c
  6614   001434  C026  FFDF         	movff	creep@i_2201,indf2
  6615                           
  6616                           ;dc_motor.c: 431:             mR->power = i;
  6617   001438  501D               	movf	creep@mR^0,w,c
  6618   00143A  6ED9               	movwf	fsr2l,c
  6619   00143C  6ADA               	clrf	fsr2h,c
  6620   00143E  C026  FFDF         	movff	creep@i_2201,indf2
  6621   001442                     
  6622                           ;dc_motor.c: 432:             setMotorPWM(mL);
  6623   001442  C01C  F010         	movff	creep@mL,setMotorPWM@m
  6624   001446  EC09  F00B         	call	_setMotorPWM	;wreg free
  6625   00144A                     
  6626                           ;dc_motor.c: 433:             setMotorPWM(mR);
  6627   00144A  C01D  F010         	movff	creep@mR,setMotorPWM@m
  6628   00144E  EC09  F00B         	call	_setMotorPWM	;wreg free
  6629   001452                     
  6630                           ;dc_motor.c: 434:             _delay((unsigned long)((5)*(64000000/4000.0)));
  6631   001452  0E68               	movlw	104
  6632   001454  6E21               	movwf	??_creep^0,c
  6633   001456  0EE4               	movlw	228
  6634   001458                     u2287:
  6635   001458  2EE8               	decfsz	wreg,f,c
  6636   00145A  D7FE               	bra	u2287
  6637   00145C  2E21               	decfsz	??_creep^0,f,c
  6638   00145E  D7FC               	bra	u2287
  6639   001460  D000               	nop2	
  6640   001462                     
  6641                           ;dc_motor.c: 435:         }
  6642   001462  0626               	decf	creep@i_2201^0,f,c
  6643   001464  A0D8               	btfss	status,0,c
  6644   001466  0627               	decf	(creep@i_2201+1)^0,f,c
  6645   001468                     l3013:
  6646   001468  5029               	movf	creep@creep_power^0,w,c
  6647   00146A  6E21               	movwf	??_creep^0,c
  6648   00146C  6A22               	clrf	(??_creep+1)^0,c
  6649   00146E  5021               	movf	??_creep^0,w,c
  6650   001470  5C26               	subwf	creep@i_2201^0,w,c
  6651   001472  5027               	movf	(creep@i_2201+1)^0,w,c
  6652   001474  0A80               	xorlw	128
  6653   001476  6E23               	movwf	(??_creep+2)^0,c
  6654   001478  5022               	movf	(??_creep+1)^0,w,c
  6655   00147A  0A80               	xorlw	128
  6656   00147C  5823               	subwfb	(??_creep+2)^0,w,c
  6657   00147E  B0D8               	btfsc	status,0,c
  6658   001480  EF44  F00A         	goto	u1371
  6659   001484  EF46  F00A         	goto	u1370
  6660   001488                     u1371:
  6661   001488  EF17  F00A         	goto	l3003
  6662   00148C                     u1370:
  6663   00148C                     l3015:
  6664   00148C  501E               	movf	creep@increments^0,w,c
  6665   00148E  0100               	movlb	0	; () banked
  6666   001490  5D88               	subwf	_increment& (0+255),w,b
  6667   001492  5189               	movf	(_increment+1)& (0+255),w,b
  6668   001494  0A80               	xorlw	128
  6669   001496  6E21               	movwf	??_creep^0,c
  6670   001498  501F               	movf	(creep@increments+1)^0,w,c
  6671   00149A  0A80               	xorlw	128
  6672   00149C  5821               	subwfb	??_creep^0,w,c
  6673   00149E  A0D8               	btfss	status,0,c
  6674   0014A0  EF54  F00A         	goto	u1381
  6675   0014A4  EF56  F00A         	goto	u1380
  6676   0014A8                     u1381:
  6677   0014A8  EF46  F00A         	goto	l3015
  6678   0014AC                     u1380:
  6679   0014AC                     
  6680                           ; BSR set to: 0
  6681                           ;dc_motor.c: 438:     stop(mL, mR);
  6682   0014AC  C01C  F015         	movff	creep@mL,stop@mL
  6683   0014B0  C01D  F016         	movff	creep@mR,stop@mR
  6684   0014B4  EC1F  F013         	call	_stop	;wreg free
  6685   0014B8  0012               	return		;funcret
  6686   0014BA                     __end_of_creep:
  6687                           	callstack 0
  6688                           
  6689 ;; *************** function _stop *****************
  6690 ;; Defined at:
  6691 ;;		line 82 in file "dc_motor.c"
  6692 ;; Parameters:    Size  Location     Type
  6693 ;;  mL              1   20[COMRAM] PTR struct DC_motor
  6694 ;;		 -> main@motorL(9), 
  6695 ;;  mR              1   21[COMRAM] PTR struct DC_motor
  6696 ;;		 -> main@motorR(9), 
  6697 ;; Auto vars:     Size  Location     Type
  6698 ;;  i               2   25[COMRAM] int 
  6699 ;;  current_powe    2   23[COMRAM] unsigned int 
  6700 ;; Return value:  Size  Location     Type
  6701 ;;                  1    wreg      void 
  6702 ;; Registers used:
  6703 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6704 ;; Tracked objects:
  6705 ;;		On entry : 0/0
  6706 ;;		On exit  : 0/0
  6707 ;;		Unchanged: 0/0
  6708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6709 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6710 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6711 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6712 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6713 ;;Total ram usage:        7 bytes
  6714 ;; Hardware stack levels used: 1
  6715 ;; Hardware stack levels required when called: 6
  6716 ;; This function calls:
  6717 ;;		_setMotorPWM
  6718 ;; This function is called by:
  6719 ;;		_reverseRoute
  6720 ;;		_turnLeft
  6721 ;;		_turnRight
  6722 ;;		_turn180
  6723 ;;		_turnLeft135
  6724 ;;		_turnRight135
  6725 ;;		_creep
  6726 ;;		_timed_trundle
  6727 ;;		_trundleSquare
  6728 ;; This function uses a non-reentrant model
  6729 ;;
  6730                           
  6731                           	psect	text46
  6732   00263E                     __ptext46:
  6733                           	callstack 0
  6734   00263E                     _stop:
  6735                           	callstack 22
  6736   00263E                     
  6737                           ;dc_motor.c: 82: void stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 83: {;dc_motor.c: 85:
      +                               unsigned int current_power = mL->power;
  6738   00263E  5015               	movf	stop@mL^0,w,c
  6739   002640  6ED9               	movwf	fsr2l,c
  6740   002642  6ADA               	clrf	fsr2h,c
  6741   002644  50DF               	movf	indf2,w,c
  6742   002646  6E17               	movwf	??_stop^0,c
  6743   002648  5017               	movf	??_stop^0,w,c
  6744   00264A  6E18               	movwf	stop@current_power^0,c
  6745   00264C  6A19               	clrf	(stop@current_power+1)^0,c
  6746   00264E                     
  6747                           ;dc_motor.c: 87:     for (int i=current_power; i>= 0; i--) {
  6748   00264E  C018  F01A         	movff	stop@current_power,stop@i
  6749   002652  C019  F01B         	movff	stop@current_power+1,stop@i+1
  6750   002656                     l2543:
  6751   002656  BE1B               	btfsc	(stop@i+1)^0,7,c
  6752   002658  EF32  F013         	goto	u1030
  6753   00265C  EF30  F013         	goto	u1031
  6754   002660                     u1031:
  6755   002660  EF34  F013         	goto	l2547
  6756   002664                     u1030:
  6757   002664  EF53  F013         	goto	l482
  6758   002668                     l2547:
  6759                           
  6760                           ;dc_motor.c: 88:         mL->power = i;
  6761   002668  5015               	movf	stop@mL^0,w,c
  6762   00266A  6ED9               	movwf	fsr2l,c
  6763   00266C  6ADA               	clrf	fsr2h,c
  6764   00266E  C01A  FFDF         	movff	stop@i,indf2
  6765                           
  6766                           ;dc_motor.c: 89:         mR->power = i;
  6767   002672  5016               	movf	stop@mR^0,w,c
  6768   002674  6ED9               	movwf	fsr2l,c
  6769   002676  6ADA               	clrf	fsr2h,c
  6770   002678  C01A  FFDF         	movff	stop@i,indf2
  6771   00267C                     
  6772                           ;dc_motor.c: 90:         setMotorPWM(mL);
  6773   00267C  C015  F010         	movff	stop@mL,setMotorPWM@m
  6774   002680  EC09  F00B         	call	_setMotorPWM	;wreg free
  6775   002684                     
  6776                           ;dc_motor.c: 91:         setMotorPWM(mR);
  6777   002684  C016  F010         	movff	stop@mR,setMotorPWM@m
  6778   002688  EC09  F00B         	call	_setMotorPWM	;wreg free
  6779   00268C                     
  6780                           ;dc_motor.c: 92:         _delay((unsigned long)((5)*(64000000/4000.0)));
  6781   00268C  0E68               	movlw	104
  6782   00268E  6E17               	movwf	??_stop^0,c
  6783   002690  0EE4               	movlw	228
  6784   002692                     u2297:
  6785   002692  2EE8               	decfsz	wreg,f,c
  6786   002694  D7FE               	bra	u2297
  6787   002696  2E17               	decfsz	??_stop^0,f,c
  6788   002698  D7FC               	bra	u2297
  6789   00269A  D000               	nop2	
  6790   00269C                     
  6791                           ;dc_motor.c: 93:     }
  6792   00269C  061A               	decf	stop@i^0,f,c
  6793   00269E  A0D8               	btfss	status,0,c
  6794   0026A0  061B               	decf	(stop@i+1)^0,f,c
  6795   0026A2  EF2B  F013         	goto	l2543
  6796   0026A6                     l482:
  6797   0026A6  0012               	return		;funcret
  6798   0026A8                     __end_of_stop:
  6799                           	callstack 0
  6800                           
  6801 ;; *************** function _setMotorPWM *****************
  6802 ;; Defined at:
  6803 ;;		line 59 in file "dc_motor.c"
  6804 ;; Parameters:    Size  Location     Type
  6805 ;;  m               1   15[COMRAM] PTR struct DC_motor
  6806 ;;		 -> main@motorR(9), main@motorL(9), 
  6807 ;; Auto vars:     Size  Location     Type
  6808 ;;  negDuty         1   19[COMRAM] unsigned char 
  6809 ;;  posDuty         1   18[COMRAM] unsigned char 
  6810 ;; Return value:  Size  Location     Type
  6811 ;;                  1    wreg      void 
  6812 ;; Registers used:
  6813 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6814 ;; Tracked objects:
  6815 ;;		On entry : 0/0
  6816 ;;		On exit  : 0/0
  6817 ;;		Unchanged: 0/0
  6818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6819 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6820 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6821 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6822 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6823 ;;Total ram usage:        5 bytes
  6824 ;; Hardware stack levels used: 1
  6825 ;; Hardware stack levels required when called: 5
  6826 ;; This function calls:
  6827 ;;		___lwdiv
  6828 ;;		___wmul
  6829 ;; This function is called by:
  6830 ;;		_main
  6831 ;;		_stop
  6832 ;;		_fastStop
  6833 ;;		_turnLeft
  6834 ;;		_turnRight
  6835 ;;		_turn180
  6836 ;;		_turnLeft135
  6837 ;;		_turnRight135
  6838 ;;		_trundle
  6839 ;;		_creep
  6840 ;;		_timed_trundle
  6841 ;;		_trundleSquare
  6842 ;;		_fullSpeedAhead
  6843 ;; This function uses a non-reentrant model
  6844 ;;
  6845                           
  6846                           	psect	text47
  6847   001612                     __ptext47:
  6848                           	callstack 0
  6849   001612                     _setMotorPWM:
  6850                           	callstack 24
  6851   001612                     
  6852                           ;dc_motor.c: 59: void setMotorPWM(DC_motor *m);dc_motor.c: 60: {;dc_motor.c: 61:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 63:     if(m->brakemode) {
  6853   001612  5010               	movf	setMotorPWM@m^0,w,c
  6854   001614  6ED9               	movwf	fsr2l,c
  6855   001616  6ADA               	clrf	fsr2h,c
  6856   001618  0E02               	movlw	2
  6857   00161A  26D9               	addwf	fsr2l,f,c
  6858   00161C  50DF               	movf	indf2,w,c
  6859   00161E  B4D8               	btfsc	status,2,c
  6860   001620  EF14  F00B         	goto	u991
  6861   001624  EF16  F00B         	goto	u990
  6862   001628                     u991:
  6863   001628  EF46  F00B         	goto	l2525
  6864   00162C                     u990:
  6865   00162C                     
  6866                           ;dc_motor.c: 64:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  6867   00162C  5010               	movf	setMotorPWM@m^0,w,c
  6868   00162E  6ED9               	movwf	fsr2l,c
  6869   001630  6ADA               	clrf	fsr2h,c
  6870   001632  50DF               	movf	indf2,w,c
  6871   001634  6E11               	movwf	??_setMotorPWM^0,c
  6872   001636  5011               	movf	??_setMotorPWM^0,w,c
  6873   001638  6E03               	movwf	___wmul@multiplier^0,c
  6874   00163A  6A04               	clrf	(___wmul@multiplier+1)^0,c
  6875   00163C  5010               	movf	setMotorPWM@m^0,w,c
  6876   00163E  6ED9               	movwf	fsr2l,c
  6877   001640  6ADA               	clrf	fsr2h,c
  6878   001642  0E03               	movlw	3
  6879   001644  26D9               	addwf	fsr2l,f,c
  6880   001646  CFDE F005          	movff	postinc2,___wmul@multiplicand
  6881   00164A  CFDD F006          	movff	postdec2,___wmul@multiplicand+1
  6882   00164E  EC02  F015         	call	___wmul	;wreg free
  6883   001652  C003  F009         	movff	?___wmul,___lwdiv@dividend
  6884   001656  C004  F00A         	movff	?___wmul+1,___lwdiv@dividend+1
  6885   00165A  0E00               	movlw	0
  6886   00165C  6E0C               	movwf	(___lwdiv@divisor+1)^0,c
  6887   00165E  0E64               	movlw	100
  6888   001660  6E0B               	movwf	___lwdiv@divisor^0,c
  6889   001662  ECB0  F012         	call	___lwdiv	;wreg free
  6890   001666  5010               	movf	setMotorPWM@m^0,w,c
  6891   001668  6ED9               	movwf	fsr2l,c
  6892   00166A  6ADA               	clrf	fsr2h,c
  6893   00166C  0E03               	movlw	3
  6894   00166E  26D9               	addwf	fsr2l,f,c
  6895   001670  50DF               	movf	indf2,w,c
  6896   001672  6E12               	movwf	(??_setMotorPWM+1)^0,c
  6897   001674  5009               	movf	?___lwdiv^0,w,c
  6898   001676  5C12               	subwf	(??_setMotorPWM+1)^0,w,c
  6899   001678  6E13               	movwf	setMotorPWM@posDuty^0,c
  6900   00167A                     
  6901                           ;dc_motor.c: 65:         negDuty=m->PWMperiod;
  6902   00167A  5010               	movf	setMotorPWM@m^0,w,c
  6903   00167C  6ED9               	movwf	fsr2l,c
  6904   00167E  6ADA               	clrf	fsr2h,c
  6905   001680  0E03               	movlw	3
  6906   001682  26D9               	addwf	fsr2l,f,c
  6907   001684  50DF               	movf	indf2,w,c
  6908   001686  6E14               	movwf	setMotorPWM@negDuty^0,c
  6909                           
  6910                           ;dc_motor.c: 66:     }
  6911   001688  EF67  F00B         	goto	l2529
  6912   00168C                     l2525:
  6913                           
  6914                           ;dc_motor.c: 68:         posDuty=0;
  6915   00168C  0E00               	movlw	0
  6916   00168E  6E13               	movwf	setMotorPWM@posDuty^0,c
  6917   001690                     
  6918                           ;dc_motor.c: 69:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  6919   001690  5010               	movf	setMotorPWM@m^0,w,c
  6920   001692  6ED9               	movwf	fsr2l,c
  6921   001694  6ADA               	clrf	fsr2h,c
  6922   001696  50DF               	movf	indf2,w,c
  6923   001698  6E11               	movwf	??_setMotorPWM^0,c
  6924   00169A  5011               	movf	??_setMotorPWM^0,w,c
  6925   00169C  6E03               	movwf	___wmul@multiplier^0,c
  6926   00169E  6A04               	clrf	(___wmul@multiplier+1)^0,c
  6927   0016A0  5010               	movf	setMotorPWM@m^0,w,c
  6928   0016A2  6ED9               	movwf	fsr2l,c
  6929   0016A4  6ADA               	clrf	fsr2h,c
  6930   0016A6  0E03               	movlw	3
  6931   0016A8  26D9               	addwf	fsr2l,f,c
  6932   0016AA  CFDE F005          	movff	postinc2,___wmul@multiplicand
  6933   0016AE  CFDD F006          	movff	postdec2,___wmul@multiplicand+1
  6934   0016B2  EC02  F015         	call	___wmul	;wreg free
  6935   0016B6  C003  F009         	movff	?___wmul,___lwdiv@dividend
  6936   0016BA  C004  F00A         	movff	?___wmul+1,___lwdiv@dividend+1
  6937   0016BE  0E00               	movlw	0
  6938   0016C0  6E0C               	movwf	(___lwdiv@divisor+1)^0,c
  6939   0016C2  0E64               	movlw	100
  6940   0016C4  6E0B               	movwf	___lwdiv@divisor^0,c
  6941   0016C6  ECB0  F012         	call	___lwdiv	;wreg free
  6942   0016CA  5009               	movf	?___lwdiv^0,w,c
  6943   0016CC  6E14               	movwf	setMotorPWM@negDuty^0,c
  6944   0016CE                     l2529:
  6945                           
  6946                           ;dc_motor.c: 72:     if (m->direction) {
  6947   0016CE  5010               	movf	setMotorPWM@m^0,w,c
  6948   0016D0  6ED9               	movwf	fsr2l,c
  6949   0016D2  6ADA               	clrf	fsr2h,c
  6950   0016D4  0E01               	movlw	1
  6951   0016D6  26D9               	addwf	fsr2l,f,c
  6952   0016D8  50DF               	movf	indf2,w,c
  6953   0016DA  B4D8               	btfsc	status,2,c
  6954   0016DC  EF72  F00B         	goto	u1001
  6955   0016E0  EF74  F00B         	goto	u1000
  6956   0016E4                     u1001:
  6957   0016E4  EF94  F00B         	goto	l2533
  6958   0016E8                     u1000:
  6959   0016E8                     
  6960                           ;dc_motor.c: 73:         *(m->posDutyHighByte)=posDuty;
  6961   0016E8  5010               	movf	setMotorPWM@m^0,w,c
  6962   0016EA  6ED9               	movwf	fsr2l,c
  6963   0016EC  6ADA               	clrf	fsr2h,c
  6964   0016EE  0E05               	movlw	5
  6965   0016F0  26D9               	addwf	fsr2l,f,c
  6966   0016F2  CFDE F011          	movff	postinc2,??_setMotorPWM
  6967   0016F6  CFDD F012          	movff	postdec2,??_setMotorPWM+1
  6968   0016FA  C011  FFD9         	movff	??_setMotorPWM,fsr2l
  6969   0016FE  C012  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6970   001702  C013  FFDF         	movff	setMotorPWM@posDuty,indf2
  6971                           
  6972                           ;dc_motor.c: 74:         *(m->negDutyHighByte)=negDuty;
  6973   001706  5010               	movf	setMotorPWM@m^0,w,c
  6974   001708  6ED9               	movwf	fsr2l,c
  6975   00170A  6ADA               	clrf	fsr2h,c
  6976   00170C  0E07               	movlw	7
  6977   00170E  26D9               	addwf	fsr2l,f,c
  6978   001710  CFDE F011          	movff	postinc2,??_setMotorPWM
  6979   001714  CFDD F012          	movff	postdec2,??_setMotorPWM+1
  6980   001718  C011  FFD9         	movff	??_setMotorPWM,fsr2l
  6981   00171C  C012  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6982   001720  C014  FFDF         	movff	setMotorPWM@negDuty,indf2
  6983                           
  6984                           ;dc_motor.c: 75:     } else {
  6985   001724  EFB2  F00B         	goto	l477
  6986   001728                     l2533:
  6987                           
  6988                           ;dc_motor.c: 76:         *(m->posDutyHighByte)=negDuty;
  6989   001728  5010               	movf	setMotorPWM@m^0,w,c
  6990   00172A  6ED9               	movwf	fsr2l,c
  6991   00172C  6ADA               	clrf	fsr2h,c
  6992   00172E  0E05               	movlw	5
  6993   001730  26D9               	addwf	fsr2l,f,c
  6994   001732  CFDE F011          	movff	postinc2,??_setMotorPWM
  6995   001736  CFDD F012          	movff	postdec2,??_setMotorPWM+1
  6996   00173A  C011  FFD9         	movff	??_setMotorPWM,fsr2l
  6997   00173E  C012  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6998   001742  C014  FFDF         	movff	setMotorPWM@negDuty,indf2
  6999                           
  7000                           ;dc_motor.c: 77:         *(m->negDutyHighByte)=posDuty;
  7001   001746  5010               	movf	setMotorPWM@m^0,w,c
  7002   001748  6ED9               	movwf	fsr2l,c
  7003   00174A  6ADA               	clrf	fsr2h,c
  7004   00174C  0E07               	movlw	7
  7005   00174E  26D9               	addwf	fsr2l,f,c
  7006   001750  CFDE F011          	movff	postinc2,??_setMotorPWM
  7007   001754  CFDD F012          	movff	postdec2,??_setMotorPWM+1
  7008   001758  C011  FFD9         	movff	??_setMotorPWM,fsr2l
  7009   00175C  C012  FFDA         	movff	??_setMotorPWM+1,fsr2h
  7010   001760  C013  FFDF         	movff	setMotorPWM@posDuty,indf2
  7011   001764                     l477:
  7012   001764  0012               	return		;funcret
  7013   001766                     __end_of_setMotorPWM:
  7014                           	callstack 0
  7015                           
  7016 ;; *************** function ___wmul *****************
  7017 ;; Defined at:
  7018 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
  7019 ;; Parameters:    Size  Location     Type
  7020 ;;  multiplier      2    2[COMRAM] unsigned int 
  7021 ;;  multiplicand    2    4[COMRAM] unsigned int 
  7022 ;; Auto vars:     Size  Location     Type
  7023 ;;  product         2    6[COMRAM] unsigned int 
  7024 ;; Return value:  Size  Location     Type
  7025 ;;                  2    2[COMRAM] unsigned int 
  7026 ;; Registers used:
  7027 ;;		wreg, status,2, status,0, prodl, prodh
  7028 ;; Tracked objects:
  7029 ;;		On entry : 0/0
  7030 ;;		On exit  : 0/0
  7031 ;;		Unchanged: 0/0
  7032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7033 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7034 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7035 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7036 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7037 ;;Total ram usage:        6 bytes
  7038 ;; Hardware stack levels used: 1
  7039 ;; Hardware stack levels required when called: 4
  7040 ;; This function calls:
  7041 ;;		Nothing
  7042 ;; This function is called by:
  7043 ;;		_setMotorPWM
  7044 ;;		_checkBattery
  7045 ;; This function uses a non-reentrant model
  7046 ;;
  7047                           
  7048                           	psect	text48
  7049   002A04                     __ptext48:
  7050                           	callstack 0
  7051   002A04                     ___wmul:
  7052                           	callstack 24
  7053   002A04  5003               	movf	___wmul@multiplier^0,w,c
  7054   002A06  0205               	mulwf	___wmul@multiplicand^0,c
  7055   002A08  CFF3 F007          	movff	prodl,___wmul@product
  7056   002A0C  CFF4 F008          	movff	prodh,___wmul@product+1
  7057   002A10  5003               	movf	___wmul@multiplier^0,w,c
  7058   002A12  0206               	mulwf	(___wmul@multiplicand+1)^0,c
  7059   002A14  50F3               	movf	243,w,c
  7060   002A16  2608               	addwf	(___wmul@product+1)^0,f,c
  7061   002A18  5004               	movf	(___wmul@multiplier+1)^0,w,c
  7062   002A1A  0205               	mulwf	___wmul@multiplicand^0,c
  7063   002A1C  50F3               	movf	243,w,c
  7064   002A1E  2608               	addwf	(___wmul@product+1)^0,f,c
  7065   002A20  C007  F003         	movff	___wmul@product,?___wmul
  7066   002A24  C008  F004         	movff	___wmul@product+1,?___wmul+1
  7067   002A28  0012               	return		;funcret
  7068   002A2A                     __end_of___wmul:
  7069                           	callstack 0
  7070                           
  7071 ;; *************** function ___lwdiv *****************
  7072 ;; Defined at:
  7073 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
  7074 ;; Parameters:    Size  Location     Type
  7075 ;;  dividend        2    8[COMRAM] unsigned int 
  7076 ;;  divisor         2   10[COMRAM] unsigned int 
  7077 ;; Auto vars:     Size  Location     Type
  7078 ;;  quotient        2   12[COMRAM] unsigned int 
  7079 ;;  counter         1   14[COMRAM] unsigned char 
  7080 ;; Return value:  Size  Location     Type
  7081 ;;                  2    8[COMRAM] unsigned int 
  7082 ;; Registers used:
  7083 ;;		wreg, status,2, status,0
  7084 ;; Tracked objects:
  7085 ;;		On entry : 0/0
  7086 ;;		On exit  : 0/0
  7087 ;;		Unchanged: 0/0
  7088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7089 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7090 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7091 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7092 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7093 ;;Total ram usage:        7 bytes
  7094 ;; Hardware stack levels used: 1
  7095 ;; Hardware stack levels required when called: 4
  7096 ;; This function calls:
  7097 ;;		Nothing
  7098 ;; This function is called by:
  7099 ;;		_normalizeColors
  7100 ;;		_setMotorPWM
  7101 ;; This function uses a non-reentrant model
  7102 ;;
  7103                           
  7104                           	psect	text49
  7105   002560                     __ptext49:
  7106                           	callstack 0
  7107   002560                     ___lwdiv:
  7108                           	callstack 24
  7109   002560  0E00               	movlw	0
  7110   002562  6E0E               	movwf	(___lwdiv@quotient+1)^0,c
  7111   002564  0E00               	movlw	0
  7112   002566  6E0D               	movwf	___lwdiv@quotient^0,c
  7113   002568  500B               	movf	___lwdiv@divisor^0,w,c
  7114   00256A  100C               	iorwf	(___lwdiv@divisor+1)^0,w,c
  7115   00256C  B4D8               	btfsc	status,2,c
  7116   00256E  EFBB  F012         	goto	u961
  7117   002572  EFBD  F012         	goto	u960
  7118   002576                     u961:
  7119   002576  EFE5  F012         	goto	l1185
  7120   00257A                     u960:
  7121   00257A  0E01               	movlw	1
  7122   00257C  6E0F               	movwf	___lwdiv@counter^0,c
  7123   00257E  EFC5  F012         	goto	l2505
  7124   002582                     l2503:
  7125   002582  90D8               	bcf	status,0,c
  7126   002584  360B               	rlcf	___lwdiv@divisor^0,f,c
  7127   002586  360C               	rlcf	(___lwdiv@divisor+1)^0,f,c
  7128   002588  2A0F               	incf	___lwdiv@counter^0,f,c
  7129   00258A                     l2505:
  7130   00258A  AE0C               	btfss	(___lwdiv@divisor+1)^0,7,c
  7131   00258C  EFCA  F012         	goto	u971
  7132   002590  EFCC  F012         	goto	u970
  7133   002594                     u971:
  7134   002594  EFC1  F012         	goto	l2503
  7135   002598                     u970:
  7136   002598                     l2507:
  7137   002598  90D8               	bcf	status,0,c
  7138   00259A  360D               	rlcf	___lwdiv@quotient^0,f,c
  7139   00259C  360E               	rlcf	(___lwdiv@quotient+1)^0,f,c
  7140   00259E  500B               	movf	___lwdiv@divisor^0,w,c
  7141   0025A0  5C09               	subwf	___lwdiv@dividend^0,w,c
  7142   0025A2  500C               	movf	(___lwdiv@divisor+1)^0,w,c
  7143   0025A4  580A               	subwfb	(___lwdiv@dividend+1)^0,w,c
  7144   0025A6  A0D8               	btfss	status,0,c
  7145   0025A8  EFD8  F012         	goto	u981
  7146   0025AC  EFDA  F012         	goto	u980
  7147   0025B0                     u981:
  7148   0025B0  EFDF  F012         	goto	l2515
  7149   0025B4                     u980:
  7150   0025B4  500B               	movf	___lwdiv@divisor^0,w,c
  7151   0025B6  5E09               	subwf	___lwdiv@dividend^0,f,c
  7152   0025B8  500C               	movf	(___lwdiv@divisor+1)^0,w,c
  7153   0025BA  5A0A               	subwfb	(___lwdiv@dividend+1)^0,f,c
  7154   0025BC  800D               	bsf	___lwdiv@quotient^0,0,c
  7155   0025BE                     l2515:
  7156   0025BE  90D8               	bcf	status,0,c
  7157   0025C0  320C               	rrcf	(___lwdiv@divisor+1)^0,f,c
  7158   0025C2  320B               	rrcf	___lwdiv@divisor^0,f,c
  7159   0025C4  2E0F               	decfsz	___lwdiv@counter^0,f,c
  7160   0025C6  EFCC  F012         	goto	l2507
  7161   0025CA                     l1185:
  7162   0025CA  C00D  F009         	movff	___lwdiv@quotient,?___lwdiv
  7163   0025CE  C00E  F00A         	movff	___lwdiv@quotient+1,?___lwdiv+1
  7164   0025D2  0012               	return		;funcret
  7165   0025D4                     __end_of___lwdiv:
  7166                           	callstack 0
  7167                           
  7168 ;; *************** function _color_click_init *****************
  7169 ;; Defined at:
  7170 ;;		line 7 in file "color.c"
  7171 ;; Parameters:    Size  Location     Type
  7172 ;;		None
  7173 ;; Auto vars:     Size  Location     Type
  7174 ;;		None
  7175 ;; Return value:  Size  Location     Type
  7176 ;;                  1    wreg      void 
  7177 ;; Registers used:
  7178 ;;		wreg, status,2, status,0, cstack
  7179 ;; Tracked objects:
  7180 ;;		On entry : 0/0
  7181 ;;		On exit  : 0/0
  7182 ;;		Unchanged: 0/0
  7183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7184 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7185 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7186 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7187 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7188 ;;Total ram usage:        1 bytes
  7189 ;; Hardware stack levels used: 1
  7190 ;; Hardware stack levels required when called: 7
  7191 ;; This function calls:
  7192 ;;		_I2C_2_Master_Init
  7193 ;;		_color_writetoaddr
  7194 ;; This function is called by:
  7195 ;;		_main
  7196 ;; This function uses a non-reentrant model
  7197 ;;
  7198                           
  7199                           	psect	text50
  7200   002914                     __ptext50:
  7201                           	callstack 0
  7202   002914                     _color_click_init:
  7203                           	callstack 23
  7204   002914                     
  7205                           ;color.c: 10:     I2C_2_Master_Init();
  7206   002914  EC9F  F014         	call	_I2C_2_Master_Init	;wreg free
  7207   002918                     
  7208                           ;color.c: 13:  color_writetoaddr(0x01, 0xF6);
  7209   002918  0EF6               	movlw	246
  7210   00291A  6E05               	movwf	color_writetoaddr@value^0,c
  7211   00291C  0E01               	movlw	1
  7212   00291E  EC15  F015         	call	_color_writetoaddr
  7213   002922                     
  7214                           ;color.c: 16:     color_writetoaddr(0x00, 0x13);
  7215   002922  0E13               	movlw	19
  7216   002924  6E05               	movwf	color_writetoaddr@value^0,c
  7217   002926  0E00               	movlw	0
  7218   002928  EC15  F015         	call	_color_writetoaddr
  7219   00292C                     
  7220                           ;color.c: 17:     _delay((unsigned long)((3)*(64000000/4000.0)));
  7221   00292C  0E3F               	movlw	63
  7222   00292E  6E07               	movwf	??_color_click_init^0,c
  7223   002930  0E55               	movlw	85
  7224   002932                     u2307:
  7225   002932  2EE8               	decfsz	wreg,f,c
  7226   002934  D7FE               	bra	u2307
  7227   002936  2E07               	decfsz	??_color_click_init^0,f,c
  7228   002938  D7FC               	bra	u2307
  7229   00293A  0000               	nop	
  7230   00293C  0012               	return		;funcret
  7231   00293E                     __end_of_color_click_init:
  7232                           	callstack 0
  7233                           
  7234 ;; *************** function _color_writetoaddr *****************
  7235 ;; Defined at:
  7236 ;;		line 48 in file "color.c"
  7237 ;; Parameters:    Size  Location     Type
  7238 ;;  address         1    wreg     unsigned char 
  7239 ;;  value           1    4[COMRAM] unsigned char 
  7240 ;; Auto vars:     Size  Location     Type
  7241 ;;  address         1    5[COMRAM] unsigned char 
  7242 ;; Return value:  Size  Location     Type
  7243 ;;                  1    wreg      void 
  7244 ;; Registers used:
  7245 ;;		wreg, status,2, status,0, cstack
  7246 ;; Tracked objects:
  7247 ;;		On entry : 0/0
  7248 ;;		On exit  : 0/0
  7249 ;;		Unchanged: 0/0
  7250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7251 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7252 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7253 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7254 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7255 ;;Total ram usage:        2 bytes
  7256 ;; Hardware stack levels used: 1
  7257 ;; Hardware stack levels required when called: 6
  7258 ;; This function calls:
  7259 ;;		_I2C_2_Master_Start
  7260 ;;		_I2C_2_Master_Stop
  7261 ;;		_I2C_2_Master_Write
  7262 ;; This function is called by:
  7263 ;;		_color_click_init
  7264 ;;		_interrupts_init
  7265 ;; This function uses a non-reentrant model
  7266 ;;
  7267                           
  7268                           	psect	text51
  7269   002A2A                     __ptext51:
  7270                           	callstack 0
  7271   002A2A                     _color_writetoaddr:
  7272                           	callstack 23
  7273                           
  7274                           ;incstack = 0
  7275                           ;color_writetoaddr@address stored from wreg
  7276   002A2A  6E06               	movwf	color_writetoaddr@address^0,c
  7277   002A2C                     
  7278                           ;color.c: 49:     I2C_2_Master_Start();
  7279   002A2C  ECBB  F015         	call	_I2C_2_Master_Start	;wreg free
  7280                           
  7281                           ;color.c: 50:     I2C_2_Master_Write(0x52 | 0x00);
  7282   002A30  0E52               	movlw	82
  7283   002A32  EC96  F015         	call	_I2C_2_Master_Write
  7284                           
  7285                           ;color.c: 51:     I2C_2_Master_Write(0x80 | address);
  7286   002A36  5006               	movf	color_writetoaddr@address^0,w,c
  7287   002A38  0980               	iorlw	128
  7288   002A3A  EC96  F015         	call	_I2C_2_Master_Write
  7289                           
  7290                           ;color.c: 52:     I2C_2_Master_Write(value);
  7291   002A3E  5005               	movf	color_writetoaddr@value^0,w,c
  7292   002A40  EC96  F015         	call	_I2C_2_Master_Write
  7293                           
  7294                           ;color.c: 53:     I2C_2_Master_Stop();
  7295   002A44  ECB6  F015         	call	_I2C_2_Master_Stop	;wreg free
  7296   002A48  0012               	return		;funcret
  7297   002A4A                     __end_of_color_writetoaddr:
  7298                           	callstack 0
  7299                           
  7300 ;; *************** function _I2C_2_Master_Write *****************
  7301 ;; Defined at:
  7302 ;;		line 49 in file "i2c.c"
  7303 ;; Parameters:    Size  Location     Type
  7304 ;;  data_byte       1    wreg     unsigned char 
  7305 ;; Auto vars:     Size  Location     Type
  7306 ;;  data_byte       1    3[COMRAM] unsigned char 
  7307 ;; Return value:  Size  Location     Type
  7308 ;;                  1    wreg      void 
  7309 ;; Registers used:
  7310 ;;		wreg, status,2, status,0, cstack
  7311 ;; Tracked objects:
  7312 ;;		On entry : 0/0
  7313 ;;		On exit  : 0/0
  7314 ;;		Unchanged: 0/0
  7315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7316 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7317 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7318 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7319 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7320 ;;Total ram usage:        1 bytes
  7321 ;; Hardware stack levels used: 1
  7322 ;; Hardware stack levels required when called: 5
  7323 ;; This function calls:
  7324 ;;		_I2C_2_Master_Idle
  7325 ;; This function is called by:
  7326 ;;		_color_writetoaddr
  7327 ;;		_readRedColor
  7328 ;;		_readGreenColor
  7329 ;;		_readBlueColor
  7330 ;;		_readClearColor
  7331 ;;		_clearInterrupt
  7332 ;;		_color_readdoublefromaddress
  7333 ;;		_color_readfromaddress
  7334 ;; This function uses a non-reentrant model
  7335 ;;
  7336                           
  7337                           	psect	text52
  7338   002B2C                     __ptext52:
  7339                           	callstack 0
  7340   002B2C                     _I2C_2_Master_Write:
  7341                           	callstack 23
  7342                           
  7343                           ;incstack = 0
  7344                           ;I2C_2_Master_Write@data_byte stored from wreg
  7345   002B2C  6E04               	movwf	I2C_2_Master_Write@data_byte^0,c
  7346   002B2E                     
  7347                           ;i2c.c: 49: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 50: {;i2c.c: 51:   I
      +                          2C_2_Master_Idle();
  7348   002B2E  ECB4  F014         	call	_I2C_2_Master_Idle	;wreg free
  7349   002B32                     
  7350                           ;i2c.c: 52:   SSP2BUF = data_byte;
  7351   002B32  C004  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  7352   002B36  0012               	return		;funcret
  7353   002B38                     __end_of_I2C_2_Master_Write:
  7354                           	callstack 0
  7355                           
  7356 ;; *************** function _I2C_2_Master_Stop *****************
  7357 ;; Defined at:
  7358 ;;		line 43 in file "i2c.c"
  7359 ;; Parameters:    Size  Location     Type
  7360 ;;		None
  7361 ;; Auto vars:     Size  Location     Type
  7362 ;;		None
  7363 ;; Return value:  Size  Location     Type
  7364 ;;                  1    wreg      void 
  7365 ;; Registers used:
  7366 ;;		wreg, status,2, status,0, cstack
  7367 ;; Tracked objects:
  7368 ;;		On entry : 0/0
  7369 ;;		On exit  : 0/0
  7370 ;;		Unchanged: 0/0
  7371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7372 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7373 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7374 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7375 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7376 ;;Total ram usage:        0 bytes
  7377 ;; Hardware stack levels used: 1
  7378 ;; Hardware stack levels required when called: 5
  7379 ;; This function calls:
  7380 ;;		_I2C_2_Master_Idle
  7381 ;; This function is called by:
  7382 ;;		_color_writetoaddr
  7383 ;;		_readRedColor
  7384 ;;		_readGreenColor
  7385 ;;		_readBlueColor
  7386 ;;		_readClearColor
  7387 ;;		_clearInterrupt
  7388 ;;		_color_readdoublefromaddress
  7389 ;; This function uses a non-reentrant model
  7390 ;;
  7391                           
  7392                           	psect	text53
  7393   002B6C                     __ptext53:
  7394                           	callstack 0
  7395   002B6C                     _I2C_2_Master_Stop:
  7396                           	callstack 23
  7397   002B6C                     
  7398                           ;i2c.c: 45:   I2C_2_Master_Idle();
  7399   002B6C  ECB4  F014         	call	_I2C_2_Master_Idle	;wreg free
  7400   002B70                     
  7401                           ;i2c.c: 46:   SSP2CON2bits.PEN = 1;
  7402   002B70  010E               	movlb	14	; () banked
  7403   002B72  85DA               	bsf	218,2,b	;volatile
  7404   002B74                     
  7405                           ; BSR set to: 14
  7406   002B74  0012               	return		;funcret
  7407   002B76                     __end_of_I2C_2_Master_Stop:
  7408                           	callstack 0
  7409                           
  7410 ;; *************** function _I2C_2_Master_Start *****************
  7411 ;; Defined at:
  7412 ;;		line 31 in file "i2c.c"
  7413 ;; Parameters:    Size  Location     Type
  7414 ;;		None
  7415 ;; Auto vars:     Size  Location     Type
  7416 ;;		None
  7417 ;; Return value:  Size  Location     Type
  7418 ;;                  1    wreg      void 
  7419 ;; Registers used:
  7420 ;;		wreg, status,2, status,0, cstack
  7421 ;; Tracked objects:
  7422 ;;		On entry : 0/0
  7423 ;;		On exit  : 0/0
  7424 ;;		Unchanged: 0/0
  7425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7426 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7427 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7428 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7429 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7430 ;;Total ram usage:        0 bytes
  7431 ;; Hardware stack levels used: 1
  7432 ;; Hardware stack levels required when called: 5
  7433 ;; This function calls:
  7434 ;;		_I2C_2_Master_Idle
  7435 ;; This function is called by:
  7436 ;;		_color_writetoaddr
  7437 ;;		_readRedColor
  7438 ;;		_readGreenColor
  7439 ;;		_readBlueColor
  7440 ;;		_readClearColor
  7441 ;;		_clearInterrupt
  7442 ;;		_color_readdoublefromaddress
  7443 ;;		_color_readfromaddress
  7444 ;; This function uses a non-reentrant model
  7445 ;;
  7446                           
  7447                           	psect	text54
  7448   002B76                     __ptext54:
  7449                           	callstack 0
  7450   002B76                     _I2C_2_Master_Start:
  7451                           	callstack 23
  7452   002B76                     
  7453                           ;i2c.c: 33:   I2C_2_Master_Idle();
  7454   002B76  ECB4  F014         	call	_I2C_2_Master_Idle	;wreg free
  7455   002B7A                     
  7456                           ;i2c.c: 34:   SSP2CON2bits.SEN = 1;
  7457   002B7A  010E               	movlb	14	; () banked
  7458   002B7C  81DA               	bsf	218,0,b	;volatile
  7459   002B7E                     
  7460                           ; BSR set to: 14
  7461   002B7E  0012               	return		;funcret
  7462   002B80                     __end_of_I2C_2_Master_Start:
  7463                           	callstack 0
  7464                           
  7465 ;; *************** function _I2C_2_Master_Idle *****************
  7466 ;; Defined at:
  7467 ;;		line 26 in file "i2c.c"
  7468 ;; Parameters:    Size  Location     Type
  7469 ;;		None
  7470 ;; Auto vars:     Size  Location     Type
  7471 ;;		None
  7472 ;; Return value:  Size  Location     Type
  7473 ;;                  1    wreg      void 
  7474 ;; Registers used:
  7475 ;;		wreg, status,2, status,0
  7476 ;; Tracked objects:
  7477 ;;		On entry : 0/0
  7478 ;;		On exit  : 0/0
  7479 ;;		Unchanged: 0/0
  7480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7482 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7483 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7484 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7485 ;;Total ram usage:        1 bytes
  7486 ;; Hardware stack levels used: 1
  7487 ;; Hardware stack levels required when called: 4
  7488 ;; This function calls:
  7489 ;;		Nothing
  7490 ;; This function is called by:
  7491 ;;		_I2C_2_Master_Start
  7492 ;;		_I2C_2_Master_RepStart
  7493 ;;		_I2C_2_Master_Stop
  7494 ;;		_I2C_2_Master_Write
  7495 ;;		_I2C_2_Master_Read
  7496 ;; This function uses a non-reentrant model
  7497 ;;
  7498                           
  7499                           	psect	text55
  7500   002968                     __ptext55:
  7501                           	callstack 0
  7502   002968                     _I2C_2_Master_Idle:
  7503                           	callstack 23
  7504   002968                     l104:
  7505   002968  010E               	movlb	14	; () banked
  7506   00296A  B5D8               	btfsc	216,2,b	;volatile
  7507   00296C  EFBA  F014         	goto	u1011
  7508   002970  EFBC  F014         	goto	u1010
  7509   002974                     u1011:
  7510   002974  EFB4  F014         	goto	l104
  7511   002978                     u1010:
  7512   002978                     
  7513                           ; BSR set to: 14
  7514   002978  CEDA F003          	movff	3802,??_I2C_2_Master_Idle	;volatile
  7515   00297C  0E1F               	movlw	31
  7516   00297E  1603               	andwf	??_I2C_2_Master_Idle^0,f,c
  7517   002980  A4D8               	btfss	status,2,c
  7518   002982  EFC5  F014         	goto	u1021
  7519   002986  EFC7  F014         	goto	u1020
  7520   00298A                     u1021:
  7521   00298A  EFB4  F014         	goto	l104
  7522   00298E                     u1020:
  7523   00298E                     
  7524                           ; BSR set to: 14
  7525   00298E  0012               	return		;funcret
  7526   002990                     __end_of_I2C_2_Master_Idle:
  7527                           	callstack 0
  7528                           
  7529 ;; *************** function _I2C_2_Master_Init *****************
  7530 ;; Defined at:
  7531 ;;		line 8 in file "i2c.c"
  7532 ;; Parameters:    Size  Location     Type
  7533 ;;		None
  7534 ;; Auto vars:     Size  Location     Type
  7535 ;;		None
  7536 ;; Return value:  Size  Location     Type
  7537 ;;                  1    wreg      void 
  7538 ;; Registers used:
  7539 ;;		wreg, status,2
  7540 ;; Tracked objects:
  7541 ;;		On entry : 0/0
  7542 ;;		On exit  : 0/0
  7543 ;;		Unchanged: 0/0
  7544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7545 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7546 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7548 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7549 ;;Total ram usage:        0 bytes
  7550 ;; Hardware stack levels used: 1
  7551 ;; Hardware stack levels required when called: 4
  7552 ;; This function calls:
  7553 ;;		Nothing
  7554 ;; This function is called by:
  7555 ;;		_color_click_init
  7556 ;; This function uses a non-reentrant model
  7557 ;;
  7558                           
  7559                           	psect	text56
  7560   00293E                     __ptext56:
  7561                           	callstack 0
  7562   00293E                     _I2C_2_Master_Init:
  7563                           	callstack 25
  7564   00293E                     
  7565                           ;i2c.c: 11:   SSP2CON1bits.SSPM= 0b1000;
  7566   00293E  010E               	movlb	14	; () banked
  7567   002940  51D9               	movf	217,w,b	;volatile
  7568   002942  0BF0               	andlw	-16
  7569   002944  0908               	iorlw	8
  7570   002946  6FD9               	movwf	217,b	;volatile
  7571   002948                     
  7572                           ; BSR set to: 14
  7573                           ;i2c.c: 12:   SSP2CON1bits.SSPEN = 1;
  7574   002948  8BD9               	bsf	217,5,b	;volatile
  7575                           
  7576                           ;i2c.c: 13:   SSP2ADD = (64000000/(4*100000))-1;
  7577   00294A  0E9F               	movlw	159
  7578   00294C  6FD6               	movwf	214,b	;volatile
  7579   00294E                     
  7580                           ; BSR set to: 14
  7581                           ;i2c.c: 16:   TRISDbits.TRISD5 = 1;
  7582   00294E  8A84               	bsf	132,5,c	;volatile
  7583   002950                     
  7584                           ; BSR set to: 14
  7585                           ;i2c.c: 17:   TRISDbits.TRISD6 = 1;
  7586   002950  8C84               	bsf	132,6,c	;volatile
  7587   002952                     
  7588                           ; BSR set to: 14
  7589                           ;i2c.c: 18:   ANSELDbits.ANSELD5=0;
  7590   002952  9BA7               	bcf	167,5,b	;volatile
  7591   002954                     
  7592                           ; BSR set to: 14
  7593                           ;i2c.c: 19:   ANSELDbits.ANSELD6=0;
  7594   002954  9DA7               	bcf	167,6,b	;volatile
  7595                           
  7596                           ;i2c.c: 20:   SSP2DATPPS=0x1D;
  7597   002956  0E1D               	movlw	29
  7598   002958  6F1D               	movwf	29,b	;volatile
  7599                           
  7600                           ;i2c.c: 21:   SSP2CLKPPS=0x1E;
  7601   00295A  0E1E               	movlw	30
  7602   00295C  6F1C               	movwf	28,b	;volatile
  7603                           
  7604                           ;i2c.c: 22:   RD5PPS=0x1C;
  7605   00295E  0E1C               	movlw	28
  7606   002960  6F6F               	movwf	111,b	;volatile
  7607                           
  7608                           ;i2c.c: 23:   RD6PPS=0x1B;
  7609   002962  0E1B               	movlw	27
  7610   002964  6F70               	movwf	112,b	;volatile
  7611   002966                     
  7612                           ; BSR set to: 14
  7613   002966  0012               	return		;funcret
  7614   002968                     __end_of_I2C_2_Master_Init:
  7615                           	callstack 0
  7616                           
  7617 ;; *************** function _Timer0_init *****************
  7618 ;; Defined at:
  7619 ;;		line 60 in file "interrupts.c"
  7620 ;; Parameters:    Size  Location     Type
  7621 ;;		None
  7622 ;; Auto vars:     Size  Location     Type
  7623 ;;		None
  7624 ;; Return value:  Size  Location     Type
  7625 ;;                  1    wreg      void 
  7626 ;; Registers used:
  7627 ;;		wreg, status,2
  7628 ;; Tracked objects:
  7629 ;;		On entry : 0/0
  7630 ;;		On exit  : 0/0
  7631 ;;		Unchanged: 0/0
  7632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7633 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7634 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7635 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7636 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7637 ;;Total ram usage:        0 bytes
  7638 ;; Hardware stack levels used: 1
  7639 ;; Hardware stack levels required when called: 4
  7640 ;; This function calls:
  7641 ;;		Nothing
  7642 ;; This function is called by:
  7643 ;;		_main
  7644 ;; This function uses a non-reentrant model
  7645 ;;
  7646                           
  7647                           	psect	text57
  7648   002A4A                     __ptext57:
  7649                           	callstack 0
  7650   002A4A                     _Timer0_init:
  7651                           	callstack 26
  7652   002A4A                     
  7653                           ;interrupts.c: 62:     T0CON1bits.T0CS=0b010;
  7654   002A4A  50D6               	movf	214,w,c	;volatile
  7655   002A4C  0B1F               	andlw	-225
  7656   002A4E  0940               	iorlw	64
  7657   002A50  6ED6               	movwf	214,c	;volatile
  7658   002A52                     
  7659                           ;interrupts.c: 63:     T0CON1bits.T0ASYNC=1;
  7660   002A52  88D6               	bsf	214,4,c	;volatile
  7661                           
  7662                           ;interrupts.c: 64:     T0CON1bits.T0CKPS=0b0101;
  7663   002A54  50D6               	movf	214,w,c	;volatile
  7664   002A56  0BF0               	andlw	-16
  7665   002A58  0905               	iorlw	5
  7666   002A5A  6ED6               	movwf	214,c	;volatile
  7667   002A5C                     
  7668                           ;interrupts.c: 65:     T0CON0bits.T016BIT=1;
  7669   002A5C  88D5               	bsf	213,4,c	;volatile
  7670                           
  7671                           ;interrupts.c: 70:     TMR0H=0;
  7672   002A5E  0E00               	movlw	0
  7673   002A60  6ED4               	movwf	212,c	;volatile
  7674                           
  7675                           ;interrupts.c: 71:     TMR0L=0;
  7676   002A62  0E00               	movlw	0
  7677   002A64  6ED3               	movwf	211,c	;volatile
  7678   002A66                     
  7679                           ;interrupts.c: 72:     T0CON0bits.T0EN=1;
  7680   002A66  8ED5               	bsf	213,7,c	;volatile
  7681   002A68  0012               	return		;funcret
  7682   002A6A                     __end_of_Timer0_init:
  7683                           	callstack 0
  7684                           
  7685 ;; *************** function _High_ISR *****************
  7686 ;; Defined at:
  7687 ;;		line 76 in file "interrupts.c"
  7688 ;; Parameters:    Size  Location     Type
  7689 ;;		None
  7690 ;; Auto vars:     Size  Location     Type
  7691 ;;		None
  7692 ;; Return value:  Size  Location     Type
  7693 ;;                  1    wreg      void 
  7694 ;; Registers used:
  7695 ;;		wreg, status,2, status,0, cstack
  7696 ;; Tracked objects:
  7697 ;;		On entry : 0/0
  7698 ;;		On exit  : 0/0
  7699 ;;		Unchanged: 0/0
  7700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7701 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7702 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7704 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7705 ;;Total ram usage:        0 bytes
  7706 ;; Hardware stack levels used: 1
  7707 ;; Hardware stack levels required when called: 3
  7708 ;; This function calls:
  7709 ;;		i2_clearInterrupt
  7710 ;; This function is called by:
  7711 ;;		Interrupt level 2
  7712 ;; This function uses a non-reentrant model
  7713 ;;
  7714                           
  7715                           	psect	intcode
  7716   000008                     __pintcode:
  7717                           	callstack 0
  7718   000008                     _High_ISR:
  7719                           	callstack 20
  7720                           
  7721                           ;incstack = 0
  7722   000008  824D               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  7723   00000A                     
  7724                           ;interrupts.c: 77:     if (PIR0bits.INT0IF) {
  7725   00000A  010E               	movlb	14	; () banked
  7726   00000C  A133               	btfss	51,0,b	;volatile
  7727   00000E  EF0B  F000         	goto	i2u184_41
  7728   000012  EF0D  F000         	goto	i2u184_40
  7729   000016                     i2u184_41:
  7730   000016  EF16  F000         	goto	i2l3539
  7731   00001A                     i2u184_40:
  7732   00001A                     
  7733                           ; BSR set to: 14
  7734                           ;interrupts.c: 79:         LATDbits.LATD7 = 1;
  7735   00001A  8E7C               	bsf	124,7,c	;volatile
  7736   00001C                     
  7737                           ; BSR set to: 14
  7738                           ;interrupts.c: 80:         wall_detected = 1;
  7739   00001C  0E01               	movlw	1
  7740   00001E  0100               	movlb	0	; () banked
  7741   000020  6F8C               	movwf	_wall_detected& (0+255),b
  7742   000022                     
  7743                           ; BSR set to: 0
  7744                           ;interrupts.c: 82:         clearInterrupt();
  7745   000022  EC40  F015         	call	i2_clearInterrupt	;wreg free
  7746   000026                     
  7747                           ;interrupts.c: 83:         PIR0bits.INT0IF = 0;
  7748   000026  010E               	movlb	14	; () banked
  7749   000028  9133               	bcf	51,0,b	;volatile
  7750   00002A                     
  7751                           ; BSR set to: 14
  7752                           ;interrupts.c: 87:         INTCONbits.GIE=0;
  7753   00002A  9EF2               	bcf	242,7,c	;volatile
  7754   00002C                     i2l3539:
  7755                           
  7756                           ; BSR set to: 14
  7757                           ;interrupts.c: 90:     if (PIR0bits.TMR0IF) {
  7758   00002C  AB33               	btfss	51,5,b	;volatile
  7759   00002E  EF1B  F000         	goto	i2u185_41
  7760   000032  EF1D  F000         	goto	i2u185_40
  7761   000036                     i2u185_41:
  7762   000036  EF21  F000         	goto	i2l289
  7763   00003A                     i2u185_40:
  7764   00003A                     
  7765                           ; BSR set to: 14
  7766                           ;interrupts.c: 91:         PIR0bits.TMR0IF = 0;
  7767   00003A  9B33               	bcf	51,5,b	;volatile
  7768   00003C                     
  7769                           ; BSR set to: 14
  7770                           ;interrupts.c: 92:         increment++;
  7771   00003C  0100               	movlb	0	; () banked
  7772   00003E  4B88               	infsnz	_increment& (0+255),f,b
  7773   000040  2B89               	incf	(_increment+1)& (0+255),f,b
  7774   000042                     i2l289:
  7775   000042  924D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  7776   000044  0011               	retfie		f
  7777   000046                     __end_of_High_ISR:
  7778                           	callstack 0
  7779                           
  7780 ;; *************** function i2_clearInterrupt *****************
  7781 ;; Defined at:
  7782 ;;		line 99 in file "interrupts.c"
  7783 ;; Parameters:    Size  Location     Type
  7784 ;;		None
  7785 ;; Auto vars:     Size  Location     Type
  7786 ;;		None
  7787 ;; Return value:  Size  Location     Type
  7788 ;;                  1    wreg      void 
  7789 ;; Registers used:
  7790 ;;		wreg, status,2, status,0, cstack
  7791 ;; Tracked objects:
  7792 ;;		On entry : 0/0
  7793 ;;		On exit  : 0/0
  7794 ;;		Unchanged: 0/0
  7795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7796 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7797 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7798 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7799 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7800 ;;Total ram usage:        0 bytes
  7801 ;; Hardware stack levels used: 1
  7802 ;; Hardware stack levels required when called: 2
  7803 ;; This function calls:
  7804 ;;		i2_I2C_2_Master_Start
  7805 ;;		i2_I2C_2_Master_Stop
  7806 ;;		i2_I2C_2_Master_Write
  7807 ;; This function is called by:
  7808 ;;		_High_ISR
  7809 ;; This function uses a non-reentrant model
  7810 ;;
  7811                           
  7812                           	psect	text59
  7813   002A80                     __ptext59:
  7814                           	callstack 0
  7815   002A80                     i2_clearInterrupt:
  7816                           	callstack 20
  7817   002A80                     
  7818                           ;interrupts.c: 100:     I2C_2_Master_Start();
  7819   002A80  ECC5  F015         	call	i2_I2C_2_Master_Start	;wreg free
  7820                           
  7821                           ;interrupts.c: 101:     I2C_2_Master_Write(0x52 | 0x00);
  7822   002A84  0E52               	movlw	82
  7823   002A86  EC9C  F015         	call	i2_I2C_2_Master_Write
  7824                           
  7825                           ;interrupts.c: 102:     I2C_2_Master_Write(0xe0 | 0x06 );
  7826   002A8A  0EE6               	movlw	230
  7827   002A8C  EC9C  F015         	call	i2_I2C_2_Master_Write
  7828                           
  7829                           ;interrupts.c: 103:     I2C_2_Master_Stop();
  7830   002A90  ECC0  F015         	call	i2_I2C_2_Master_Stop	;wreg free
  7831   002A94  0012               	return		;funcret
  7832   002A96                     __end_ofi2_clearInterrupt:
  7833                           	callstack 0
  7834                           
  7835 ;; *************** function i2_I2C_2_Master_Write *****************
  7836 ;; Defined at:
  7837 ;;		line 49 in file "i2c.c"
  7838 ;; Parameters:    Size  Location     Type
  7839 ;;  data_byte       1    wreg     unsigned char 
  7840 ;; Auto vars:     Size  Location     Type
  7841 ;;  data_byte       1    1[COMRAM] unsigned char 
  7842 ;; Return value:  Size  Location     Type
  7843 ;;                  1    wreg      void 
  7844 ;; Registers used:
  7845 ;;		wreg, status,2, status,0, cstack
  7846 ;; Tracked objects:
  7847 ;;		On entry : 0/0
  7848 ;;		On exit  : 0/0
  7849 ;;		Unchanged: 0/0
  7850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7851 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7852 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7853 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7854 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7855 ;;Total ram usage:        1 bytes
  7856 ;; Hardware stack levels used: 1
  7857 ;; Hardware stack levels required when called: 1
  7858 ;; This function calls:
  7859 ;;		i2_I2C_2_Master_Idle
  7860 ;; This function is called by:
  7861 ;;		i2_clearInterrupt
  7862 ;; This function uses a non-reentrant model
  7863 ;;
  7864                           
  7865                           	psect	text60
  7866   002B38                     __ptext60:
  7867                           	callstack 0
  7868   002B38                     i2_I2C_2_Master_Write:
  7869                           	callstack 20
  7870                           
  7871                           ;incstack = 0
  7872                           ;i2I2C_2_Master_Write@data_byte stored from wreg
  7873   002B38  6E02               	movwf	i2I2C_2_Master_Write@data_byte^0,c
  7874   002B3A                     
  7875                           ;i2c.c: 49: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 50: {;i2c.c: 51:   I
      +                          2C_2_Master_Idle();
  7876   002B3A  ECC8  F014         	call	i2_I2C_2_Master_Idle	;wreg free
  7877   002B3E                     
  7878                           ;i2c.c: 52:   SSP2BUF = data_byte;
  7879   002B3E  C002  FED5         	movff	i2I2C_2_Master_Write@data_byte,3797	;volatile
  7880   002B42  0012               	return		;funcret
  7881   002B44                     __end_ofi2_I2C_2_Master_Write:
  7882                           	callstack 0
  7883                           
  7884 ;; *************** function i2_I2C_2_Master_Stop *****************
  7885 ;; Defined at:
  7886 ;;		line 43 in file "i2c.c"
  7887 ;; Parameters:    Size  Location     Type
  7888 ;;		None
  7889 ;; Auto vars:     Size  Location     Type
  7890 ;;		None
  7891 ;; Return value:  Size  Location     Type
  7892 ;;                  1    wreg      void 
  7893 ;; Registers used:
  7894 ;;		wreg, status,2, status,0, cstack
  7895 ;; Tracked objects:
  7896 ;;		On entry : 0/0
  7897 ;;		On exit  : 0/0
  7898 ;;		Unchanged: 0/0
  7899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7900 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7901 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7902 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7903 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7904 ;;Total ram usage:        0 bytes
  7905 ;; Hardware stack levels used: 1
  7906 ;; Hardware stack levels required when called: 1
  7907 ;; This function calls:
  7908 ;;		i2_I2C_2_Master_Idle
  7909 ;; This function is called by:
  7910 ;;		i2_clearInterrupt
  7911 ;; This function uses a non-reentrant model
  7912 ;;
  7913                           
  7914                           	psect	text61
  7915   002B80                     __ptext61:
  7916                           	callstack 0
  7917   002B80                     i2_I2C_2_Master_Stop:
  7918                           	callstack 20
  7919   002B80                     
  7920                           ;i2c.c: 45:   I2C_2_Master_Idle();
  7921   002B80  ECC8  F014         	call	i2_I2C_2_Master_Idle	;wreg free
  7922   002B84                     
  7923                           ;i2c.c: 46:   SSP2CON2bits.PEN = 1;
  7924   002B84  010E               	movlb	14	; () banked
  7925   002B86  85DA               	bsf	218,2,b	;volatile
  7926   002B88                     
  7927                           ; BSR set to: 14
  7928   002B88  0012               	return		;funcret
  7929   002B8A                     __end_ofi2_I2C_2_Master_Stop:
  7930                           	callstack 0
  7931                           
  7932 ;; *************** function i2_I2C_2_Master_Start *****************
  7933 ;; Defined at:
  7934 ;;		line 31 in file "i2c.c"
  7935 ;; Parameters:    Size  Location     Type
  7936 ;;		None
  7937 ;; Auto vars:     Size  Location     Type
  7938 ;;		None
  7939 ;; Return value:  Size  Location     Type
  7940 ;;                  1    wreg      void 
  7941 ;; Registers used:
  7942 ;;		wreg, status,2, status,0, cstack
  7943 ;; Tracked objects:
  7944 ;;		On entry : 0/0
  7945 ;;		On exit  : 0/0
  7946 ;;		Unchanged: 0/0
  7947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7948 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7949 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7951 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7952 ;;Total ram usage:        0 bytes
  7953 ;; Hardware stack levels used: 1
  7954 ;; Hardware stack levels required when called: 1
  7955 ;; This function calls:
  7956 ;;		i2_I2C_2_Master_Idle
  7957 ;; This function is called by:
  7958 ;;		i2_clearInterrupt
  7959 ;; This function uses a non-reentrant model
  7960 ;;
  7961                           
  7962                           	psect	text62
  7963   002B8A                     __ptext62:
  7964                           	callstack 0
  7965   002B8A                     i2_I2C_2_Master_Start:
  7966                           	callstack 20
  7967   002B8A                     
  7968                           ;i2c.c: 33:   I2C_2_Master_Idle();
  7969   002B8A  ECC8  F014         	call	i2_I2C_2_Master_Idle	;wreg free
  7970   002B8E                     
  7971                           ;i2c.c: 34:   SSP2CON2bits.SEN = 1;
  7972   002B8E  010E               	movlb	14	; () banked
  7973   002B90  81DA               	bsf	218,0,b	;volatile
  7974   002B92                     
  7975                           ; BSR set to: 14
  7976   002B92  0012               	return		;funcret
  7977   002B94                     __end_ofi2_I2C_2_Master_Start:
  7978                           	callstack 0
  7979                           
  7980 ;; *************** function i2_I2C_2_Master_Idle *****************
  7981 ;; Defined at:
  7982 ;;		line 26 in file "i2c.c"
  7983 ;; Parameters:    Size  Location     Type
  7984 ;;		None
  7985 ;; Auto vars:     Size  Location     Type
  7986 ;;		None
  7987 ;; Return value:  Size  Location     Type
  7988 ;;                  1    wreg      void 
  7989 ;; Registers used:
  7990 ;;		wreg, status,2, status,0
  7991 ;; Tracked objects:
  7992 ;;		On entry : 0/0
  7993 ;;		On exit  : 0/0
  7994 ;;		Unchanged: 0/0
  7995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7996 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7997 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7998 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7999 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8000 ;;Total ram usage:        1 bytes
  8001 ;; Hardware stack levels used: 1
  8002 ;; This function calls:
  8003 ;;		Nothing
  8004 ;; This function is called by:
  8005 ;;		i2_I2C_2_Master_Start
  8006 ;;		i2_I2C_2_Master_Stop
  8007 ;;		i2_I2C_2_Master_Write
  8008 ;; This function uses a non-reentrant model
  8009 ;;
  8010                           
  8011                           	psect	text63
  8012   002990                     __ptext63:
  8013                           	callstack 0
  8014   002990                     i2_I2C_2_Master_Idle:
  8015                           	callstack 20
  8016   002990                     i2l104:
  8017   002990  010E               	movlb	14	; () banked
  8018   002992  B5D8               	btfsc	216,2,b	;volatile
  8019   002994  EFCE  F014         	goto	i2u131_41
  8020   002998  EFD0  F014         	goto	i2u131_40
  8021   00299C                     i2u131_41:
  8022   00299C  EFC8  F014         	goto	i2l104
  8023   0029A0                     i2u131_40:
  8024   0029A0                     
  8025                           ; BSR set to: 14
  8026   0029A0  CEDA F001          	movff	3802,??i2_I2C_2_Master_Idle	;volatile
  8027   0029A4  0E1F               	movlw	31
  8028   0029A6  1601               	andwf	??i2_I2C_2_Master_Idle^0,f,c
  8029   0029A8  A4D8               	btfss	status,2,c
  8030   0029AA  EFD9  F014         	goto	i2u132_41
  8031   0029AE  EFDB  F014         	goto	i2u132_40
  8032   0029B2                     i2u132_41:
  8033   0029B2  EFC8  F014         	goto	i2l104
  8034   0029B6                     i2u132_40:
  8035   0029B6                     
  8036                           ; BSR set to: 14
  8037   0029B6  0012               	return		;funcret
  8038   0029B8                     __end_ofi2_I2C_2_Master_Idle:
  8039                           	callstack 0
  8040                           
  8041                           	psect	smallconst
  8042   000E00                     __psmallconst:
  8043                           	callstack 0
  8044   000E00  00                 	db	0
  8045   000E01  00                 	db	0	; dummy byte at the end
  8046   000000                     
  8047                           	psect	rparam
  8048   000000                     
  8049                           	psect	temp
  8050   00004D                     btemp:
  8051                           	callstack 0
  8052   00004D                     	ds	1
  8053   000000                     int$flags	set	btemp
  8054   000000                     wtemp8	set	btemp+1
  8055   000000                     ttemp5	set	btemp+1
  8056   000000                     ttemp6	set	btemp+4
  8057   000000                     ttemp7	set	btemp+8
  8058                           
  8059                           	psect	config
  8060                           
  8061                           ;Config register CONFIG1L @ 0x300000
  8062                           ;	External Oscillator mode Selection bits
  8063                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  8064                           ;	Power-up default value for COSC bits
  8065                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  8066   300000                     	org	3145728
  8067   300000  AA                 	db	170
  8068                           
  8069                           ;Config register CONFIG1H @ 0x300001
  8070                           ;	unspecified, using default values
  8071                           ;	Clock Out Enable bit
  8072                           ;	CLKOUTEN = 0x1, unprogrammed default
  8073                           ;	Clock Switch Enable bit
  8074                           ;	CSWEN = 0x1, unprogrammed default
  8075                           ;	Fail-Safe Clock Monitor Enable bit
  8076                           ;	FCMEN = 0x1, unprogrammed default
  8077   300001                     	org	3145729
  8078   300001  FF                 	db	255
  8079                           
  8080                           ;Config register CONFIG3L @ 0x300004
  8081                           ;	WDT Period Select bits
  8082                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  8083                           ;	WDT operating mode
  8084                           ;	WDTE = OFF, WDT Disabled
  8085   300004                     	org	3145732
  8086   300004  9F                 	db	159
  8087                           
  8088                           ;Config register CONFIG3H @ 0x300005
  8089                           ;	unspecified, using default values
  8090                           ;	WDT Window Select bits
  8091                           ;	WDTCWS = 0x7, unprogrammed default
  8092                           ;	WDT input clock selector
  8093                           ;	WDTCCS = 0x7, unprogrammed default
  8094   300005                     	org	3145733
  8095   300005  FF                 	db	255
  8096                           tosu	equ	0xFFF
  8097                           tosh	equ	0xFFE
  8098                           tosl	equ	0xFFD
  8099                           stkptr	equ	0xFFC
  8100                           pclatu	equ	0xFFB
  8101                           pclath	equ	0xFFA
  8102                           pcl	equ	0xFF9
  8103                           tblptru	equ	0xFF8
  8104                           tblptrh	equ	0xFF7
  8105                           tblptrl	equ	0xFF6
  8106                           tablat	equ	0xFF5
  8107                           prodh	equ	0xFF4
  8108                           prodl	equ	0xFF3
  8109                           indf0	equ	0xFEF
  8110                           postinc0	equ	0xFEE
  8111                           postdec0	equ	0xFED
  8112                           preinc0	equ	0xFEC
  8113                           plusw0	equ	0xFEB
  8114                           fsr0h	equ	0xFEA
  8115                           fsr0l	equ	0xFE9
  8116                           wreg	equ	0xFE8
  8117                           indf1	equ	0xFE7
  8118                           postinc1	equ	0xFE6
  8119                           postdec1	equ	0xFE5
  8120                           preinc1	equ	0xFE4
  8121                           plusw1	equ	0xFE3
  8122                           fsr1h	equ	0xFE2
  8123                           fsr1l	equ	0xFE1
  8124                           bsr	equ	0xFE0
  8125                           indf2	equ	0xFDF
  8126                           postinc2	equ	0xFDE
  8127                           postdec2	equ	0xFDD
  8128                           preinc2	equ	0xFDC
  8129                           plusw2	equ	0xFDB
  8130                           fsr2h	equ	0xFDA
  8131                           fsr2l	equ	0xFD9
  8132                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        12
    BSS         45
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     64      76
    BANK0           160     35      80
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    Black@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    Black@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    Blue@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    Blue@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    creep@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    creep@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    creep@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    creep@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    creep@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    creep@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    decideColor@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    decideColor@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    decideColor@normRGB	PTR struct normColors size(1) Largest target is 8
		 -> main@normRGB(BANK0[8]), 

    decideColor@RGBC	PTR struct colors size(1) Largest target is 8
		 -> main@RGBC(BANK0[8]), 

    executeInstruction@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    executeInstruction@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    fastStop@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    fastStop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    fastStop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    fastStop@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    fastStop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    fastStop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    fullSpeedAhead@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    fullSpeedAhead@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    fullSpeedAhead@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    fullSpeedAhead@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    Green@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    Green@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    leftCali@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    leftCali@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    LightBlue@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    LightBlue@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    normalizeColors@normRGB	PTR struct normColors size(1) Largest target is 8
		 -> main@normRGB(BANK0[8]), 

    normalizeColors@RGBC	PTR struct colors size(1) Largest target is 8
		 -> main@RGBC(BANK0[8]), 

    Orange@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    Orange@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    Pink@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    Pink@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    readColors@RGBC	PTR struct colors size(1) Largest target is 8
		 -> main@RGBC(BANK0[8]), 

    Red@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    Red@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    reverseLightBlue@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    reverseLightBlue@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    reverseOrange@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    reverseOrange@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    reversePink@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    reversePink@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    reverseRoute@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    reverseRoute@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    reverseYellow@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    reverseYellow@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    rightCali@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    rightCali@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    S271DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    S271DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), main@motorR(BANK0[9]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    stop@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    stop@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    timed_trundle@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    timed_trundle@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    timed_trundle@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    timed_trundle@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    timed_trundle@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    timed_trundle@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    trundle@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    trundle@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    trundle@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    trundle@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    trundle@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    trundle@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    trundleSquare@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    trundleSquare@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    trundleSquare@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    trundleSquare@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    trundleSquare@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    trundleSquare@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    turn180@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turn180@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    turn180@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    turn180@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turn180@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    turn180@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    turnLeft135@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnLeft135@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    turnLeft135@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    turnLeft135@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnLeft135@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    turnLeft135@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    turnLeft@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnLeft@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    turnLeft@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    turnLeft@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnLeft@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    turnLeft@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    turnRight135@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnRight135@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    turnRight135@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    turnRight135@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnRight135@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    turnRight135@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    turnRight@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnRight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    turnRight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    turnRight@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnRight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    turnRight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    White@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    White@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    Yellow@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    Yellow@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 


Critical Paths under _main in COMRAM

    _main->_reverseRoute
    _trundle->_setMotorPWM
    _rightCali->_turnRight
    _reverseRoute->_executeInstruction
    _timed_trundle->_stop
    _executeInstruction->_Pink
    _executeInstruction->_Yellow
    _executeInstruction->_reversePink
    _executeInstruction->_reverseYellow
    _reverseYellow->_trundleSquare
    _reversePink->_trundleSquare
    _reverseOrange->_turnRight135
    _reverseLightBlue->_turnLeft135
    _Yellow->_trundleSquare
    _Red->_turnRight
    _turnRight->_stop
    _Pink->_trundleSquare
    _trundleSquare->_stop
    _Orange->_turnRight135
    _turnRight135->_stop
    _LightBlue->_turnLeft135
    _turnLeft135->_stop
    _Green->_turnLeft
    _Blue->_turn180
    _turn180->_stop
    _leftCali->_turnLeft
    _turnLeft->_stop
    _interrupts_init->_color_writetoaddr
    _clearInterrupt->_I2C_2_Master_Write
    _fastStop->_setMotorPWM
    _decideColor->_creep
    _readColors->_readBlueColor
    _readColors->_readClearColor
    _readColors->_readGreenColor
    _readColors->_readRedColor
    _readRedColor->_I2C_2_Master_Read
    _readGreenColor->_I2C_2_Master_Read
    _readClearColor->_I2C_2_Master_Read
    _readBlueColor->_I2C_2_Master_Read
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    _normalizeColors->___lwdiv
    _creep->_stop
    _stop->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle

Critical Paths under _High_ISR in COMRAM

    i2_clearInterrupt->i2_I2C_2_Master_Write
    i2_I2C_2_Master_Write->i2_I2C_2_Master_Idle
    i2_I2C_2_Master_Stop->i2_I2C_2_Master_Idle
    i2_I2C_2_Master_Start->i2_I2C_2_Master_Idle

Critical Paths under _main in BANK0

    None.

Critical Paths under _High_ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _High_ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _High_ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _High_ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _High_ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _High_ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _High_ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _High_ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _High_ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _High_ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _High_ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _High_ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _High_ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _High_ISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                39    39      0  573751
                                             62 COMRAM     2     2      0
                                              0 BANK0     35    35      0
                          _LEDturnON
                        _Timer0_init
                     _clearInterrupt
                   _color_click_init
                        _decideColor
                 _executeInstruction
                           _fastStop
                _indicateInstruction
                      _initBoardLEDs
                        _initButtons
                    _initDCmotorsPWM
                   _init_buttons_LED
                    _interrupts_init
                           _leftCali
                    _normalizeColors
                         _readColors
                       _reverseRoute
                          _rightCali
                        _setMotorPWM
                            _trundle
 ---------------------------------------------------------------------------------
 (1) _trundle                                             11     9      2    5827
                                             20 COMRAM    11     9      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _rightCali                                            5     3      2   14061
                                             38 COMRAM     5     3      2
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _reverseRoute                                        16    14      2  270832
                                             46 COMRAM    16    14      2
                 _executeInstruction
                               _stop
                      _timed_trundle
                            _turn180
 ---------------------------------------------------------------------------------
 (2) _timed_trundle                                       13     9      4   13495
                                             27 COMRAM    13     9      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (2) _executeInstruction                                   5     2      3  236126
                                             41 COMRAM     5     2      3
                              _Black
                               _Blue
                              _Green
                          _LightBlue
                             _Orange
                               _Pink
                                _Red
                              _White
                             _Yellow
                   _reverseLightBlue
                      _reverseOrange
                        _reversePink
                      _reverseYellow
 ---------------------------------------------------------------------------------
 (3) _reverseYellow                                        2     0      2   41648
                                             39 COMRAM     2     0      2
                      _trundleSquare
                            _turn180
                           _turnLeft
 ---------------------------------------------------------------------------------
 (3) _reversePink                                          2     0      2   41648
                                             39 COMRAM     2     0      2
                      _trundleSquare
                            _turn180
                          _turnRight
 ---------------------------------------------------------------------------------
 (3) _reverseOrange                                        2     0      2   13384
                                             37 COMRAM     2     0      2
                       _turnRight135
 ---------------------------------------------------------------------------------
 (3) _reverseLightBlue                                     2     0      2   13384
                                             37 COMRAM     2     0      2
                        _turnLeft135
 ---------------------------------------------------------------------------------
 (3) _Yellow                                               2     0      2   28112
                                             39 COMRAM     2     0      2
                      _trundleSquare
                          _turnRight
 ---------------------------------------------------------------------------------
 (3) _White                                                2     0      2     152
                                              2 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _Red                                                  2     0      2   14014
                                             38 COMRAM     2     0      2
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _turnRight                                           11     8      3   13818
                                             27 COMRAM    11     8      3
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (3) _Pink                                                 2     0      2   28112
                                             39 COMRAM     2     0      2
                      _trundleSquare
                           _turnLeft
 ---------------------------------------------------------------------------------
 (4) _trundleSquare                                       12     8      4   14054
                                             27 COMRAM    12     8      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (3) _Orange                                               2     0      2   13384
                                             37 COMRAM     2     0      2
                       _turnRight135
 ---------------------------------------------------------------------------------
 (4) _turnRight135                                        10     8      2   13188
                                             27 COMRAM    10     8      2
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (3) _LightBlue                                            2     0      2   13384
                                             37 COMRAM     2     0      2
                        _turnLeft135
 ---------------------------------------------------------------------------------
 (4) _turnLeft135                                         10     8      2   13188
                                             27 COMRAM    10     8      2
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (3) _Green                                                2     0      2   14014
                                             38 COMRAM     2     0      2
                           _turnLeft
 ---------------------------------------------------------------------------------
 (3) _Blue                                                 2     0      2   13688
                                             37 COMRAM     2     0      2
                            _turn180
 ---------------------------------------------------------------------------------
 (2) _turn180                                             10     8      2   13492
                                             27 COMRAM    10     8      2
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (3) _Black                                                2     0      2     152
                                              2 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _leftCali                                             5     3      2   14061
                                             38 COMRAM     5     3      2
                           _turnLeft
 ---------------------------------------------------------------------------------
 (4) _turnLeft                                            11     8      3   13818
                                             27 COMRAM    11     8      3
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (1) _interrupts_init                                      0     0      0     620
                     _clearInterrupt
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _clearInterrupt                                       0     0      0      22
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (1) _init_buttons_LED                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              2 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _initButtons                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initBoardLEDs                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _indicateInstruction                                  8     8      0      92
                                              2 COMRAM     8     8      0
 ---------------------------------------------------------------------------------
 (1) _fastStop                                             7     5      2    5538
                                             20 COMRAM     7     5      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _decideColor                                          6     2      4   17199
                                             41 COMRAM     6     2      4
                          _LEDturnON
                              _creep
                    _normalizeColors
                         _readColors
 ---------------------------------------------------------------------------------
 (1) _readColors                                           3     2      1     692
                                             13 COMRAM     3     2      1
                         _LEDturnOFF
                          _LEDturnON
                      _readBlueColor
                     _readClearColor
                     _readGreenColor
                       _readRedColor
 ---------------------------------------------------------------------------------
 (2) _readRedColor                                         7     5      2     113
                                              6 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _readGreenColor                                       7     5      2     113
                                              6 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _readClearColor                                       7     5      2     113
                                              6 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _readBlueColor                                        7     5      2     113
                                              6 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Read                                    3     3      0      45
                                              3 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _LEDturnON                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LEDturnOFF                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _normalizeColors                                     14    12      2    1790
                                             15 COMRAM    14    12      2
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (2) _creep                                               14     9      5   13995
                                             27 COMRAM    14     9      5
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (3) _stop                                                 7     5      2    7210
                                             20 COMRAM     7     5      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          5     4      1    5163
                                             15 COMRAM     5     4      1
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     507
                                              2 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4    1108
                                              8 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     598
                                              6 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     598
                                              4 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      22
                                              3 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              2 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _High_ISR                                             0     0      0      22
                   i2_clearInterrupt
 ---------------------------------------------------------------------------------
 (9) i2_clearInterrupt                                     0     0      0      22
               i2_I2C_2_Master_Start
                i2_I2C_2_Master_Stop
               i2_I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (10) i2_I2C_2_Master_Write                                1     1      0      22
                                              1 COMRAM     1     1      0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (10) i2_I2C_2_Master_Stop                                 0     0      0       0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (10) i2_I2C_2_Master_Start                                0     0      0       0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (11) i2_I2C_2_Master_Idle                                 1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LEDturnON
   _Timer0_init
   _clearInterrupt
     _I2C_2_Master_Start
       _I2C_2_Master_Idle
     _I2C_2_Master_Stop
       _I2C_2_Master_Idle
     _I2C_2_Master_Write
       _I2C_2_Master_Idle
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _decideColor
     _LEDturnON
     _creep
       _setMotorPWM
         ___lwdiv
           ___wmul (ARG)
         ___wmul
       _stop
         _setMotorPWM
     _normalizeColors
       ___lwdiv
     _readColors
       _LEDturnOFF
       _LEDturnON
       _readBlueColor
         _I2C_2_Master_Read
           _I2C_2_Master_Idle
         _I2C_2_Master_RepStart
           _I2C_2_Master_Idle
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _readClearColor
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _readGreenColor
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _readRedColor
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
   _executeInstruction
     _Black
     _Blue
       _turn180
         _setMotorPWM
         _stop
     _Green
       _turnLeft
         _setMotorPWM
         _stop
     _LightBlue
       _turnLeft135
         _setMotorPWM
         _stop
     _Orange
       _turnRight135
         _setMotorPWM
         _stop
     _Pink
       _trundleSquare
         _setMotorPWM
         _stop
       _turnLeft
     _Red
       _turnRight
         _setMotorPWM
         _stop
     _White
     _Yellow
       _trundleSquare
       _turnRight
     _reverseLightBlue
       _turnLeft135
     _reverseOrange
       _turnRight135
     _reversePink
       _trundleSquare
       _turn180
       _turnRight
     _reverseYellow
       _trundleSquare
       _turn180
       _turnLeft
   _fastStop
     _setMotorPWM
   _indicateInstruction
   _initBoardLEDs
   _initButtons
   _initDCmotorsPWM
   _init_buttons_LED
   _interrupts_init
     _clearInterrupt
     _color_writetoaddr
   _leftCali
     _turnLeft
   _normalizeColors
   _readColors
   _reverseRoute
     _executeInstruction
     _stop
     _timed_trundle
       _setMotorPWM
       _stop
     _turn180
   _rightCali
     _turnRight
   _setMotorPWM
   _trundle
     _setMotorPWM

 _High_ISR (ROOT)
   i2_clearInterrupt
     i2_I2C_2_Master_Start
       i2_I2C_2_Master_Idle
     i2_I2C_2_Master_Stop
       i2_I2C_2_Master_Idle
     i2_I2C_2_Master_Write
       i2_I2C_2_Master_Idle

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      65        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     23      50       5       50.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     40      4C       1       80.9%
BITBIGSFRhlllll     46      0       0      48        0.0%
BITBIGSFRlllhlh     35      0       0      58        0.0%
BITBIGSFRhlllhl     31      0       0      46        0.0%
BITBIGSFRllllh      2B      0       0      62        0.0%
BITBIGSFRllhh       20      0       0      50        0.0%
BITBIGSFRhhhhlh     1B      0       0      33        0.0%
BITBIGSFRhhhllh     17      0       0      38        0.0%
BITBIGSFRhlllhh     14      0       0      43        0.0%
BITBIGSFRhhhhll     13      0       0      34        0.0%
BITBIGSFRlllhhl     11      0       0      53        0.0%
BITBIGSFRlllhhl     11      0       0      54        0.0%
BITBIGSFRhhhhll      E      0       0      35        0.0%
BITBIGSFRhhhhh       D      0       0      32        0.0%
BITBIGSFRlllhhh      C      0       0      52        0.0%
BITBIGSFRllhl        C      0       0      51        0.0%
BITBIGSFRlllhll      9      0       0      60        0.0%
BITBIGSFRlllhlh      9      0       0      59        0.0%
BITBIGSFRhlllhh      6      0       0      45        0.0%
BITBIGSFRlllhlh      5      0       0      57        0.0%
BITBIGSFRhhhlll      5      0       0      39        0.0%
BITBIGSFRhlllhh      3      0       0      44        0.0%
BITBIGSFRlllhhl      3      0       0      56        0.0%
BITBIGSFRhllllh      2      0       0      47        0.0%
BITBIGSFRhhhlh       2      0       0      37        0.0%
BITBIGSFRhllh        2      0       0      42        0.0%
BITBIGSFRlllhhl      1      0       0      55        0.0%
BITBIGSFRhhlh        1      0       0      40        0.0%
BITBIGSFRhhhhll      1      0       0      36        0.0%
BITBIGSFRlllhll      1      0       0      61        0.0%
BITBIGSFRlh          1      0       0      49        0.0%
BITBIGSFRhlh         1      0       0      41        0.0%
BITBIGSFRlllll       1      0       0      63        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      9C      64        0.0%
DATA                 0      0      9C       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Tue Mar 12 12:26:18 2024

           ??_init_buttons_LED 0003     __end_of_executeInstruction 1612                             l33 293C  
                           l42 2A48                             l51 2836                             l60 20CC  
                           l45 2746                             l54 27E6                             l48 2796  
                           l64 0FF4                             l57 18A8            ___wmul@multiplicand 0005  
                          l101 2966                            l110 2B7E                            l104 2968  
                          l113 2B56                            l122 2878                            l202 10DE  
                          l107 298E                            l116 2B74                            l119 2B36  
                          l240 2B6A                            l401 2912                            l234 2AA8  
                          l500 242E                            l404 2ADA                            l237 2B60  
                          l414 2294                            l407 2AE8                            l503 22A4  
                          l600 1424                            l417 22A2                            l513 2334  
                          l282 2A68                            l611 14B8                            l523 263C  
                          l371 2ABA                            l292 2A7E                            l380 29DC  
                          l508 22E2                            l470 255E                            l534 1B10  
                          l374 2ACC                            l518 2368                            l279 26F6  
                          l383 2A02                            l199 10C6                            l392 2B9A  
                          l368 1610                            l377 2B12                            l641 1FBA  
                          l545 19DC                            l617 12A8                            l482 26A6  
                          l490 23A8                            l386 2AF6                            l395 2B9C  
                          l556 1E9A                            l628 133C                            l477 1764  
                          l485 236A                            l389 2B04                            l637 1F78  
                          l398 28E0                            l495 23FA                            l567 1D6C  
                          l680 2446                            l682 24D6                            l666 2B4C  
                          l578 1C3E                            l594 21DA                            l586 2172  
                          l669 2B2A                            l694 2A28                            l679 247A  
                          u960 257A                            u961 2576                            u970 2598  
                          u971 2594                            u980 25B4                            u981 25B0  
                          u990 162C                            u991 1628                            _Red 2AAA  
              ??_timed_trundle 0020                            wreg 0FE8                           ?_Red 0027  
                         l3001 13FC                           l3011 1462                           l3003 142E  
                         l3005 1442                           l3013 1468                           l3021 14BE  
                         l3101 1310                           l3007 144A                           l3015 148C  
                         l3031 150E                           l3023 14CE                           l3103 1330  
                         l1192 25D2                           l3121 2922                           l1185 25CA  
                         l3017 14AC                           l3009 1452                           l3201 2A96  
                         l3041 155E                           l3033 151E                           l3025 14DE  
                         l3123 292C                           l3203 2B44                           l3211 2506  
                         l3043 156E                           l3035 152E                           l3027 14EE  
                         l3019 14BA                           l3117 2914                           l2501 257A  
                         l3141 0E88                           l3133 0E42                           l3125 0E02  
                         l3205 2B20                           l3221 2544                           l3213 250A  
                         l3301 26B8                           l3045 157E                           l3037 153E  
                         l3029 14FE                           l3061 11EE                           l3119 2918  
                         l2511 25B4                           l2503 2582                           l3151 0EB4  
                         l3143 0EAA                           l3135 0E64                           l3127 0E24  
                         l3223 2546                           l3215 252E                           l3207 24D8  
                         l3055 2A6A                           l3311 26EA                           l3303 26C2  
                         l3231 236A                           l3039 154E                           l3071 122A  
                         l3063 11FA                           l3321 2A52                           l2513 25BC  
                         l2505 258A                           l2521 162C                           l3161 0F10  
                         l3153 0ECC                           l3137 0E82                           l3129 0E3C  
                         l3225 2550                           l3217 2538                           l3209 24E0  
                         l3313 26EE                           l3305 26CC                           l3241 23C4  
                         l3233 2378                           l2601 1902                           l3049 158E  
                         l3081 1264                           l3073 122E                           l3065 1204  
                         l3057 11C2                           l3401 2136                           l3323 2A5C  
                         l2515 25BE                           l2507 2598                           l2531 16E8  
                         l2523 167A                           l3163 0F2E                           l3155 0EE4  
                         l3331 25EC                           l3227 2552                           l3219 253A  
                         l3315 26F0                           l3307 26D6                           l3251 240E  
                         l3243 23DA                           l3235 2380                           l2611 194A  
                         l2603 190E                           l3091 12C6                           l3083 126C  
                         l3075 123E                           l3067 1212                           l3059 11D8  
                         l3411 2198                           l3403 2146                           l3325 2A66  
                         l2517 25C4                           l2509 259E                           l2533 1728  
                         l2525 168C                           l2541 264E                           l3181 0FA2  
                         l3173 0F5C                           l3157 0EEC                           l3149 0EB0  
                         l3341 2622                           l3229 255C                           l3317 26F4  
                         l3309 26E0                           l3245 23E8                           l3237 2398  
                         l3253 2410                           l2701 1DF8                           l2605 1922  
                         l2613 194E                           l3093 12CE                           l3085 127C  
                         l3077 1248                           l3069 1220                           l3261 22A4  
                         l3413 21A0                           l3405 214A                           l3501 1152  
                         l3319 2A4A                           l2535 2968                           l2527 1690  
                         l2519 1612                           l2551 2684                           l2543 2656  
                         l3191 0FEC                           l3183 0FC4                           l3175 0F7A  
                         l3167 0F34                           l3159 0EF8                           l3343 2632  
                         l3335 25FE                           l3327 25D4                           l3255 241E  
                         l3239 23B6                           l2711 1E4A                           l2703 1E08  
                         l2631 19D2                           l2623 199E                           l2615 196C  
                         l2607 192A                           l3095 12D6                           l3079 125C  
                         l3087 1280                           l3271 22FE                           l3263 22B2  
                         l3415 21B0                           l3407 217C                           l3511 1178  
                         l3503 1162                           l3431 0FF6                           l2537 2978  
                         l2561 2B7A                           l2529 16CE                           l2553 268C  
                         l3177 0F9C                           l3169 0F56                           l3337 2612  
                         l3329 25E4                           l3361 249E                           l3353 243A  
                         l2641 1A16                           l3257 242C                           l3249 2408  
                         l2721 1E80                           l2705 1E0C                           l2801 1C24  
                         l2625 19B2                           l2617 1984                           l2609 1932  
                         l3097 12E6                           l3089 12B2                           l3281 2348  
                         l3273 2314                           l3265 22BA                           l3409 2190  
                         l3417 21B6                           l3521 119A                           l3513 117A  
                         l3505 1166                           l3441 1006                           l3433 0FFA  
                         l2563 2B2E                           l2491 2A04                           l2555 269C  
                         l2547 2668                           l2539 263E                           l2571 283A  
                         l3339 261A                           l3363 24B6                           l3355 2448  
                         l3347 2432                           l3291 26A8                           l2651 1A56  
                         l2643 1A22                           l2635 19DE                           l2723 1E90  
                         l2715 1E5C                           l2707 1E2A                           l2811 1C6C  
                         l2803 1C34                           l2731 1EC8                           l2627 19BA  
                         l2619 198C                           l3099 12EC                           l3371 2216  
                         l3275 2322                           l3267 22D2                           l3283 234A  
                         l3523 11A8                           l3507 1170                           l3451 1028  
                         l3443 1012                           l3435 0FFE                           l2565 2B32  
                         l2493 2A20                           l2549 267C                           l2581 2876  
                         l2573 283E                           l3197 0FF2                           l3189 0FCA  
                         l3357 245E                           l3293 26AE                           l2661 1AA0  
                         l2653 1A5E                           l2645 1A30                           l2637 19F4  
                         l2717 1E70                           l2709 1E42                           l2821 1CA6  
                         l2813 1C78                           l2733 1ED4                           l2629 19C2  
                         l2901 2ACE                           l3373 221C                           l3365 21DC  
                         l3285 2358                           l3269 22F0                           l3525 11AE  
                         l3509 1174                           l3517 117C                           l3461 104A  
                         l3453 1030                           l3445 1018                           l3437 1002  
                         l2911 2948                           l2559 2B76                           l2575 2846  
                         l2567 2B4E                           l3359 2476                           l3295 26B2  
                         l2671 1AE6                           l2663 1AB8                           l2655 1A66  
                         l2647 1A36                           l2639 1A0A                           l2719 1E78  
                         l2823 1CBA                           l2831 1CDE                           l2815 1C84  
                         l2807 1C40                           l2751 1F48                           l2735 1EE4  
                         l2727 1E9C                           l2591 18C0                           l2903 2ADC  
                         l3383 2282                           l3367 21E4                           l3287 2366  
                         l3279 2342                           l3391 20F4                           l3519 118E  
                         l3471 106E                           l3463 104E                           l3455 1038  
                         l3447 101C                           l3439 1006                           l2913 294E  
                         l2585 2B6C                           l2921 2A2C                           l2497 2560  
                         l2577 284E                           l2569 2B52                           l3297 26B4  
                         l2673 1AEE                           l2665 1AC0                           l2657 1A7E  
                         l2649 1A42                           l2681 1D6E                           l2841 1D2E  
                         l2833 1CFC                           l2825 1CC2                           l2817 1C92  
                         l2809 1C56                           l2761 1B12                           l2753 1F58  
                         l2745 1F24                           l2737 1F00                           l2729 1EB2  
                         l2593 18D6                           l3609 15A2                           l3385 228E  
                         l3377 222E                           l3369 2204                           l3393 2108  
                         l3481 10AA                           l3473 107C                           l3465 1056  
                         l3457 1040                           l3449 1020                           l2915 2950  
                         l2587 2B70                           l2499 2568                           l2931 1810  
                         l2923 1766                           l2579 2874                           l3299 26B6  
                         l2675 1AF6                           l2659 1A82                           l2691 1DC0  
                         l2683 1D84                           l2843 1D42                           l2835 1D14  
                         l2827 1CCA                           l2819 1C9A                           l2771 1B64  
                         l2763 1B28                           l2755 1F5C                           l2747 1F38  
                         l2739 1F1C                           l2595 18E2                           l3379 2278  
                         l3395 2112                           l3387 20CE                           l3491 1104  
                         l3483 10AE                           l3475 1094                           l3467 105E  
                         l3459 1046                           l2917 2952                           l2909 293E  
                         l2933 1840                           l2925 17B0                           l2861 278E  
                         l2853 26F8                           l2941 1FC0                           l2677 1B06  
                         l2669 1AD2                           l2693 1DC8                           l2685 1D9A  
                         l2845 1D4A                           l2837 1D1C                           l2829 1CDA  
                         l2781 1B9C                           l2773 1B6C                           l2765 1B3E  
                         l2757 1F7C                           l2749 1F40                           l2597 18F0  
                         l2589 18AA                           l3397 2126                           l3389 20EA  
                         l3493 1128                           l3485 10D4                           l3477 10A2  
                         l3469 1066                           l2919 2954                           l2935 185C  
                         l2927 17CC                           l2871 2798                           l2855 273E  
                         l2951 201E                           l2943 1FD6                           l2695 1DD4  
                         l2687 1DA6                           l2847 1D52                           l2791 1BEE  
                         l2783 1BAC                           l2775 1B78                           l2767 1B4A  
                         l2759 1FAE                           l2599 18FC                           l3399 212E  
                         l3495 112E                           l3487 10F0                           l3479 10A6  
                         l2937 188C                           l2929 17F4                           l2865 27E8  
                         l2873 27DE                           l2961 2080                           l2953 2036  
                         l2945 1FEE                           l2697 1DE8                           l2689 1DB2  
                         l2849 1D62                           l2777 1B8C                           l2785 1BB0  
                         l2769 1B58                           l2881 2AAA                           l3497 1140  
                         l3489 10FC                           l2971 133E                           l2867 282E  
                         l2859 2748                           l2963 2082                           l2955 2038  
                         l2947 1FF2                           l2939 1FBC                           l2699 1DF0  
                         l2883 2ABC                           l2795 1C00                           l2787 1BCE  
                         l2779 1B94                           l2891 2AEA                           l3499 1150  
                         l2981 138E                           l2973 1354                           l2877 2B58  
                         l2965 2084                           l2957 203A                           l2949 1FF4  
                         l2885 2B06                           l2893 2AF8                           l2797 1C14  
                         l2789 1BE6                           l2991 13C4                           l2983 139C  
                         l2975 136A                           l2879 2B62                           l2967 20B2  
                         l2959 2068                           l2799 1C1C                           l2895 2B94  
                         l2887 29B8                           l2993 13D8                           l2985 13A6  
                         l2977 1376                           l2969 20CA                           l2889 29DE  
                         l2897 28B0                           l2995 13E0                           l2987 13AA  
                         l2979 1380                           l2899 28E2                           l2997 13E8  
                         l2989 13BA                           l2999 13F8                           u1000 16E8  
                         u1001 16E4                           u1010 2978                           u1011 2974  
                         u1020 298E                           u1100 19F4                           u1021 298A  
                         u1101 19F0                           u1030 2664                           u1110 1A0A  
                         u1031 2660                           u1111 1A06                           u1040 2862  
                         u1120 1AA0                           u1200 1EE4                           u1041 285A  
                         u1121 1A9C                           u1201 1EE0                           u1130 1ACE  
                         u1210 1F78                           u1131 1ACA                           u1211 1F74  
                         u1140 1D84                           u1300 1D2A                           u1220 1FAE  
                         u1060 18C0                           u1141 1D80                           u1301 1D26  
                         u1221 1FAA                           u1061 18BC                           u1150 1D9A  
                         u1230 1B28                           u1070 18D6                           u1151 1D96  
                         u1231 1B24                           u2007 1F4E                           u1071 18D2  
                         u1160 1E2A                           u1240 1B3E                           u1080 196C  
                         u1400 11EE                           u1161 1E26                           u2017 1BA2  
                         u1241 1B3A                           u1081 1968                           u1401 11EA  
                         u1330 1354                           u1058 2864                           u1170 1E58  
                         u1250 1BCE                           u1090 199A                           u1410 123E  
                         u1331 1350                           u2107 238A                           u1171 1E54  
                         u2027 1BD8                           u1251 1BCA                           u1091 1996  
                         u1411 123A                           u1340 136A                           u1500 0F56  
                         u1260 1BFC                           u1180 1EB2                           u1420 12A4  
                         u1341 1366                           u1501 0F52                           u2117 23CE  
                         u2037 1C2A                           u1261 1BF8                           u1181 1EAE  
                         u1421 12A0                           u1350 13BA                           u1510 0F7A  
                         u1270 1C56                           u1190 1EC8                           u1430 1310  
                         u1351 13B6                           u2207 1FE0                           u1511 0F76  
                         u2127 1A70                           u2047 1CD0                           u1271 1C52  
                         u1191 1EC4                           u1431 130C                           u1360 1420  
                         u1520 0F9C                           u1600 2408                           u1280 1C6C  
                         u1440 1330                           u1361 141C                           u2217 1FFE  
                         u1521 0F98                           u2137 1AAA                           u1601 2404  
                         u2057 1D06                           u1281 1C68                           u1441 132C  
                         u1370 148C                           u1530 0FC4                           u1450 0E24  
                         u1610 241E                           u1290 1CFC                           u2307 2932  
                         u1371 1488                           u2227 2028                           u1531 0FC0  
                         u1451 0E20                           u2147 1AFC                           u1611 241A  
                         u2067 1D58                           u1291 1CF8                           u1380 14AC  
                         u1540 0FEC                           u1460 0E64                           u1620 242C  
                         u1700 2366                           u1381 14A8                           u2237 2044  
                         u1541 0FE8                           u1461 0E60                           u2157 2452  
                         u1621 2428                           u2077 1DFE                           u1701 2362  
                         u1470 0E82                           u1710 25FA                           u1550 2378  
                         u1390 11D8                           u1630 22B2                           u2247 2072  
                         u1471 0E7E                           u1711 25F6                           u2167 246A  
                         u1551 2374                           u2087 1E34                           u1391 11D4  
                         u1631 22AE                           u1480 0EAA                           u1720 249E  
                         u1560 23B6                           u1640 22F0                           u1800 10D4  
                         u2257 208E                           u1481 0EA6                           u2177 24A8  
                         u1721 249A                           u1561 23B2                           u2097 1E86  
                         u1641 22EC                           u1801 10D0                           u1490 0F2E  
                         u1730 24D6                           u1570 23C4                           u1650 22FE  
                         u1810 10F0                           _T2PR 0FBC                           u2267 20BC  
                         u1491 0F2A                           u2187 2628                           u1731 24D2  
                         u1571 23C0                           u1651 22FA                           u1811 10EC  
                         u1580 23E8                           u1660 2322                           u1820 118E  
                         u2277 13EE                           u2197 0EBE                           u1581 23E4  
                         u1741 220E                           u1661 231E                           u1821 118A  
                         u1590 23F6                           u1750 222A                           u1670 2330  
                         u1830 11A8                           u2287 1458                           u1591 23F2  
                         u1751 2226                           u1671 232C                           u1831 11A4  
                         u1760 22A2                           u1680 2342                           u2297 2692  
                         u1761 229E                           u1681 233E                           u1690 2358  
                         u1770 2108                           u1691 2354                           u1771 2104  
                         u1907 10B8                           u1780 216E                           u1781 216A  
                         u1917 213C                           u1790 21DA                           u1791 21D6  
                         u1927 21A6                           u1937 22C4                           u1947 2308  
                         u1957 1272                           u1967 12DC                           u1977 193C  
                         u1897 1086                           u1987 1976                           u1997 19C8  
                         _Blue 2B06        timed_trundle@increments 001E        __end_of_interrupts_init 26F8  
                         _Pink 29DE                    main@normRGB 008E                           _main 0FF6  
                         fsr1h 0FE2                           fsr2h 0FDA                           indf2 0FDF  
                         fsr1l 0FE1                           fsr2l 0FD9                           btemp 004D  
                         _stop 263E                           prodh 0FF4                           prodl 0FF3  
                         start 0046                    ?_LEDturnOFF 0001                   ___param_bank 0000  
                  _turnLeft135 1C40             turnRight135@i_2144 0024                   ?_initButtons 0001  
                        ??_Red 0029             normalizeColors@sum 001A                          ?_Blue 0026  
                        ?_Pink 0028                          ?_main 0001                          _ADPCH 0F5F  
                        ?_stop 0015                    LightBlue@mL 0026                    LightBlue@mR 0027  
              __end_of___lwdiv 25D4                          i2l110 2B92                          i2l104 2990  
                        i2l107 29B6                          i2l116 2B88                          i2l119 2B42  
              readRedColor@tmp 000C                          i2l292 2A94                          i2l289 0042  
             i2_clearInterrupt 2A80              turnLeft135@i_2126 0024                          _TMR0H 0FD4  
                        _TMR0L 0FD3                          Red@mL 0027                          Red@mR 0028  
                        _Black 2B9C                          _Green 2ABC     __end_of_I2C_2_Master_Start 2B80  
                        _White 2B94     __end_of_I2C_2_Master_Write 2B38                          _creep 133E  
                        tablat 0FF5                          plusw1 0FE3                          plusw2 0FDB  
              __end_of_turn180 1E9C                          ttemp5 004E                          ttemp6 0051  
                        ttemp7 0055                          stop@i 001A                          status 0FD8  
                        wtemp8 004E                __end_of_trundle 21DC          _I2C_2_Master_RepStart 2B4E  
             __end_of_High_ISR 0046                   __end_of_Blue 2B14                __initialization 287A  
                 __end_of_Pink 2A04                   __end_of_main 11C2                   __end_of_stop 26A8  
          normalizeColors@RGBC 0010                         ??_Blue 0028                turn180@maxpower 0020  
                       ??_Pink 002A                _normalizeColors 1766                         ??_main 003F  
                       ??_stop 0017                  decideColor@mL 002C                  decideColor@mR 002D  
                __activetblptr 0003                  ?_readRedColor 0007                   _turnRight135 1B12  
                       ?_Black 0003                         ?_Green 0027      indicateInstruction@period 0006  
                       ?_White 0003             reverseRoute@F14295 0041                   ?_setMotorPWM 0010  
                       ?_creep 001C                         _ADRESH 0F64                         _CCPR1H 0FAA  
                       _CCPR2H 0FA6                         _CCPR3H 0F25                         _CCPR4H 0F21  
                       _RE2PPS 0E74                         _RC7PPS 0E69                         _RD5PPS 0E6F  
                       _RE4PPS 0E76                         _RD6PPS 0E70                         i2l3111 2B84  
                       i2l3105 2B8A                         i2l3113 2B3A                         i2l3107 2B8E  
                       i2l3115 2B3E                         i2l3109 2B80                         i2l3419 2A80  
                       i2l3531 001C                         i2l3541 003A                         i2l3533 0022  
                       i2l3543 003C                         i2l3535 0026                         i2l3527 000A  
                       i2l2905 2990                         i2l3537 002A                         i2l3529 001A  
                       i2l2907 29A0                         i2l3539 002C                         _RG6PPS 0E88  
                _initBoardLEDs 2B44                         Blue@mL 0026                         Blue@mR 0027  
             ?_interrupts_init 0001              __end_of_LEDturnON 2B62       __end_of_color_click_init 293E  
            readGreenColor@tmp 000C                         Pink@mL 0028                         Pink@mR 0029  
             __end_of_fastStop 263E                  ??_Timer0_init 0003                         _Orange 2AEA  
                 _CCPTMRS0bits 0FAD                         _Yellow 29B8               __end_of_leftCali 2430  
                       ___wmul 2A04                      ??___lwdiv 000D              readClearColor@tmp 000C  
                 ?_reversePink 0028                         clear_0 28A0                         isa$std 0001  
                       creep@i 0024                         _square 004C                 ??_readRedColor 0009  
                _readBlueColor 27E8                   __pdataCOMRAM 0041                   __mediumconst 0000  
                       tblptrh 0FF7                         tblptrl 0FF6                         tblptru 0FF8  
                    ??_turn180 001E                         stop@mL 0015                         stop@mR 0016  
            ??_initDCmotorsPWM 0005         normalizeColors@normRGB 0011                      ??_trundle 0017  
             __end_of_turnLeft 1B12                 ?_initBoardLEDs 0001                     __accesstop 0060  
      __end_of__initialization 28A6     timed_trundle@current_power 0027                 _clearInterrupt 2A6A  
       ?_I2C_2_Master_RepStart 0001                  ___rparam_used 0001                  __end_of_Black 2B9E  
             _reverseLightBlue 2ADC                  __end_of_Green 2ACE                  turn180@i_2108 0024  
               __pcstackCOMRAM 0001        __end_of_normalizeColors 18AA                  __end_of_White 2B9C  
            _instruction_array 0060                  __end_of_creep 14BA            trundleSquare@square 001E  
          __end_of_Timer0_init 2A6A            _indicateInstruction 2430              __end_of_LightBlue 2B06  
               ?_readBlueColor 0007                  leftCali@power 002B     timed_trundle@trundle_power 0028  
                      ??_Black 0005                  _turnLeftPower 004B               creep@creep_power 0029  
                      ??_Green 0029             _executeInstruction 14BA                        ??_White 0005  
                    ?_High_ISR 0001                        ??_creep 0021   trundleSquare@start_increment 0025  
       __end_of_clearInterrupt 2A80                     __pbssBANK0 0060           ?_indicateInstruction 0001  
        __end_of_reverseOrange 2ADC            ?_executeInstruction 002A          __end_of_reverseYellow 28E2  
             _reverseRouteFlag 008A       __end_ofi2_clearInterrupt 2A96                   ??_LEDturnOFF 0003  
            _color_writetoaddr 2A2A                   _T2CLKCONbits 0FBF                        ?_Orange 0026  
                 ?_turnLeft135 001C                        ?_Yellow 0028             ?_color_writetoaddr 0005  
                      ?___wmul 0003                 main@colourCode 008D           ??_executeInstruction 002D  
                _trundleSquare 1E9C            ??_color_writetoaddr 0006           turnRight135@maxpower 0020  
                      Black@mL 0003                        Black@mR 0004                        _INT0PPS 0DF0  
 executeInstruction@colourCode 002C             __end_of_LEDturnOFF 2B6C          __end_of_timed_trundle 133E  
                  rightCali@mL 0027                    rightCali@mR 0028                        _SSP2ADD 0ED6  
                   ??_High_ISR 0003                        _SSP2BUF 0ED5                ??_initBoardLEDs 0003  
                    ?_fastStop 0015                reverseOrange@mL 0026                reverseOrange@mR 0027  
                      Green@mL 0027                        Green@mR 0028                      ?_leftCali 0027  
              ?_clearInterrupt 0001          ??_indicateInstruction 0003         color_writetoaddr@value 0005  
    __end_of_color_writetoaddr 2A4A           __end_of_readRedColor 2748                      _ADREFbits 0F58  
           _I2C_2_Master_Start 2B76            i2_I2C_2_Master_Idle 2990             _I2C_2_Master_Write 2B2C  
                      __Hparam 0000            i2_I2C_2_Master_Stop 2B80                        __Lparam 0000  
                  _Timer0_init 2A4A                reverseYellow@mL 0028                reverseYellow@mR 0029  
      _instruction_array_index 008B               ?_normalizeColors 0010                        White@mL 0003  
                      White@mR 0004                     _readColors 1FBC                  ??_decideColor 002E  
          ?_I2C_2_Master_Start 0001                   turnLeft135@i 0022                        ___lwdiv 2560  
          ?_I2C_2_Master_Write 0001                   __psmallconst 0E00                ??_readBlueColor 0009  
               ?_trundleSquare 001C                        __pcinit 287A                        __ramtop 0E00  
                    ?_turnLeft 001C                        __ptext0 0FF6                        __ptext1 20CE  
                      __ptext2 22A4                        __ptext3 21DC                        __ptext4 11C2  
                      __ptext5 14BA                        __ptext6 28B0                        __ptext7 28E2  
                      __ptext8 2ACE                        __ptext9 2ADC           trundle@current_power 001E  
            stop@current_power 0018           ?i2_I2C_2_Master_Idle 0001                      _T2CONbits 0FBD  
                ?_reverseRoute 002F           ?i2_I2C_2_Master_Stop 0001                 _readClearColor 2798  
                    _T2HLTbits 0FBE                        creep@mL 001C                        creep@mR 001D  
                   ??_fastStop 0017                        _turn180 1D6E           ??_I2C_2_Master_Start 0004  
         ??_I2C_2_Master_Write 0004            turnLeft135@maxpower 0020                        _trundle 20CE  
         end_of_initialization 28A6                     ??_leftCali 0029              __end_of_rightCali 236A  
            ?_color_click_init 0001             ??_color_click_init 0007           trundle@trundle_power 001F  
                    _LEDturnON 2B58                        postdec1 0FE5                        postdec2 0FDD  
                      postinc0 0FEE                        postinc1 0FE6                        postinc2 0FDE  
              _initDCmotorsPWM 24D8                     fastStop@mL 0015                     fastStop@mR 0016  
                   ??_turnLeft 001F                      _PORTFbits 0F8E             setMotorPWM@negDuty 0014  
       __end_of_readClearColor 27E8          ??i2_I2C_2_Master_Idle 0001                 ??_reverseRoute 0031  
               readColors@RGBC 000E              __end_of_turnRight 19DE                 _readGreenColor 2748  
        ??i2_I2C_2_Master_Stop 0002               _init_buttons_LED 2A96            __end_of_decideColor 0FF6  
                    _TRISAbits 0F81             setMotorPWM@posDuty 0013                      _TRISCbits 0F83  
                    _TRISDbits 0F84                      _TRISEbits 0F85                      _TRISFbits 0F86  
                    _TRISGbits 0F87                      _TRISHbits 0F88       __end_of_reverseLightBlue 2AEA  
     color_writetoaddr@address 0006        ??_I2C_2_Master_RepStart 0004                    _CCP1CONbits 0FAB  
                  _CCP2CONbits 0FA7                    _CCP3CONbits 0F26                    _CCP4CONbits 0F22  
                   main@motorL 00A7                     main@motorR 009E                     ?_LEDturnON 0001  
                   leftCali@mL 0027                     leftCali@mR 0028                    ?_readColors 000E  
               __end_of_Orange 2AF8                ??_trundleSquare 0020                 __end_of_Yellow 29DE  
               __end_of___wmul 2A2A                  __pidataCOMRAM 2B14         __end_of_readGreenColor 2798  
              ?_readClearColor 0007           trundleSquare@reverse 001F            start_initialization 287A  
                    _LightBlue 2AF8                    __end_of_Red 2ABC              ?i2_clearInterrupt 0001  
                     ??_Orange 0028        __end_of_initDCmotorsPWM 2560             creep@current_power 0028  
                     ??_Yellow 002A             ??i2_clearInterrupt 0003                  ??_initButtons 0003  
                     ??___wmul 0007                    _decideColor 0E02  i2I2C_2_Master_Write@data_byte 0002  
              decideColor@RGBC 002B                ?_readGreenColor 0007   __end_ofi2_I2C_2_Master_Start 2B94  
 __end_ofi2_I2C_2_Master_Write 2B44                   _readRedColor 26F8               ??_clearInterrupt 0005  
                __pcstackBANK0 008D                     ?_LightBlue 0026           __end_of_reverseRoute 22A4  
               _turnRightPower 004A                    ??_LEDturnON 0003               ___lwdiv@dividend 0009  
                 ?_Timer0_init 0001                      __pintcode 0008                       ?___lwdiv 0009  
              turnRight@i_2090 0025                 turnLeft@i_2071 0025           I2C_2_Master_Read@ack 0005  
            ??_interrupts_init 0007           I2C_2_Master_Read@tmp 0006                creep@increments 001E  
          __end_of_initButtons 2B2C                    __smallconst 0E00                  ?_turnRight135 001C  
            _I2C_2_Master_Idle 2968              _I2C_2_Master_Init 293E              _I2C_2_Master_Read 2838  
            _I2C_2_Master_Stop 2B6C    __end_of_indicateInstruction 24D8                 reverseRoute@mL 002F  
               reverseRoute@mR 0030                      _increment 0088             ?_I2C_2_Master_Idle 0001  
           ?_I2C_2_Master_Init 0001             ?_I2C_2_Master_Read 0001                  ??_setMotorPWM 0011  
                     ?_turn180 001C             ?_I2C_2_Master_Stop 0001               ___lwdiv@quotient 000D  
         indicateInstruction@i 0009           indicateInstruction@j 0007       initDCmotorsPWM@PWMperiod 0003  
                     ?_trundle 0015          __end_of_initBoardLEDs 2B4E            ??_I2C_2_Master_Idle 0003  
          ??_I2C_2_Master_Init 0003            ??_I2C_2_Master_Read 0004                 ___wmul@product 0007  
                     _LATAbits 0F79            ??_I2C_2_Master_Stop 0004                       _LATDbits 0F7C  
                     _LATEbits 0F7D                       _LATGbits 0F7F                       _LATHbits 0F80  
                     _IPR0bits 0E1F                       _PIE0bits 0E29                      _rightCali 22A4  
     __end_of_init_buttons_LED 2AAA                       i2u131_40 29A0                       i2u131_41 299C  
                     i2u132_40 29B6                       i2u132_41 29B2                    turnRight@mL 001C  
                  turnRight@mR 001D                       _PIR0bits 0E33                       i2u184_40 001A  
                     i2u184_41 0016                       i2u185_40 003A                       i2u185_41 0036  
             readBlueColor@tmp 000C               ?_initDCmotorsPWM 0003                       _SSP2CON2 0EDA  
                    fastStop@i 001A                       _SSP2STAT 0ED8                  ??_reversePink 002A  
                   _ADCON0bits 0F60      __end_of_I2C_2_Master_Idle 2990          __end_of_readBlueColor 2838  
    __end_of_I2C_2_Master_Init 2968      __end_of_I2C_2_Master_Read 287A              ___wmul@multiplier 0003  
               ??_turnRight135 001E      __end_of_I2C_2_Master_Stop 2B76                   setMotorPWM@m 0010  
  I2C_2_Master_Write@data_byte 0004    reverseRoute@last_increments 003B                    ??_LightBlue 0028  
                     _High_ISR 0008                      _turnRight 18AA              ?_reverseLightBlue 0026  
                    copy_data0 288E             reverseLightBlue@mL 0026             reverseLightBlue@mR 0027  
           ??_reverseLightBlue 0028                  _wall_detected 008C  __end_of_I2C_2_Master_RepStart 2B58  
                _reverseOrange 2ACE                       Orange@mL 0026                       Orange@mR 0027  
          __end_of_setMotorPWM 1766                  _reverseYellow 28B0                     ?_rightCali 0027  
         i2_I2C_2_Master_Start 2B8A           i2_I2C_2_Master_Write 2B38                       __Hrparam 0000  
          timed_trundle@i_2221 0025                       __Lrparam 0000                timed_trundle@mL 001C  
              timed_trundle@mR 001D                   ??_readColors 000F                    _initButtons 2B20  
  __end_ofi2_I2C_2_Master_Idle 29B8              turnRight@maxpower 0021               ??_readClearColor 0009  
  __end_ofi2_I2C_2_Master_Stop 2B8A                 turnRight135@mL 001C                 turnRight135@mR 001D  
                     Yellow@mL 0028                       Yellow@mR 0029                  turnLeft135@mL 001C  
                turnLeft135@mR 001D               turnLeft@maxpower 0021                 creep@direction 0020  
                   _ANSELBbits 0E9A                     _ANSELDbits 0EA7                     _ANSELFbits 0EB4  
                   _T0CON0bits 0FD5            __end_of_reversePink 2914                     _T0CON1bits 0FD6  
              ___lwdiv@divisor 000B                ___lwdiv@counter 000F                     ?_turnRight 001C  
                     __ptext10 29B8                       __ptext11 2B94                       __ptext20 2ABC  
                     __ptext12 2AAA                       __ptext21 2B06                       __ptext13 18AA  
                     __ptext30 2B20                       __ptext22 1D6E                       __ptext14 29DE  
                     __ptext31 2B44                       __ptext23 2B9C                       __ptext15 1E9C  
                     __ptext40 2B4E                       __ptext32 2430                       __ptext24 236A  
                     __ptext16 2AEA                       __ptext41 2838                       __ptext33 25D4  
                     __ptext25 19DE                       __ptext17 1B12                       __ptext50 2914  
                     __ptext42 2B58                       __ptext34 0E02                       __ptext26 26A8  
                     __ptext18 2AF8                       __ptext51 2A2A                       __ptext43 2B62  
                     __ptext35 1FBC                       __ptext27 2A6A                       __ptext19 1C40  
                     __ptext60 2B38                       __ptext52 2B2C                       __ptext44 1766  
                     __ptext36 26F8                       __ptext28 2A96                       __ptext61 2B80  
                     __ptext53 2B6C                       __ptext45 133E                       __ptext37 2748  
                     __ptext29 24D8                       __ptext62 2B8A                       __ptext54 2B76  
                     __ptext46 263E                       __ptext38 2798                       __ptext63 2990  
                     __ptext55 2968                       __ptext47 1612                       __ptext39 27E8  
                     __ptext56 293E                       __ptext48 2A04                       __ptext57 2A4A  
                     __ptext49 2560                       __ptext59 2A80                       _fastStop 25D4  
                _timed_trundle 11C2                  reversePink@mL 0028                  reversePink@mR 0029  
                 _SSP2CON1bits 0ED9                   _SSP2CON2bits 0EDA                       _leftCali 236A  
           __end_of_readColors 20CE           _normalizeColors$3139 001C                 ?_reverseOrange 0026  
                reverseRoute@i 003D                 turnRight@power 001E                 ?_reverseYellow 0028  
                turnLeft@power 001E                     turnLeft@mL 001C                     turnLeft@mR 001D  
        ?i2_I2C_2_Master_Start 0001          ?i2_I2C_2_Master_Write 0001                     turnRight@i 0023  
                ??_turnLeft135 001E                       isa$xinst 0000               ??_readGreenColor 0009  
                     main@RGBC 0096                       int$flags 004D                   ?_decideColor 002A  
        __end_of_trundleSquare 1FBC                       _turnLeft 19DE                trundleSquare@mL 001C  
              trundleSquare@mR 001D                      turn180@mL 001C                      turn180@mR 001D  
                   _INTCONbits 0FF2                   _reverseRoute 21DC                 timed_trundle@i 0023  
               ?_timed_trundle 001C                    _setMotorPWM 1612              ??_normalizeColors 0012  
                turnRight135@i 0022                       intlevel2 0000           __end_of_turnRight135 1C40  
                  ??_rightCali 0029                     _LEDturnOFF 2B62                      turnLeft@i 0023  
                trundle@i_2180 001C                _interrupts_init 26A8                      trundle@mL 0015  
                    trundle@mR 0016                 trundleSquare@i 0026                       turn180@i 0022  
                  _reversePink 28E2               _color_click_init 2914          fastStop@current_power 0018  
          __end_of_turnLeft135 1D6E                     _SSP2DATPPS 0E1D                     _SSP2CLKPPS 0E1C  
                  creep@i_2201 0026                 rightCali@power 002B                       trundle@i 001A  
   reverseRoute@reverseMapping 0032                    ??_turnRight 001F           executeInstruction@mL 002A  
         executeInstruction@mR 002B                ??_reverseOrange 0028                ??_reverseYellow 002A  
       ??i2_I2C_2_Master_Start 0002         ??i2_I2C_2_Master_Write 0002             decideColor@normRGB 002A  
            ?_init_buttons_LED 0001  



Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Wed Mar 13 12:04:49 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1
    48                           	psect	text37,global,reloc=2,class=CODE,delta=1
    49                           	psect	text38,global,reloc=2,class=CODE,delta=1
    50                           	psect	text39,global,reloc=2,class=CODE,delta=1
    51                           	psect	text40,global,reloc=2,class=CODE,delta=1
    52                           	psect	text41,global,reloc=2,class=CODE,delta=1
    53                           	psect	text42,global,reloc=2,class=CODE,delta=1
    54                           	psect	text43,global,reloc=2,class=CODE,delta=1
    55                           	psect	text44,global,reloc=2,class=CODE,delta=1
    56                           	psect	text45,global,reloc=2,class=CODE,delta=1
    57                           	psect	text46,global,reloc=2,class=CODE,delta=1
    58                           	psect	text47,global,reloc=2,class=CODE,delta=1
    59                           	psect	text48,global,reloc=2,class=CODE,delta=1
    60                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=1
    61                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=1
    62                           	psect	text51,global,reloc=2,class=CODE,delta=1
    63                           	psect	text52,global,reloc=2,class=CODE,delta=1
    64                           	psect	text53,global,reloc=2,class=CODE,delta=1
    65                           	psect	text54,global,reloc=2,class=CODE,delta=1
    66                           	psect	text55,global,reloc=2,class=CODE,delta=1
    67                           	psect	text56,global,reloc=2,class=CODE,delta=1
    68                           	psect	text57,global,reloc=2,class=CODE,delta=1
    69                           	psect	text58,global,reloc=2,class=CODE,delta=1
    70                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    71                           	psect	text60,global,reloc=2,class=CODE,delta=1
    72                           	psect	text61,global,reloc=2,class=CODE,delta=1
    73                           	psect	text62,global,reloc=2,class=CODE,delta=1
    74                           	psect	text63,global,reloc=2,class=CODE,delta=1
    75                           	psect	text64,global,reloc=2,class=CODE,delta=1
    76                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
    77                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    78                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    79                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    80                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    81   000000                     
    82                           ; Generated 21/07/2023 GMT
    83                           ; 
    84                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    85                           ; All rights reserved.
    86                           ; 
    87                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    88                           ; 
    89                           ; Redistribution and use in source and binary forms, with or without modification, are
    90                           ; permitted provided that the following conditions are met:
    91                           ; 
    92                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    93                           ;        conditions and the following disclaimer.
    94                           ; 
    95                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    96                           ;        of conditions and the following disclaimer in the documentation and/or other
    97                           ;        materials provided with the distribution. Publication is not required when
    98                           ;        this file is used in an embedded application.
    99                           ; 
   100                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   101                           ;        software without specific prior written permission.
   102                           ; 
   103                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   104                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   105                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   106                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   107                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   108                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   109                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   110                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   111                           ; 
   112                           ; 
   113                           ; Code-generator required, PIC18F67K40 Definitions
   114                           ; 
   115                           ; SFR Addresses
   116   000000                     
   117                           	psect	idataCOMRAM
   118   002BA0                     __pidataCOMRAM:
   119                           	callstack 0
   120                           
   121                           ;initializer for reverseRoute@F14296
   122   002BA0  01                 	db	1
   123   002BA1  00                 	db	0
   124   002BA2  02                 	db	2
   125   002BA3  09                 	db	9
   126   002BA4  0A                 	db	10
   127   002BA5  0B                 	db	11
   128   002BA6  0C                 	db	12
   129   002BA7  FF                 	db	255
   130   002BA8  FF                 	db	255
   131                           
   132                           ;initializer for _turnRightPower
   133   002BA9  1F                 	db	31
   134                           
   135                           ;initializer for _turnLeftPower
   136   002BAA  1E                 	db	30
   137                           
   138                           ;initializer for _square
   139   002BAB  10                 	db	16
   140   000000                     _TRISFbits	set	3974
   141   000000                     _LATHbits	set	3968
   142   000000                     _TRISAbits	set	3969
   143   000000                     _TRISEbits	set	3973
   144   000000                     _TRISGbits	set	3975
   145   000000                     _PORTFbits	set	3982
   146   000000                     _TRISDbits	set	3972
   147   000000                     _CCPR2H	set	4006
   148   000000                     _CCPR1H	set	4010
   149   000000                     _SSP2CON2	set	3802
   150   000000                     _INT0PPS	set	3568
   151   000000                     _SSP2CLKPPS	set	3612
   152   000000                     _SSP2DATPPS	set	3613
   153   000000                     _ANSELDbits	set	3751
   154   000000                     _SSP2ADD	set	3798
   155   000000                     _SSP2CON1bits	set	3801
   156   000000                     _SSP2CON2bits	set	3802
   157   000000                     _LATAbits	set	3961
   158   000000                     _LATEbits	set	3965
   159   000000                     _LATGbits	set	3967
   160   000000                     _CCPR4H	set	3873
   161   000000                     _CCPR3H	set	3877
   162   000000                     _LATDbits	set	3964
   163   000000                     _SSP2STAT	set	3800
   164   000000                     _ANSELFbits	set	3764
   165   000000                     _SSP2BUF	set	3797
   166   000000                     _IPR0bits	set	3615
   167   000000                     _PIE0bits	set	3625
   168   000000                     _RD5PPS	set	3695
   169   000000                     _RE2PPS	set	3700
   170   000000                     _ANSELBbits	set	3738
   171   000000                     _RD6PPS	set	3696
   172   000000                     _CCP1CONbits	set	4011
   173   000000                     _CCPTMRS0bits	set	4013
   174   000000                     _T2PR	set	4028
   175   000000                     _T2CONbits	set	4029
   176   000000                     _TMR0L	set	4051
   177   000000                     _TMR0H	set	4052
   178   000000                     _T0CON0bits	set	4053
   179   000000                     _T0CON1bits	set	4054
   180   000000                     _INTCONbits	set	4082
   181   000000                     _CCP2CONbits	set	4007
   182   000000                     _ADREFbits	set	3928
   183   000000                     _CCP3CONbits	set	3878
   184   000000                     _CCP4CONbits	set	3874
   185   000000                     _TRISHbits	set	3976
   186   000000                     _TRISCbits	set	3971
   187   000000                     _PIR0bits	set	3635
   188   000000                     _RC7PPS	set	3689
   189   000000                     _RE4PPS	set	3702
   190   000000                     _RG6PPS	set	3720
   191   000000                     _T2CLKCONbits	set	4031
   192   000000                     _T2HLTbits	set	4030
   193   000000                     _ADPCH	set	3935
   194   000000                     _ADRESH	set	3940
   195   000000                     _ADCON0bits	set	3936
   196                           
   197                           ; #config settings
   198                           
   199                           	psect	cinit
   200   0028C6                     __pcinit:
   201                           	callstack 0
   202   0028C6                     start_initialization:
   203                           	callstack 0
   204   0028C6                     __initialization:
   205                           	callstack 0
   206                           
   207                           ; Initialize objects allocated to COMRAM (12 bytes)
   208                           ; load TBLPTR registers with __pidataCOMRAM
   209   0028C6  0EA0               	movlw	low __pidataCOMRAM
   210   0028C8  6EF6               	movwf	tblptrl,c
   211   0028CA  0E2B               	movlw	high __pidataCOMRAM
   212   0028CC  6EF7               	movwf	tblptrh,c
   213   0028CE  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   214   0028D0  6EF8               	movwf	tblptru,c
   215   0028D2  EE00  F042         	lfsr	0,__pdataCOMRAM
   216   0028D6  EE10 F00C          	lfsr	1,12
   217   0028DA                     copy_data0:
   218   0028DA  0009               	tblrd		*+
   219   0028DC  CFF5 FFEE          	movff	tablat,postinc0
   220   0028E0  50E5               	movf	postdec1,w,c
   221   0028E2  50E1               	movf	fsr1l,w,c
   222   0028E4  E1FA               	bnz	copy_data0
   223                           
   224                           ; Clear objects allocated to BANK0 (45 bytes)
   225   0028E6  EE00  F060         	lfsr	0,__pbssBANK0
   226   0028EA  0E2D               	movlw	45
   227   0028EC                     clear_0:
   228   0028EC  6AEE               	clrf	postinc0,c
   229   0028EE  06E8               	decf	wreg,f,c
   230   0028F0  E1FD               	bnz	clear_0
   231   0028F2                     end_of_initialization:
   232                           	callstack 0
   233   0028F2                     __end_of__initialization:
   234                           	callstack 0
   235   0028F2  904E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   236   0028F4  924E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   237   0028F6  0100               	movlb	0
   238   0028F8  EF13  F008         	goto	_main	;jump to C main() function
   239                           
   240                           	psect	dataCOMRAM
   241   000042                     __pdataCOMRAM:
   242                           	callstack 0
   243   000042                     reverseRoute@F14296:
   244                           	callstack 0
   245   000042                     	ds	9
   246   00004B                     _turnRightPower:
   247                           	callstack 0
   248   00004B                     	ds	1
   249   00004C                     _turnLeftPower:
   250                           	callstack 0
   251   00004C                     	ds	1
   252   00004D                     _square:
   253                           	callstack 0
   254   00004D                     	ds	1
   255                           
   256                           	psect	bssBANK0
   257   000060                     __pbssBANK0:
   258                           	callstack 0
   259   000060                     _instruction_array:
   260                           	callstack 0
   261   000060                     	ds	40
   262   000088                     _increment:
   263                           	callstack 0
   264   000088                     	ds	2
   265   00008A                     _reverseRouteFlag:
   266                           	callstack 0
   267   00008A                     	ds	1
   268   00008B                     _instruction_array_index:
   269                           	callstack 0
   270   00008B                     	ds	1
   271   00008C                     _wall_detected:
   272                           	callstack 0
   273   00008C                     	ds	1
   274                           
   275                           	psect	cstackBANK0
   276   00008D                     __pcstackBANK0:
   277                           	callstack 0
   278   00008D                     main@colourCode:
   279                           	callstack 0
   280                           
   281                           ; 1 bytes @ 0x0
   282   00008D                     	ds	1
   283   00008E                     main@normRGB:
   284                           	callstack 0
   285                           
   286                           ; 8 bytes @ 0x1
   287   00008E                     	ds	8
   288   000096                     main@RGBC:
   289                           	callstack 0
   290                           
   291                           ; 8 bytes @ 0x9
   292   000096                     	ds	8
   293   00009E                     main@motorR:
   294                           	callstack 0
   295                           
   296                           ; 9 bytes @ 0x11
   297   00009E                     	ds	9
   298   0000A7                     main@motorL:
   299                           	callstack 0
   300                           
   301                           ; 9 bytes @ 0x1A
   302   0000A7                     	ds	9
   303                           
   304                           	psect	cstackCOMRAM
   305   000001                     __pcstackCOMRAM:
   306                           	callstack 0
   307   000001                     ??i2_I2C_2_Master_Idle:
   308   000001                     
   309                           ; 1 bytes @ 0x0
   310   000001                     	ds	1
   311   000002                     i2I2C_2_Master_Write@data_byte:
   312                           	callstack 0
   313                           
   314                           ; 1 bytes @ 0x1
   315   000002                     	ds	1
   316   000003                     ??_indicateInstruction:
   317   000003                     ??_I2C_2_Master_Idle:
   318   000003                     ?___wmul:
   319                           	callstack 0
   320   000003                     initDCmotorsPWM@PWMperiod:
   321                           	callstack 0
   322   000003                     ___wmul@multiplier:
   323                           	callstack 0
   324                           
   325                           ; 2 bytes @ 0x2
   326   000003                     	ds	1
   327   000004                     ??_I2C_2_Master_Read:
   328   000004                     I2C_2_Master_Write@data_byte:
   329                           	callstack 0
   330                           
   331                           ; 1 bytes @ 0x3
   332   000004                     	ds	1
   333   000005                     color_writetoaddr@value:
   334                           	callstack 0
   335   000005                     I2C_2_Master_Read@ack:
   336                           	callstack 0
   337   000005                     ___wmul@multiplicand:
   338                           	callstack 0
   339                           
   340                           ; 2 bytes @ 0x4
   341   000005                     	ds	1
   342   000006                     color_writetoaddr@address:
   343                           	callstack 0
   344   000006                     I2C_2_Master_Read@tmp:
   345                           	callstack 0
   346   000006                     indicateInstruction@period:
   347                           	callstack 0
   348                           
   349                           ; 1 bytes @ 0x5
   350   000006                     	ds	1
   351   000007                     ??_color_click_init:
   352   000007                     ?_readRedColor:
   353                           	callstack 0
   354   000007                     ?_readGreenColor:
   355                           	callstack 0
   356   000007                     ?_readBlueColor:
   357                           	callstack 0
   358   000007                     ?_readClearColor:
   359                           	callstack 0
   360   000007                     indicateInstruction@j:
   361                           	callstack 0
   362   000007                     ___wmul@product:
   363                           	callstack 0
   364                           
   365                           ; 2 bytes @ 0x6
   366   000007                     	ds	2
   367   000009                     ??_readRedColor:
   368   000009                     ??_readGreenColor:
   369   000009                     ??_readBlueColor:
   370   000009                     ??_readClearColor:
   371   000009                     ?___awdiv:
   372                           	callstack 0
   373   000009                     ?___lwdiv:
   374                           	callstack 0
   375   000009                     indicateInstruction@i:
   376                           	callstack 0
   377   000009                     ___awdiv@dividend:
   378                           	callstack 0
   379   000009                     ___lwdiv@dividend:
   380                           	callstack 0
   381                           
   382                           ; 2 bytes @ 0x8
   383   000009                     	ds	2
   384   00000B                     ___awdiv@divisor:
   385                           	callstack 0
   386   00000B                     ___lwdiv@divisor:
   387                           	callstack 0
   388                           
   389                           ; 2 bytes @ 0xA
   390   00000B                     	ds	1
   391   00000C                     readRedColor@tmp:
   392                           	callstack 0
   393   00000C                     readGreenColor@tmp:
   394                           	callstack 0
   395   00000C                     readBlueColor@tmp:
   396                           	callstack 0
   397   00000C                     readClearColor@tmp:
   398                           	callstack 0
   399                           
   400                           ; 2 bytes @ 0xB
   401   00000C                     	ds	1
   402   00000D                     ___awdiv@counter:
   403                           	callstack 0
   404   00000D                     ___lwdiv@quotient:
   405                           	callstack 0
   406                           
   407                           ; 2 bytes @ 0xC
   408   00000D                     	ds	1
   409   00000E                     readColors@RGBC:
   410                           	callstack 0
   411   00000E                     ___awdiv@sign:
   412                           	callstack 0
   413                           
   414                           ; 1 bytes @ 0xD
   415   00000E                     	ds	1
   416   00000F                     ??_readColors:
   417   00000F                     ___lwdiv@counter:
   418                           	callstack 0
   419   00000F                     ___awdiv@quotient:
   420                           	callstack 0
   421                           
   422                           ; 2 bytes @ 0xE
   423   00000F                     	ds	1
   424   000010                     normalizeColors@RGBC:
   425                           	callstack 0
   426   000010                     setMotorPWM@m:
   427                           	callstack 0
   428                           
   429                           ; 1 bytes @ 0xF
   430   000010                     	ds	1
   431   000011                     ??_setMotorPWM:
   432   000011                     normalizeColors@normRGB:
   433                           	callstack 0
   434                           
   435                           ; 1 bytes @ 0x10
   436   000011                     	ds	1
   437   000012                     ??_normalizeColors:
   438                           
   439                           ; 1 bytes @ 0x11
   440   000012                     	ds	1
   441   000013                     setMotorPWM@posDuty:
   442                           	callstack 0
   443                           
   444                           ; 1 bytes @ 0x12
   445   000013                     	ds	1
   446   000014                     setMotorPWM@negDuty:
   447                           	callstack 0
   448                           
   449                           ; 1 bytes @ 0x13
   450   000014                     	ds	1
   451   000015                     stop@mL:
   452                           	callstack 0
   453   000015                     fastStop@mL:
   454                           	callstack 0
   455   000015                     trundle@mL:
   456                           	callstack 0
   457                           
   458                           ; 1 bytes @ 0x14
   459   000015                     	ds	1
   460   000016                     stop@mR:
   461                           	callstack 0
   462   000016                     fastStop@mR:
   463                           	callstack 0
   464   000016                     trundle@mR:
   465                           	callstack 0
   466                           
   467                           ; 1 bytes @ 0x15
   468   000016                     	ds	1
   469   000017                     ??_fastStop:
   470   000017                     ??_trundle:
   471   000017                     ??_stop:
   472                           
   473                           ; 1 bytes @ 0x16
   474   000017                     	ds	1
   475   000018                     stop@current_power:
   476                           	callstack 0
   477   000018                     fastStop@current_power:
   478                           	callstack 0
   479                           
   480                           ; 2 bytes @ 0x17
   481   000018                     	ds	2
   482   00001A                     normalizeColors@sum:
   483                           	callstack 0
   484   00001A                     stop@i:
   485                           	callstack 0
   486   00001A                     fastStop@i:
   487                           	callstack 0
   488   00001A                     trundle@i:
   489                           	callstack 0
   490                           
   491                           ; 2 bytes @ 0x19
   492   00001A                     	ds	2
   493   00001C                     turnLeft@mL:
   494                           	callstack 0
   495   00001C                     turnRight@mL:
   496                           	callstack 0
   497   00001C                     turnLeft135@mL:
   498                           	callstack 0
   499   00001C                     turnRight135@mL:
   500                           	callstack 0
   501   00001C                     creep@mL:
   502                           	callstack 0
   503   00001C                     timed_trundle@mL:
   504                           	callstack 0
   505   00001C                     trundleSquare@mL:
   506                           	callstack 0
   507   00001C                     trundle@i_2169:
   508                           	callstack 0
   509   00001C                     _normalizeColors$3128:
   510                           	callstack 0
   511                           
   512                           ; 2 bytes @ 0x1B
   513   00001C                     	ds	1
   514   00001D                     turnLeft@mR:
   515                           	callstack 0
   516   00001D                     turnRight@mR:
   517                           	callstack 0
   518   00001D                     turnLeft135@mR:
   519                           	callstack 0
   520   00001D                     turnRight135@mR:
   521                           	callstack 0
   522   00001D                     creep@mR:
   523                           	callstack 0
   524   00001D                     timed_trundle@mR:
   525                           	callstack 0
   526   00001D                     trundleSquare@mR:
   527                           	callstack 0
   528                           
   529                           ; 1 bytes @ 0x1C
   530   00001D                     	ds	1
   531   00001E                     turnLeft@power:
   532                           	callstack 0
   533   00001E                     turnRight@power:
   534                           	callstack 0
   535   00001E                     trundle@current_power:
   536                           	callstack 0
   537   00001E                     trundleSquare@square:
   538                           	callstack 0
   539   00001E                     turnLeft135@turnLeftPower:
   540                           	callstack 0
   541   00001E                     turnRight135@turnRightPower:
   542                           	callstack 0
   543   00001E                     creep@increments:
   544                           	callstack 0
   545   00001E                     timed_trundle@increments:
   546                           	callstack 0
   547                           
   548                           ; 2 bytes @ 0x1D
   549   00001E                     	ds	1
   550   00001F                     ??_turnRight:
   551   00001F                     ??_turnLeft:
   552   00001F                     trundle@trundle_power:
   553                           	callstack 0
   554   00001F                     trundleSquare@reverse:
   555                           	callstack 0
   556                           
   557                           ; 1 bytes @ 0x1E
   558   00001F                     	ds	1
   559   000020                     ??_trundleSquare:
   560   000020                     ??_turnRight135:
   561   000020                     ??_turnLeft135:
   562   000020                     ??_timed_trundle:
   563   000020                     creep@direction:
   564                           	callstack 0
   565                           
   566                           ; 1 bytes @ 0x1F
   567   000020                     	ds	1
   568   000021                     ??_creep:
   569   000021                     turnLeft@maxpower:
   570                           	callstack 0
   571   000021                     turnRight@maxpower:
   572                           	callstack 0
   573                           
   574                           ; 2 bytes @ 0x20
   575   000021                     	ds	1
   576   000022                     turnLeft135@maxpower:
   577                           	callstack 0
   578   000022                     turnRight135@maxpower:
   579                           	callstack 0
   580                           
   581                           ; 2 bytes @ 0x21
   582   000022                     	ds	1
   583   000023                     turnLeft@i:
   584                           	callstack 0
   585   000023                     turnRight@i:
   586                           	callstack 0
   587   000023                     timed_trundle@i:
   588                           	callstack 0
   589                           
   590                           ; 2 bytes @ 0x22
   591   000023                     	ds	1
   592   000024                     turnLeft135@i:
   593                           	callstack 0
   594   000024                     turnRight135@i:
   595                           	callstack 0
   596   000024                     creep@i:
   597                           	callstack 0
   598                           
   599                           ; 2 bytes @ 0x23
   600   000024                     	ds	1
   601   000025                     trundleSquare@start_increment:
   602                           	callstack 0
   603   000025                     turnLeft@i_2073:
   604                           	callstack 0
   605   000025                     turnRight@i_2092:
   606                           	callstack 0
   607   000025                     timed_trundle@i_2210:
   608                           	callstack 0
   609                           
   610                           ; 2 bytes @ 0x24
   611   000025                     	ds	1
   612   000026                     turnLeft135@i_2114:
   613                           	callstack 0
   614   000026                     turnRight135@i_2133:
   615                           	callstack 0
   616   000026                     creep@i_2190:
   617                           	callstack 0
   618   000026                     trundleSquare@i:
   619                           	callstack 0
   620                           
   621                           ; 2 bytes @ 0x25
   622   000026                     	ds	1
   623   000027                     Red@mL:
   624                           	callstack 0
   625   000027                     Green@mL:
   626                           	callstack 0
   627   000027                     leftCali@mL:
   628                           	callstack 0
   629   000027                     rightCali@mL:
   630                           	callstack 0
   631   000027                     turn180@mL:
   632                           	callstack 0
   633   000027                     timed_trundle@current_power:
   634                           	callstack 0
   635                           
   636                           ; 1 bytes @ 0x26
   637   000027                     	ds	1
   638   000028                     Red@mR:
   639                           	callstack 0
   640   000028                     Green@mR:
   641                           	callstack 0
   642   000028                     Yellow@mL:
   643                           	callstack 0
   644   000028                     Pink@mL:
   645                           	callstack 0
   646   000028                     Orange@mL:
   647                           	callstack 0
   648   000028                     LightBlue@mL:
   649                           	callstack 0
   650   000028                     reverseOrange@mL:
   651                           	callstack 0
   652   000028                     reverseLightBlue@mL:
   653                           	callstack 0
   654   000028                     leftCali@mR:
   655                           	callstack 0
   656   000028                     rightCali@mR:
   657                           	callstack 0
   658   000028                     turn180@mR:
   659                           	callstack 0
   660   000028                     creep@current_power:
   661                           	callstack 0
   662   000028                     timed_trundle@trundle_power:
   663                           	callstack 0
   664                           
   665                           ; 1 bytes @ 0x27
   666   000028                     	ds	1
   667   000029                     ??_leftCali:
   668   000029                     ??_rightCali:
   669   000029                     ??_turn180:
   670   000029                     Yellow@mR:
   671                           	callstack 0
   672   000029                     Pink@mR:
   673                           	callstack 0
   674   000029                     Orange@mR:
   675                           	callstack 0
   676   000029                     LightBlue@mR:
   677                           	callstack 0
   678   000029                     reverseOrange@mR:
   679                           	callstack 0
   680   000029                     reverseLightBlue@mR:
   681                           	callstack 0
   682   000029                     creep@creep_power:
   683                           	callstack 0
   684                           
   685                           ; 1 bytes @ 0x28
   686   000029                     	ds	1
   687   00002A                     decideColor@normRGB:
   688                           	callstack 0
   689                           
   690                           ; 1 bytes @ 0x29
   691   00002A                     	ds	1
   692   00002B                     decideColor@RGBC:
   693                           	callstack 0
   694   00002B                     Blue@mL:
   695                           	callstack 0
   696   00002B                     White@mL:
   697                           	callstack 0
   698   00002B                     Black@mL:
   699                           	callstack 0
   700   00002B                     reverseYellow@mL:
   701                           	callstack 0
   702   00002B                     reversePink@mL:
   703                           	callstack 0
   704   00002B                     leftCali@power:
   705                           	callstack 0
   706   00002B                     rightCali@power:
   707                           	callstack 0
   708                           
   709                           ; 1 bytes @ 0x2A
   710   00002B                     	ds	1
   711   00002C                     decideColor@mL:
   712                           	callstack 0
   713   00002C                     Blue@mR:
   714                           	callstack 0
   715   00002C                     White@mR:
   716                           	callstack 0
   717   00002C                     Black@mR:
   718                           	callstack 0
   719   00002C                     reverseYellow@mR:
   720                           	callstack 0
   721   00002C                     reversePink@mR:
   722                           	callstack 0
   723                           
   724                           ; 1 bytes @ 0x2B
   725   00002C                     	ds	1
   726   00002D                     decideColor@mR:
   727                           	callstack 0
   728   00002D                     executeInstruction@mL:
   729                           	callstack 0
   730                           
   731                           ; 1 bytes @ 0x2C
   732   00002D                     	ds	1
   733   00002E                     ??_decideColor:
   734   00002E                     executeInstruction@mR:
   735                           	callstack 0
   736                           
   737                           ; 1 bytes @ 0x2D
   738   00002E                     	ds	1
   739   00002F                     executeInstruction@colourCode:
   740                           	callstack 0
   741                           
   742                           ; 1 bytes @ 0x2E
   743   00002F                     	ds	1
   744   000030                     ??_executeInstruction:
   745                           
   746                           ; 1 bytes @ 0x2F
   747   000030                     	ds	2
   748   000032                     reverseRoute@mL:
   749                           	callstack 0
   750                           
   751                           ; 1 bytes @ 0x31
   752   000032                     	ds	1
   753   000033                     reverseRoute@mR:
   754                           	callstack 0
   755                           
   756                           ; 1 bytes @ 0x32
   757   000033                     	ds	1
   758   000034                     ??_reverseRoute:
   759                           
   760                           ; 1 bytes @ 0x33
   761   000034                     	ds	1
   762   000035                     reverseRoute@reverseMapping:
   763                           	callstack 0
   764                           
   765                           ; 9 bytes @ 0x34
   766   000035                     	ds	9
   767   00003E                     reverseRoute@i:
   768                           	callstack 0
   769                           
   770                           ; 2 bytes @ 0x3D
   771   00003E                     	ds	2
   772   000040                     ??_main:
   773                           
   774                           ; 1 bytes @ 0x3F
   775   000040                     	ds	2
   776                           
   777 ;;
   778 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   779 ;;
   780 ;; *************** function _main *****************
   781 ;; Defined at:
   782 ;;		line 35 in file "main.c"
   783 ;; Parameters:    Size  Location     Type
   784 ;;		None
   785 ;; Auto vars:     Size  Location     Type
   786 ;;  colourCode      1    0[BANK0 ] unsigned char 
   787 ;;  motorL          9   26[BANK0 ] struct DC_motor
   788 ;;  motorR          9   17[BANK0 ] struct DC_motor
   789 ;;  RGBC            8    9[BANK0 ] struct colors
   790 ;;  normRGB         8    1[BANK0 ] struct normColors
   791 ;;  PWMperiod       2    0        unsigned int 
   792 ;; Return value:  Size  Location     Type
   793 ;;                  1    wreg      void 
   794 ;; Registers used:
   795 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   796 ;; Tracked objects:
   797 ;;		On entry : 0/0
   798 ;;		On exit  : 0/0
   799 ;;		Unchanged: 0/0
   800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   801 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   802 ;;      Locals:         0      35       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   803 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   804 ;;      Totals:         2      35       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   805 ;;Total ram usage:       37 bytes
   806 ;; Hardware stack levels required when called: 12
   807 ;; This function calls:
   808 ;;		_LEDturnON
   809 ;;		_Timer0_init
   810 ;;		_clearInterrupt
   811 ;;		_color_click_init
   812 ;;		_decideColor
   813 ;;		_executeInstruction
   814 ;;		_fastStop
   815 ;;		_indicateInstruction
   816 ;;		_initBoardLEDs
   817 ;;		_initButtons
   818 ;;		_initDCmotorsPWM
   819 ;;		_init_buttons_LED
   820 ;;		_interrupts_init
   821 ;;		_leftCali
   822 ;;		_normalizeColors
   823 ;;		_readColors
   824 ;;		_reverseRoute
   825 ;;		_rightCali
   826 ;;		_setMotorPWM
   827 ;;		_trundle
   828 ;; This function is called by:
   829 ;;		Startup code after reset
   830 ;; This function uses a non-reentrant model
   831 ;;
   832                           
   833                           	psect	text0
   834   001026                     __ptext0:
   835                           	callstack 0
   836   001026                     _main:
   837                           	callstack 19
   838   001026                     
   839                           ;main.c: 36:     color_click_init();
   840   001026  ECB0  F014         	call	_color_click_init	;wreg free
   841   00102A                     
   842                           ;main.c: 37:     init_buttons_LED();
   843   00102A  ECAD  F015         	call	_init_buttons_LED	;wreg free
   844   00102E                     
   845                           ;main.c: 38:     initBoardLEDs();
   846   00102E  ECE8  F015         	call	_initBoardLEDs	;wreg free
   847   001032                     
   848                           ;main.c: 39:     initButtons();
   849   001032  ECD6  F015         	call	_initButtons	;wreg free
   850   001036                     
   851                           ;main.c: 48:     initDCmotorsPWM(PWMperiod);
   852   001036  0E00               	movlw	0
   853   001038  6E04               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   854   00103A  0E63               	movlw	99
   855   00103C  6E03               	movwf	initDCmotorsPWM@PWMperiod^0,c
   856   00103E  EC69  F012         	call	_initDCmotorsPWM	;wreg free
   857   001042                     
   858                           ;main.c: 50:     struct DC_motor motorL;;main.c: 51:     motorL.power = 0;
   859   001042  0E00               	movlw	0
   860   001044  0100               	movlb	0	; () banked
   861   001046  6FA7               	movwf	main@motorL& (0+255),b
   862   001048                     
   863                           ; BSR set to: 0
   864                           ;main.c: 52:     motorL.direction = 1;
   865   001048  0E01               	movlw	1
   866   00104A  6FA8               	movwf	(main@motorL+1)& (0+255),b
   867   00104C                     
   868                           ; BSR set to: 0
   869                           ;main.c: 53:     motorL.brakemode = 1;
   870   00104C  0E01               	movlw	1
   871   00104E  6FA9               	movwf	(main@motorL+2)& (0+255),b
   872   001050                     
   873                           ; BSR set to: 0
   874                           ;main.c: 54:     motorL.PWMperiod = PWMperiod;
   875   001050  0E00               	movlw	0
   876   001052  6FAB               	movwf	(main@motorL+4)& (0+255),b
   877   001054  0E63               	movlw	99
   878   001056  6FAA               	movwf	(main@motorL+3)& (0+255),b
   879   001058                     
   880                           ; BSR set to: 0
   881                           ;main.c: 55:     motorL.posDutyHighByte = &CCPR1H;
   882   001058  0EAA               	movlw	170
   883   00105A  6FAC               	movwf	(main@motorL+5)& (0+255),b
   884   00105C  0E0F               	movlw	15
   885   00105E  6FAD               	movwf	(main@motorL+6)& (0+255),b
   886   001060                     
   887                           ; BSR set to: 0
   888                           ;main.c: 56:     motorL.negDutyHighByte = &CCPR2H;
   889   001060  0EA6               	movlw	166
   890   001062  6FAE               	movwf	(main@motorL+7)& (0+255),b
   891   001064  0E0F               	movlw	15
   892   001066  6FAF               	movwf	(main@motorL+8)& (0+255),b
   893   001068                     
   894                           ; BSR set to: 0
   895                           ;main.c: 57:     setMotorPWM(&motorL);
   896   001068  0EA7               	movlw	low main@motorL
   897   00106A  6E10               	movwf	setMotorPWM@m^0,c
   898   00106C  EC80  F00C         	call	_setMotorPWM	;wreg free
   899   001070                     
   900                           ;main.c: 58:     struct DC_motor motorR;;main.c: 59:     motorR.power = 0;
   901   001070  0E00               	movlw	0
   902   001072  0100               	movlb	0	; () banked
   903   001074  6F9E               	movwf	main@motorR& (0+255),b
   904   001076                     
   905                           ; BSR set to: 0
   906                           ;main.c: 60:     motorR.direction = 1;
   907   001076  0E01               	movlw	1
   908   001078  6F9F               	movwf	(main@motorR+1)& (0+255),b
   909   00107A                     
   910                           ; BSR set to: 0
   911                           ;main.c: 61:     motorR.brakemode = 1;
   912   00107A  0E01               	movlw	1
   913   00107C  6FA0               	movwf	(main@motorR+2)& (0+255),b
   914   00107E                     
   915                           ; BSR set to: 0
   916                           ;main.c: 62:     motorR.PWMperiod = PWMperiod;
   917   00107E  0E00               	movlw	0
   918   001080  6FA2               	movwf	(main@motorR+4)& (0+255),b
   919   001082  0E63               	movlw	99
   920   001084  6FA1               	movwf	(main@motorR+3)& (0+255),b
   921   001086                     
   922                           ; BSR set to: 0
   923                           ;main.c: 63:     motorR.posDutyHighByte = &CCPR3H;
   924   001086  0E25               	movlw	37
   925   001088  6FA3               	movwf	(main@motorR+5)& (0+255),b
   926   00108A  0E0F               	movlw	15
   927   00108C  6FA4               	movwf	(main@motorR+6)& (0+255),b
   928   00108E                     
   929                           ; BSR set to: 0
   930                           ;main.c: 64:     motorR.negDutyHighByte = &CCPR4H;
   931   00108E  0E21               	movlw	33
   932   001090  6FA5               	movwf	(main@motorR+7)& (0+255),b
   933   001092  0E0F               	movlw	15
   934   001094  6FA6               	movwf	(main@motorR+8)& (0+255),b
   935   001096                     
   936                           ; BSR set to: 0
   937                           ;main.c: 65:     setMotorPWM(&motorR);
   938   001096  0E9E               	movlw	low main@motorR
   939   001098  6E10               	movwf	setMotorPWM@m^0,c
   940   00109A  EC80  F00C         	call	_setMotorPWM	;wreg free
   941   00109E                     
   942                           ;main.c: 70:     turnLeftPower = leftCali(&motorL, &motorR);
   943   00109E  0EA7               	movlw	low main@motorL
   944   0010A0  6E27               	movwf	leftCali@mL^0,c
   945   0010A2  0E9E               	movlw	low main@motorR
   946   0010A4  6E28               	movwf	leftCali@mR^0,c
   947   0010A6  ECFC  F010         	call	_leftCali	;wreg free
   948   0010AA  6E4C               	movwf	_turnLeftPower^0,c
   949   0010AC                     
   950                           ;main.c: 71:     _delay((unsigned long)((500)*(64000000/4000.0)));
   951   0010AC  0E29               	movlw	41
   952   0010AE  6E41               	movwf	(??_main+1)^0,c
   953   0010B0  0E96               	movlw	150
   954   0010B2  6E40               	movwf	??_main^0,c
   955   0010B4  0E7F               	movlw	127
   956   0010B6                     u1937:
   957   0010B6  2EE8               	decfsz	wreg,f,c
   958   0010B8  D7FE               	bra	u1937
   959   0010BA  2E40               	decfsz	??_main^0,f,c
   960   0010BC  D7FC               	bra	u1937
   961   0010BE  2E41               	decfsz	(??_main+1)^0,f,c
   962   0010C0  D7FA               	bra	u1937
   963   0010C2  0000               	nop	
   964   0010C4                     
   965                           ;main.c: 72:     turnRightPower = rightCali(&motorL, &motorR);
   966   0010C4  0EA7               	movlw	low main@motorL
   967   0010C6  6E27               	movwf	rightCali@mL^0,c
   968   0010C8  0E9E               	movlw	low main@motorR
   969   0010CA  6E28               	movwf	rightCali@mR^0,c
   970   0010CC  EC99  F010         	call	_rightCali	;wreg free
   971   0010D0  6E4B               	movwf	_turnRightPower^0,c
   972   0010D2                     
   973                           ;main.c: 74:     interrupts_init();
   974   0010D2  EC7A  F013         	call	_interrupts_init	;wreg free
   975   0010D6                     
   976                           ;main.c: 75:     Timer0_init();
   977   0010D6  EC4B  F015         	call	_Timer0_init	;wreg free
   978   0010DA                     
   979                           ;main.c: 77:     LEDturnON();
   980   0010DA  ECF2  F015         	call	_LEDturnON	;wreg free
   981   0010DE                     
   982                           ;main.c: 78:     _delay((unsigned long)((1000)*(64000000/4000.0)));
   983   0010DE  0E52               	movlw	82
   984   0010E0  6E41               	movwf	(??_main+1)^0,c
   985   0010E2  0E2B               	movlw	43
   986   0010E4  6E40               	movwf	??_main^0,c
   987   0010E6  0E00               	movlw	0
   988   0010E8                     u1947:
   989   0010E8  2EE8               	decfsz	wreg,f,c
   990   0010EA  D7FE               	bra	u1947
   991   0010EC  2E40               	decfsz	??_main^0,f,c
   992   0010EE  D7FC               	bra	u1947
   993   0010F0  2E41               	decfsz	(??_main+1)^0,f,c
   994   0010F2  D7FA               	bra	u1947
   995   0010F4  D000               	nop2	
   996   0010F6                     l199:
   997   0010F6  B48E               	btfsc	142,2,c	;volatile
   998   0010F8  EF80  F008         	goto	u1851
   999   0010FC  EF82  F008         	goto	u1850
  1000   001100                     u1851:
  1001   001100  EF7B  F008         	goto	l199
  1002   001104                     u1850:
  1003   001104                     
  1004                           ;main.c: 81:     increment = 0;
  1005   001104  0E00               	movlw	0
  1006   001106  0100               	movlb	0	; () banked
  1007   001108  6F89               	movwf	(_increment+1)& (0+255),b
  1008   00110A  0E00               	movlw	0
  1009   00110C  6F88               	movwf	_increment& (0+255),b
  1010   00110E                     l202:
  1011                           
  1012                           ;main.c: 85:         if (wall_detected) {
  1013   00110E  0100               	movlb	0	; () banked
  1014   001110  518C               	movf	_wall_detected& (0+255),w,b
  1015   001112  B4D8               	btfsc	status,2,c
  1016   001114  EF8E  F008         	goto	u1861
  1017   001118  EF90  F008         	goto	u1860
  1018   00111C                     u1861:
  1019   00111C  EFD6  F008         	goto	l3532
  1020   001120                     u1860:
  1021   001120                     
  1022                           ; BSR set to: 0
  1023                           ;main.c: 87:             fastStop(&motorL, &motorR);
  1024   001120  0EA7               	movlw	low main@motorL
  1025   001122  6E15               	movwf	fastStop@mL^0,c
  1026   001124  0E9E               	movlw	low main@motorR
  1027   001126  6E16               	movwf	fastStop@mR^0,c
  1028   001128  ECE7  F012         	call	_fastStop	;wreg free
  1029   00112C                     
  1030                           ;main.c: 89:             readColors(&RGBC);
  1031   00112C  0E96               	movlw	low main@RGBC
  1032   00112E  6E0E               	movwf	readColors@RGBC^0,c
  1033   001130  EC88  F00F         	call	_readColors	;wreg free
  1034   001134                     
  1035                           ;main.c: 91:             normalizeColors(&RGBC, &normRGB);
  1036   001134  0E96               	movlw	low main@RGBC
  1037   001136  6E10               	movwf	normalizeColors@RGBC^0,c
  1038   001138  0E8E               	movlw	low main@normRGB
  1039   00113A  6E11               	movwf	normalizeColors@normRGB^0,c
  1040   00113C  EC2A  F00D         	call	_normalizeColors	;wreg free
  1041                           
  1042                           ;main.c: 93:             char colourCode = decideColor(&normRGB, &RGBC, &motorL, &motorR
      +                          );
  1043   001140  0E8E               	movlw	low main@normRGB
  1044   001142  6E2A               	movwf	decideColor@normRGB^0,c
  1045   001144  0E96               	movlw	low main@RGBC
  1046   001146  6E2B               	movwf	decideColor@RGBC^0,c
  1047   001148  0EA7               	movlw	low main@motorL
  1048   00114A  6E2C               	movwf	decideColor@mL^0,c
  1049   00114C  0E9E               	movlw	low main@motorR
  1050   00114E  6E2D               	movwf	decideColor@mR^0,c
  1051   001150  EC01  F007         	call	_decideColor	;wreg free
  1052   001154  0100               	movlb	0	; () banked
  1053   001156  6F8D               	movwf	main@colourCode& (0+255),b
  1054   001158                     
  1055                           ; BSR set to: 0
  1056                           ;main.c: 97:             indicateInstruction(colourCode);
  1057   001158  518D               	movf	main@colourCode& (0+255),w,b
  1058   00115A  EC15  F012         	call	_indicateInstruction
  1059   00115E                     
  1060                           ;main.c: 103:             instruction_array[instruction_array_index][0] = colourCode;
  1061   00115E  0100               	movlb	0	; () banked
  1062   001160  518B               	movf	_instruction_array_index& (0+255),w,b
  1063   001162  0D02               	mullw	2
  1064   001164  50F3               	movf	243,w,c
  1065   001166  0F60               	addlw	low _instruction_array
  1066   001168  6ED9               	movwf	fsr2l,c
  1067   00116A  6ADA               	clrf	fsr2h,c
  1068   00116C  C08D  FFDF         	movff	main@colourCode,indf2
  1069   001170                     
  1070                           ; BSR set to: 0
  1071                           ;main.c: 104:             instruction_array[instruction_array_index][1] = increment;
  1072   001170  518B               	movf	_instruction_array_index& (0+255),w,b
  1073   001172  0D02               	mullw	2
  1074   001174  50F3               	movf	243,w,c
  1075   001176  0F61               	addlw	low (_instruction_array+1)
  1076   001178  6ED9               	movwf	fsr2l,c
  1077   00117A  6ADA               	clrf	fsr2h,c
  1078   00117C  C088  FFDF         	movff	_increment,indf2
  1079   001180                     
  1080                           ; BSR set to: 0
  1081                           ;main.c: 105:             instruction_array_index += 1;
  1082   001180  2B8B               	incf	_instruction_array_index& (0+255),f,b
  1083   001182                     
  1084                           ; BSR set to: 0
  1085                           ;main.c: 107:             executeInstruction(&motorL, &motorR, colourCode);
  1086   001182  0EA7               	movlw	low main@motorL
  1087   001184  6E2D               	movwf	executeInstruction@mL^0,c
  1088   001186  0E9E               	movlw	low main@motorR
  1089   001188  6E2E               	movwf	executeInstruction@mR^0,c
  1090   00118A  C08D  F02F         	movff	main@colourCode,executeInstruction@colourCode
  1091   00118E  EC29  F00B         	call	_executeInstruction	;wreg free
  1092   001192                     
  1093                           ;main.c: 108:             LEDturnON();
  1094   001192  ECF2  F015         	call	_LEDturnON	;wreg free
  1095   001196                     
  1096                           ;main.c: 109:             increment = 0;
  1097   001196  0E00               	movlw	0
  1098   001198  0100               	movlb	0	; () banked
  1099   00119A  6F89               	movwf	(_increment+1)& (0+255),b
  1100   00119C  0E00               	movlw	0
  1101   00119E  6F88               	movwf	_increment& (0+255),b
  1102   0011A0                     
  1103                           ; BSR set to: 0
  1104                           ;main.c: 113:             wall_detected = 0;
  1105   0011A0  0E00               	movlw	0
  1106   0011A2  6F8C               	movwf	_wall_detected& (0+255),b
  1107   0011A4                     
  1108                           ; BSR set to: 0
  1109                           ;main.c: 114:             clearInterrupt();
  1110   0011A4  EC5B  F015         	call	_clearInterrupt	;wreg free
  1111   0011A8                     
  1112                           ;main.c: 115:             INTCONbits.GIE=1;
  1113   0011A8  8EF2               	bsf	242,7,c	;volatile
  1114   0011AA                     
  1115                           ;main.c: 117:             LATDbits.LATD7 = 0;
  1116   0011AA  9E7C               	bcf	124,7,c	;volatile
  1117   0011AC                     l3532:
  1118                           
  1119                           ;main.c: 126:         if (reverseRouteFlag) {
  1120   0011AC  0100               	movlb	0	; () banked
  1121   0011AE  518A               	movf	_reverseRouteFlag& (0+255),w,b
  1122   0011B0  B4D8               	btfsc	status,2,c
  1123   0011B2  EFDD  F008         	goto	u1871
  1124   0011B6  EFDF  F008         	goto	u1870
  1125   0011BA                     u1871:
  1126   0011BA  EFE5  F008         	goto	l3536
  1127   0011BE                     u1870:
  1128   0011BE                     
  1129                           ; BSR set to: 0
  1130                           ;main.c: 127:             reverseRoute(&motorL, &motorR);
  1131   0011BE  0EA7               	movlw	low main@motorL
  1132   0011C0  6E32               	movwf	reverseRoute@mL^0,c
  1133   0011C2  0E9E               	movlw	low main@motorR
  1134   0011C4  6E33               	movwf	reverseRoute@mR^0,c
  1135   0011C6  ECC1  F011         	call	_reverseRoute	;wreg free
  1136   0011CA                     l3536:
  1137                           
  1138                           ;main.c: 131:             trundle(&motorL, &motorR);
  1139   0011CA  0EA7               	movlw	low main@motorL
  1140   0011CC  6E15               	movwf	trundle@mL^0,c
  1141   0011CE  0E9E               	movlw	low main@motorR
  1142   0011D0  6E16               	movwf	trundle@mR^0,c
  1143   0011D2  EC11  F010         	call	_trundle	;wreg free
  1144   0011D6  EF87  F008         	goto	l202
  1145   0011DA  EF23  F000         	goto	start
  1146   0011DE                     __end_of_main:
  1147                           	callstack 0
  1148                           
  1149 ;; *************** function _trundle *****************
  1150 ;; Defined at:
  1151 ;;		line 351 in file "dc_motor.c"
  1152 ;; Parameters:    Size  Location     Type
  1153 ;;  mL              1   20[COMRAM] PTR struct DC_motor
  1154 ;;		 -> main@motorL(9), 
  1155 ;;  mR              1   21[COMRAM] PTR struct DC_motor
  1156 ;;		 -> main@motorR(9), 
  1157 ;; Auto vars:     Size  Location     Type
  1158 ;;  i               2   27[COMRAM] int 
  1159 ;;  i               2   25[COMRAM] int 
  1160 ;;  trundle_powe    1   30[COMRAM] unsigned char 
  1161 ;;  current_powe    1   29[COMRAM] unsigned char 
  1162 ;; Return value:  Size  Location     Type
  1163 ;;                  1    wreg      void 
  1164 ;; Registers used:
  1165 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1166 ;; Tracked objects:
  1167 ;;		On entry : 0/0
  1168 ;;		On exit  : 0/0
  1169 ;;		Unchanged: 0/0
  1170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1171 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1172 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1173 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1174 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1175 ;;Total ram usage:       11 bytes
  1176 ;; Hardware stack levels used: 1
  1177 ;; Hardware stack levels required when called: 6
  1178 ;; This function calls:
  1179 ;;		_setMotorPWM
  1180 ;; This function is called by:
  1181 ;;		_main
  1182 ;; This function uses a non-reentrant model
  1183 ;;
  1184                           
  1185                           	psect	text1
  1186   002022                     __ptext1:
  1187                           	callstack 0
  1188   002022                     _trundle:
  1189                           	callstack 24
  1190   002022                     
  1191                           ;dc_motor.c: 351: void trundle(DC_motor *mL, DC_motor *mR);dc_motor.c: 352: {;dc_motor.c
      +                          : 357:     mL->direction = 1;
  1192   002022  5015               	movf	trundle@mL^0,w,c
  1193   002024  6ED9               	movwf	fsr2l,c
  1194   002026  6ADA               	clrf	fsr2h,c
  1195   002028  0E01               	movlw	1
  1196   00202A  26D9               	addwf	fsr2l,f,c
  1197   00202C  0E01               	movlw	1
  1198   00202E  6EDF               	movwf	indf2,c
  1199                           
  1200                           ;dc_motor.c: 358:     mR->direction = 1;
  1201   002030  5016               	movf	trundle@mR^0,w,c
  1202   002032  6ED9               	movwf	fsr2l,c
  1203   002034  6ADA               	clrf	fsr2h,c
  1204   002036  0E01               	movlw	1
  1205   002038  26D9               	addwf	fsr2l,f,c
  1206   00203A  0E01               	movlw	1
  1207   00203C  6EDF               	movwf	indf2,c
  1208   00203E                     
  1209                           ;dc_motor.c: 360:     char current_power = mL->power;
  1210   00203E  5015               	movf	trundle@mL^0,w,c
  1211   002040  6ED9               	movwf	fsr2l,c
  1212   002042  6ADA               	clrf	fsr2h,c
  1213   002044  50DF               	movf	indf2,w,c
  1214   002046  6E1E               	movwf	trundle@current_power^0,c
  1215   002048                     
  1216                           ;dc_motor.c: 361:     char trundle_power = 18;
  1217   002048  0E12               	movlw	18
  1218   00204A  6E1F               	movwf	trundle@trundle_power^0,c
  1219                           
  1220                           ;dc_motor.c: 363:     if (trundle_power > current_power) {
  1221   00204C  0E12               	movlw	18
  1222   00204E  601E               	cpfslt	trundle@current_power^0,c
  1223   002050  EF2C  F010         	goto	u1821
  1224   002054  EF2E  F010         	goto	u1820
  1225   002058                     u1821:
  1226   002058  EF64  F010         	goto	l579
  1227   00205C                     u1820:
  1228   00205C                     
  1229                           ;dc_motor.c: 364:         for (int i=current_power; i<= trundle_power; i++) {
  1230   00205C  C01E  F01A         	movff	trundle@current_power,trundle@i
  1231   002060  6A1B               	clrf	(trundle@i+1)^0,c
  1232   002062  EF50  F010         	goto	l3420
  1233   002066                     l3408:
  1234                           
  1235                           ;dc_motor.c: 365:             mL->power = i+15;
  1236   002066  5015               	movf	trundle@mL^0,w,c
  1237   002068  6ED9               	movwf	fsr2l,c
  1238   00206A  6ADA               	clrf	fsr2h,c
  1239   00206C  501A               	movf	trundle@i^0,w,c
  1240   00206E  0F0F               	addlw	15
  1241   002070  6EDF               	movwf	indf2,c
  1242   002072                     
  1243                           ;dc_motor.c: 366:             mR->power = i;
  1244   002072  5016               	movf	trundle@mR^0,w,c
  1245   002074  6ED9               	movwf	fsr2l,c
  1246   002076  6ADA               	clrf	fsr2h,c
  1247   002078  C01A  FFDF         	movff	trundle@i,indf2
  1248   00207C                     
  1249                           ;dc_motor.c: 367:             setMotorPWM(mL);
  1250   00207C  C015  F010         	movff	trundle@mL,setMotorPWM@m
  1251   002080  EC80  F00C         	call	_setMotorPWM	;wreg free
  1252   002084                     
  1253                           ;dc_motor.c: 368:             setMotorPWM(mR);
  1254   002084  C016  F010         	movff	trundle@mR,setMotorPWM@m
  1255   002088  EC80  F00C         	call	_setMotorPWM	;wreg free
  1256   00208C                     
  1257                           ;dc_motor.c: 369:             _delay((unsigned long)((5)*(64000000/4000.0)));
  1258   00208C  0E68               	movlw	104
  1259   00208E  6E17               	movwf	??_trundle^0,c
  1260   002090  0EE4               	movlw	228
  1261   002092                     u1957:
  1262   002092  2EE8               	decfsz	wreg,f,c
  1263   002094  D7FE               	bra	u1957
  1264   002096  2E17               	decfsz	??_trundle^0,f,c
  1265   002098  D7FC               	bra	u1957
  1266   00209A  D000               	nop2	
  1267   00209C                     
  1268                           ;dc_motor.c: 370:         }
  1269   00209C  4A1A               	infsnz	trundle@i^0,f,c
  1270   00209E  2A1B               	incf	(trundle@i+1)^0,f,c
  1271   0020A0                     l3420:
  1272   0020A0  501F               	movf	trundle@trundle_power^0,w,c
  1273   0020A2  6E17               	movwf	??_trundle^0,c
  1274   0020A4  6A18               	clrf	(??_trundle+1)^0,c
  1275   0020A6  501A               	movf	trundle@i^0,w,c
  1276   0020A8  5C17               	subwf	??_trundle^0,w,c
  1277   0020AA  5018               	movf	(??_trundle+1)^0,w,c
  1278   0020AC  0A80               	xorlw	128
  1279   0020AE  6E19               	movwf	(??_trundle+2)^0,c
  1280   0020B0  501B               	movf	(trundle@i+1)^0,w,c
  1281   0020B2  0A80               	xorlw	128
  1282   0020B4  5819               	subwfb	(??_trundle+2)^0,w,c
  1283   0020B6  B0D8               	btfsc	status,0,c
  1284   0020B8  EF60  F010         	goto	u1831
  1285   0020BC  EF62  F010         	goto	u1830
  1286   0020C0                     u1831:
  1287   0020C0  EF33  F010         	goto	l3408
  1288   0020C4                     u1830:
  1289   0020C4  EF98  F010         	goto	l587
  1290   0020C8                     l579:
  1291                           
  1292                           ;dc_motor.c: 373:         for (int i=current_power; i>= trundle_power; i--) {
  1293   0020C8  C01E  F01C         	movff	trundle@current_power,trundle@i_2169
  1294   0020CC  6A1D               	clrf	(trundle@i_2169+1)^0,c
  1295   0020CE  EF86  F010         	goto	l3432
  1296   0020D2                     l3422:
  1297                           
  1298                           ;dc_motor.c: 374:             mL->power = i;
  1299   0020D2  5015               	movf	trundle@mL^0,w,c
  1300   0020D4  6ED9               	movwf	fsr2l,c
  1301   0020D6  6ADA               	clrf	fsr2h,c
  1302   0020D8  C01C  FFDF         	movff	trundle@i_2169,indf2
  1303                           
  1304                           ;dc_motor.c: 375:             mR->power = i;
  1305   0020DC  5016               	movf	trundle@mR^0,w,c
  1306   0020DE  6ED9               	movwf	fsr2l,c
  1307   0020E0  6ADA               	clrf	fsr2h,c
  1308   0020E2  C01C  FFDF         	movff	trundle@i_2169,indf2
  1309   0020E6                     
  1310                           ;dc_motor.c: 376:             setMotorPWM(mL);
  1311   0020E6  C015  F010         	movff	trundle@mL,setMotorPWM@m
  1312   0020EA  EC80  F00C         	call	_setMotorPWM	;wreg free
  1313   0020EE                     
  1314                           ;dc_motor.c: 377:             setMotorPWM(mR);
  1315   0020EE  C016  F010         	movff	trundle@mR,setMotorPWM@m
  1316   0020F2  EC80  F00C         	call	_setMotorPWM	;wreg free
  1317   0020F6                     
  1318                           ;dc_motor.c: 378:             _delay((unsigned long)((5)*(64000000/4000.0)));
  1319   0020F6  0E68               	movlw	104
  1320   0020F8  6E17               	movwf	??_trundle^0,c
  1321   0020FA  0EE4               	movlw	228
  1322   0020FC                     u1967:
  1323   0020FC  2EE8               	decfsz	wreg,f,c
  1324   0020FE  D7FE               	bra	u1967
  1325   002100  2E17               	decfsz	??_trundle^0,f,c
  1326   002102  D7FC               	bra	u1967
  1327   002104  D000               	nop2	
  1328   002106                     
  1329                           ;dc_motor.c: 379:         }
  1330   002106  061C               	decf	trundle@i_2169^0,f,c
  1331   002108  A0D8               	btfss	status,0,c
  1332   00210A  061D               	decf	(trundle@i_2169+1)^0,f,c
  1333   00210C                     l3432:
  1334   00210C  501F               	movf	trundle@trundle_power^0,w,c
  1335   00210E  6E17               	movwf	??_trundle^0,c
  1336   002110  6A18               	clrf	(??_trundle+1)^0,c
  1337   002112  5017               	movf	??_trundle^0,w,c
  1338   002114  5C1C               	subwf	trundle@i_2169^0,w,c
  1339   002116  501D               	movf	(trundle@i_2169+1)^0,w,c
  1340   002118  0A80               	xorlw	128
  1341   00211A  6E19               	movwf	(??_trundle+2)^0,c
  1342   00211C  5018               	movf	(??_trundle+1)^0,w,c
  1343   00211E  0A80               	xorlw	128
  1344   002120  5819               	subwfb	(??_trundle+2)^0,w,c
  1345   002122  B0D8               	btfsc	status,0,c
  1346   002124  EF96  F010         	goto	u1841
  1347   002128  EF98  F010         	goto	u1840
  1348   00212C                     u1841:
  1349   00212C  EF69  F010         	goto	l3422
  1350   002130                     u1840:
  1351   002130                     l587:
  1352   002130  0012               	return		;funcret
  1353   002132                     __end_of_trundle:
  1354                           	callstack 0
  1355                           
  1356 ;; *************** function _rightCali *****************
  1357 ;; Defined at:
  1358 ;;		line 119 in file "dc_motor.c"
  1359 ;; Parameters:    Size  Location     Type
  1360 ;;  mL              1   38[COMRAM] PTR struct DC_motor
  1361 ;;		 -> main@motorL(9), 
  1362 ;;  mR              1   39[COMRAM] PTR struct DC_motor
  1363 ;;		 -> main@motorR(9), 
  1364 ;; Auto vars:     Size  Location     Type
  1365 ;;  power           1   42[COMRAM] unsigned char 
  1366 ;; Return value:  Size  Location     Type
  1367 ;;                  1    wreg      unsigned char 
  1368 ;; Registers used:
  1369 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1370 ;; Tracked objects:
  1371 ;;		On entry : 0/0
  1372 ;;		On exit  : 0/0
  1373 ;;		Unchanged: 0/0
  1374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1375 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1376 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1377 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1378 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1379 ;;Total ram usage:        5 bytes
  1380 ;; Hardware stack levels used: 1
  1381 ;; Hardware stack levels required when called: 8
  1382 ;; This function calls:
  1383 ;;		_turnRight
  1384 ;; This function is called by:
  1385 ;;		_main
  1386 ;; This function uses a non-reentrant model
  1387 ;;
  1388                           
  1389                           	psect	text2
  1390   002132                     __ptext2:
  1391                           	callstack 0
  1392   002132                     _rightCali:
  1393                           	callstack 22
  1394   002132                     l504:
  1395   002132  B48E               	btfsc	142,2,c	;volatile
  1396   002134  EF9E  F010         	goto	u1681
  1397   002138  EFA0  F010         	goto	u1680
  1398   00213C                     u1681:
  1399   00213C  EF99  F010         	goto	l504
  1400   002140                     u1680:
  1401   002140                     
  1402                           ;dc_motor.c: 121:     char power = turnRightPower;
  1403   002140  C04B  F02B         	movff	_turnRightPower,rightCali@power
  1404                           
  1405                           ;dc_motor.c: 122:     while (PORTFbits.RF2 || PORTFbits.RF3) {
  1406   002144  EFEC  F010         	goto	l3300
  1407   002148                     l3282:
  1408                           
  1409                           ;dc_motor.c: 123:         _delay((unsigned long)((1000)*(64000000/4000.0)));
  1410   002148  0E52               	movlw	82
  1411   00214A  6E2A               	movwf	(??_rightCali+1)^0,c
  1412   00214C  0E2B               	movlw	43
  1413   00214E  6E29               	movwf	??_rightCali^0,c
  1414   002150  0E00               	movlw	0
  1415   002152                     u1977:
  1416   002152  2EE8               	decfsz	wreg,f,c
  1417   002154  D7FE               	bra	u1977
  1418   002156  2E29               	decfsz	??_rightCali^0,f,c
  1419   002158  D7FC               	bra	u1977
  1420   00215A  2E2A               	decfsz	(??_rightCali+1)^0,f,c
  1421   00215C  D7FA               	bra	u1977
  1422   00215E  D000               	nop2	
  1423   002160                     
  1424                           ;dc_motor.c: 124:         turnRight(mL,mR,power);
  1425   002160  C027  F01C         	movff	rightCali@mL,turnRight@mL
  1426   002164  C028  F01D         	movff	rightCali@mR,turnRight@mR
  1427   002168  C02B  F01E         	movff	rightCali@power,turnRight@power
  1428   00216C  ECCC  F00D         	call	_turnRight	;wreg free
  1429   002170                     l509:
  1430   002170  A48E               	btfss	142,2,c	;volatile
  1431   002172  EFBD  F010         	goto	u1691
  1432   002176  EFBF  F010         	goto	u1690
  1433   00217A                     u1691:
  1434   00217A  EFC6  F010         	goto	l3288
  1435   00217E                     u1690:
  1436   00217E  B68E               	btfsc	142,3,c	;volatile
  1437   002180  EFC4  F010         	goto	u1701
  1438   002184  EFC6  F010         	goto	u1700
  1439   002188                     u1701:
  1440   002188  EFB8  F010         	goto	l509
  1441   00218C                     u1700:
  1442   00218C                     l3288:
  1443                           
  1444                           ;dc_motor.c: 127:         _delay((unsigned long)((80)*(64000000/4000.0)));
  1445   00218C  0E07               	movlw	7
  1446   00218E  6E2A               	movwf	(??_rightCali+1)^0,c
  1447   002190  0E7F               	movlw	127
  1448   002192  6E29               	movwf	??_rightCali^0,c
  1449   002194  0E50               	movlw	80
  1450   002196                     u1987:
  1451   002196  2EE8               	decfsz	wreg,f,c
  1452   002198  D7FE               	bra	u1987
  1453   00219A  2E29               	decfsz	??_rightCali^0,f,c
  1454   00219C  D7FC               	bra	u1987
  1455   00219E  2E2A               	decfsz	(??_rightCali+1)^0,f,c
  1456   0021A0  D7FA               	bra	u1987
  1457   0021A2                     
  1458                           ;dc_motor.c: 128:         if(!PORTFbits.RF2 && !PORTFbits.RF3) {
  1459   0021A2  B48E               	btfsc	142,2,c	;volatile
  1460   0021A4  EFD6  F010         	goto	u1711
  1461   0021A8  EFD8  F010         	goto	u1710
  1462   0021AC                     u1711:
  1463   0021AC  EFE1  F010         	goto	l514
  1464   0021B0                     u1710:
  1465   0021B0  B68E               	btfsc	142,3,c	;volatile
  1466   0021B2  EFDD  F010         	goto	u1721
  1467   0021B6  EFDF  F010         	goto	u1720
  1468   0021BA                     u1721:
  1469   0021BA  EFE1  F010         	goto	l514
  1470   0021BE                     u1720:
  1471   0021BE  EFEC  F010         	goto	l3300
  1472   0021C2                     l514:
  1473                           
  1474                           ;dc_motor.c: 130:             if(!PORTFbits.RF2){
  1475   0021C2  B48E               	btfsc	142,2,c	;volatile
  1476   0021C4  EFE6  F010         	goto	u1731
  1477   0021C8  EFE8  F010         	goto	u1730
  1478   0021CC                     u1731:
  1479   0021CC  EFEB  F010         	goto	l3298
  1480   0021D0                     u1730:
  1481   0021D0                     
  1482                           ;dc_motor.c: 131:                 power++;
  1483   0021D0  2A2B               	incf	rightCali@power^0,f,c
  1484                           
  1485                           ;dc_motor.c: 132:             }
  1486   0021D2  EFEC  F010         	goto	l3300
  1487   0021D6                     l3298:
  1488                           
  1489                           ;dc_motor.c: 134:                 power--;
  1490   0021D6  062B               	decf	rightCali@power^0,f,c
  1491   0021D8                     l3300:
  1492                           
  1493                           ;dc_motor.c: 122:     while (PORTFbits.RF2 || PORTFbits.RF3) {
  1494   0021D8  B48E               	btfsc	142,2,c	;volatile
  1495   0021DA  EFF1  F010         	goto	u1741
  1496   0021DE  EFF3  F010         	goto	u1740
  1497   0021E2                     u1741:
  1498   0021E2  EFA4  F010         	goto	l3282
  1499   0021E6                     u1740:
  1500   0021E6  B68E               	btfsc	142,3,c	;volatile
  1501   0021E8  EFF8  F010         	goto	u1751
  1502   0021EC  EFFA  F010         	goto	u1750
  1503   0021F0                     u1751:
  1504   0021F0  EFA4  F010         	goto	l3282
  1505   0021F4                     u1750:
  1506   0021F4                     
  1507                           ;dc_motor.c: 138:     return power;
  1508   0021F4  502B               	movf	rightCali@power^0,w,c
  1509   0021F6  0012               	return		;funcret
  1510   0021F8                     __end_of_rightCali:
  1511                           	callstack 0
  1512                           
  1513 ;; *************** function _reverseRoute *****************
  1514 ;; Defined at:
  1515 ;;		line 119 in file "instructions.c"
  1516 ;; Parameters:    Size  Location     Type
  1517 ;;  mL              1   49[COMRAM] PTR struct DC_motor
  1518 ;;		 -> main@motorL(9), 
  1519 ;;  mR              1   50[COMRAM] PTR struct DC_motor
  1520 ;;		 -> main@motorR(9), 
  1521 ;; Auto vars:     Size  Location     Type
  1522 ;;  i               2   61[COMRAM] int 
  1523 ;;  reverseMappi    9   52[COMRAM] unsigned char [9]
  1524 ;; Return value:  Size  Location     Type
  1525 ;;                  1    wreg      void 
  1526 ;; Registers used:
  1527 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1528 ;; Tracked objects:
  1529 ;;		On entry : 0/0
  1530 ;;		On exit  : 0/0
  1531 ;;		Unchanged: 0/0
  1532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1533 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1534 ;;      Locals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1535 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1536 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1537 ;;Total ram usage:       14 bytes
  1538 ;; Hardware stack levels used: 1
  1539 ;; Hardware stack levels required when called: 11
  1540 ;; This function calls:
  1541 ;;		_executeInstruction
  1542 ;;		_stop
  1543 ;;		_timed_trundle
  1544 ;; This function is called by:
  1545 ;;		_main
  1546 ;; This function uses a non-reentrant model
  1547 ;;
  1548                           
  1549                           	psect	text3
  1550   002382                     __ptext3:
  1551                           	callstack 0
  1552   002382                     _reverseRoute:
  1553                           	callstack 19
  1554   002382                     
  1555                           ;instructions.c: 128:     char reverseMapping[9] = {1, 0, 2, 9, 10, 11, 12, -1, -1};
  1556   002382  EE20  F042         	lfsr	2,reverseRoute@F14296
  1557   002386  EE10  F035         	lfsr	1,reverseRoute@reverseMapping
  1558   00238A  0E08               	movlw	8
  1559   00238C                     u1791:
  1560   00238C  CFDB FFE3          	movff	plusw2,plusw1
  1561   002390  06E8               	decf	wreg,f,c
  1562   002392  E2FC               	bc	u1791
  1563   002394                     
  1564                           ;instructions.c: 129:     for (int i = (instruction_array_index-1); i >= 0; i--) {
  1565   002394  0EFF               	movlw	255
  1566   002396  0100               	movlb	0	; () banked
  1567   002398  258B               	addwf	_instruction_array_index& (0+255),w,b
  1568   00239A  6E3E               	movwf	reverseRoute@i^0,c
  1569   00239C  6A3F               	clrf	(reverseRoute@i+1)^0,c
  1570   00239E  0EFF               	movlw	255
  1571   0023A0  223F               	addwfc	(reverseRoute@i+1)^0,f,c
  1572   0023A2                     l3386:
  1573   0023A2  BE3F               	btfsc	(reverseRoute@i+1)^0,7,c
  1574   0023A4  EFD8  F011         	goto	u1800
  1575   0023A8  EFD6  F011         	goto	u1801
  1576   0023AC                     u1801:
  1577   0023AC  EFDA  F011         	goto	l3390
  1578   0023B0                     u1800:
  1579   0023B0  EF04  F012         	goto	l3396
  1580   0023B4                     l3390:
  1581                           
  1582                           ;instructions.c: 130:         executeInstruction(mL, mR, reverseMapping[instruction_arra
      +                          y[i][0]]);
  1583   0023B4  C032  F02D         	movff	reverseRoute@mL,executeInstruction@mL
  1584   0023B8  C033  F02E         	movff	reverseRoute@mR,executeInstruction@mR
  1585   0023BC  503E               	movf	reverseRoute@i^0,w,c
  1586   0023BE  0D02               	mullw	2
  1587   0023C0  50F3               	movf	243,w,c
  1588   0023C2  0F60               	addlw	low _instruction_array
  1589   0023C4  6ED9               	movwf	fsr2l,c
  1590   0023C6  6ADA               	clrf	fsr2h,c
  1591   0023C8  50DF               	movf	indf2,w,c
  1592   0023CA  6E34               	movwf	??_reverseRoute^0,c
  1593   0023CC  5034               	movf	??_reverseRoute^0,w,c
  1594   0023CE  0F35               	addlw	low reverseRoute@reverseMapping
  1595   0023D0  6ED9               	movwf	fsr2l,c
  1596   0023D2  6ADA               	clrf	fsr2h,c
  1597   0023D4  50DF               	movf	indf2,w,c
  1598   0023D6  6E2F               	movwf	executeInstruction@colourCode^0,c
  1599   0023D8  EC29  F00B         	call	_executeInstruction	;wreg free
  1600                           
  1601                           ;instructions.c: 131:         timed_trundle(mL, mR, instruction_array[i][1]);
  1602   0023DC  C032  F01C         	movff	reverseRoute@mL,timed_trundle@mL
  1603   0023E0  C033  F01D         	movff	reverseRoute@mR,timed_trundle@mR
  1604   0023E4  503E               	movf	reverseRoute@i^0,w,c
  1605   0023E6  0D02               	mullw	2
  1606   0023E8  50F3               	movf	243,w,c
  1607   0023EA  0F61               	addlw	low (_instruction_array+1)
  1608   0023EC  6ED9               	movwf	fsr2l,c
  1609   0023EE  6ADA               	clrf	fsr2h,c
  1610   0023F0  50DF               	movf	indf2,w,c
  1611   0023F2  6E34               	movwf	??_reverseRoute^0,c
  1612   0023F4  5034               	movf	??_reverseRoute^0,w,c
  1613   0023F6  6E1E               	movwf	timed_trundle@increments^0,c
  1614   0023F8  6A1F               	clrf	(timed_trundle@increments+1)^0,c
  1615   0023FA  ECBA  F009         	call	_timed_trundle	;wreg free
  1616   0023FE                     
  1617                           ;instructions.c: 132:     }
  1618   0023FE  063E               	decf	reverseRoute@i^0,f,c
  1619   002400  A0D8               	btfss	status,0,c
  1620   002402  063F               	decf	(reverseRoute@i+1)^0,f,c
  1621   002404  EFD1  F011         	goto	l3386
  1622   002408                     l3396:
  1623                           
  1624                           ;instructions.c: 133:     stop(mL, mR);
  1625   002408  C032  F015         	movff	reverseRoute@mL,stop@mL
  1626   00240C  C033  F016         	movff	reverseRoute@mR,stop@mR
  1627   002410  EC1C  F013         	call	_stop	;wreg free
  1628   002414                     
  1629                           ;instructions.c: 134:     instruction_array_index = 0;
  1630   002414  0E00               	movlw	0
  1631   002416  0100               	movlb	0	; () banked
  1632   002418  6F8B               	movwf	_instruction_array_index& (0+255),b
  1633   00241A                     l411:
  1634   00241A  B48E               	btfsc	142,2,c	;volatile
  1635   00241C  EF12  F012         	goto	u1811
  1636   002420  EF14  F012         	goto	u1810
  1637   002424                     u1811:
  1638   002424  EF0D  F012         	goto	l411
  1639   002428                     u1810:
  1640   002428  0012               	return		;funcret
  1641   00242A                     __end_of_reverseRoute:
  1642                           	callstack 0
  1643                           
  1644 ;; *************** function _timed_trundle *****************
  1645 ;; Defined at:
  1646 ;;		line 425 in file "dc_motor.c"
  1647 ;; Parameters:    Size  Location     Type
  1648 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  1649 ;;		 -> main@motorL(9), 
  1650 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  1651 ;;		 -> main@motorR(9), 
  1652 ;;  increments      2   29[COMRAM] int 
  1653 ;; Auto vars:     Size  Location     Type
  1654 ;;  i               2   36[COMRAM] int 
  1655 ;;  i               2   34[COMRAM] int 
  1656 ;;  trundle_powe    1   39[COMRAM] unsigned char 
  1657 ;;  current_powe    1   38[COMRAM] unsigned char 
  1658 ;; Return value:  Size  Location     Type
  1659 ;;                  1    wreg      void 
  1660 ;; Registers used:
  1661 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1662 ;; Tracked objects:
  1663 ;;		On entry : 0/0
  1664 ;;		On exit  : 0/0
  1665 ;;		Unchanged: 0/0
  1666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1667 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1668 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1669 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1670 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1671 ;;Total ram usage:       13 bytes
  1672 ;; Hardware stack levels used: 1
  1673 ;; Hardware stack levels required when called: 7
  1674 ;; This function calls:
  1675 ;;		_setMotorPWM
  1676 ;;		_stop
  1677 ;; This function is called by:
  1678 ;;		_reverseRoute
  1679 ;; This function uses a non-reentrant model
  1680 ;;
  1681                           
  1682                           	psect	text4
  1683   001374                     __ptext4:
  1684                           	callstack 0
  1685   001374                     _timed_trundle:
  1686                           	callstack 22
  1687   001374                     
  1688                           ;dc_motor.c: 426:     if (mL->power != 0 || mR->power != 0) {
  1689   001374  501C               	movf	timed_trundle@mL^0,w,c
  1690   001376  6ED9               	movwf	fsr2l,c
  1691   001378  6ADA               	clrf	fsr2h,c
  1692   00137A  50DF               	movf	indf2,w,c
  1693   00137C  A4D8               	btfss	status,2,c
  1694   00137E  EFC3  F009         	goto	u1441
  1695   001382  EFC5  F009         	goto	u1440
  1696   001386                     u1441:
  1697   001386  EFD0  F009         	goto	l3078
  1698   00138A                     u1440:
  1699   00138A  501D               	movf	timed_trundle@mR^0,w,c
  1700   00138C  6ED9               	movwf	fsr2l,c
  1701   00138E  6ADA               	clrf	fsr2h,c
  1702   001390  50DF               	movf	indf2,w,c
  1703   001392  B4D8               	btfsc	status,2,c
  1704   001394  EFCE  F009         	goto	u1451
  1705   001398  EFD0  F009         	goto	u1450
  1706   00139C                     u1451:
  1707   00139C  EFD6  F009         	goto	l3080
  1708   0013A0                     u1450:
  1709   0013A0                     l3078:
  1710                           
  1711                           ;dc_motor.c: 427:         stop(mL, mR);
  1712   0013A0  C01C  F015         	movff	timed_trundle@mL,stop@mL
  1713   0013A4  C01D  F016         	movff	timed_trundle@mR,stop@mR
  1714   0013A8  EC1C  F013         	call	_stop	;wreg free
  1715   0013AC                     l3080:
  1716                           
  1717                           ;dc_motor.c: 429:     increment = 0;
  1718   0013AC  0E00               	movlw	0
  1719   0013AE  0100               	movlb	0	; () banked
  1720   0013B0  6F89               	movwf	(_increment+1)& (0+255),b
  1721   0013B2  0E00               	movlw	0
  1722   0013B4  6F88               	movwf	_increment& (0+255),b
  1723   0013B6                     
  1724                           ; BSR set to: 0
  1725                           ;dc_motor.c: 431:     mL->direction = 1;
  1726   0013B6  501C               	movf	timed_trundle@mL^0,w,c
  1727   0013B8  6ED9               	movwf	fsr2l,c
  1728   0013BA  6ADA               	clrf	fsr2h,c
  1729   0013BC  0E01               	movlw	1
  1730   0013BE  26D9               	addwf	fsr2l,f,c
  1731   0013C0  0E01               	movlw	1
  1732   0013C2  6EDF               	movwf	indf2,c
  1733   0013C4                     
  1734                           ; BSR set to: 0
  1735                           ;dc_motor.c: 432:     mR->direction = 1;
  1736   0013C4  501D               	movf	timed_trundle@mR^0,w,c
  1737   0013C6  6ED9               	movwf	fsr2l,c
  1738   0013C8  6ADA               	clrf	fsr2h,c
  1739   0013CA  0E01               	movlw	1
  1740   0013CC  26D9               	addwf	fsr2l,f,c
  1741   0013CE  0E01               	movlw	1
  1742   0013D0  6EDF               	movwf	indf2,c
  1743   0013D2                     
  1744                           ; BSR set to: 0
  1745                           ;dc_motor.c: 434:     char current_power = mL->power;
  1746   0013D2  501C               	movf	timed_trundle@mL^0,w,c
  1747   0013D4  6ED9               	movwf	fsr2l,c
  1748   0013D6  6ADA               	clrf	fsr2h,c
  1749   0013D8  50DF               	movf	indf2,w,c
  1750   0013DA  6E27               	movwf	timed_trundle@current_power^0,c
  1751   0013DC                     
  1752                           ; BSR set to: 0
  1753                           ;dc_motor.c: 435:     char trundle_power = 18;
  1754   0013DC  0E12               	movlw	18
  1755   0013DE  6E28               	movwf	timed_trundle@trundle_power^0,c
  1756   0013E0                     
  1757                           ; BSR set to: 0
  1758                           ;dc_motor.c: 437:     if (trundle_power > current_power) {
  1759   0013E0  0E12               	movlw	18
  1760   0013E2  6027               	cpfslt	timed_trundle@current_power^0,c
  1761   0013E4  EFF6  F009         	goto	u1461
  1762   0013E8  EFF8  F009         	goto	u1460
  1763   0013EC                     u1461:
  1764   0013EC  EF2D  F00A         	goto	l612
  1765   0013F0                     u1460:
  1766   0013F0                     
  1767                           ; BSR set to: 0
  1768                           ;dc_motor.c: 438:         for (int i=current_power; i<= trundle_power; i++) {
  1769   0013F0  C027  F023         	movff	timed_trundle@current_power,timed_trundle@i
  1770   0013F4  6A24               	clrf	(timed_trundle@i+1)^0,c
  1771   0013F6  EF19  F00A         	goto	l3104
  1772   0013FA                     l3094:
  1773                           
  1774                           ;dc_motor.c: 439:             mL->power = i;
  1775   0013FA  501C               	movf	timed_trundle@mL^0,w,c
  1776   0013FC  6ED9               	movwf	fsr2l,c
  1777   0013FE  6ADA               	clrf	fsr2h,c
  1778   001400  C023  FFDF         	movff	timed_trundle@i,indf2
  1779                           
  1780                           ;dc_motor.c: 440:             mR->power = i;
  1781   001404  501D               	movf	timed_trundle@mR^0,w,c
  1782   001406  6ED9               	movwf	fsr2l,c
  1783   001408  6ADA               	clrf	fsr2h,c
  1784   00140A  C023  FFDF         	movff	timed_trundle@i,indf2
  1785   00140E                     
  1786                           ;dc_motor.c: 441:             setMotorPWM(mL);
  1787   00140E  C01C  F010         	movff	timed_trundle@mL,setMotorPWM@m
  1788   001412  EC80  F00C         	call	_setMotorPWM	;wreg free
  1789   001416                     
  1790                           ;dc_motor.c: 442:             setMotorPWM(mR);
  1791   001416  C01D  F010         	movff	timed_trundle@mR,setMotorPWM@m
  1792   00141A  EC80  F00C         	call	_setMotorPWM	;wreg free
  1793   00141E                     
  1794                           ;dc_motor.c: 443:             _delay((unsigned long)((5)*(64000000/4000.0)));
  1795   00141E  0E68               	movlw	104
  1796   001420  6E20               	movwf	??_timed_trundle^0,c
  1797   001422  0EE4               	movlw	228
  1798   001424                     u1997:
  1799   001424  2EE8               	decfsz	wreg,f,c
  1800   001426  D7FE               	bra	u1997
  1801   001428  2E20               	decfsz	??_timed_trundle^0,f,c
  1802   00142A  D7FC               	bra	u1997
  1803   00142C  D000               	nop2	
  1804   00142E                     
  1805                           ;dc_motor.c: 444:         }
  1806   00142E  4A23               	infsnz	timed_trundle@i^0,f,c
  1807   001430  2A24               	incf	(timed_trundle@i+1)^0,f,c
  1808   001432                     l3104:
  1809   001432  5028               	movf	timed_trundle@trundle_power^0,w,c
  1810   001434  6E20               	movwf	??_timed_trundle^0,c
  1811   001436  6A21               	clrf	(??_timed_trundle+1)^0,c
  1812   001438  5023               	movf	timed_trundle@i^0,w,c
  1813   00143A  5C20               	subwf	??_timed_trundle^0,w,c
  1814   00143C  5021               	movf	(??_timed_trundle+1)^0,w,c
  1815   00143E  0A80               	xorlw	128
  1816   001440  6E22               	movwf	(??_timed_trundle+2)^0,c
  1817   001442  5024               	movf	(timed_trundle@i+1)^0,w,c
  1818   001444  0A80               	xorlw	128
  1819   001446  5822               	subwfb	(??_timed_trundle+2)^0,w,c
  1820   001448  B0D8               	btfsc	status,0,c
  1821   00144A  EF29  F00A         	goto	u1471
  1822   00144E  EF2B  F00A         	goto	u1470
  1823   001452                     u1471:
  1824   001452  EFFD  F009         	goto	l3094
  1825   001456                     u1470:
  1826   001456  EF61  F00A         	goto	l3118
  1827   00145A                     l612:
  1828                           
  1829                           ; BSR set to: 0
  1830                           ;dc_motor.c: 447:         for (int i=current_power; i>= trundle_power; i--) {
  1831   00145A  C027  F025         	movff	timed_trundle@current_power,timed_trundle@i_2210
  1832   00145E  6A26               	clrf	(timed_trundle@i_2210+1)^0,c
  1833   001460  EF4F  F00A         	goto	l3116
  1834   001464                     l3106:
  1835                           
  1836                           ;dc_motor.c: 448:             mL->power = i;
  1837   001464  501C               	movf	timed_trundle@mL^0,w,c
  1838   001466  6ED9               	movwf	fsr2l,c
  1839   001468  6ADA               	clrf	fsr2h,c
  1840   00146A  C025  FFDF         	movff	timed_trundle@i_2210,indf2
  1841                           
  1842                           ;dc_motor.c: 449:             mR->power = i;
  1843   00146E  501D               	movf	timed_trundle@mR^0,w,c
  1844   001470  6ED9               	movwf	fsr2l,c
  1845   001472  6ADA               	clrf	fsr2h,c
  1846   001474  C025  FFDF         	movff	timed_trundle@i_2210,indf2
  1847   001478                     
  1848                           ;dc_motor.c: 450:             setMotorPWM(mL);
  1849   001478  C01C  F010         	movff	timed_trundle@mL,setMotorPWM@m
  1850   00147C  EC80  F00C         	call	_setMotorPWM	;wreg free
  1851   001480                     
  1852                           ;dc_motor.c: 451:             setMotorPWM(mR);
  1853   001480  C01D  F010         	movff	timed_trundle@mR,setMotorPWM@m
  1854   001484  EC80  F00C         	call	_setMotorPWM	;wreg free
  1855   001488                     
  1856                           ;dc_motor.c: 452:             _delay((unsigned long)((5)*(64000000/4000.0)));
  1857   001488  0E68               	movlw	104
  1858   00148A  6E20               	movwf	??_timed_trundle^0,c
  1859   00148C  0EE4               	movlw	228
  1860   00148E                     u2007:
  1861   00148E  2EE8               	decfsz	wreg,f,c
  1862   001490  D7FE               	bra	u2007
  1863   001492  2E20               	decfsz	??_timed_trundle^0,f,c
  1864   001494  D7FC               	bra	u2007
  1865   001496  D000               	nop2	
  1866   001498                     
  1867                           ;dc_motor.c: 453:         }
  1868   001498  0625               	decf	timed_trundle@i_2210^0,f,c
  1869   00149A  A0D8               	btfss	status,0,c
  1870   00149C  0626               	decf	(timed_trundle@i_2210+1)^0,f,c
  1871   00149E                     l3116:
  1872   00149E  5028               	movf	timed_trundle@trundle_power^0,w,c
  1873   0014A0  6E20               	movwf	??_timed_trundle^0,c
  1874   0014A2  6A21               	clrf	(??_timed_trundle+1)^0,c
  1875   0014A4  5020               	movf	??_timed_trundle^0,w,c
  1876   0014A6  5C25               	subwf	timed_trundle@i_2210^0,w,c
  1877   0014A8  5026               	movf	(timed_trundle@i_2210+1)^0,w,c
  1878   0014AA  0A80               	xorlw	128
  1879   0014AC  6E22               	movwf	(??_timed_trundle+2)^0,c
  1880   0014AE  5021               	movf	(??_timed_trundle+1)^0,w,c
  1881   0014B0  0A80               	xorlw	128
  1882   0014B2  5822               	subwfb	(??_timed_trundle+2)^0,w,c
  1883   0014B4  B0D8               	btfsc	status,0,c
  1884   0014B6  EF5F  F00A         	goto	u1481
  1885   0014BA  EF61  F00A         	goto	u1480
  1886   0014BE                     u1481:
  1887   0014BE  EF32  F00A         	goto	l3106
  1888   0014C2                     u1480:
  1889   0014C2                     l3118:
  1890   0014C2  501E               	movf	timed_trundle@increments^0,w,c
  1891   0014C4  0100               	movlb	0	; () banked
  1892   0014C6  5D88               	subwf	_increment& (0+255),w,b
  1893   0014C8  5189               	movf	(_increment+1)& (0+255),w,b
  1894   0014CA  0A80               	xorlw	128
  1895   0014CC  6E20               	movwf	??_timed_trundle^0,c
  1896   0014CE  501F               	movf	(timed_trundle@increments+1)^0,w,c
  1897   0014D0  0A80               	xorlw	128
  1898   0014D2  5820               	subwfb	??_timed_trundle^0,w,c
  1899   0014D4  A0D8               	btfss	status,0,c
  1900   0014D6  EF6F  F00A         	goto	u1491
  1901   0014DA  EF71  F00A         	goto	u1490
  1902   0014DE                     u1491:
  1903   0014DE  EF61  F00A         	goto	l3118
  1904   0014E2                     u1490:
  1905   0014E2                     
  1906                           ; BSR set to: 0
  1907                           ;dc_motor.c: 457:     stop(mL, mR);
  1908   0014E2  C01C  F015         	movff	timed_trundle@mL,stop@mL
  1909   0014E6  C01D  F016         	movff	timed_trundle@mR,stop@mR
  1910   0014EA  EC1C  F013         	call	_stop	;wreg free
  1911   0014EE  0012               	return		;funcret
  1912   0014F0                     __end_of_timed_trundle:
  1913                           	callstack 0
  1914                           
  1915 ;; *************** function _executeInstruction *****************
  1916 ;; Defined at:
  1917 ;;		line 8 in file "instructions.c"
  1918 ;; Parameters:    Size  Location     Type
  1919 ;;  mL              1   44[COMRAM] PTR struct DC_motor
  1920 ;;		 -> main@motorL(9), 
  1921 ;;  mR              1   45[COMRAM] PTR struct DC_motor
  1922 ;;		 -> main@motorR(9), 
  1923 ;;  colourCode      1   46[COMRAM] unsigned char 
  1924 ;; Auto vars:     Size  Location     Type
  1925 ;;		None
  1926 ;; Return value:  Size  Location     Type
  1927 ;;                  1    wreg      void 
  1928 ;; Registers used:
  1929 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1930 ;; Tracked objects:
  1931 ;;		On entry : 0/0
  1932 ;;		On exit  : 0/0
  1933 ;;		Unchanged: 0/0
  1934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1935 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1936 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1937 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1938 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1939 ;;Total ram usage:        5 bytes
  1940 ;; Hardware stack levels used: 1
  1941 ;; Hardware stack levels required when called: 10
  1942 ;; This function calls:
  1943 ;;		_Black
  1944 ;;		_Blue
  1945 ;;		_Green
  1946 ;;		_LightBlue
  1947 ;;		_Orange
  1948 ;;		_Pink
  1949 ;;		_Red
  1950 ;;		_White
  1951 ;;		_Yellow
  1952 ;;		_reverseLightBlue
  1953 ;;		_reverseOrange
  1954 ;;		_reversePink
  1955 ;;		_reverseYellow
  1956 ;; This function is called by:
  1957 ;;		_main
  1958 ;;		_reverseRoute
  1959 ;; This function uses a non-reentrant model
  1960 ;;
  1961                           
  1962                           	psect	text5
  1963   001652                     __ptext5:
  1964                           	callstack 0
  1965   001652                     _executeInstruction:
  1966                           	callstack 19
  1967   001652                     
  1968                           ;instructions.c: 9:     switch (colourCode) {
  1969   001652  EF93  F00B         	goto	l3066
  1970   001656                     l3038:
  1971                           
  1972                           ;instructions.c: 11:             Red(mL, mR);
  1973   001656  C02D  F027         	movff	executeInstruction@mL,Red@mL
  1974   00165A  C02E  F028         	movff	executeInstruction@mR,Red@mR
  1975   00165E  ECB7  F015         	call	_Red	;wreg free
  1976                           
  1977                           ;instructions.c: 12:             break;
  1978   001662  EFD4  F00B         	goto	l365
  1979   001666                     l3040:
  1980                           
  1981                           ;instructions.c: 14:             Green(mL, mR);
  1982   001666  C02D  F027         	movff	executeInstruction@mL,Green@mL
  1983   00166A  C02E  F028         	movff	executeInstruction@mR,Green@mR
  1984   00166E  ECC0  F015         	call	_Green	;wreg free
  1985                           
  1986                           ;instructions.c: 15:             break;
  1987   001672  EFD4  F00B         	goto	l365
  1988   001676                     l3042:
  1989                           
  1990                           ;instructions.c: 17:             Blue(mL, mR);
  1991   001676  C02D  F02B         	movff	executeInstruction@mL,Blue@mL
  1992   00167A  C02E  F02C         	movff	executeInstruction@mR,Blue@mR
  1993   00167E  ECC9  F015         	call	_Blue	;wreg free
  1994                           
  1995                           ;instructions.c: 18:             break;
  1996   001682  EFD4  F00B         	goto	l365
  1997   001686                     l3044:
  1998                           
  1999                           ;instructions.c: 20:             Yellow(mL, mR);
  2000   001686  C02D  F028         	movff	executeInstruction@mL,Yellow@mL
  2001   00168A  C02E  F029         	movff	executeInstruction@mR,Yellow@mR
  2002   00168E  EC02  F015         	call	_Yellow	;wreg free
  2003                           
  2004                           ;instructions.c: 21:             break;
  2005   001692  EFD4  F00B         	goto	l365
  2006   001696                     l3046:
  2007                           
  2008                           ;instructions.c: 23:             Pink(mL, mR);
  2009   001696  C02D  F028         	movff	executeInstruction@mL,Pink@mL
  2010   00169A  C02E  F029         	movff	executeInstruction@mR,Pink@mR
  2011   00169E  EC15  F015         	call	_Pink	;wreg free
  2012                           
  2013                           ;instructions.c: 24:             break;
  2014   0016A2  EFD4  F00B         	goto	l365
  2015   0016A6                     l3048:
  2016                           
  2017                           ;instructions.c: 26:             Orange(mL, mR);
  2018   0016A6  C02D  F028         	movff	executeInstruction@mL,Orange@mL
  2019   0016AA  C02E  F029         	movff	executeInstruction@mR,Orange@mR
  2020   0016AE  EC8F  F015         	call	_Orange	;wreg free
  2021                           
  2022                           ;instructions.c: 27:             break;
  2023   0016B2  EFD4  F00B         	goto	l365
  2024   0016B6                     l3050:
  2025                           
  2026                           ;instructions.c: 29:             LightBlue(mL, mR);
  2027   0016B6  C02D  F028         	movff	executeInstruction@mL,LightBlue@mL
  2028   0016BA  C02E  F029         	movff	executeInstruction@mR,LightBlue@mR
  2029   0016BE  EC99  F015         	call	_LightBlue	;wreg free
  2030                           
  2031                           ;instructions.c: 30:             break;
  2032   0016C2  EFD4  F00B         	goto	l365
  2033   0016C6                     l3052:
  2034                           
  2035                           ;instructions.c: 32:             White(mL, mR);
  2036   0016C6  C02D  F02B         	movff	executeInstruction@mL,White@mL
  2037   0016CA  C02E  F02C         	movff	executeInstruction@mR,White@mR
  2038   0016CE  EC85  F015         	call	_White	;wreg free
  2039                           
  2040                           ;instructions.c: 33:             break;
  2041   0016D2  EFD4  F00B         	goto	l365
  2042   0016D6                     l3054:
  2043                           
  2044                           ;instructions.c: 35:             Black(mL, mR);
  2045   0016D6  C02D  F02B         	movff	executeInstruction@mL,Black@mL
  2046   0016DA  C02E  F02C         	movff	executeInstruction@mR,Black@mR
  2047   0016DE  ECA3  F015         	call	_Black	;wreg free
  2048                           
  2049                           ;instructions.c: 36:             break;
  2050   0016E2  EFD4  F00B         	goto	l365
  2051   0016E6                     l3056:
  2052                           
  2053                           ;instructions.c: 38:             reverseYellow(mL, mR);
  2054   0016E6  C02D  F02B         	movff	executeInstruction@mL,reverseYellow@mL
  2055   0016EA  C02E  F02C         	movff	executeInstruction@mR,reverseYellow@mR
  2056   0016EE  EC7E  F014         	call	_reverseYellow	;wreg free
  2057                           
  2058                           ;instructions.c: 39:             break;
  2059   0016F2  EFD4  F00B         	goto	l365
  2060   0016F6                     l3058:
  2061                           
  2062                           ;instructions.c: 41:             reversePink(mL, mR);
  2063   0016F6  C02D  F02B         	movff	executeInstruction@mL,reversePink@mL
  2064   0016FA  C02E  F02C         	movff	executeInstruction@mR,reversePink@mR
  2065   0016FE  EC97  F014         	call	_reversePink	;wreg free
  2066                           
  2067                           ;instructions.c: 42:             break;
  2068   001702  EFD4  F00B         	goto	l365
  2069   001706                     l3060:
  2070                           
  2071                           ;instructions.c: 44:             reverseOrange(mL, mR);
  2072   001706  C02D  F028         	movff	executeInstruction@mL,reverseOrange@mL
  2073   00170A  C02E  F029         	movff	executeInstruction@mR,reverseOrange@mR
  2074   00170E  EC71  F015         	call	_reverseOrange	;wreg free
  2075                           
  2076                           ;instructions.c: 45:             break;
  2077   001712  EFD4  F00B         	goto	l365
  2078   001716                     l3062:
  2079                           
  2080                           ;instructions.c: 47:             reverseLightBlue(mL, mR);
  2081   001716  C02D  F028         	movff	executeInstruction@mL,reverseLightBlue@mL
  2082   00171A  C02E  F029         	movff	executeInstruction@mR,reverseLightBlue@mR
  2083   00171E  EC7B  F015         	call	_reverseLightBlue	;wreg free
  2084                           
  2085                           ;instructions.c: 48:             break;
  2086   001722  EFD4  F00B         	goto	l365
  2087   001726                     l3066:
  2088   001726  502F               	movf	executeInstruction@colourCode^0,w,c
  2089   001728  6E30               	movwf	??_executeInstruction^0,c
  2090   00172A  6A31               	clrf	(??_executeInstruction+1)^0,c
  2091                           
  2092                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2093                           ; Switch size 1, requested type "simple"
  2094                           ; Number of cases is 1, Range of values is 0 to 0
  2095                           ; switch strategies available:
  2096                           ; Name         Instructions Cycles
  2097                           ; simple_byte            4     3 (average)
  2098                           ;	Chosen strategy is simple_byte
  2099   00172C  5031               	movf	(??_executeInstruction+1)^0,w,c
  2100   00172E  0A00               	xorlw	0	; case 0
  2101   001730  B4D8               	btfsc	status,2,c
  2102   001732  EF9D  F00B         	goto	l3620
  2103   001736  EFD4  F00B         	goto	l365
  2104   00173A                     l3620:
  2105                           
  2106                           ; Switch size 1, requested type "simple"
  2107                           ; Number of cases is 13, Range of values is 0 to 12
  2108                           ; switch strategies available:
  2109                           ; Name         Instructions Cycles
  2110                           ; simple_byte           40    21 (average)
  2111                           ;	Chosen strategy is simple_byte
  2112   00173A  5030               	movf	??_executeInstruction^0,w,c
  2113   00173C  0A00               	xorlw	0	; case 0
  2114   00173E  B4D8               	btfsc	status,2,c
  2115   001740  EF2B  F00B         	goto	l3038
  2116   001744  0A01               	xorlw	1	; case 1
  2117   001746  B4D8               	btfsc	status,2,c
  2118   001748  EF33  F00B         	goto	l3040
  2119   00174C  0A03               	xorlw	3	; case 2
  2120   00174E  B4D8               	btfsc	status,2,c
  2121   001750  EF3B  F00B         	goto	l3042
  2122   001754  0A01               	xorlw	1	; case 3
  2123   001756  B4D8               	btfsc	status,2,c
  2124   001758  EF43  F00B         	goto	l3044
  2125   00175C  0A07               	xorlw	7	; case 4
  2126   00175E  B4D8               	btfsc	status,2,c
  2127   001760  EF4B  F00B         	goto	l3046
  2128   001764  0A01               	xorlw	1	; case 5
  2129   001766  B4D8               	btfsc	status,2,c
  2130   001768  EF53  F00B         	goto	l3048
  2131   00176C  0A03               	xorlw	3	; case 6
  2132   00176E  B4D8               	btfsc	status,2,c
  2133   001770  EF5B  F00B         	goto	l3050
  2134   001774  0A01               	xorlw	1	; case 7
  2135   001776  B4D8               	btfsc	status,2,c
  2136   001778  EF63  F00B         	goto	l3052
  2137   00177C  0A0F               	xorlw	15	; case 8
  2138   00177E  B4D8               	btfsc	status,2,c
  2139   001780  EF6B  F00B         	goto	l3054
  2140   001784  0A01               	xorlw	1	; case 9
  2141   001786  B4D8               	btfsc	status,2,c
  2142   001788  EF73  F00B         	goto	l3056
  2143   00178C  0A03               	xorlw	3	; case 10
  2144   00178E  B4D8               	btfsc	status,2,c
  2145   001790  EF7B  F00B         	goto	l3058
  2146   001794  0A01               	xorlw	1	; case 11
  2147   001796  B4D8               	btfsc	status,2,c
  2148   001798  EF83  F00B         	goto	l3060
  2149   00179C  0A07               	xorlw	7	; case 12
  2150   00179E  B4D8               	btfsc	status,2,c
  2151   0017A0  EF8B  F00B         	goto	l3062
  2152   0017A4  EFD4  F00B         	goto	l365
  2153   0017A8                     l365:
  2154   0017A8  0012               	return		;funcret
  2155   0017AA                     __end_of_executeInstruction:
  2156                           	callstack 0
  2157                           
  2158 ;; *************** function _reverseYellow *****************
  2159 ;; Defined at:
  2160 ;;		line 96 in file "instructions.c"
  2161 ;; Parameters:    Size  Location     Type
  2162 ;;  mL              1   42[COMRAM] PTR struct DC_motor
  2163 ;;		 -> main@motorL(9), 
  2164 ;;  mR              1   43[COMRAM] PTR struct DC_motor
  2165 ;;		 -> main@motorR(9), 
  2166 ;; Auto vars:     Size  Location     Type
  2167 ;;		None
  2168 ;; Return value:  Size  Location     Type
  2169 ;;                  1    wreg      void 
  2170 ;; Registers used:
  2171 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2172 ;; Tracked objects:
  2173 ;;		On entry : 0/0
  2174 ;;		On exit  : 0/0
  2175 ;;		Unchanged: 0/0
  2176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2177 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2178 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2179 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2180 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2181 ;;Total ram usage:        2 bytes
  2182 ;; Hardware stack levels used: 1
  2183 ;; Hardware stack levels required when called: 9
  2184 ;; This function calls:
  2185 ;;		_trundleSquare
  2186 ;;		_turn180
  2187 ;;		_turnLeft
  2188 ;; This function is called by:
  2189 ;;		_executeInstruction
  2190 ;; This function uses a non-reentrant model
  2191 ;;
  2192                           
  2193                           	psect	text6
  2194   0028FC                     __ptext6:
  2195                           	callstack 0
  2196   0028FC                     _reverseYellow:
  2197                           	callstack 19
  2198   0028FC                     
  2199                           ;instructions.c: 97:     turnLeft(mL, mR, turnLeftPower);
  2200   0028FC  C02B  F01C         	movff	reverseYellow@mL,turnLeft@mL
  2201   002900  C02C  F01D         	movff	reverseYellow@mR,turnLeft@mR
  2202   002904  C04C  F01E         	movff	_turnLeftPower,turnLeft@power
  2203   002908  EC62  F00E         	call	_turnLeft	;wreg free
  2204   00290C  C02B  F01C         	movff	reverseYellow@mL,trundleSquare@mL
  2205   002910  C02C  F01D         	movff	reverseYellow@mR,trundleSquare@mR
  2206   002914  0E10               	movlw	16
  2207   002916  6E1E               	movwf	trundleSquare@square^0,c
  2208   002918  0E00               	movlw	0
  2209   00291A  6E1F               	movwf	trundleSquare@reverse^0,c
  2210   00291C  ECF8  F00E         	call	_trundleSquare	;wreg free
  2211                           
  2212                           ;instructions.c: 99:     turn180(mL, mR);
  2213   002920  C02B  F027         	movff	reverseYellow@mL,turn180@mL
  2214   002924  C02C  F028         	movff	reverseYellow@mR,turn180@mR
  2215   002928  EC51  F013         	call	_turn180	;wreg free
  2216   00292C  0012               	return		;funcret
  2217   00292E                     __end_of_reverseYellow:
  2218                           	callstack 0
  2219                           
  2220 ;; *************** function _reversePink *****************
  2221 ;; Defined at:
  2222 ;;		line 102 in file "instructions.c"
  2223 ;; Parameters:    Size  Location     Type
  2224 ;;  mL              1   42[COMRAM] PTR struct DC_motor
  2225 ;;		 -> main@motorL(9), 
  2226 ;;  mR              1   43[COMRAM] PTR struct DC_motor
  2227 ;;		 -> main@motorR(9), 
  2228 ;; Auto vars:     Size  Location     Type
  2229 ;;		None
  2230 ;; Return value:  Size  Location     Type
  2231 ;;                  1    wreg      void 
  2232 ;; Registers used:
  2233 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2234 ;; Tracked objects:
  2235 ;;		On entry : 0/0
  2236 ;;		On exit  : 0/0
  2237 ;;		Unchanged: 0/0
  2238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2239 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2240 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2241 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2242 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2243 ;;Total ram usage:        2 bytes
  2244 ;; Hardware stack levels used: 1
  2245 ;; Hardware stack levels required when called: 9
  2246 ;; This function calls:
  2247 ;;		_trundleSquare
  2248 ;;		_turn180
  2249 ;;		_turnRight
  2250 ;; This function is called by:
  2251 ;;		_executeInstruction
  2252 ;; This function uses a non-reentrant model
  2253 ;;
  2254                           
  2255                           	psect	text7
  2256   00292E                     __ptext7:
  2257                           	callstack 0
  2258   00292E                     _reversePink:
  2259                           	callstack 19
  2260   00292E                     
  2261                           ;instructions.c: 103:     turnRight(mL, mR, turnRightPower);
  2262   00292E  C02B  F01C         	movff	reversePink@mL,turnRight@mL
  2263   002932  C02C  F01D         	movff	reversePink@mR,turnRight@mR
  2264   002936  C04B  F01E         	movff	_turnRightPower,turnRight@power
  2265   00293A  ECCC  F00D         	call	_turnRight	;wreg free
  2266   00293E  C02B  F01C         	movff	reversePink@mL,trundleSquare@mL
  2267   002942  C02C  F01D         	movff	reversePink@mR,trundleSquare@mR
  2268   002946  0E10               	movlw	16
  2269   002948  6E1E               	movwf	trundleSquare@square^0,c
  2270   00294A  0E00               	movlw	0
  2271   00294C  6E1F               	movwf	trundleSquare@reverse^0,c
  2272   00294E  ECF8  F00E         	call	_trundleSquare	;wreg free
  2273                           
  2274                           ;instructions.c: 105:     turn180(mL, mR);
  2275   002952  C02B  F027         	movff	reversePink@mL,turn180@mL
  2276   002956  C02C  F028         	movff	reversePink@mR,turn180@mR
  2277   00295A  EC51  F013         	call	_turn180	;wreg free
  2278   00295E  0012               	return		;funcret
  2279   002960                     __end_of_reversePink:
  2280                           	callstack 0
  2281                           
  2282 ;; *************** function _reverseOrange *****************
  2283 ;; Defined at:
  2284 ;;		line 109 in file "instructions.c"
  2285 ;; Parameters:    Size  Location     Type
  2286 ;;  mL              1   39[COMRAM] PTR struct DC_motor
  2287 ;;		 -> main@motorL(9), 
  2288 ;;  mR              1   40[COMRAM] PTR struct DC_motor
  2289 ;;		 -> main@motorR(9), 
  2290 ;; Auto vars:     Size  Location     Type
  2291 ;;		None
  2292 ;; Return value:  Size  Location     Type
  2293 ;;                  1    wreg      void 
  2294 ;; Registers used:
  2295 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2296 ;; Tracked objects:
  2297 ;;		On entry : 0/0
  2298 ;;		On exit  : 0/0
  2299 ;;		Unchanged: 0/0
  2300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2301 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2302 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2303 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2304 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2305 ;;Total ram usage:        2 bytes
  2306 ;; Hardware stack levels used: 1
  2307 ;; Hardware stack levels required when called: 8
  2308 ;; This function calls:
  2309 ;;		_turnRight135
  2310 ;; This function is called by:
  2311 ;;		_executeInstruction
  2312 ;; This function uses a non-reentrant model
  2313 ;;
  2314                           
  2315                           	psect	text8
  2316   002AE2                     __ptext8:
  2317                           	callstack 0
  2318   002AE2                     _reverseOrange:
  2319                           	callstack 20
  2320   002AE2                     
  2321                           ;instructions.c: 110:     turnRight135(mL, mR, turnRightPower);
  2322   002AE2  C028  F01C         	movff	reverseOrange@mL,turnRight135@mL
  2323   002AE6  C029  F01D         	movff	reverseOrange@mR,turnRight135@mR
  2324   002AEA  C04B  F01E         	movff	_turnRightPower,turnRight135@turnRightPower
  2325   002AEE  6A1F               	clrf	(turnRight135@turnRightPower+1)^0,c
  2326   002AF0  ECD5  F00B         	call	_turnRight135	;wreg free
  2327   002AF4  0012               	return		;funcret
  2328   002AF6                     __end_of_reverseOrange:
  2329                           	callstack 0
  2330                           
  2331 ;; *************** function _reverseLightBlue *****************
  2332 ;; Defined at:
  2333 ;;		line 113 in file "instructions.c"
  2334 ;; Parameters:    Size  Location     Type
  2335 ;;  mL              1   39[COMRAM] PTR struct DC_motor
  2336 ;;		 -> main@motorL(9), 
  2337 ;;  mR              1   40[COMRAM] PTR struct DC_motor
  2338 ;;		 -> main@motorR(9), 
  2339 ;; Auto vars:     Size  Location     Type
  2340 ;;		None
  2341 ;; Return value:  Size  Location     Type
  2342 ;;                  1    wreg      void 
  2343 ;; Registers used:
  2344 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2345 ;; Tracked objects:
  2346 ;;		On entry : 0/0
  2347 ;;		On exit  : 0/0
  2348 ;;		Unchanged: 0/0
  2349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2350 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2351 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2352 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2353 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2354 ;;Total ram usage:        2 bytes
  2355 ;; Hardware stack levels used: 1
  2356 ;; Hardware stack levels required when called: 8
  2357 ;; This function calls:
  2358 ;;		_turnLeft135
  2359 ;; This function is called by:
  2360 ;;		_executeInstruction
  2361 ;; This function uses a non-reentrant model
  2362 ;;
  2363                           
  2364                           	psect	text9
  2365   002AF6                     __ptext9:
  2366                           	callstack 0
  2367   002AF6                     _reverseLightBlue:
  2368                           	callstack 20
  2369   002AF6                     
  2370                           ;instructions.c: 114:     turnLeft135(mL, mR, turnLeftPower);
  2371   002AF6  C028  F01C         	movff	reverseLightBlue@mL,turnLeft135@mL
  2372   002AFA  C029  F01D         	movff	reverseLightBlue@mR,turnLeft135@mR
  2373   002AFE  C04C  F01E         	movff	_turnLeftPower,turnLeft135@turnLeftPower
  2374   002B02  6A1F               	clrf	(turnLeft135@turnLeftPower+1)^0,c
  2375   002B04  EC78  F00A         	call	_turnLeft135	;wreg free
  2376   002B08  0012               	return		;funcret
  2377   002B0A                     __end_of_reverseLightBlue:
  2378                           	callstack 0
  2379                           
  2380 ;; *************** function _Yellow *****************
  2381 ;; Defined at:
  2382 ;;		line 65 in file "instructions.c"
  2383 ;; Parameters:    Size  Location     Type
  2384 ;;  mL              1   39[COMRAM] PTR struct DC_motor
  2385 ;;		 -> main@motorL(9), 
  2386 ;;  mR              1   40[COMRAM] PTR struct DC_motor
  2387 ;;		 -> main@motorR(9), 
  2388 ;; Auto vars:     Size  Location     Type
  2389 ;;		None
  2390 ;; Return value:  Size  Location     Type
  2391 ;;                  1    wreg      void 
  2392 ;; Registers used:
  2393 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2394 ;; Tracked objects:
  2395 ;;		On entry : 0/0
  2396 ;;		On exit  : 0/0
  2397 ;;		Unchanged: 0/0
  2398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2399 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2400 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2401 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2402 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2403 ;;Total ram usage:        2 bytes
  2404 ;; Hardware stack levels used: 1
  2405 ;; Hardware stack levels required when called: 8
  2406 ;; This function calls:
  2407 ;;		_trundleSquare
  2408 ;;		_turnRight
  2409 ;; This function is called by:
  2410 ;;		_executeInstruction
  2411 ;; This function uses a non-reentrant model
  2412 ;;
  2413                           
  2414                           	psect	text10
  2415   002A04                     __ptext10:
  2416                           	callstack 0
  2417   002A04                     _Yellow:
  2418                           	callstack 20
  2419   002A04  C028  F01C         	movff	Yellow@mL,trundleSquare@mL
  2420   002A08  C029  F01D         	movff	Yellow@mR,trundleSquare@mR
  2421   002A0C  0E10               	movlw	16
  2422   002A0E  6E1E               	movwf	trundleSquare@square^0,c
  2423   002A10  0E01               	movlw	1
  2424   002A12  6E1F               	movwf	trundleSquare@reverse^0,c
  2425   002A14  ECF8  F00E         	call	_trundleSquare	;wreg free
  2426                           
  2427                           ;instructions.c: 67:     turnRight(mL, mR, turnRightPower);
  2428   002A18  C028  F01C         	movff	Yellow@mL,turnRight@mL
  2429   002A1C  C029  F01D         	movff	Yellow@mR,turnRight@mR
  2430   002A20  C04B  F01E         	movff	_turnRightPower,turnRight@power
  2431   002A24  ECCC  F00D         	call	_turnRight	;wreg free
  2432   002A28  0012               	return		;funcret
  2433   002A2A                     __end_of_Yellow:
  2434                           	callstack 0
  2435                           
  2436 ;; *************** function _White *****************
  2437 ;; Defined at:
  2438 ;;		line 84 in file "instructions.c"
  2439 ;; Parameters:    Size  Location     Type
  2440 ;;  mL              1   42[COMRAM] PTR struct DC_motor
  2441 ;;		 -> main@motorL(9), 
  2442 ;;  mR              1   43[COMRAM] PTR struct DC_motor
  2443 ;;		 -> main@motorR(9), 
  2444 ;; Auto vars:     Size  Location     Type
  2445 ;;		None
  2446 ;; Return value:  Size  Location     Type
  2447 ;;                  1    wreg      void 
  2448 ;; Registers used:
  2449 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2450 ;; Tracked objects:
  2451 ;;		On entry : 0/0
  2452 ;;		On exit  : 0/0
  2453 ;;		Unchanged: 0/0
  2454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2455 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2456 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2458 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2459 ;;Total ram usage:        2 bytes
  2460 ;; Hardware stack levels used: 1
  2461 ;; Hardware stack levels required when called: 9
  2462 ;; This function calls:
  2463 ;;		_turn180
  2464 ;; This function is called by:
  2465 ;;		_executeInstruction
  2466 ;; This function uses a non-reentrant model
  2467 ;;
  2468                           
  2469                           	psect	text11
  2470   002B0A                     __ptext11:
  2471                           	callstack 0
  2472   002B0A                     _White:
  2473                           	callstack 19
  2474   002B0A                     
  2475                           ;instructions.c: 85:     reverseRouteFlag=1;
  2476   002B0A  0E01               	movlw	1
  2477   002B0C  0100               	movlb	0	; () banked
  2478   002B0E  6F8A               	movwf	_reverseRouteFlag& (0+255),b
  2479   002B10                     
  2480                           ; BSR set to: 0
  2481                           ;instructions.c: 86:     turn180(mL, mR);
  2482   002B10  C02B  F027         	movff	White@mL,turn180@mL
  2483   002B14  C02C  F028         	movff	White@mR,turn180@mR
  2484   002B18  EC51  F013         	call	_turn180	;wreg free
  2485   002B1C  0012               	return		;funcret
  2486   002B1E                     __end_of_White:
  2487                           	callstack 0
  2488                           
  2489 ;; *************** function _Red *****************
  2490 ;; Defined at:
  2491 ;;		line 53 in file "instructions.c"
  2492 ;; Parameters:    Size  Location     Type
  2493 ;;  mL              1   38[COMRAM] PTR struct DC_motor
  2494 ;;		 -> main@motorL(9), 
  2495 ;;  mR              1   39[COMRAM] PTR struct DC_motor
  2496 ;;		 -> main@motorR(9), 
  2497 ;; Auto vars:     Size  Location     Type
  2498 ;;		None
  2499 ;; Return value:  Size  Location     Type
  2500 ;;                  1    wreg      void 
  2501 ;; Registers used:
  2502 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2503 ;; Tracked objects:
  2504 ;;		On entry : 0/0
  2505 ;;		On exit  : 0/0
  2506 ;;		Unchanged: 0/0
  2507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2508 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2509 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2510 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2511 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2512 ;;Total ram usage:        2 bytes
  2513 ;; Hardware stack levels used: 1
  2514 ;; Hardware stack levels required when called: 8
  2515 ;; This function calls:
  2516 ;;		_turnRight
  2517 ;; This function is called by:
  2518 ;;		_executeInstruction
  2519 ;; This function uses a non-reentrant model
  2520 ;;
  2521                           
  2522                           	psect	text12
  2523   002B6E                     __ptext12:
  2524                           	callstack 0
  2525   002B6E                     _Red:
  2526                           	callstack 20
  2527   002B6E                     
  2528                           ;instructions.c: 54:     turnRight(mL, mR, turnRightPower);
  2529   002B6E  C027  F01C         	movff	Red@mL,turnRight@mL
  2530   002B72  C028  F01D         	movff	Red@mR,turnRight@mR
  2531   002B76  C04B  F01E         	movff	_turnRightPower,turnRight@power
  2532   002B7A  ECCC  F00D         	call	_turnRight	;wreg free
  2533   002B7E  0012               	return		;funcret
  2534   002B80                     __end_of_Red:
  2535                           	callstack 0
  2536                           
  2537 ;; *************** function _turnRight *****************
  2538 ;; Defined at:
  2539 ;;		line 193 in file "dc_motor.c"
  2540 ;; Parameters:    Size  Location     Type
  2541 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  2542 ;;		 -> main@motorL(9), 
  2543 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  2544 ;;		 -> main@motorR(9), 
  2545 ;;  power           1   29[COMRAM] unsigned char 
  2546 ;; Auto vars:     Size  Location     Type
  2547 ;;  i               2   36[COMRAM] int 
  2548 ;;  i               2   34[COMRAM] int 
  2549 ;;  maxpower        2   32[COMRAM] int 
  2550 ;; Return value:  Size  Location     Type
  2551 ;;                  1    wreg      void 
  2552 ;; Registers used:
  2553 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2554 ;; Tracked objects:
  2555 ;;		On entry : 0/0
  2556 ;;		On exit  : 0/0
  2557 ;;		Unchanged: 0/0
  2558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2559 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2560 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2561 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2562 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2563 ;;Total ram usage:       11 bytes
  2564 ;; Hardware stack levels used: 1
  2565 ;; Hardware stack levels required when called: 7
  2566 ;; This function calls:
  2567 ;;		_setMotorPWM
  2568 ;;		_stop
  2569 ;; This function is called by:
  2570 ;;		_Red
  2571 ;;		_Yellow
  2572 ;;		_reversePink
  2573 ;;		_rightCali
  2574 ;; This function uses a non-reentrant model
  2575 ;;
  2576                           
  2577                           	psect	text13
  2578   001B98                     __ptext13:
  2579                           	callstack 0
  2580   001B98                     _turnRight:
  2581                           	callstack 22
  2582   001B98                     
  2583                           ;dc_motor.c: 193: void turnRight(DC_motor *mL, DC_motor *mR, char power);dc_motor.c: 194
      +                          : {;dc_motor.c: 196:     if (mL->power != 0 || mR->power != 0) {
  2584   001B98  501C               	movf	turnRight@mL^0,w,c
  2585   001B9A  6ED9               	movwf	fsr2l,c
  2586   001B9C  6ADA               	clrf	fsr2h,c
  2587   001B9E  50DF               	movf	indf2,w,c
  2588   001BA0  A4D8               	btfss	status,2,c
  2589   001BA2  EFD5  F00D         	goto	u1181
  2590   001BA6  EFD7  F00D         	goto	u1180
  2591   001BAA                     u1181:
  2592   001BAA  EFE2  F00D         	goto	l2686
  2593   001BAE                     u1180:
  2594   001BAE  501D               	movf	turnRight@mR^0,w,c
  2595   001BB0  6ED9               	movwf	fsr2l,c
  2596   001BB2  6ADA               	clrf	fsr2h,c
  2597   001BB4  50DF               	movf	indf2,w,c
  2598   001BB6  B4D8               	btfsc	status,2,c
  2599   001BB8  EFE0  F00D         	goto	u1191
  2600   001BBC  EFE2  F00D         	goto	u1190
  2601   001BC0                     u1191:
  2602   001BC0  EFE8  F00D         	goto	l2688
  2603   001BC4                     u1190:
  2604   001BC4                     l2686:
  2605                           
  2606                           ;dc_motor.c: 197:         stop(mL, mR);
  2607   001BC4  C01C  F015         	movff	turnRight@mL,stop@mL
  2608   001BC8  C01D  F016         	movff	turnRight@mR,stop@mR
  2609   001BCC  EC1C  F013         	call	_stop	;wreg free
  2610   001BD0                     l2688:
  2611                           
  2612                           ;dc_motor.c: 201:     mL->direction = 1;
  2613   001BD0  501C               	movf	turnRight@mL^0,w,c
  2614   001BD2  6ED9               	movwf	fsr2l,c
  2615   001BD4  6ADA               	clrf	fsr2h,c
  2616   001BD6  0E01               	movlw	1
  2617   001BD8  26D9               	addwf	fsr2l,f,c
  2618   001BDA  0E01               	movlw	1
  2619   001BDC  6EDF               	movwf	indf2,c
  2620   001BDE                     
  2621                           ;dc_motor.c: 202:     mR->direction = 0;
  2622   001BDE  501D               	movf	turnRight@mR^0,w,c
  2623   001BE0  6ED9               	movwf	fsr2l,c
  2624   001BE2  6ADA               	clrf	fsr2h,c
  2625   001BE4  0E01               	movlw	1
  2626   001BE6  26D9               	addwf	fsr2l,f,c
  2627   001BE8  6ADF               	clrf	indf2,c
  2628   001BEA                     
  2629                           ;dc_motor.c: 203:     int maxpower = power;
  2630   001BEA  C01E  F021         	movff	turnRight@power,turnRight@maxpower
  2631   001BEE  6A22               	clrf	(turnRight@maxpower+1)^0,c
  2632   001BF0                     
  2633                           ;dc_motor.c: 206:     for (int i = 0; i < maxpower; i++) {
  2634   001BF0  0E00               	movlw	0
  2635   001BF2  6E24               	movwf	(turnRight@i+1)^0,c
  2636   001BF4  0E00               	movlw	0
  2637   001BF6  6E23               	movwf	turnRight@i^0,c
  2638   001BF8  EF1A  F00E         	goto	l2706
  2639   001BFC                     l2696:
  2640                           
  2641                           ;dc_motor.c: 207:         mL->power = i;
  2642   001BFC  501C               	movf	turnRight@mL^0,w,c
  2643   001BFE  6ED9               	movwf	fsr2l,c
  2644   001C00  6ADA               	clrf	fsr2h,c
  2645   001C02  C023  FFDF         	movff	turnRight@i,indf2
  2646                           
  2647                           ;dc_motor.c: 208:         mR->power = i;
  2648   001C06  501D               	movf	turnRight@mR^0,w,c
  2649   001C08  6ED9               	movwf	fsr2l,c
  2650   001C0A  6ADA               	clrf	fsr2h,c
  2651   001C0C  C023  FFDF         	movff	turnRight@i,indf2
  2652   001C10                     
  2653                           ;dc_motor.c: 209:         setMotorPWM(mL);
  2654   001C10  C01C  F010         	movff	turnRight@mL,setMotorPWM@m
  2655   001C14  EC80  F00C         	call	_setMotorPWM	;wreg free
  2656   001C18                     
  2657                           ;dc_motor.c: 210:         setMotorPWM(mR);
  2658   001C18  C01D  F010         	movff	turnRight@mR,setMotorPWM@m
  2659   001C1C  EC80  F00C         	call	_setMotorPWM	;wreg free
  2660   001C20                     
  2661                           ;dc_motor.c: 211:         _delay((unsigned long)((12)*(64000000/4000.0)));
  2662   001C20  0EFA               	movlw	250
  2663   001C22  6E1F               	movwf	??_turnRight^0,c
  2664   001C24  0E58               	movlw	88
  2665   001C26                     u2017:
  2666   001C26  2EE8               	decfsz	wreg,f,c
  2667   001C28  D7FE               	bra	u2017
  2668   001C2A  2E1F               	decfsz	??_turnRight^0,f,c
  2669   001C2C  D7FC               	bra	u2017
  2670   001C2E  D000               	nop2	
  2671   001C30                     
  2672                           ;dc_motor.c: 213:     }
  2673   001C30  4A23               	infsnz	turnRight@i^0,f,c
  2674   001C32  2A24               	incf	(turnRight@i+1)^0,f,c
  2675   001C34                     l2706:
  2676   001C34  5021               	movf	turnRight@maxpower^0,w,c
  2677   001C36  5C23               	subwf	turnRight@i^0,w,c
  2678   001C38  5024               	movf	(turnRight@i+1)^0,w,c
  2679   001C3A  0A80               	xorlw	128
  2680   001C3C  6E1F               	movwf	??_turnRight^0,c
  2681   001C3E  5022               	movf	(turnRight@maxpower+1)^0,w,c
  2682   001C40  0A80               	xorlw	128
  2683   001C42  581F               	subwfb	??_turnRight^0,w,c
  2684   001C44  A0D8               	btfss	status,0,c
  2685   001C46  EF27  F00E         	goto	u1201
  2686   001C4A  EF29  F00E         	goto	u1200
  2687   001C4E                     u1201:
  2688   001C4E  EFFE  F00D         	goto	l2696
  2689   001C52                     u1200:
  2690   001C52                     
  2691                           ;dc_motor.c: 215:     _delay((unsigned long)((250)*(64000000/4000.0)));
  2692   001C52  0E15               	movlw	21
  2693   001C54  6E20               	movwf	(??_turnRight+1)^0,c
  2694   001C56  0E4B               	movlw	75
  2695   001C58  6E1F               	movwf	??_turnRight^0,c
  2696   001C5A  0EBE               	movlw	190
  2697   001C5C                     u2027:
  2698   001C5C  2EE8               	decfsz	wreg,f,c
  2699   001C5E  D7FE               	bra	u2027
  2700   001C60  2E1F               	decfsz	??_turnRight^0,f,c
  2701   001C62  D7FC               	bra	u2027
  2702   001C64  2E20               	decfsz	(??_turnRight+1)^0,f,c
  2703   001C66  D7FA               	bra	u2027
  2704   001C68  D000               	nop2	
  2705   001C6A                     
  2706                           ;dc_motor.c: 218:     for (int i = maxpower; i >= 0; i--) {
  2707   001C6A  C021  F025         	movff	turnRight@maxpower,turnRight@i_2092
  2708   001C6E  C022  F026         	movff	turnRight@maxpower+1,turnRight@i_2092+1
  2709   001C72                     l2712:
  2710   001C72  BE26               	btfsc	(turnRight@i_2092+1)^0,7,c
  2711   001C74  EF40  F00E         	goto	u1210
  2712   001C78  EF3E  F00E         	goto	u1211
  2713   001C7C                     u1211:
  2714   001C7C  EF42  F00E         	goto	l2716
  2715   001C80                     u1210:
  2716   001C80  EF61  F00E         	goto	l546
  2717   001C84                     l2716:
  2718                           
  2719                           ;dc_motor.c: 219:         mL->power = i;
  2720   001C84  501C               	movf	turnRight@mL^0,w,c
  2721   001C86  6ED9               	movwf	fsr2l,c
  2722   001C88  6ADA               	clrf	fsr2h,c
  2723   001C8A  C025  FFDF         	movff	turnRight@i_2092,indf2
  2724                           
  2725                           ;dc_motor.c: 220:         mR->power = i;
  2726   001C8E  501D               	movf	turnRight@mR^0,w,c
  2727   001C90  6ED9               	movwf	fsr2l,c
  2728   001C92  6ADA               	clrf	fsr2h,c
  2729   001C94  C025  FFDF         	movff	turnRight@i_2092,indf2
  2730   001C98                     
  2731                           ;dc_motor.c: 221:         setMotorPWM(mL);
  2732   001C98  C01C  F010         	movff	turnRight@mL,setMotorPWM@m
  2733   001C9C  EC80  F00C         	call	_setMotorPWM	;wreg free
  2734   001CA0                     
  2735                           ;dc_motor.c: 222:         setMotorPWM(mR);
  2736   001CA0  C01D  F010         	movff	turnRight@mR,setMotorPWM@m
  2737   001CA4  EC80  F00C         	call	_setMotorPWM	;wreg free
  2738   001CA8                     
  2739                           ;dc_motor.c: 223:         _delay((unsigned long)((5)*(64000000/4000.0)));
  2740   001CA8  0E68               	movlw	104
  2741   001CAA  6E1F               	movwf	??_turnRight^0,c
  2742   001CAC  0EE4               	movlw	228
  2743   001CAE                     u2037:
  2744   001CAE  2EE8               	decfsz	wreg,f,c
  2745   001CB0  D7FE               	bra	u2037
  2746   001CB2  2E1F               	decfsz	??_turnRight^0,f,c
  2747   001CB4  D7FC               	bra	u2037
  2748   001CB6  D000               	nop2	
  2749   001CB8                     
  2750                           ;dc_motor.c: 225:     }
  2751   001CB8  0625               	decf	turnRight@i_2092^0,f,c
  2752   001CBA  A0D8               	btfss	status,0,c
  2753   001CBC  0626               	decf	(turnRight@i_2092+1)^0,f,c
  2754   001CBE  EF39  F00E         	goto	l2712
  2755   001CC2                     l546:
  2756   001CC2  0012               	return		;funcret
  2757   001CC4                     __end_of_turnRight:
  2758                           	callstack 0
  2759                           
  2760 ;; *************** function _Pink *****************
  2761 ;; Defined at:
  2762 ;;		line 70 in file "instructions.c"
  2763 ;; Parameters:    Size  Location     Type
  2764 ;;  mL              1   39[COMRAM] PTR struct DC_motor
  2765 ;;		 -> main@motorL(9), 
  2766 ;;  mR              1   40[COMRAM] PTR struct DC_motor
  2767 ;;		 -> main@motorR(9), 
  2768 ;; Auto vars:     Size  Location     Type
  2769 ;;		None
  2770 ;; Return value:  Size  Location     Type
  2771 ;;                  1    wreg      void 
  2772 ;; Registers used:
  2773 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2774 ;; Tracked objects:
  2775 ;;		On entry : 0/0
  2776 ;;		On exit  : 0/0
  2777 ;;		Unchanged: 0/0
  2778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2779 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2780 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2781 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2782 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2783 ;;Total ram usage:        2 bytes
  2784 ;; Hardware stack levels used: 1
  2785 ;; Hardware stack levels required when called: 8
  2786 ;; This function calls:
  2787 ;;		_trundleSquare
  2788 ;;		_turnLeft
  2789 ;; This function is called by:
  2790 ;;		_executeInstruction
  2791 ;; This function uses a non-reentrant model
  2792 ;;
  2793                           
  2794                           	psect	text14
  2795   002A2A                     __ptext14:
  2796                           	callstack 0
  2797   002A2A                     _Pink:
  2798                           	callstack 20
  2799   002A2A  C028  F01C         	movff	Pink@mL,trundleSquare@mL
  2800   002A2E  C029  F01D         	movff	Pink@mR,trundleSquare@mR
  2801   002A32  0E10               	movlw	16
  2802   002A34  6E1E               	movwf	trundleSquare@square^0,c
  2803   002A36  0E01               	movlw	1
  2804   002A38  6E1F               	movwf	trundleSquare@reverse^0,c
  2805   002A3A  ECF8  F00E         	call	_trundleSquare	;wreg free
  2806                           
  2807                           ;instructions.c: 72:     turnLeft(mL, mR, turnLeftPower);
  2808   002A3E  C028  F01C         	movff	Pink@mL,turnLeft@mL
  2809   002A42  C029  F01D         	movff	Pink@mR,turnLeft@mR
  2810   002A46  C04C  F01E         	movff	_turnLeftPower,turnLeft@power
  2811   002A4A  EC62  F00E         	call	_turnLeft	;wreg free
  2812   002A4E  0012               	return		;funcret
  2813   002A50                     __end_of_Pink:
  2814                           	callstack 0
  2815                           
  2816 ;; *************** function _trundleSquare *****************
  2817 ;; Defined at:
  2818 ;;		line 461 in file "dc_motor.c"
  2819 ;; Parameters:    Size  Location     Type
  2820 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  2821 ;;		 -> main@motorL(9), 
  2822 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  2823 ;;		 -> main@motorR(9), 
  2824 ;;  square          1   29[COMRAM] unsigned char 
  2825 ;;  reverse         1   30[COMRAM] unsigned char 
  2826 ;; Auto vars:     Size  Location     Type
  2827 ;;  i               2   37[COMRAM] int 
  2828 ;;  start_increm    1   36[COMRAM] unsigned char 
  2829 ;; Return value:  Size  Location     Type
  2830 ;;                  1    wreg      void 
  2831 ;; Registers used:
  2832 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2833 ;; Tracked objects:
  2834 ;;		On entry : 0/0
  2835 ;;		On exit  : 0/0
  2836 ;;		Unchanged: 0/0
  2837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2838 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2839 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2840 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2841 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2842 ;;Total ram usage:       12 bytes
  2843 ;; Hardware stack levels used: 1
  2844 ;; Hardware stack levels required when called: 7
  2845 ;; This function calls:
  2846 ;;		_setMotorPWM
  2847 ;;		_stop
  2848 ;; This function is called by:
  2849 ;;		_Yellow
  2850 ;;		_Pink
  2851 ;;		_reverseYellow
  2852 ;;		_reversePink
  2853 ;; This function uses a non-reentrant model
  2854 ;;
  2855                           
  2856                           	psect	text15
  2857   001DF0                     __ptext15:
  2858                           	callstack 0
  2859   001DF0                     _trundleSquare:
  2860                           	callstack 20
  2861   001DF0                     
  2862                           ;dc_motor.c: 463:     if (mL->power != 0 || mR->power != 0) {
  2863   001DF0  501C               	movf	trundleSquare@mL^0,w,c
  2864   001DF2  6ED9               	movwf	fsr2l,c
  2865   001DF4  6ADA               	clrf	fsr2h,c
  2866   001DF6  50DF               	movf	indf2,w,c
  2867   001DF8  A4D8               	btfss	status,2,c
  2868   001DFA  EF01  F00F         	goto	u1221
  2869   001DFE  EF03  F00F         	goto	u1220
  2870   001E02                     u1221:
  2871   001E02  EF0E  F00F         	goto	l2738
  2872   001E06                     u1220:
  2873   001E06  501D               	movf	trundleSquare@mR^0,w,c
  2874   001E08  6ED9               	movwf	fsr2l,c
  2875   001E0A  6ADA               	clrf	fsr2h,c
  2876   001E0C  50DF               	movf	indf2,w,c
  2877   001E0E  B4D8               	btfsc	status,2,c
  2878   001E10  EF0C  F00F         	goto	u1231
  2879   001E14  EF0E  F00F         	goto	u1230
  2880   001E18                     u1231:
  2881   001E18  EF14  F00F         	goto	l2740
  2882   001E1C                     u1230:
  2883   001E1C                     l2738:
  2884                           
  2885                           ;dc_motor.c: 464:         stop(mL, mR);
  2886   001E1C  C01C  F015         	movff	trundleSquare@mL,stop@mL
  2887   001E20  C01D  F016         	movff	trundleSquare@mR,stop@mR
  2888   001E24  EC1C  F013         	call	_stop	;wreg free
  2889   001E28                     l2740:
  2890                           
  2891                           ;dc_motor.c: 467:     if (reverse == 1) {
  2892   001E28  041F               	decf	trundleSquare@reverse^0,w,c
  2893   001E2A  A4D8               	btfss	status,2,c
  2894   001E2C  EF1A  F00F         	goto	u1241
  2895   001E30  EF1C  F00F         	goto	u1240
  2896   001E34                     u1241:
  2897   001E34  EF2A  F00F         	goto	l2744
  2898   001E38                     u1240:
  2899   001E38                     
  2900                           ;dc_motor.c: 468:         mL->direction = 0;
  2901   001E38  501C               	movf	trundleSquare@mL^0,w,c
  2902   001E3A  6ED9               	movwf	fsr2l,c
  2903   001E3C  6ADA               	clrf	fsr2h,c
  2904   001E3E  0E01               	movlw	1
  2905   001E40  26D9               	addwf	fsr2l,f,c
  2906   001E42  6ADF               	clrf	indf2,c
  2907                           
  2908                           ;dc_motor.c: 469:         mR->direction = 0;
  2909   001E44  501D               	movf	trundleSquare@mR^0,w,c
  2910   001E46  6ED9               	movwf	fsr2l,c
  2911   001E48  6ADA               	clrf	fsr2h,c
  2912   001E4A  0E01               	movlw	1
  2913   001E4C  26D9               	addwf	fsr2l,f,c
  2914   001E4E  6ADF               	clrf	indf2,c
  2915                           
  2916                           ;dc_motor.c: 470:     }
  2917   001E50  EF38  F00F         	goto	l2746
  2918   001E54                     l2744:
  2919                           
  2920                           ;dc_motor.c: 472:         mL->direction = 1;
  2921   001E54  501C               	movf	trundleSquare@mL^0,w,c
  2922   001E56  6ED9               	movwf	fsr2l,c
  2923   001E58  6ADA               	clrf	fsr2h,c
  2924   001E5A  0E01               	movlw	1
  2925   001E5C  26D9               	addwf	fsr2l,f,c
  2926   001E5E  0E01               	movlw	1
  2927   001E60  6EDF               	movwf	indf2,c
  2928                           
  2929                           ;dc_motor.c: 473:         mR->direction = 1;
  2930   001E62  501D               	movf	trundleSquare@mR^0,w,c
  2931   001E64  6ED9               	movwf	fsr2l,c
  2932   001E66  6ADA               	clrf	fsr2h,c
  2933   001E68  0E01               	movlw	1
  2934   001E6A  26D9               	addwf	fsr2l,f,c
  2935   001E6C  0E01               	movlw	1
  2936   001E6E  6EDF               	movwf	indf2,c
  2937   001E70                     l2746:
  2938                           
  2939                           ;dc_motor.c: 476:     for (int i=0; i<= 20; i++) {
  2940   001E70  0E00               	movlw	0
  2941   001E72  6E27               	movwf	(trundleSquare@i+1)^0,c
  2942   001E74  0E00               	movlw	0
  2943   001E76  6E26               	movwf	trundleSquare@i^0,c
  2944   001E78                     l2752:
  2945                           
  2946                           ;dc_motor.c: 477:         mL->power = i;
  2947   001E78  501C               	movf	trundleSquare@mL^0,w,c
  2948   001E7A  6ED9               	movwf	fsr2l,c
  2949   001E7C  6ADA               	clrf	fsr2h,c
  2950   001E7E  C026  FFDF         	movff	trundleSquare@i,indf2
  2951                           
  2952                           ;dc_motor.c: 478:         mR->power = i;
  2953   001E82  501D               	movf	trundleSquare@mR^0,w,c
  2954   001E84  6ED9               	movwf	fsr2l,c
  2955   001E86  6ADA               	clrf	fsr2h,c
  2956   001E88  C026  FFDF         	movff	trundleSquare@i,indf2
  2957   001E8C                     
  2958                           ;dc_motor.c: 479:         setMotorPWM(mL);
  2959   001E8C  C01C  F010         	movff	trundleSquare@mL,setMotorPWM@m
  2960   001E90  EC80  F00C         	call	_setMotorPWM	;wreg free
  2961   001E94                     
  2962                           ;dc_motor.c: 480:         setMotorPWM(mR);
  2963   001E94  C01D  F010         	movff	trundleSquare@mR,setMotorPWM@m
  2964   001E98  EC80  F00C         	call	_setMotorPWM	;wreg free
  2965   001E9C                     
  2966                           ;dc_motor.c: 481:         _delay((unsigned long)((5)*(64000000/4000.0)));
  2967   001E9C  0E68               	movlw	104
  2968   001E9E  6E20               	movwf	??_trundleSquare^0,c
  2969   001EA0  0EE4               	movlw	228
  2970   001EA2                     u2047:
  2971   001EA2  2EE8               	decfsz	wreg,f,c
  2972   001EA4  D7FE               	bra	u2047
  2973   001EA6  2E20               	decfsz	??_trundleSquare^0,f,c
  2974   001EA8  D7FC               	bra	u2047
  2975   001EAA  D000               	nop2	
  2976   001EAC                     
  2977                           ;dc_motor.c: 482:     }
  2978   001EAC  4A26               	infsnz	trundleSquare@i^0,f,c
  2979   001EAE  2A27               	incf	(trundleSquare@i+1)^0,f,c
  2980   001EB0  BE27               	btfsc	(trundleSquare@i+1)^0,7,c
  2981   001EB2  EF64  F00F         	goto	u1251
  2982   001EB6  5027               	movf	(trundleSquare@i+1)^0,w,c
  2983   001EB8  E109               	bnz	u1250
  2984   001EBA  0E15               	movlw	21
  2985   001EBC  5C26               	subwf	trundleSquare@i^0,w,c
  2986   001EBE  A0D8               	btfss	status,0,c
  2987   001EC0  EF64  F00F         	goto	u1251
  2988   001EC4  EF66  F00F         	goto	u1250
  2989   001EC8                     u1251:
  2990   001EC8  EF3C  F00F         	goto	l2752
  2991   001ECC                     u1250:
  2992   001ECC                     
  2993                           ;dc_motor.c: 485:     char start_increment = increment;
  2994   001ECC  C088  F025         	movff	_increment,trundleSquare@start_increment
  2995   001ED0                     l2764:
  2996   001ED0  501E               	movf	trundleSquare@square^0,w,c
  2997   001ED2  6E20               	movwf	??_trundleSquare^0,c
  2998   001ED4  6A21               	clrf	(??_trundleSquare+1)^0,c
  2999   001ED6  5025               	movf	trundleSquare@start_increment^0,w,c
  3000   001ED8  0100               	movlb	0	; () banked
  3001   001EDA  5D88               	subwf	_increment& (0+255),w,b
  3002   001EDC  6E22               	movwf	(??_trundleSquare+2)^0,c
  3003   001EDE  0E00               	movlw	0
  3004   001EE0  5989               	subwfb	(_increment+1)& (0+255),w,b
  3005   001EE2  6E23               	movwf	(??_trundleSquare+3)^0,c
  3006   001EE4  5020               	movf	??_trundleSquare^0,w,c
  3007   001EE6  5C22               	subwf	(??_trundleSquare+2)^0,w,c
  3008   001EE8  5023               	movf	(??_trundleSquare+3)^0,w,c
  3009   001EEA  0A80               	xorlw	128
  3010   001EEC  6E24               	movwf	(??_trundleSquare+4)^0,c
  3011   001EEE  5021               	movf	(??_trundleSquare+1)^0,w,c
  3012   001EF0  0A80               	xorlw	128
  3013   001EF2  5824               	subwfb	(??_trundleSquare+4)^0,w,c
  3014   001EF4  A0D8               	btfss	status,0,c
  3015   001EF6  EF7F  F00F         	goto	u1261
  3016   001EFA  EF81  F00F         	goto	u1260
  3017   001EFE                     u1261:
  3018   001EFE  EF68  F00F         	goto	l2764
  3019   001F02                     u1260:
  3020   001F02                     
  3021                           ; BSR set to: 0
  3022                           ;dc_motor.c: 487:     stop(mL, mR);
  3023   001F02  C01C  F015         	movff	trundleSquare@mL,stop@mL
  3024   001F06  C01D  F016         	movff	trundleSquare@mR,stop@mR
  3025   001F0A  EC1C  F013         	call	_stop	;wreg free
  3026   001F0E  0012               	return		;funcret
  3027   001F10                     __end_of_trundleSquare:
  3028                           	callstack 0
  3029                           
  3030 ;; *************** function _Orange *****************
  3031 ;; Defined at:
  3032 ;;		line 76 in file "instructions.c"
  3033 ;; Parameters:    Size  Location     Type
  3034 ;;  mL              1   39[COMRAM] PTR struct DC_motor
  3035 ;;		 -> main@motorL(9), 
  3036 ;;  mR              1   40[COMRAM] PTR struct DC_motor
  3037 ;;		 -> main@motorR(9), 
  3038 ;; Auto vars:     Size  Location     Type
  3039 ;;		None
  3040 ;; Return value:  Size  Location     Type
  3041 ;;                  1    wreg      void 
  3042 ;; Registers used:
  3043 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3044 ;; Tracked objects:
  3045 ;;		On entry : 0/0
  3046 ;;		On exit  : 0/0
  3047 ;;		Unchanged: 0/0
  3048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3049 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3050 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3051 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3052 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3053 ;;Total ram usage:        2 bytes
  3054 ;; Hardware stack levels used: 1
  3055 ;; Hardware stack levels required when called: 8
  3056 ;; This function calls:
  3057 ;;		_turnRight135
  3058 ;; This function is called by:
  3059 ;;		_executeInstruction
  3060 ;; This function uses a non-reentrant model
  3061 ;;
  3062                           
  3063                           	psect	text16
  3064   002B1E                     __ptext16:
  3065                           	callstack 0
  3066   002B1E                     _Orange:
  3067                           	callstack 20
  3068   002B1E                     
  3069                           ;instructions.c: 77:     turnRight135(mL, mR, turnRightPower);
  3070   002B1E  C028  F01C         	movff	Orange@mL,turnRight135@mL
  3071   002B22  C029  F01D         	movff	Orange@mR,turnRight135@mR
  3072   002B26  C04B  F01E         	movff	_turnRightPower,turnRight135@turnRightPower
  3073   002B2A  6A1F               	clrf	(turnRight135@turnRightPower+1)^0,c
  3074   002B2C  ECD5  F00B         	call	_turnRight135	;wreg free
  3075   002B30  0012               	return		;funcret
  3076   002B32                     __end_of_Orange:
  3077                           	callstack 0
  3078                           
  3079 ;; *************** function _turnRight135 *****************
  3080 ;; Defined at:
  3081 ;;		line 295 in file "dc_motor.c"
  3082 ;; Parameters:    Size  Location     Type
  3083 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  3084 ;;		 -> main@motorL(9), 
  3085 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  3086 ;;		 -> main@motorR(9), 
  3087 ;;  turnRightPow    2   29[COMRAM] int 
  3088 ;; Auto vars:     Size  Location     Type
  3089 ;;  i               2   37[COMRAM] int 
  3090 ;;  i               2   35[COMRAM] int 
  3091 ;;  maxpower        2   33[COMRAM] int 
  3092 ;; Return value:  Size  Location     Type
  3093 ;;                  1    wreg      void 
  3094 ;; Registers used:
  3095 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3096 ;; Tracked objects:
  3097 ;;		On entry : 0/0
  3098 ;;		On exit  : 0/0
  3099 ;;		Unchanged: 0/0
  3100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3101 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3102 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3103 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3104 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3105 ;;Total ram usage:       12 bytes
  3106 ;; Hardware stack levels used: 1
  3107 ;; Hardware stack levels required when called: 7
  3108 ;; This function calls:
  3109 ;;		___awdiv
  3110 ;;		___wmul
  3111 ;;		_setMotorPWM
  3112 ;;		_stop
  3113 ;; This function is called by:
  3114 ;;		_Orange
  3115 ;;		_reverseOrange
  3116 ;; This function uses a non-reentrant model
  3117 ;;
  3118                           
  3119                           	psect	text17
  3120   0017AA                     __ptext17:
  3121                           	callstack 0
  3122   0017AA                     _turnRight135:
  3123                           	callstack 20
  3124   0017AA                     
  3125                           ;dc_motor.c: 295: void turnRight135(DC_motor *mL, DC_motor *mR, turnRightPower);dc_motor
      +                          .c: 296: {;dc_motor.c: 298:     if (mL->power != 0 || mR->power != 0) {
  3126   0017AA  501C               	movf	turnRight135@mL^0,w,c
  3127   0017AC  6ED9               	movwf	fsr2l,c
  3128   0017AE  6ADA               	clrf	fsr2h,c
  3129   0017B0  50DF               	movf	indf2,w,c
  3130   0017B2  A4D8               	btfss	status,2,c
  3131   0017B4  EFDE  F00B         	goto	u1271
  3132   0017B8  EFE0  F00B         	goto	u1270
  3133   0017BC                     u1271:
  3134   0017BC  EFEB  F00B         	goto	l2772
  3135   0017C0                     u1270:
  3136   0017C0  501D               	movf	turnRight135@mR^0,w,c
  3137   0017C2  6ED9               	movwf	fsr2l,c
  3138   0017C4  6ADA               	clrf	fsr2h,c
  3139   0017C6  50DF               	movf	indf2,w,c
  3140   0017C8  B4D8               	btfsc	status,2,c
  3141   0017CA  EFE9  F00B         	goto	u1281
  3142   0017CE  EFEB  F00B         	goto	u1280
  3143   0017D2                     u1281:
  3144   0017D2  EFF1  F00B         	goto	l2774
  3145   0017D6                     u1280:
  3146   0017D6                     l2772:
  3147                           
  3148                           ;dc_motor.c: 299:         stop(mL, mR);
  3149   0017D6  C01C  F015         	movff	turnRight135@mL,stop@mL
  3150   0017DA  C01D  F016         	movff	turnRight135@mR,stop@mR
  3151   0017DE  EC1C  F013         	call	_stop	;wreg free
  3152   0017E2                     l2774:
  3153                           
  3154                           ;dc_motor.c: 303:     mL->direction = 1;
  3155   0017E2  501C               	movf	turnRight135@mL^0,w,c
  3156   0017E4  6ED9               	movwf	fsr2l,c
  3157   0017E6  6ADA               	clrf	fsr2h,c
  3158   0017E8  0E01               	movlw	1
  3159   0017EA  26D9               	addwf	fsr2l,f,c
  3160   0017EC  0E01               	movlw	1
  3161   0017EE  6EDF               	movwf	indf2,c
  3162   0017F0                     
  3163                           ;dc_motor.c: 304:     mR->direction = 0;
  3164   0017F0  501D               	movf	turnRight135@mR^0,w,c
  3165   0017F2  6ED9               	movwf	fsr2l,c
  3166   0017F4  6ADA               	clrf	fsr2h,c
  3167   0017F6  0E01               	movlw	1
  3168   0017F8  26D9               	addwf	fsr2l,f,c
  3169   0017FA  6ADF               	clrf	indf2,c
  3170   0017FC                     
  3171                           ;dc_motor.c: 305:     int maxpower = (turnRightPower*10/9);
  3172   0017FC  C01E  F003         	movff	turnRight135@turnRightPower,___wmul@multiplier
  3173   001800  C01F  F004         	movff	turnRight135@turnRightPower+1,___wmul@multiplier+1
  3174   001804  0E00               	movlw	0
  3175   001806  6E06               	movwf	(___wmul@multiplicand+1)^0,c
  3176   001808  0E0A               	movlw	10
  3177   00180A  6E05               	movwf	___wmul@multiplicand^0,c
  3178   00180C  EC28  F015         	call	___wmul	;wreg free
  3179   001810  C003  F009         	movff	?___wmul,___awdiv@dividend
  3180   001814  C004  F00A         	movff	?___wmul+1,___awdiv@dividend+1
  3181   001818  0E00               	movlw	0
  3182   00181A  6E0C               	movwf	(___awdiv@divisor+1)^0,c
  3183   00181C  0E09               	movlw	9
  3184   00181E  6E0B               	movwf	___awdiv@divisor^0,c
  3185   001820  EC5F  F011         	call	___awdiv	;wreg free
  3186   001824  C009  F022         	movff	?___awdiv,turnRight135@maxpower
  3187   001828  C00A  F023         	movff	?___awdiv+1,turnRight135@maxpower+1
  3188   00182C                     
  3189                           ;dc_motor.c: 308:     for (int i = 0; i < maxpower; i++) {
  3190   00182C  0E00               	movlw	0
  3191   00182E  6E25               	movwf	(turnRight135@i+1)^0,c
  3192   001830  0E00               	movlw	0
  3193   001832  6E24               	movwf	turnRight135@i^0,c
  3194   001834  EF38  F00C         	goto	l2792
  3195   001838                     l2782:
  3196                           
  3197                           ;dc_motor.c: 309:         mL->power = i;
  3198   001838  501C               	movf	turnRight135@mL^0,w,c
  3199   00183A  6ED9               	movwf	fsr2l,c
  3200   00183C  6ADA               	clrf	fsr2h,c
  3201   00183E  C024  FFDF         	movff	turnRight135@i,indf2
  3202                           
  3203                           ;dc_motor.c: 310:         mR->power = i;
  3204   001842  501D               	movf	turnRight135@mR^0,w,c
  3205   001844  6ED9               	movwf	fsr2l,c
  3206   001846  6ADA               	clrf	fsr2h,c
  3207   001848  C024  FFDF         	movff	turnRight135@i,indf2
  3208   00184C                     
  3209                           ;dc_motor.c: 311:         setMotorPWM(mL);
  3210   00184C  C01C  F010         	movff	turnRight135@mL,setMotorPWM@m
  3211   001850  EC80  F00C         	call	_setMotorPWM	;wreg free
  3212   001854                     
  3213                           ;dc_motor.c: 312:         setMotorPWM(mR);
  3214   001854  C01D  F010         	movff	turnRight135@mR,setMotorPWM@m
  3215   001858  EC80  F00C         	call	_setMotorPWM	;wreg free
  3216   00185C                     
  3217                           ;dc_motor.c: 313:         _delay((unsigned long)((5)*(64000000/4000.0)));
  3218   00185C  0E68               	movlw	104
  3219   00185E  6E20               	movwf	??_turnRight135^0,c
  3220   001860  0EE4               	movlw	228
  3221   001862                     u2057:
  3222   001862  2EE8               	decfsz	wreg,f,c
  3223   001864  D7FE               	bra	u2057
  3224   001866  2E20               	decfsz	??_turnRight135^0,f,c
  3225   001868  D7FC               	bra	u2057
  3226   00186A  D000               	nop2	
  3227   00186C                     
  3228                           ;dc_motor.c: 315:     }
  3229   00186C  4A24               	infsnz	turnRight135@i^0,f,c
  3230   00186E  2A25               	incf	(turnRight135@i+1)^0,f,c
  3231   001870                     l2792:
  3232   001870  5022               	movf	turnRight135@maxpower^0,w,c
  3233   001872  5C24               	subwf	turnRight135@i^0,w,c
  3234   001874  5025               	movf	(turnRight135@i+1)^0,w,c
  3235   001876  0A80               	xorlw	128
  3236   001878  6E20               	movwf	??_turnRight135^0,c
  3237   00187A  5023               	movf	(turnRight135@maxpower+1)^0,w,c
  3238   00187C  0A80               	xorlw	128
  3239   00187E  5820               	subwfb	??_turnRight135^0,w,c
  3240   001880  A0D8               	btfss	status,0,c
  3241   001882  EF45  F00C         	goto	u1291
  3242   001886  EF47  F00C         	goto	u1290
  3243   00188A                     u1291:
  3244   00188A  EF1C  F00C         	goto	l2782
  3245   00188E                     u1290:
  3246   00188E                     
  3247                           ;dc_motor.c: 317:     _delay((unsigned long)((410)*(64000000/4000.0)));
  3248   00188E  0E22               	movlw	34
  3249   001890  6E21               	movwf	(??_turnRight135+1)^0,c
  3250   001892  0E48               	movlw	72
  3251   001894  6E20               	movwf	??_turnRight135^0,c
  3252   001896  0E62               	movlw	98
  3253   001898                     u2067:
  3254   001898  2EE8               	decfsz	wreg,f,c
  3255   00189A  D7FE               	bra	u2067
  3256   00189C  2E20               	decfsz	??_turnRight135^0,f,c
  3257   00189E  D7FC               	bra	u2067
  3258   0018A0  2E21               	decfsz	(??_turnRight135+1)^0,f,c
  3259   0018A2  D7FA               	bra	u2067
  3260   0018A4  D000               	nop2	
  3261   0018A6                     
  3262                           ;dc_motor.c: 320:     for (int i = maxpower; i >= 0; i--) {
  3263   0018A6  C022  F026         	movff	turnRight135@maxpower,turnRight135@i_2133
  3264   0018AA  C023  F027         	movff	turnRight135@maxpower+1,turnRight135@i_2133+1
  3265   0018AE                     l2798:
  3266   0018AE  BE27               	btfsc	(turnRight135@i_2133+1)^0,7,c
  3267   0018B0  EF5E  F00C         	goto	u1300
  3268   0018B4  EF5C  F00C         	goto	u1301
  3269   0018B8                     u1301:
  3270   0018B8  EF60  F00C         	goto	l2802
  3271   0018BC                     u1300:
  3272   0018BC  EF7F  F00C         	goto	l571
  3273   0018C0                     l2802:
  3274                           
  3275                           ;dc_motor.c: 321:         mL->power = i;
  3276   0018C0  501C               	movf	turnRight135@mL^0,w,c
  3277   0018C2  6ED9               	movwf	fsr2l,c
  3278   0018C4  6ADA               	clrf	fsr2h,c
  3279   0018C6  C026  FFDF         	movff	turnRight135@i_2133,indf2
  3280                           
  3281                           ;dc_motor.c: 322:         mR->power = i;
  3282   0018CA  501D               	movf	turnRight135@mR^0,w,c
  3283   0018CC  6ED9               	movwf	fsr2l,c
  3284   0018CE  6ADA               	clrf	fsr2h,c
  3285   0018D0  C026  FFDF         	movff	turnRight135@i_2133,indf2
  3286   0018D4                     
  3287                           ;dc_motor.c: 323:         setMotorPWM(mL);
  3288   0018D4  C01C  F010         	movff	turnRight135@mL,setMotorPWM@m
  3289   0018D8  EC80  F00C         	call	_setMotorPWM	;wreg free
  3290   0018DC                     
  3291                           ;dc_motor.c: 324:         setMotorPWM(mR);
  3292   0018DC  C01D  F010         	movff	turnRight135@mR,setMotorPWM@m
  3293   0018E0  EC80  F00C         	call	_setMotorPWM	;wreg free
  3294   0018E4                     
  3295                           ;dc_motor.c: 325:         _delay((unsigned long)((5)*(64000000/4000.0)));
  3296   0018E4  0E68               	movlw	104
  3297   0018E6  6E20               	movwf	??_turnRight135^0,c
  3298   0018E8  0EE4               	movlw	228
  3299   0018EA                     u2077:
  3300   0018EA  2EE8               	decfsz	wreg,f,c
  3301   0018EC  D7FE               	bra	u2077
  3302   0018EE  2E20               	decfsz	??_turnRight135^0,f,c
  3303   0018F0  D7FC               	bra	u2077
  3304   0018F2  D000               	nop2	
  3305   0018F4                     
  3306                           ;dc_motor.c: 327:     }
  3307   0018F4  0626               	decf	turnRight135@i_2133^0,f,c
  3308   0018F6  A0D8               	btfss	status,0,c
  3309   0018F8  0627               	decf	(turnRight135@i_2133+1)^0,f,c
  3310   0018FA  EF57  F00C         	goto	l2798
  3311   0018FE                     l571:
  3312   0018FE  0012               	return		;funcret
  3313   001900                     __end_of_turnRight135:
  3314                           	callstack 0
  3315                           
  3316 ;; *************** function _LightBlue *****************
  3317 ;; Defined at:
  3318 ;;		line 80 in file "instructions.c"
  3319 ;; Parameters:    Size  Location     Type
  3320 ;;  mL              1   39[COMRAM] PTR struct DC_motor
  3321 ;;		 -> main@motorL(9), 
  3322 ;;  mR              1   40[COMRAM] PTR struct DC_motor
  3323 ;;		 -> main@motorR(9), 
  3324 ;; Auto vars:     Size  Location     Type
  3325 ;;		None
  3326 ;; Return value:  Size  Location     Type
  3327 ;;                  1    wreg      void 
  3328 ;; Registers used:
  3329 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3330 ;; Tracked objects:
  3331 ;;		On entry : 0/0
  3332 ;;		On exit  : 0/0
  3333 ;;		Unchanged: 0/0
  3334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3335 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3336 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3337 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3338 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3339 ;;Total ram usage:        2 bytes
  3340 ;; Hardware stack levels used: 1
  3341 ;; Hardware stack levels required when called: 8
  3342 ;; This function calls:
  3343 ;;		_turnLeft135
  3344 ;; This function is called by:
  3345 ;;		_executeInstruction
  3346 ;; This function uses a non-reentrant model
  3347 ;;
  3348                           
  3349                           	psect	text18
  3350   002B32                     __ptext18:
  3351                           	callstack 0
  3352   002B32                     _LightBlue:
  3353                           	callstack 20
  3354   002B32                     
  3355                           ;instructions.c: 81:     turnLeft135(mL, mR, turnLeftPower);
  3356   002B32  C028  F01C         	movff	LightBlue@mL,turnLeft135@mL
  3357   002B36  C029  F01D         	movff	LightBlue@mR,turnLeft135@mR
  3358   002B3A  C04C  F01E         	movff	_turnLeftPower,turnLeft135@turnLeftPower
  3359   002B3E  6A1F               	clrf	(turnLeft135@turnLeftPower+1)^0,c
  3360   002B40  EC78  F00A         	call	_turnLeft135	;wreg free
  3361   002B44  0012               	return		;funcret
  3362   002B46                     __end_of_LightBlue:
  3363                           	callstack 0
  3364                           
  3365 ;; *************** function _turnLeft135 *****************
  3366 ;; Defined at:
  3367 ;;		line 258 in file "dc_motor.c"
  3368 ;; Parameters:    Size  Location     Type
  3369 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  3370 ;;		 -> main@motorL(9), 
  3371 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  3372 ;;		 -> main@motorR(9), 
  3373 ;;  turnLeftPowe    2   29[COMRAM] int 
  3374 ;; Auto vars:     Size  Location     Type
  3375 ;;  i               2   37[COMRAM] int 
  3376 ;;  i               2   35[COMRAM] int 
  3377 ;;  maxpower        2   33[COMRAM] int 
  3378 ;; Return value:  Size  Location     Type
  3379 ;;                  1    wreg      void 
  3380 ;; Registers used:
  3381 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3382 ;; Tracked objects:
  3383 ;;		On entry : 0/0
  3384 ;;		On exit  : 0/0
  3385 ;;		Unchanged: 0/0
  3386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3387 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3388 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3389 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3390 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3391 ;;Total ram usage:       12 bytes
  3392 ;; Hardware stack levels used: 1
  3393 ;; Hardware stack levels required when called: 7
  3394 ;; This function calls:
  3395 ;;		___awdiv
  3396 ;;		___wmul
  3397 ;;		_setMotorPWM
  3398 ;;		_stop
  3399 ;; This function is called by:
  3400 ;;		_LightBlue
  3401 ;;		_reverseLightBlue
  3402 ;; This function uses a non-reentrant model
  3403 ;;
  3404                           
  3405                           	psect	text19
  3406   0014F0                     __ptext19:
  3407                           	callstack 0
  3408   0014F0                     _turnLeft135:
  3409                           	callstack 20
  3410   0014F0                     
  3411                           ;dc_motor.c: 258: void turnLeft135(DC_motor *mL, DC_motor *mR, turnLeftPower);dc_motor.c
      +                          : 259: {;dc_motor.c: 261:     if (mL->power != 0 || mR->power != 0) {
  3412   0014F0  501C               	movf	turnLeft135@mL^0,w,c
  3413   0014F2  6ED9               	movwf	fsr2l,c
  3414   0014F4  6ADA               	clrf	fsr2h,c
  3415   0014F6  50DF               	movf	indf2,w,c
  3416   0014F8  A4D8               	btfss	status,2,c
  3417   0014FA  EF81  F00A         	goto	u1311
  3418   0014FE  EF83  F00A         	goto	u1310
  3419   001502                     u1311:
  3420   001502  EF8E  F00A         	goto	l2818
  3421   001506                     u1310:
  3422   001506  501D               	movf	turnLeft135@mR^0,w,c
  3423   001508  6ED9               	movwf	fsr2l,c
  3424   00150A  6ADA               	clrf	fsr2h,c
  3425   00150C  50DF               	movf	indf2,w,c
  3426   00150E  B4D8               	btfsc	status,2,c
  3427   001510  EF8C  F00A         	goto	u1321
  3428   001514  EF8E  F00A         	goto	u1320
  3429   001518                     u1321:
  3430   001518  EF94  F00A         	goto	l2820
  3431   00151C                     u1320:
  3432   00151C                     l2818:
  3433                           
  3434                           ;dc_motor.c: 262:         stop(mL, mR);
  3435   00151C  C01C  F015         	movff	turnLeft135@mL,stop@mL
  3436   001520  C01D  F016         	movff	turnLeft135@mR,stop@mR
  3437   001524  EC1C  F013         	call	_stop	;wreg free
  3438   001528                     l2820:
  3439                           
  3440                           ;dc_motor.c: 266:     mL->direction = 0;
  3441   001528  501C               	movf	turnLeft135@mL^0,w,c
  3442   00152A  6ED9               	movwf	fsr2l,c
  3443   00152C  6ADA               	clrf	fsr2h,c
  3444   00152E  0E01               	movlw	1
  3445   001530  26D9               	addwf	fsr2l,f,c
  3446   001532  6ADF               	clrf	indf2,c
  3447   001534                     
  3448                           ;dc_motor.c: 267:     mR->direction = 1;
  3449   001534  501D               	movf	turnLeft135@mR^0,w,c
  3450   001536  6ED9               	movwf	fsr2l,c
  3451   001538  6ADA               	clrf	fsr2h,c
  3452   00153A  0E01               	movlw	1
  3453   00153C  26D9               	addwf	fsr2l,f,c
  3454   00153E  0E01               	movlw	1
  3455   001540  6EDF               	movwf	indf2,c
  3456   001542                     
  3457                           ;dc_motor.c: 268:     int maxpower = (turnLeftPower*10/9)-1;
  3458   001542  C01E  F003         	movff	turnLeft135@turnLeftPower,___wmul@multiplier
  3459   001546  C01F  F004         	movff	turnLeft135@turnLeftPower+1,___wmul@multiplier+1
  3460   00154A  0E00               	movlw	0
  3461   00154C  6E06               	movwf	(___wmul@multiplicand+1)^0,c
  3462   00154E  0E0A               	movlw	10
  3463   001550  6E05               	movwf	___wmul@multiplicand^0,c
  3464   001552  EC28  F015         	call	___wmul	;wreg free
  3465   001556  C003  F009         	movff	?___wmul,___awdiv@dividend
  3466   00155A  C004  F00A         	movff	?___wmul+1,___awdiv@dividend+1
  3467   00155E  0E00               	movlw	0
  3468   001560  6E0C               	movwf	(___awdiv@divisor+1)^0,c
  3469   001562  0E09               	movlw	9
  3470   001564  6E0B               	movwf	___awdiv@divisor^0,c
  3471   001566  EC5F  F011         	call	___awdiv	;wreg free
  3472   00156A  0EFF               	movlw	255
  3473   00156C  2409               	addwf	?___awdiv^0,w,c
  3474   00156E  6E22               	movwf	turnLeft135@maxpower^0,c
  3475   001570  0EFF               	movlw	255
  3476   001572  200A               	addwfc	(?___awdiv+1)^0,w,c
  3477   001574  6E23               	movwf	(turnLeft135@maxpower+1)^0,c
  3478   001576                     
  3479                           ;dc_motor.c: 271:     for (int i = 0; i < maxpower; i++) {
  3480   001576  0E00               	movlw	0
  3481   001578  6E25               	movwf	(turnLeft135@i+1)^0,c
  3482   00157A  0E00               	movlw	0
  3483   00157C  6E24               	movwf	turnLeft135@i^0,c
  3484   00157E  EFE1  F00A         	goto	l2838
  3485   001582                     l2828:
  3486                           
  3487                           ;dc_motor.c: 272:         mL->power = i;
  3488   001582  501C               	movf	turnLeft135@mL^0,w,c
  3489   001584  6ED9               	movwf	fsr2l,c
  3490   001586  6ADA               	clrf	fsr2h,c
  3491   001588  C024  FFDF         	movff	turnLeft135@i,indf2
  3492                           
  3493                           ;dc_motor.c: 273:         mR->power = i;
  3494   00158C  501D               	movf	turnLeft135@mR^0,w,c
  3495   00158E  6ED9               	movwf	fsr2l,c
  3496   001590  6ADA               	clrf	fsr2h,c
  3497   001592  C024  FFDF         	movff	turnLeft135@i,indf2
  3498   001596                     
  3499                           ;dc_motor.c: 274:         setMotorPWM(mL);
  3500   001596  C01C  F010         	movff	turnLeft135@mL,setMotorPWM@m
  3501   00159A  EC80  F00C         	call	_setMotorPWM	;wreg free
  3502   00159E                     
  3503                           ;dc_motor.c: 275:         setMotorPWM(mR);
  3504   00159E  C01D  F010         	movff	turnLeft135@mR,setMotorPWM@m
  3505   0015A2  EC80  F00C         	call	_setMotorPWM	;wreg free
  3506   0015A6                     
  3507                           ;dc_motor.c: 276:         _delay((unsigned long)((15)*(64000000/4000.0)));
  3508   0015A6  0E02               	movlw	2
  3509   0015A8  6E21               	movwf	(??_turnLeft135+1)^0,c
  3510   0015AA  0E38               	movlw	56
  3511   0015AC  6E20               	movwf	??_turnLeft135^0,c
  3512   0015AE  0EAD               	movlw	173
  3513   0015B0                     u2087:
  3514   0015B0  2EE8               	decfsz	wreg,f,c
  3515   0015B2  D7FE               	bra	u2087
  3516   0015B4  2E20               	decfsz	??_turnLeft135^0,f,c
  3517   0015B6  D7FC               	bra	u2087
  3518   0015B8  2E21               	decfsz	(??_turnLeft135+1)^0,f,c
  3519   0015BA  D7FA               	bra	u2087
  3520   0015BC  0000               	nop	
  3521   0015BE                     
  3522                           ;dc_motor.c: 278:     }
  3523   0015BE  4A24               	infsnz	turnLeft135@i^0,f,c
  3524   0015C0  2A25               	incf	(turnLeft135@i+1)^0,f,c
  3525   0015C2                     l2838:
  3526   0015C2  5022               	movf	turnLeft135@maxpower^0,w,c
  3527   0015C4  5C24               	subwf	turnLeft135@i^0,w,c
  3528   0015C6  5025               	movf	(turnLeft135@i+1)^0,w,c
  3529   0015C8  0A80               	xorlw	128
  3530   0015CA  6E20               	movwf	??_turnLeft135^0,c
  3531   0015CC  5023               	movf	(turnLeft135@maxpower+1)^0,w,c
  3532   0015CE  0A80               	xorlw	128
  3533   0015D0  5820               	subwfb	??_turnLeft135^0,w,c
  3534   0015D2  A0D8               	btfss	status,0,c
  3535   0015D4  EFEE  F00A         	goto	u1331
  3536   0015D8  EFF0  F00A         	goto	u1330
  3537   0015DC                     u1331:
  3538   0015DC  EFC1  F00A         	goto	l2828
  3539   0015E0                     u1330:
  3540   0015E0                     
  3541                           ;dc_motor.c: 280:     _delay((unsigned long)((410)*(64000000/4000.0)));
  3542   0015E0  0E22               	movlw	34
  3543   0015E2  6E21               	movwf	(??_turnLeft135+1)^0,c
  3544   0015E4  0E48               	movlw	72
  3545   0015E6  6E20               	movwf	??_turnLeft135^0,c
  3546   0015E8  0E62               	movlw	98
  3547   0015EA                     u2097:
  3548   0015EA  2EE8               	decfsz	wreg,f,c
  3549   0015EC  D7FE               	bra	u2097
  3550   0015EE  2E20               	decfsz	??_turnLeft135^0,f,c
  3551   0015F0  D7FC               	bra	u2097
  3552   0015F2  2E21               	decfsz	(??_turnLeft135+1)^0,f,c
  3553   0015F4  D7FA               	bra	u2097
  3554   0015F6  D000               	nop2	
  3555   0015F8                     
  3556                           ;dc_motor.c: 283:     for (int i = maxpower; i >= 0; i--) {
  3557   0015F8  C022  F026         	movff	turnLeft135@maxpower,turnLeft135@i_2114
  3558   0015FC  C023  F027         	movff	turnLeft135@maxpower+1,turnLeft135@i_2114+1
  3559   001600                     l2844:
  3560   001600  BE27               	btfsc	(turnLeft135@i_2114+1)^0,7,c
  3561   001602  EF07  F00B         	goto	u1340
  3562   001606  EF05  F00B         	goto	u1341
  3563   00160A                     u1341:
  3564   00160A  EF09  F00B         	goto	l2848
  3565   00160E                     u1340:
  3566   00160E  EF28  F00B         	goto	l560
  3567   001612                     l2848:
  3568                           
  3569                           ;dc_motor.c: 284:         mL->power = i;
  3570   001612  501C               	movf	turnLeft135@mL^0,w,c
  3571   001614  6ED9               	movwf	fsr2l,c
  3572   001616  6ADA               	clrf	fsr2h,c
  3573   001618  C026  FFDF         	movff	turnLeft135@i_2114,indf2
  3574                           
  3575                           ;dc_motor.c: 285:         mR->power = i;
  3576   00161C  501D               	movf	turnLeft135@mR^0,w,c
  3577   00161E  6ED9               	movwf	fsr2l,c
  3578   001620  6ADA               	clrf	fsr2h,c
  3579   001622  C026  FFDF         	movff	turnLeft135@i_2114,indf2
  3580   001626                     
  3581                           ;dc_motor.c: 286:         setMotorPWM(mL);
  3582   001626  C01C  F010         	movff	turnLeft135@mL,setMotorPWM@m
  3583   00162A  EC80  F00C         	call	_setMotorPWM	;wreg free
  3584   00162E                     
  3585                           ;dc_motor.c: 287:         setMotorPWM(mR);
  3586   00162E  C01D  F010         	movff	turnLeft135@mR,setMotorPWM@m
  3587   001632  EC80  F00C         	call	_setMotorPWM	;wreg free
  3588   001636                     
  3589                           ;dc_motor.c: 288:         _delay((unsigned long)((5)*(64000000/4000.0)));
  3590   001636  0E68               	movlw	104
  3591   001638  6E20               	movwf	??_turnLeft135^0,c
  3592   00163A  0EE4               	movlw	228
  3593   00163C                     u2107:
  3594   00163C  2EE8               	decfsz	wreg,f,c
  3595   00163E  D7FE               	bra	u2107
  3596   001640  2E20               	decfsz	??_turnLeft135^0,f,c
  3597   001642  D7FC               	bra	u2107
  3598   001644  D000               	nop2	
  3599   001646                     
  3600                           ;dc_motor.c: 290:     }
  3601   001646  0626               	decf	turnLeft135@i_2114^0,f,c
  3602   001648  A0D8               	btfss	status,0,c
  3603   00164A  0627               	decf	(turnLeft135@i_2114+1)^0,f,c
  3604   00164C  EF00  F00B         	goto	l2844
  3605   001650                     l560:
  3606   001650  0012               	return		;funcret
  3607   001652                     __end_of_turnLeft135:
  3608                           	callstack 0
  3609                           
  3610 ;; *************** function ___awdiv *****************
  3611 ;; Defined at:
  3612 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
  3613 ;; Parameters:    Size  Location     Type
  3614 ;;  dividend        2    8[COMRAM] int 
  3615 ;;  divisor         2   10[COMRAM] int 
  3616 ;; Auto vars:     Size  Location     Type
  3617 ;;  quotient        2   14[COMRAM] int 
  3618 ;;  sign            1   13[COMRAM] unsigned char 
  3619 ;;  counter         1   12[COMRAM] unsigned char 
  3620 ;; Return value:  Size  Location     Type
  3621 ;;                  2    8[COMRAM] int 
  3622 ;; Registers used:
  3623 ;;		wreg, status,2, status,0
  3624 ;; Tracked objects:
  3625 ;;		On entry : 0/0
  3626 ;;		On exit  : 0/0
  3627 ;;		Unchanged: 0/0
  3628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3629 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3630 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3631 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3632 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3633 ;;Total ram usage:        8 bytes
  3634 ;; Hardware stack levels used: 1
  3635 ;; Hardware stack levels required when called: 4
  3636 ;; This function calls:
  3637 ;;		Nothing
  3638 ;; This function is called by:
  3639 ;;		_turnLeft135
  3640 ;;		_turnRight135
  3641 ;;		_checkBattery
  3642 ;; This function uses a non-reentrant model
  3643 ;;
  3644                           
  3645                           	psect	text20
  3646   0022BE                     __ptext20:
  3647                           	callstack 0
  3648   0022BE                     ___awdiv:
  3649                           	callstack 22
  3650   0022BE  0E00               	movlw	0
  3651   0022C0  6E0E               	movwf	___awdiv@sign^0,c
  3652   0022C2  BE0C               	btfsc	(___awdiv@divisor+1)^0,7,c
  3653   0022C4  EF68  F011         	goto	u1100
  3654   0022C8  EF66  F011         	goto	u1101
  3655   0022CC                     u1101:
  3656   0022CC  EF6E  F011         	goto	l2616
  3657   0022D0                     u1100:
  3658   0022D0  6C0B               	negf	___awdiv@divisor^0,c
  3659   0022D2  1E0C               	comf	(___awdiv@divisor+1)^0,f,c
  3660   0022D4  B0D8               	btfsc	status,0,c
  3661   0022D6  2A0C               	incf	(___awdiv@divisor+1)^0,f,c
  3662   0022D8  0E01               	movlw	1
  3663   0022DA  6E0E               	movwf	___awdiv@sign^0,c
  3664   0022DC                     l2616:
  3665   0022DC  BE0A               	btfsc	(___awdiv@dividend+1)^0,7,c
  3666   0022DE  EF75  F011         	goto	u1110
  3667   0022E2  EF73  F011         	goto	u1111
  3668   0022E6                     u1111:
  3669   0022E6  EF7B  F011         	goto	l2622
  3670   0022EA                     u1110:
  3671   0022EA  6C09               	negf	___awdiv@dividend^0,c
  3672   0022EC  1E0A               	comf	(___awdiv@dividend+1)^0,f,c
  3673   0022EE  B0D8               	btfsc	status,0,c
  3674   0022F0  2A0A               	incf	(___awdiv@dividend+1)^0,f,c
  3675   0022F2  0E01               	movlw	1
  3676   0022F4  1A0E               	xorwf	___awdiv@sign^0,f,c
  3677   0022F6                     l2622:
  3678   0022F6  0E00               	movlw	0
  3679   0022F8  6E10               	movwf	(___awdiv@quotient+1)^0,c
  3680   0022FA  0E00               	movlw	0
  3681   0022FC  6E0F               	movwf	___awdiv@quotient^0,c
  3682   0022FE  500B               	movf	___awdiv@divisor^0,w,c
  3683   002300  100C               	iorwf	(___awdiv@divisor+1)^0,w,c
  3684   002302  B4D8               	btfsc	status,2,c
  3685   002304  EF86  F011         	goto	u1121
  3686   002308  EF88  F011         	goto	u1120
  3687   00230C                     u1121:
  3688   00230C  EFB0  F011         	goto	l2644
  3689   002310                     u1120:
  3690   002310  0E01               	movlw	1
  3691   002312  6E0D               	movwf	___awdiv@counter^0,c
  3692   002314  EF90  F011         	goto	l2630
  3693   002318                     l2628:
  3694   002318  90D8               	bcf	status,0,c
  3695   00231A  360B               	rlcf	___awdiv@divisor^0,f,c
  3696   00231C  360C               	rlcf	(___awdiv@divisor+1)^0,f,c
  3697   00231E  2A0D               	incf	___awdiv@counter^0,f,c
  3698   002320                     l2630:
  3699   002320  AE0C               	btfss	(___awdiv@divisor+1)^0,7,c
  3700   002322  EF95  F011         	goto	u1131
  3701   002326  EF97  F011         	goto	u1130
  3702   00232A                     u1131:
  3703   00232A  EF8C  F011         	goto	l2628
  3704   00232E                     u1130:
  3705   00232E                     l2632:
  3706   00232E  90D8               	bcf	status,0,c
  3707   002330  360F               	rlcf	___awdiv@quotient^0,f,c
  3708   002332  3610               	rlcf	(___awdiv@quotient+1)^0,f,c
  3709   002334  500B               	movf	___awdiv@divisor^0,w,c
  3710   002336  5C09               	subwf	___awdiv@dividend^0,w,c
  3711   002338  500C               	movf	(___awdiv@divisor+1)^0,w,c
  3712   00233A  580A               	subwfb	(___awdiv@dividend+1)^0,w,c
  3713   00233C  A0D8               	btfss	status,0,c
  3714   00233E  EFA3  F011         	goto	u1141
  3715   002342  EFA5  F011         	goto	u1140
  3716   002346                     u1141:
  3717   002346  EFAA  F011         	goto	l2640
  3718   00234A                     u1140:
  3719   00234A  500B               	movf	___awdiv@divisor^0,w,c
  3720   00234C  5E09               	subwf	___awdiv@dividend^0,f,c
  3721   00234E  500C               	movf	(___awdiv@divisor+1)^0,w,c
  3722   002350  5A0A               	subwfb	(___awdiv@dividend+1)^0,f,c
  3723   002352  800F               	bsf	___awdiv@quotient^0,0,c
  3724   002354                     l2640:
  3725   002354  90D8               	bcf	status,0,c
  3726   002356  320C               	rrcf	(___awdiv@divisor+1)^0,f,c
  3727   002358  320B               	rrcf	___awdiv@divisor^0,f,c
  3728   00235A  2E0D               	decfsz	___awdiv@counter^0,f,c
  3729   00235C  EF97  F011         	goto	l2632
  3730   002360                     l2644:
  3731   002360  500E               	movf	___awdiv@sign^0,w,c
  3732   002362  B4D8               	btfsc	status,2,c
  3733   002364  EFB6  F011         	goto	u1151
  3734   002368  EFB8  F011         	goto	u1150
  3735   00236C                     u1151:
  3736   00236C  EFBC  F011         	goto	l2648
  3737   002370                     u1150:
  3738   002370  6C0F               	negf	___awdiv@quotient^0,c
  3739   002372  1E10               	comf	(___awdiv@quotient+1)^0,f,c
  3740   002374  B0D8               	btfsc	status,0,c
  3741   002376  2A10               	incf	(___awdiv@quotient+1)^0,f,c
  3742   002378                     l2648:
  3743   002378  C00F  F009         	movff	___awdiv@quotient,?___awdiv
  3744   00237C  C010  F00A         	movff	___awdiv@quotient+1,?___awdiv+1
  3745   002380  0012               	return		;funcret
  3746   002382                     __end_of___awdiv:
  3747                           	callstack 0
  3748                           
  3749 ;; *************** function _Green *****************
  3750 ;; Defined at:
  3751 ;;		line 57 in file "instructions.c"
  3752 ;; Parameters:    Size  Location     Type
  3753 ;;  mL              1   38[COMRAM] PTR struct DC_motor
  3754 ;;		 -> main@motorL(9), 
  3755 ;;  mR              1   39[COMRAM] PTR struct DC_motor
  3756 ;;		 -> main@motorR(9), 
  3757 ;; Auto vars:     Size  Location     Type
  3758 ;;		None
  3759 ;; Return value:  Size  Location     Type
  3760 ;;                  1    wreg      void 
  3761 ;; Registers used:
  3762 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3763 ;; Tracked objects:
  3764 ;;		On entry : 0/0
  3765 ;;		On exit  : 0/0
  3766 ;;		Unchanged: 0/0
  3767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3768 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3769 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3770 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3771 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3772 ;;Total ram usage:        2 bytes
  3773 ;; Hardware stack levels used: 1
  3774 ;; Hardware stack levels required when called: 8
  3775 ;; This function calls:
  3776 ;;		_turnLeft
  3777 ;; This function is called by:
  3778 ;;		_executeInstruction
  3779 ;; This function uses a non-reentrant model
  3780 ;;
  3781                           
  3782                           	psect	text21
  3783   002B80                     __ptext21:
  3784                           	callstack 0
  3785   002B80                     _Green:
  3786                           	callstack 20
  3787   002B80                     
  3788                           ;instructions.c: 58:     turnLeft(mL, mR, turnLeftPower);
  3789   002B80  C027  F01C         	movff	Green@mL,turnLeft@mL
  3790   002B84  C028  F01D         	movff	Green@mR,turnLeft@mR
  3791   002B88  C04C  F01E         	movff	_turnLeftPower,turnLeft@power
  3792   002B8C  EC62  F00E         	call	_turnLeft	;wreg free
  3793   002B90  0012               	return		;funcret
  3794   002B92                     __end_of_Green:
  3795                           	callstack 0
  3796                           
  3797 ;; *************** function _Blue *****************
  3798 ;; Defined at:
  3799 ;;		line 61 in file "instructions.c"
  3800 ;; Parameters:    Size  Location     Type
  3801 ;;  mL              1   42[COMRAM] PTR struct DC_motor
  3802 ;;		 -> main@motorL(9), 
  3803 ;;  mR              1   43[COMRAM] PTR struct DC_motor
  3804 ;;		 -> main@motorR(9), 
  3805 ;; Auto vars:     Size  Location     Type
  3806 ;;		None
  3807 ;; Return value:  Size  Location     Type
  3808 ;;                  1    wreg      void 
  3809 ;; Registers used:
  3810 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3811 ;; Tracked objects:
  3812 ;;		On entry : 0/0
  3813 ;;		On exit  : 0/0
  3814 ;;		Unchanged: 0/0
  3815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3816 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3817 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3818 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3819 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3820 ;;Total ram usage:        2 bytes
  3821 ;; Hardware stack levels used: 1
  3822 ;; Hardware stack levels required when called: 9
  3823 ;; This function calls:
  3824 ;;		_turn180
  3825 ;; This function is called by:
  3826 ;;		_executeInstruction
  3827 ;; This function uses a non-reentrant model
  3828 ;;
  3829                           
  3830                           	psect	text22
  3831   002B92                     __ptext22:
  3832                           	callstack 0
  3833   002B92                     _Blue:
  3834                           	callstack 19
  3835   002B92                     
  3836                           ;instructions.c: 62:     turn180(mL, mR);
  3837   002B92  C02B  F027         	movff	Blue@mL,turn180@mL
  3838   002B96  C02C  F028         	movff	Blue@mR,turn180@mR
  3839   002B9A  EC51  F013         	call	_turn180	;wreg free
  3840   002B9E  0012               	return		;funcret
  3841   002BA0                     __end_of_Blue:
  3842                           	callstack 0
  3843                           
  3844 ;; *************** function _Black *****************
  3845 ;; Defined at:
  3846 ;;		line 89 in file "instructions.c"
  3847 ;; Parameters:    Size  Location     Type
  3848 ;;  mL              1   42[COMRAM] PTR struct DC_motor
  3849 ;;		 -> main@motorL(9), 
  3850 ;;  mR              1   43[COMRAM] PTR struct DC_motor
  3851 ;;		 -> main@motorR(9), 
  3852 ;; Auto vars:     Size  Location     Type
  3853 ;;		None
  3854 ;; Return value:  Size  Location     Type
  3855 ;;                  1    wreg      void 
  3856 ;; Registers used:
  3857 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3858 ;; Tracked objects:
  3859 ;;		On entry : 0/0
  3860 ;;		On exit  : 0/0
  3861 ;;		Unchanged: 0/0
  3862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3863 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3864 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3865 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3866 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3867 ;;Total ram usage:        2 bytes
  3868 ;; Hardware stack levels used: 1
  3869 ;; Hardware stack levels required when called: 9
  3870 ;; This function calls:
  3871 ;;		_turn180
  3872 ;; This function is called by:
  3873 ;;		_executeInstruction
  3874 ;; This function uses a non-reentrant model
  3875 ;;
  3876                           
  3877                           	psect	text23
  3878   002B46                     __ptext23:
  3879                           	callstack 0
  3880   002B46                     _Black:
  3881                           	callstack 19
  3882   002B46                     
  3883                           ;instructions.c: 90:     reverseRouteFlag=1;
  3884   002B46  0E01               	movlw	1
  3885   002B48  0100               	movlb	0	; () banked
  3886   002B4A  6F8A               	movwf	_reverseRouteFlag& (0+255),b
  3887   002B4C                     
  3888                           ; BSR set to: 0
  3889                           ;instructions.c: 91:     turn180(mL, mR);
  3890   002B4C  C02B  F027         	movff	Black@mL,turn180@mL
  3891   002B50  C02C  F028         	movff	Black@mR,turn180@mR
  3892   002B54  EC51  F013         	call	_turn180	;wreg free
  3893   002B58  0012               	return		;funcret
  3894   002B5A                     __end_of_Black:
  3895                           	callstack 0
  3896                           
  3897 ;; *************** function _turn180 *****************
  3898 ;; Defined at:
  3899 ;;		line 244 in file "dc_motor.c"
  3900 ;; Parameters:    Size  Location     Type
  3901 ;;  mL              1   38[COMRAM] PTR struct DC_motor
  3902 ;;		 -> main@motorL(9), 
  3903 ;;  mR              1   39[COMRAM] PTR struct DC_motor
  3904 ;;		 -> main@motorR(9), 
  3905 ;; Auto vars:     Size  Location     Type
  3906 ;;		None
  3907 ;; Return value:  Size  Location     Type
  3908 ;;                  1    wreg      void 
  3909 ;; Registers used:
  3910 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3911 ;; Tracked objects:
  3912 ;;		On entry : 0/0
  3913 ;;		On exit  : 0/0
  3914 ;;		Unchanged: 0/0
  3915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3916 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3917 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3918 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3919 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3920 ;;Total ram usage:        4 bytes
  3921 ;; Hardware stack levels used: 1
  3922 ;; Hardware stack levels required when called: 8
  3923 ;; This function calls:
  3924 ;;		_turnLeft
  3925 ;; This function is called by:
  3926 ;;		_Blue
  3927 ;;		_White
  3928 ;;		_Black
  3929 ;;		_reverseYellow
  3930 ;;		_reversePink
  3931 ;; This function uses a non-reentrant model
  3932 ;;
  3933                           
  3934                           	psect	text24
  3935   0026A2                     __ptext24:
  3936                           	callstack 0
  3937   0026A2                     _turn180:
  3938                           	callstack 19
  3939   0026A2                     
  3940                           ;dc_motor.c: 244: void turn180(DC_motor *mL, DC_motor *mR);dc_motor.c: 245: {;dc_motor.c
      +                          : 250:     turnLeft(mL, mR, turnLeftPower);
  3941   0026A2  C027  F01C         	movff	turn180@mL,turnLeft@mL
  3942   0026A6  C028  F01D         	movff	turn180@mR,turnLeft@mR
  3943   0026AA  C04C  F01E         	movff	_turnLeftPower,turnLeft@power
  3944   0026AE  EC62  F00E         	call	_turnLeft	;wreg free
  3945   0026B2                     
  3946                           ;dc_motor.c: 251:     _delay((unsigned long)((100)*(64000000/4000.0)));
  3947   0026B2  0E09               	movlw	9
  3948   0026B4  6E2A               	movwf	(??_turn180+1)^0,c
  3949   0026B6  0E1E               	movlw	30
  3950   0026B8  6E29               	movwf	??_turn180^0,c
  3951   0026BA  0EE4               	movlw	228
  3952   0026BC                     u2117:
  3953   0026BC  2EE8               	decfsz	wreg,f,c
  3954   0026BE  D7FE               	bra	u2117
  3955   0026C0  2E29               	decfsz	??_turn180^0,f,c
  3956   0026C2  D7FC               	bra	u2117
  3957   0026C4  2E2A               	decfsz	(??_turn180+1)^0,f,c
  3958   0026C6  D7FA               	bra	u2117
  3959   0026C8  D000               	nop2	
  3960   0026CA                     
  3961                           ;dc_motor.c: 252:     turnLeft(mL, mR, turnLeftPower);
  3962   0026CA  C027  F01C         	movff	turn180@mL,turnLeft@mL
  3963   0026CE  C028  F01D         	movff	turn180@mR,turnLeft@mR
  3964   0026D2  C04C  F01E         	movff	_turnLeftPower,turnLeft@power
  3965   0026D6  EC62  F00E         	call	_turnLeft	;wreg free
  3966                           
  3967                           ;dc_motor.c: 253:     _delay((unsigned long)((500)*(64000000/4000.0)));
  3968   0026DA  0E29               	movlw	41
  3969   0026DC  6E2A               	movwf	(??_turn180+1)^0,c
  3970   0026DE  0E96               	movlw	150
  3971   0026E0  6E29               	movwf	??_turn180^0,c
  3972   0026E2  0E7F               	movlw	127
  3973   0026E4                     u2127:
  3974   0026E4  2EE8               	decfsz	wreg,f,c
  3975   0026E6  D7FE               	bra	u2127
  3976   0026E8  2E29               	decfsz	??_turn180^0,f,c
  3977   0026EA  D7FC               	bra	u2127
  3978   0026EC  2E2A               	decfsz	(??_turn180+1)^0,f,c
  3979   0026EE  D7FA               	bra	u2127
  3980   0026F0  0000               	nop	
  3981   0026F2  0012               	return		;funcret
  3982   0026F4                     __end_of_turn180:
  3983                           	callstack 0
  3984                           
  3985 ;; *************** function _leftCali *****************
  3986 ;; Defined at:
  3987 ;;		line 96 in file "dc_motor.c"
  3988 ;; Parameters:    Size  Location     Type
  3989 ;;  mL              1   38[COMRAM] PTR struct DC_motor
  3990 ;;		 -> main@motorL(9), 
  3991 ;;  mR              1   39[COMRAM] PTR struct DC_motor
  3992 ;;		 -> main@motorR(9), 
  3993 ;; Auto vars:     Size  Location     Type
  3994 ;;  power           1   42[COMRAM] unsigned char 
  3995 ;; Return value:  Size  Location     Type
  3996 ;;                  1    wreg      unsigned char 
  3997 ;; Registers used:
  3998 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3999 ;; Tracked objects:
  4000 ;;		On entry : 0/0
  4001 ;;		On exit  : 0/0
  4002 ;;		Unchanged: 0/0
  4003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4004 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4005 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4006 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4007 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4008 ;;Total ram usage:        5 bytes
  4009 ;; Hardware stack levels used: 1
  4010 ;; Hardware stack levels required when called: 8
  4011 ;; This function calls:
  4012 ;;		_turnLeft
  4013 ;; This function is called by:
  4014 ;;		_main
  4015 ;; This function uses a non-reentrant model
  4016 ;;
  4017                           
  4018                           	psect	text25
  4019   0021F8                     __ptext25:
  4020                           	callstack 0
  4021   0021F8                     _leftCali:
  4022                           	callstack 22
  4023   0021F8                     l486:
  4024   0021F8  B48E               	btfsc	142,2,c	;volatile
  4025   0021FA  EF01  F011         	goto	u1601
  4026   0021FE  EF03  F011         	goto	u1600
  4027   002202                     u1601:
  4028   002202  EFFC  F010         	goto	l486
  4029   002206                     u1600:
  4030   002206                     
  4031                           ;dc_motor.c: 98:     char power = turnLeftPower;
  4032   002206  C04C  F02B         	movff	_turnLeftPower,leftCali@power
  4033                           
  4034                           ;dc_motor.c: 99:     while (PORTFbits.RF2 || PORTFbits.RF3) {
  4035   00220A  EF4F  F011         	goto	l3272
  4036   00220E                     l3254:
  4037                           
  4038                           ;dc_motor.c: 100:         _delay((unsigned long)((1000)*(64000000/4000.0)));
  4039   00220E  0E52               	movlw	82
  4040   002210  6E2A               	movwf	(??_leftCali+1)^0,c
  4041   002212  0E2B               	movlw	43
  4042   002214  6E29               	movwf	??_leftCali^0,c
  4043   002216  0E00               	movlw	0
  4044   002218                     u2137:
  4045   002218  2EE8               	decfsz	wreg,f,c
  4046   00221A  D7FE               	bra	u2137
  4047   00221C  2E29               	decfsz	??_leftCali^0,f,c
  4048   00221E  D7FC               	bra	u2137
  4049   002220  2E2A               	decfsz	(??_leftCali+1)^0,f,c
  4050   002222  D7FA               	bra	u2137
  4051   002224  D000               	nop2	
  4052   002226                     
  4053                           ;dc_motor.c: 101:         turnLeft(mL,mR,power);
  4054   002226  C027  F01C         	movff	leftCali@mL,turnLeft@mL
  4055   00222A  C028  F01D         	movff	leftCali@mR,turnLeft@mR
  4056   00222E  C02B  F01E         	movff	leftCali@power,turnLeft@power
  4057   002232  EC62  F00E         	call	_turnLeft	;wreg free
  4058   002236                     l491:
  4059   002236  A48E               	btfss	142,2,c	;volatile
  4060   002238  EF20  F011         	goto	u1611
  4061   00223C  EF22  F011         	goto	u1610
  4062   002240                     u1611:
  4063   002240  EF29  F011         	goto	l3260
  4064   002244                     u1610:
  4065   002244  B68E               	btfsc	142,3,c	;volatile
  4066   002246  EF27  F011         	goto	u1621
  4067   00224A  EF29  F011         	goto	u1620
  4068   00224E                     u1621:
  4069   00224E  EF1B  F011         	goto	l491
  4070   002252                     u1620:
  4071   002252                     l3260:
  4072                           
  4073                           ;dc_motor.c: 104:         _delay((unsigned long)((80)*(64000000/4000.0)));
  4074   002252  0E07               	movlw	7
  4075   002254  6E2A               	movwf	(??_leftCali+1)^0,c
  4076   002256  0E7F               	movlw	127
  4077   002258  6E29               	movwf	??_leftCali^0,c
  4078   00225A  0E50               	movlw	80
  4079   00225C                     u2147:
  4080   00225C  2EE8               	decfsz	wreg,f,c
  4081   00225E  D7FE               	bra	u2147
  4082   002260  2E29               	decfsz	??_leftCali^0,f,c
  4083   002262  D7FC               	bra	u2147
  4084   002264  2E2A               	decfsz	(??_leftCali+1)^0,f,c
  4085   002266  D7FA               	bra	u2147
  4086   002268                     
  4087                           ;dc_motor.c: 105:         if(!PORTFbits.RF2 && !PORTFbits.RF3) {
  4088   002268  B48E               	btfsc	142,2,c	;volatile
  4089   00226A  EF39  F011         	goto	u1631
  4090   00226E  EF3B  F011         	goto	u1630
  4091   002272                     u1631:
  4092   002272  EF44  F011         	goto	l496
  4093   002276                     u1630:
  4094   002276  B68E               	btfsc	142,3,c	;volatile
  4095   002278  EF40  F011         	goto	u1641
  4096   00227C  EF42  F011         	goto	u1640
  4097   002280                     u1641:
  4098   002280  EF44  F011         	goto	l496
  4099   002284                     u1640:
  4100   002284  EF4F  F011         	goto	l3272
  4101   002288                     l496:
  4102                           
  4103                           ;dc_motor.c: 107:             if(!PORTFbits.RF2){
  4104   002288  B48E               	btfsc	142,2,c	;volatile
  4105   00228A  EF49  F011         	goto	u1651
  4106   00228E  EF4B  F011         	goto	u1650
  4107   002292                     u1651:
  4108   002292  EF4E  F011         	goto	l3270
  4109   002296                     u1650:
  4110   002296                     
  4111                           ;dc_motor.c: 108:                 power--;
  4112   002296  062B               	decf	leftCali@power^0,f,c
  4113                           
  4114                           ;dc_motor.c: 109:             }
  4115   002298  EF4F  F011         	goto	l3272
  4116   00229C                     l3270:
  4117                           
  4118                           ;dc_motor.c: 111:                 power++;
  4119   00229C  2A2B               	incf	leftCali@power^0,f,c
  4120   00229E                     l3272:
  4121                           
  4122                           ;dc_motor.c: 99:     while (PORTFbits.RF2 || PORTFbits.RF3) {
  4123   00229E  B48E               	btfsc	142,2,c	;volatile
  4124   0022A0  EF54  F011         	goto	u1661
  4125   0022A4  EF56  F011         	goto	u1660
  4126   0022A8                     u1661:
  4127   0022A8  EF07  F011         	goto	l3254
  4128   0022AC                     u1660:
  4129   0022AC  B68E               	btfsc	142,3,c	;volatile
  4130   0022AE  EF5B  F011         	goto	u1671
  4131   0022B2  EF5D  F011         	goto	u1670
  4132   0022B6                     u1671:
  4133   0022B6  EF07  F011         	goto	l3254
  4134   0022BA                     u1670:
  4135   0022BA                     
  4136                           ;dc_motor.c: 115:     return power;
  4137   0022BA  502B               	movf	leftCali@power^0,w,c
  4138   0022BC  0012               	return		;funcret
  4139   0022BE                     __end_of_leftCali:
  4140                           	callstack 0
  4141                           
  4142 ;; *************** function _turnLeft *****************
  4143 ;; Defined at:
  4144 ;;		line 156 in file "dc_motor.c"
  4145 ;; Parameters:    Size  Location     Type
  4146 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  4147 ;;		 -> main@motorL(9), 
  4148 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  4149 ;;		 -> main@motorR(9), 
  4150 ;;  power           1   29[COMRAM] unsigned char 
  4151 ;; Auto vars:     Size  Location     Type
  4152 ;;  i               2   36[COMRAM] int 
  4153 ;;  i               2   34[COMRAM] int 
  4154 ;;  maxpower        2   32[COMRAM] int 
  4155 ;; Return value:  Size  Location     Type
  4156 ;;                  1    wreg      void 
  4157 ;; Registers used:
  4158 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4159 ;; Tracked objects:
  4160 ;;		On entry : 0/0
  4161 ;;		On exit  : 0/0
  4162 ;;		Unchanged: 0/0
  4163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4164 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4165 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4166 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4167 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4168 ;;Total ram usage:       11 bytes
  4169 ;; Hardware stack levels used: 1
  4170 ;; Hardware stack levels required when called: 7
  4171 ;; This function calls:
  4172 ;;		_setMotorPWM
  4173 ;;		_stop
  4174 ;; This function is called by:
  4175 ;;		_Green
  4176 ;;		_Pink
  4177 ;;		_reverseYellow
  4178 ;;		_leftCali
  4179 ;;		_turn180
  4180 ;; This function uses a non-reentrant model
  4181 ;;
  4182                           
  4183                           	psect	text26
  4184   001CC4                     __ptext26:
  4185                           	callstack 0
  4186   001CC4                     _turnLeft:
  4187                           	callstack 20
  4188   001CC4                     
  4189                           ;dc_motor.c: 156: void turnLeft(DC_motor *mL, DC_motor *mR, char power);dc_motor.c: 157:
      +                           {;dc_motor.c: 159:     if (mL->power != 0 || mR->power != 0) {
  4190   001CC4  501C               	movf	turnLeft@mL^0,w,c
  4191   001CC6  6ED9               	movwf	fsr2l,c
  4192   001CC8  6ADA               	clrf	fsr2h,c
  4193   001CCA  50DF               	movf	indf2,w,c
  4194   001CCC  A4D8               	btfss	status,2,c
  4195   001CCE  EF6B  F00E         	goto	u1061
  4196   001CD2  EF6D  F00E         	goto	u1060
  4197   001CD6                     u1061:
  4198   001CD6  EF78  F00E         	goto	l2566
  4199   001CDA                     u1060:
  4200   001CDA  501D               	movf	turnLeft@mR^0,w,c
  4201   001CDC  6ED9               	movwf	fsr2l,c
  4202   001CDE  6ADA               	clrf	fsr2h,c
  4203   001CE0  50DF               	movf	indf2,w,c
  4204   001CE2  B4D8               	btfsc	status,2,c
  4205   001CE4  EF76  F00E         	goto	u1071
  4206   001CE8  EF78  F00E         	goto	u1070
  4207   001CEC                     u1071:
  4208   001CEC  EF7E  F00E         	goto	l2568
  4209   001CF0                     u1070:
  4210   001CF0                     l2566:
  4211                           
  4212                           ;dc_motor.c: 160:         stop(mL, mR);
  4213   001CF0  C01C  F015         	movff	turnLeft@mL,stop@mL
  4214   001CF4  C01D  F016         	movff	turnLeft@mR,stop@mR
  4215   001CF8  EC1C  F013         	call	_stop	;wreg free
  4216   001CFC                     l2568:
  4217                           
  4218                           ;dc_motor.c: 164:     mL->direction = 0;
  4219   001CFC  501C               	movf	turnLeft@mL^0,w,c
  4220   001CFE  6ED9               	movwf	fsr2l,c
  4221   001D00  6ADA               	clrf	fsr2h,c
  4222   001D02  0E01               	movlw	1
  4223   001D04  26D9               	addwf	fsr2l,f,c
  4224   001D06  6ADF               	clrf	indf2,c
  4225   001D08                     
  4226                           ;dc_motor.c: 165:     mR->direction = 1;
  4227   001D08  501D               	movf	turnLeft@mR^0,w,c
  4228   001D0A  6ED9               	movwf	fsr2l,c
  4229   001D0C  6ADA               	clrf	fsr2h,c
  4230   001D0E  0E01               	movlw	1
  4231   001D10  26D9               	addwf	fsr2l,f,c
  4232   001D12  0E01               	movlw	1
  4233   001D14  6EDF               	movwf	indf2,c
  4234   001D16                     
  4235                           ;dc_motor.c: 166:     int maxpower = power;
  4236   001D16  C01E  F021         	movff	turnLeft@power,turnLeft@maxpower
  4237   001D1A  6A22               	clrf	(turnLeft@maxpower+1)^0,c
  4238   001D1C                     
  4239                           ;dc_motor.c: 169:     for (int i = 0; i < maxpower; i++) {
  4240   001D1C  0E00               	movlw	0
  4241   001D1E  6E24               	movwf	(turnLeft@i+1)^0,c
  4242   001D20  0E00               	movlw	0
  4243   001D22  6E23               	movwf	turnLeft@i^0,c
  4244   001D24  EFB0  F00E         	goto	l2586
  4245   001D28                     l2576:
  4246                           
  4247                           ;dc_motor.c: 170:         mL->power = i;
  4248   001D28  501C               	movf	turnLeft@mL^0,w,c
  4249   001D2A  6ED9               	movwf	fsr2l,c
  4250   001D2C  6ADA               	clrf	fsr2h,c
  4251   001D2E  C023  FFDF         	movff	turnLeft@i,indf2
  4252                           
  4253                           ;dc_motor.c: 171:         mR->power = i;
  4254   001D32  501D               	movf	turnLeft@mR^0,w,c
  4255   001D34  6ED9               	movwf	fsr2l,c
  4256   001D36  6ADA               	clrf	fsr2h,c
  4257   001D38  C023  FFDF         	movff	turnLeft@i,indf2
  4258   001D3C                     
  4259                           ;dc_motor.c: 172:         setMotorPWM(mL);
  4260   001D3C  C01C  F010         	movff	turnLeft@mL,setMotorPWM@m
  4261   001D40  EC80  F00C         	call	_setMotorPWM	;wreg free
  4262   001D44                     
  4263                           ;dc_motor.c: 173:         setMotorPWM(mR);
  4264   001D44  C01D  F010         	movff	turnLeft@mR,setMotorPWM@m
  4265   001D48  EC80  F00C         	call	_setMotorPWM	;wreg free
  4266   001D4C                     
  4267                           ;dc_motor.c: 174:         _delay((unsigned long)((12)*(64000000/4000.0)));
  4268   001D4C  0EFA               	movlw	250
  4269   001D4E  6E1F               	movwf	??_turnLeft^0,c
  4270   001D50  0E58               	movlw	88
  4271   001D52                     u2157:
  4272   001D52  2EE8               	decfsz	wreg,f,c
  4273   001D54  D7FE               	bra	u2157
  4274   001D56  2E1F               	decfsz	??_turnLeft^0,f,c
  4275   001D58  D7FC               	bra	u2157
  4276   001D5A  D000               	nop2	
  4277   001D5C                     
  4278                           ;dc_motor.c: 176:     }
  4279   001D5C  4A23               	infsnz	turnLeft@i^0,f,c
  4280   001D5E  2A24               	incf	(turnLeft@i+1)^0,f,c
  4281   001D60                     l2586:
  4282   001D60  5021               	movf	turnLeft@maxpower^0,w,c
  4283   001D62  5C23               	subwf	turnLeft@i^0,w,c
  4284   001D64  5024               	movf	(turnLeft@i+1)^0,w,c
  4285   001D66  0A80               	xorlw	128
  4286   001D68  6E1F               	movwf	??_turnLeft^0,c
  4287   001D6A  5022               	movf	(turnLeft@maxpower+1)^0,w,c
  4288   001D6C  0A80               	xorlw	128
  4289   001D6E  581F               	subwfb	??_turnLeft^0,w,c
  4290   001D70  A0D8               	btfss	status,0,c
  4291   001D72  EFBD  F00E         	goto	u1081
  4292   001D76  EFBF  F00E         	goto	u1080
  4293   001D7A                     u1081:
  4294   001D7A  EF94  F00E         	goto	l2576
  4295   001D7E                     u1080:
  4296   001D7E                     
  4297                           ;dc_motor.c: 178:     _delay((unsigned long)((280)*(64000000/4000.0)));
  4298   001D7E  0E17               	movlw	23
  4299   001D80  6E20               	movwf	(??_turnLeft+1)^0,c
  4300   001D82  0EBB               	movlw	187
  4301   001D84  6E1F               	movwf	??_turnLeft^0,c
  4302   001D86  0E1D               	movlw	29
  4303   001D88                     u2167:
  4304   001D88  2EE8               	decfsz	wreg,f,c
  4305   001D8A  D7FE               	bra	u2167
  4306   001D8C  2E1F               	decfsz	??_turnLeft^0,f,c
  4307   001D8E  D7FC               	bra	u2167
  4308   001D90  2E20               	decfsz	(??_turnLeft+1)^0,f,c
  4309   001D92  D7FA               	bra	u2167
  4310   001D94  0000               	nop	
  4311   001D96                     
  4312                           ;dc_motor.c: 181:     for (int i = maxpower; i >= 0; i--) {
  4313   001D96  C021  F025         	movff	turnLeft@maxpower,turnLeft@i_2073
  4314   001D9A  C022  F026         	movff	turnLeft@maxpower+1,turnLeft@i_2073+1
  4315   001D9E                     l2592:
  4316   001D9E  BE26               	btfsc	(turnLeft@i_2073+1)^0,7,c
  4317   001DA0  EFD6  F00E         	goto	u1090
  4318   001DA4  EFD4  F00E         	goto	u1091
  4319   001DA8                     u1091:
  4320   001DA8  EFD8  F00E         	goto	l2596
  4321   001DAC                     u1090:
  4322   001DAC  EFF7  F00E         	goto	l535
  4323   001DB0                     l2596:
  4324                           
  4325                           ;dc_motor.c: 182:         mL->power = i;
  4326   001DB0  501C               	movf	turnLeft@mL^0,w,c
  4327   001DB2  6ED9               	movwf	fsr2l,c
  4328   001DB4  6ADA               	clrf	fsr2h,c
  4329   001DB6  C025  FFDF         	movff	turnLeft@i_2073,indf2
  4330                           
  4331                           ;dc_motor.c: 183:         mR->power = i;
  4332   001DBA  501D               	movf	turnLeft@mR^0,w,c
  4333   001DBC  6ED9               	movwf	fsr2l,c
  4334   001DBE  6ADA               	clrf	fsr2h,c
  4335   001DC0  C025  FFDF         	movff	turnLeft@i_2073,indf2
  4336   001DC4                     
  4337                           ;dc_motor.c: 184:         setMotorPWM(mL);
  4338   001DC4  C01C  F010         	movff	turnLeft@mL,setMotorPWM@m
  4339   001DC8  EC80  F00C         	call	_setMotorPWM	;wreg free
  4340   001DCC                     
  4341                           ;dc_motor.c: 185:         setMotorPWM(mR);
  4342   001DCC  C01D  F010         	movff	turnLeft@mR,setMotorPWM@m
  4343   001DD0  EC80  F00C         	call	_setMotorPWM	;wreg free
  4344   001DD4                     
  4345                           ;dc_motor.c: 186:         _delay((unsigned long)((5)*(64000000/4000.0)));
  4346   001DD4  0E68               	movlw	104
  4347   001DD6  6E1F               	movwf	??_turnLeft^0,c
  4348   001DD8  0EE4               	movlw	228
  4349   001DDA                     u2177:
  4350   001DDA  2EE8               	decfsz	wreg,f,c
  4351   001DDC  D7FE               	bra	u2177
  4352   001DDE  2E1F               	decfsz	??_turnLeft^0,f,c
  4353   001DE0  D7FC               	bra	u2177
  4354   001DE2  D000               	nop2	
  4355   001DE4                     
  4356                           ;dc_motor.c: 188:     }
  4357   001DE4  0625               	decf	turnLeft@i_2073^0,f,c
  4358   001DE6  A0D8               	btfss	status,0,c
  4359   001DE8  0626               	decf	(turnLeft@i_2073+1)^0,f,c
  4360   001DEA  EFCF  F00E         	goto	l2592
  4361   001DEE                     l535:
  4362   001DEE  0012               	return		;funcret
  4363   001DF0                     __end_of_turnLeft:
  4364                           	callstack 0
  4365                           
  4366 ;; *************** function _interrupts_init *****************
  4367 ;; Defined at:
  4368 ;;		line 14 in file "interrupts.c"
  4369 ;; Parameters:    Size  Location     Type
  4370 ;;		None
  4371 ;; Auto vars:     Size  Location     Type
  4372 ;;		None
  4373 ;; Return value:  Size  Location     Type
  4374 ;;                  1    wreg      void 
  4375 ;; Registers used:
  4376 ;;		wreg, status,2, status,0, cstack
  4377 ;; Tracked objects:
  4378 ;;		On entry : 0/0
  4379 ;;		On exit  : 0/0
  4380 ;;		Unchanged: 0/0
  4381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4382 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4383 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4384 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4385 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4386 ;;Total ram usage:        0 bytes
  4387 ;; Hardware stack levels used: 1
  4388 ;; Hardware stack levels required when called: 7
  4389 ;; This function calls:
  4390 ;;		_clearInterrupt
  4391 ;;		_color_writetoaddr
  4392 ;; This function is called by:
  4393 ;;		_main
  4394 ;; This function uses a non-reentrant model
  4395 ;;
  4396                           
  4397                           	psect	text27
  4398   0026F4                     __ptext27:
  4399                           	callstack 0
  4400   0026F4                     _interrupts_init:
  4401                           	callstack 23
  4402   0026F4                     
  4403                           ;interrupts.c: 21:     INT0PPS = 0x08;
  4404   0026F4  0E08               	movlw	8
  4405   0026F6  010D               	movlb	13	; () banked
  4406   0026F8  6FF0               	movwf	240,b	;volatile
  4407   0026FA                     
  4408                           ; BSR set to: 13
  4409                           ;interrupts.c: 22:     PIE0bits.INT0IE = 1;
  4410   0026FA  010E               	movlb	14	; () banked
  4411   0026FC  8129               	bsf	41,0,b	;volatile
  4412   0026FE                     
  4413                           ; BSR set to: 14
  4414                           ;interrupts.c: 23:     INTCONbits.INT0EDG = 0;
  4415   0026FE  90F2               	bcf	242,0,c	;volatile
  4416   002700                     
  4417                           ; BSR set to: 14
  4418                           ;interrupts.c: 24:     IPR0bits.INT0IP = 0;
  4419   002700  911F               	bcf	31,0,b	;volatile
  4420   002702                     
  4421                           ; BSR set to: 14
  4422                           ;interrupts.c: 25:     ANSELBbits.ANSELB0 = 0;
  4423   002702  919A               	bcf	154,0,b	;volatile
  4424   002704                     
  4425                           ; BSR set to: 14
  4426                           ;interrupts.c: 28:     color_writetoaddr(0x04, 0x00);
  4427   002704  0E00               	movlw	0
  4428   002706  6E05               	movwf	color_writetoaddr@value^0,c
  4429   002708  0E04               	movlw	4
  4430   00270A  EC3B  F015         	call	_color_writetoaddr
  4431   00270E                     
  4432                           ;interrupts.c: 29:     color_writetoaddr(0x05, 0x01);
  4433   00270E  0E01               	movlw	1
  4434   002710  6E05               	movwf	color_writetoaddr@value^0,c
  4435   002712  0E05               	movlw	5
  4436   002714  EC3B  F015         	call	_color_writetoaddr
  4437   002718                     
  4438                           ;interrupts.c: 30:     color_writetoaddr(0x06, 0b00000000);
  4439   002718  0E00               	movlw	0
  4440   00271A  6E05               	movwf	color_writetoaddr@value^0,c
  4441   00271C  0E06               	movlw	6
  4442   00271E  EC3B  F015         	call	_color_writetoaddr
  4443   002722                     
  4444                           ;interrupts.c: 31:     color_writetoaddr(0x07, 0b00000010);
  4445   002722  0E02               	movlw	2
  4446   002724  6E05               	movwf	color_writetoaddr@value^0,c
  4447   002726  0E07               	movlw	7
  4448   002728  EC3B  F015         	call	_color_writetoaddr
  4449   00272C                     
  4450                           ;interrupts.c: 37:     color_writetoaddr(0x0C, 0b0011);
  4451   00272C  0E03               	movlw	3
  4452   00272E  6E05               	movwf	color_writetoaddr@value^0,c
  4453   002730  0E0C               	movlw	12
  4454   002732  EC3B  F015         	call	_color_writetoaddr
  4455   002736                     
  4456                           ;interrupts.c: 40:     PIE0bits.TMR0IE = 1;
  4457   002736  010E               	movlb	14	; () banked
  4458   002738  8B29               	bsf	41,5,b	;volatile
  4459   00273A                     
  4460                           ; BSR set to: 14
  4461                           ;interrupts.c: 41:     INTCONbits.PEIE=1;
  4462   00273A  8CF2               	bsf	242,6,c	;volatile
  4463   00273C                     
  4464                           ; BSR set to: 14
  4465                           ;interrupts.c: 53:     clearInterrupt();
  4466   00273C  EC5B  F015         	call	_clearInterrupt	;wreg free
  4467   002740                     
  4468                           ;interrupts.c: 56:     INTCONbits.GIE=1;
  4469   002740  8EF2               	bsf	242,7,c	;volatile
  4470   002742  0012               	return		;funcret
  4471   002744                     __end_of_interrupts_init:
  4472                           	callstack 0
  4473                           
  4474 ;; *************** function _clearInterrupt *****************
  4475 ;; Defined at:
  4476 ;;		line 99 in file "interrupts.c"
  4477 ;; Parameters:    Size  Location     Type
  4478 ;;		None
  4479 ;; Auto vars:     Size  Location     Type
  4480 ;;		None
  4481 ;; Return value:  Size  Location     Type
  4482 ;;                  1    wreg      void 
  4483 ;; Registers used:
  4484 ;;		wreg, status,2, status,0, cstack
  4485 ;; Tracked objects:
  4486 ;;		On entry : 0/0
  4487 ;;		On exit  : 0/0
  4488 ;;		Unchanged: 0/0
  4489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4490 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4491 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4492 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4493 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4494 ;;Total ram usage:        0 bytes
  4495 ;; Hardware stack levels used: 1
  4496 ;; Hardware stack levels required when called: 6
  4497 ;; This function calls:
  4498 ;;		_I2C_2_Master_Start
  4499 ;;		_I2C_2_Master_Stop
  4500 ;;		_I2C_2_Master_Write
  4501 ;; This function is called by:
  4502 ;;		_main
  4503 ;;		_interrupts_init
  4504 ;; This function uses a non-reentrant model
  4505 ;;
  4506                           
  4507                           	psect	text28
  4508   002AB6                     __ptext28:
  4509                           	callstack 0
  4510   002AB6                     _clearInterrupt:
  4511                           	callstack 23
  4512   002AB6                     
  4513                           ;interrupts.c: 100:     I2C_2_Master_Start();
  4514   002AB6  EC01  F016         	call	_I2C_2_Master_Start	;wreg free
  4515                           
  4516                           ;interrupts.c: 101:     I2C_2_Master_Write(0x52 | 0x00);
  4517   002ABA  0E52               	movlw	82
  4518   002ABC  ECDC  F015         	call	_I2C_2_Master_Write
  4519                           
  4520                           ;interrupts.c: 102:     I2C_2_Master_Write(0xe0 | 0x06 );
  4521   002AC0  0EE6               	movlw	230
  4522   002AC2  ECDC  F015         	call	_I2C_2_Master_Write
  4523                           
  4524                           ;interrupts.c: 103:     I2C_2_Master_Stop();
  4525   002AC6  ECFC  F015         	call	_I2C_2_Master_Stop	;wreg free
  4526   002ACA  0012               	return		;funcret
  4527   002ACC                     __end_of_clearInterrupt:
  4528                           	callstack 0
  4529                           
  4530 ;; *************** function _init_buttons_LED *****************
  4531 ;; Defined at:
  4532 ;;		line 8 in file "interact.c"
  4533 ;; Parameters:    Size  Location     Type
  4534 ;;		None
  4535 ;; Auto vars:     Size  Location     Type
  4536 ;;		None
  4537 ;; Return value:  Size  Location     Type
  4538 ;;                  1    wreg      void 
  4539 ;; Registers used:
  4540 ;;		None
  4541 ;; Tracked objects:
  4542 ;;		On entry : 0/0
  4543 ;;		On exit  : 0/0
  4544 ;;		Unchanged: 0/0
  4545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4546 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4547 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4548 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4549 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4550 ;;Total ram usage:        0 bytes
  4551 ;; Hardware stack levels used: 1
  4552 ;; Hardware stack levels required when called: 4
  4553 ;; This function calls:
  4554 ;;		Nothing
  4555 ;; This function is called by:
  4556 ;;		_main
  4557 ;; This function uses a non-reentrant model
  4558 ;;
  4559                           
  4560                           	psect	text29
  4561   002B5A                     __ptext29:
  4562                           	callstack 0
  4563   002B5A                     _init_buttons_LED:
  4564                           	callstack 26
  4565   002B5A                     
  4566                           ;interact.c: 10:     TRISGbits.TRISG0 = 0;
  4567   002B5A  9087               	bcf	135,0,c	;volatile
  4568                           
  4569                           ;interact.c: 11:     TRISEbits.TRISE7 = 0;
  4570   002B5C  9E85               	bcf	133,7,c	;volatile
  4571                           
  4572                           ;interact.c: 12:     TRISAbits.TRISA3 = 0;
  4573   002B5E  9681               	bcf	129,3,c	;volatile
  4574                           
  4575                           ;interact.c: 13:     TRISDbits.TRISD3 = 0;
  4576   002B60  9684               	bcf	132,3,c	;volatile
  4577                           
  4578                           ;interact.c: 14:     TRISHbits.TRISH1 = 0;
  4579   002B62  9288               	bcf	136,1,c	;volatile
  4580                           
  4581                           ;interact.c: 15:     TRISDbits.TRISD4 = 0;
  4582   002B64  9884               	bcf	132,4,c	;volatile
  4583                           
  4584                           ;interact.c: 19:     LATGbits.LATG0 = 0;
  4585   002B66  907F               	bcf	127,0,c	;volatile
  4586                           
  4587                           ;interact.c: 20:     LATEbits.LATE7 = 0;
  4588   002B68  9E7D               	bcf	125,7,c	;volatile
  4589                           
  4590                           ;interact.c: 21:     LATAbits.LATA3 = 0;
  4591   002B6A  9679               	bcf	121,3,c	;volatile
  4592   002B6C  0012               	return		;funcret
  4593   002B6E                     __end_of_init_buttons_LED:
  4594                           	callstack 0
  4595                           
  4596 ;; *************** function _initDCmotorsPWM *****************
  4597 ;; Defined at:
  4598 ;;		line 4 in file "dc_motor.c"
  4599 ;; Parameters:    Size  Location     Type
  4600 ;;  PWMperiod       2    2[COMRAM] unsigned int 
  4601 ;; Auto vars:     Size  Location     Type
  4602 ;;		None
  4603 ;; Return value:  Size  Location     Type
  4604 ;;                  1    wreg      void 
  4605 ;; Registers used:
  4606 ;;		wreg, status,2
  4607 ;; Tracked objects:
  4608 ;;		On entry : 0/0
  4609 ;;		On exit  : 0/0
  4610 ;;		Unchanged: 0/0
  4611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4612 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4613 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4614 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4615 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4616 ;;Total ram usage:        2 bytes
  4617 ;; Hardware stack levels used: 1
  4618 ;; Hardware stack levels required when called: 4
  4619 ;; This function calls:
  4620 ;;		Nothing
  4621 ;; This function is called by:
  4622 ;;		_main
  4623 ;; This function uses a non-reentrant model
  4624 ;;
  4625                           
  4626                           	psect	text30
  4627   0024D2                     __ptext30:
  4628                           	callstack 0
  4629   0024D2                     _initDCmotorsPWM:
  4630                           	callstack 26
  4631   0024D2                     
  4632                           ;dc_motor.c: 6:     TRISEbits.TRISE2 = 0;
  4633   0024D2  9485               	bcf	133,2,c	;volatile
  4634                           
  4635                           ;dc_motor.c: 7:     TRISEbits.TRISE4 = 0;
  4636   0024D4  9885               	bcf	133,4,c	;volatile
  4637                           
  4638                           ;dc_motor.c: 8:     TRISCbits.TRISC7 = 0;
  4639   0024D6  9E83               	bcf	131,7,c	;volatile
  4640                           
  4641                           ;dc_motor.c: 9:     TRISGbits.TRISG6 = 0;
  4642   0024D8  9C87               	bcf	135,6,c	;volatile
  4643   0024DA                     
  4644                           ;dc_motor.c: 12:     RE2PPS=0x05;
  4645   0024DA  0E05               	movlw	5
  4646   0024DC  010E               	movlb	14	; () banked
  4647   0024DE  6F74               	movwf	116,b	;volatile
  4648                           
  4649                           ;dc_motor.c: 13:     RE4PPS=0x06;
  4650   0024E0  0E06               	movlw	6
  4651   0024E2  6F76               	movwf	118,b	;volatile
  4652                           
  4653                           ;dc_motor.c: 14:     RC7PPS=0x07;
  4654   0024E4  0E07               	movlw	7
  4655   0024E6  6F69               	movwf	105,b	;volatile
  4656                           
  4657                           ;dc_motor.c: 15:     RG6PPS=0x08;
  4658   0024E8  0E08               	movlw	8
  4659   0024EA  6F88               	movwf	136,b	;volatile
  4660                           
  4661                           ;dc_motor.c: 18:     T2CONbits.CKPS=0b100;
  4662   0024EC  50BD               	movf	189,w,c	;volatile
  4663   0024EE  0B8F               	andlw	-113
  4664   0024F0  0940               	iorlw	64
  4665   0024F2  6EBD               	movwf	189,c	;volatile
  4666                           
  4667                           ;dc_motor.c: 19:     T2HLTbits.MODE=0b00000;
  4668   0024F4  0EE0               	movlw	-32
  4669   0024F6  16BE               	andwf	190,f,c	;volatile
  4670                           
  4671                           ;dc_motor.c: 20:     T2CLKCONbits.CS=0b0001;
  4672   0024F8  50BF               	movf	191,w,c	;volatile
  4673   0024FA  0BF0               	andlw	-16
  4674   0024FC  0901               	iorlw	1
  4675   0024FE  6EBF               	movwf	191,c	;volatile
  4676   002500                     
  4677                           ; BSR set to: 14
  4678                           ;dc_motor.c: 24:     T2PR=PWMperiod;
  4679   002500  C003  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  4680   002504                     
  4681                           ; BSR set to: 14
  4682                           ;dc_motor.c: 25:     T2CONbits.ON=1;
  4683   002504  8EBD               	bsf	189,7,c	;volatile
  4684                           
  4685                           ;dc_motor.c: 29:     CCPR1H=0;
  4686   002506  0E00               	movlw	0
  4687   002508  6EAA               	movwf	170,c	;volatile
  4688                           
  4689                           ;dc_motor.c: 30:     CCPR2H=0;
  4690   00250A  0E00               	movlw	0
  4691   00250C  6EA6               	movwf	166,c	;volatile
  4692                           
  4693                           ;dc_motor.c: 31:     CCPR3H=0;
  4694   00250E  0E00               	movlw	0
  4695   002510  010F               	movlb	15	; () banked
  4696   002512  6F25               	movwf	37,b	;volatile
  4697                           
  4698                           ;dc_motor.c: 32:     CCPR4H=0;
  4699   002514  0E00               	movlw	0
  4700   002516  6F21               	movwf	33,b	;volatile
  4701                           
  4702                           ;dc_motor.c: 35:     CCPTMRS0bits.C1TSEL=0;
  4703   002518  0EFC               	movlw	-4
  4704   00251A  16AD               	andwf	173,f,c	;volatile
  4705                           
  4706                           ;dc_motor.c: 36:     CCPTMRS0bits.C2TSEL=0;
  4707   00251C  0EF3               	movlw	-13
  4708   00251E  16AD               	andwf	173,f,c	;volatile
  4709                           
  4710                           ;dc_motor.c: 37:     CCPTMRS0bits.C3TSEL=0;
  4711   002520  0ECF               	movlw	-49
  4712   002522  16AD               	andwf	173,f,c	;volatile
  4713                           
  4714                           ;dc_motor.c: 38:     CCPTMRS0bits.C4TSEL=0;
  4715   002524  0E3F               	movlw	-193
  4716   002526  16AD               	andwf	173,f,c	;volatile
  4717   002528                     
  4718                           ; BSR set to: 15
  4719                           ;dc_motor.c: 41:     CCP1CONbits.FMT=1;
  4720   002528  88AB               	bsf	171,4,c	;volatile
  4721                           
  4722                           ;dc_motor.c: 42:     CCP1CONbits.CCP1MODE=0b1100;
  4723   00252A  50AB               	movf	171,w,c	;volatile
  4724   00252C  0BF0               	andlw	-16
  4725   00252E  090C               	iorlw	12
  4726   002530  6EAB               	movwf	171,c	;volatile
  4727   002532                     
  4728                           ; BSR set to: 15
  4729                           ;dc_motor.c: 43:     CCP1CONbits.EN=1;
  4730   002532  8EAB               	bsf	171,7,c	;volatile
  4731   002534                     
  4732                           ; BSR set to: 15
  4733                           ;dc_motor.c: 45:     CCP2CONbits.FMT=1;
  4734   002534  88A7               	bsf	167,4,c	;volatile
  4735                           
  4736                           ;dc_motor.c: 46:     CCP2CONbits.CCP2MODE=0b1100;
  4737   002536  50A7               	movf	167,w,c	;volatile
  4738   002538  0BF0               	andlw	-16
  4739   00253A  090C               	iorlw	12
  4740   00253C  6EA7               	movwf	167,c	;volatile
  4741   00253E                     
  4742                           ; BSR set to: 15
  4743                           ;dc_motor.c: 47:     CCP2CONbits.EN=1;
  4744   00253E  8EA7               	bsf	167,7,c	;volatile
  4745   002540                     
  4746                           ; BSR set to: 15
  4747                           ;dc_motor.c: 49:     CCP3CONbits.FMT=1;
  4748   002540  8926               	bsf	38,4,b	;volatile
  4749                           
  4750                           ;dc_motor.c: 50:     CCP3CONbits.CCP3MODE=0b1100;
  4751   002542  5126               	movf	38,w,b	;volatile
  4752   002544  0BF0               	andlw	-16
  4753   002546  090C               	iorlw	12
  4754   002548  6F26               	movwf	38,b	;volatile
  4755   00254A                     
  4756                           ; BSR set to: 15
  4757                           ;dc_motor.c: 51:     CCP3CONbits.EN=1;
  4758   00254A  8F26               	bsf	38,7,b	;volatile
  4759   00254C                     
  4760                           ; BSR set to: 15
  4761                           ;dc_motor.c: 53:     CCP4CONbits.FMT=1;
  4762   00254C  8922               	bsf	34,4,b	;volatile
  4763                           
  4764                           ;dc_motor.c: 54:     CCP4CONbits.CCP4MODE=0b1100;
  4765   00254E  5122               	movf	34,w,b	;volatile
  4766   002550  0BF0               	andlw	-16
  4767   002552  090C               	iorlw	12
  4768   002554  6F22               	movwf	34,b	;volatile
  4769   002556                     
  4770                           ; BSR set to: 15
  4771                           ;dc_motor.c: 55:     CCP4CONbits.EN=1;
  4772   002556  8F22               	bsf	34,7,b	;volatile
  4773   002558                     
  4774                           ; BSR set to: 15
  4775   002558  0012               	return		;funcret
  4776   00255A                     __end_of_initDCmotorsPWM:
  4777                           	callstack 0
  4778                           
  4779 ;; *************** function _initButtons *****************
  4780 ;; Defined at:
  4781 ;;		line 12 in file "feedback.c"
  4782 ;; Parameters:    Size  Location     Type
  4783 ;;		None
  4784 ;; Auto vars:     Size  Location     Type
  4785 ;;		None
  4786 ;; Return value:  Size  Location     Type
  4787 ;;                  1    wreg      void 
  4788 ;; Registers used:
  4789 ;;		None
  4790 ;; Tracked objects:
  4791 ;;		On entry : 0/0
  4792 ;;		On exit  : 0/0
  4793 ;;		Unchanged: 0/0
  4794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4795 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4796 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4797 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4798 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4799 ;;Total ram usage:        0 bytes
  4800 ;; Hardware stack levels used: 1
  4801 ;; Hardware stack levels required when called: 4
  4802 ;; This function calls:
  4803 ;;		Nothing
  4804 ;; This function is called by:
  4805 ;;		_main
  4806 ;; This function uses a non-reentrant model
  4807 ;;
  4808                           
  4809                           	psect	text31
  4810   002BAC                     __ptext31:
  4811                           	callstack 0
  4812   002BAC                     _initButtons:
  4813                           	callstack 26
  4814   002BAC                     
  4815                           ;feedback.c: 13:     TRISFbits.TRISF2 = 1;
  4816   002BAC  8486               	bsf	134,2,c	;volatile
  4817                           
  4818                           ;feedback.c: 14:     ANSELFbits.ANSELF2=0;
  4819   002BAE  010E               	movlb	14	; () banked
  4820   002BB0  95B4               	bcf	180,2,b	;volatile
  4821                           
  4822                           ;feedback.c: 15:     TRISFbits.TRISF3 = 1;
  4823   002BB2  8686               	bsf	134,3,c	;volatile
  4824                           
  4825                           ;feedback.c: 16:     ANSELFbits.ANSELF3=0;
  4826   002BB4  97B4               	bcf	180,3,b	;volatile
  4827   002BB6                     
  4828                           ; BSR set to: 14
  4829   002BB6  0012               	return		;funcret
  4830   002BB8                     __end_of_initButtons:
  4831                           	callstack 0
  4832                           
  4833 ;; *************** function _initBoardLEDs *****************
  4834 ;; Defined at:
  4835 ;;		line 5 in file "feedback.c"
  4836 ;; Parameters:    Size  Location     Type
  4837 ;;		None
  4838 ;; Auto vars:     Size  Location     Type
  4839 ;;		None
  4840 ;; Return value:  Size  Location     Type
  4841 ;;                  1    wreg      void 
  4842 ;; Registers used:
  4843 ;;		None
  4844 ;; Tracked objects:
  4845 ;;		On entry : 0/0
  4846 ;;		On exit  : 0/0
  4847 ;;		Unchanged: 0/0
  4848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4849 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4850 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4851 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4852 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4853 ;;Total ram usage:        0 bytes
  4854 ;; Hardware stack levels used: 1
  4855 ;; Hardware stack levels required when called: 4
  4856 ;; This function calls:
  4857 ;;		Nothing
  4858 ;; This function is called by:
  4859 ;;		_main
  4860 ;; This function uses a non-reentrant model
  4861 ;;
  4862                           
  4863                           	psect	text32
  4864   002BD0                     __ptext32:
  4865                           	callstack 0
  4866   002BD0                     _initBoardLEDs:
  4867                           	callstack 26
  4868   002BD0                     
  4869                           ;feedback.c: 6:     TRISDbits.TRISD7 = 0;
  4870   002BD0  9E84               	bcf	132,7,c	;volatile
  4871                           
  4872                           ;feedback.c: 7:     LATDbits.LATD7 = 0;
  4873   002BD2  9E7C               	bcf	124,7,c	;volatile
  4874                           
  4875                           ;feedback.c: 8:     TRISHbits.TRISH3 = 0;
  4876   002BD4  9688               	bcf	136,3,c	;volatile
  4877                           
  4878                           ;feedback.c: 9:     LATHbits.LATH3 = 0;
  4879   002BD6  9680               	bcf	128,3,c	;volatile
  4880   002BD8  0012               	return		;funcret
  4881   002BDA                     __end_of_initBoardLEDs:
  4882                           	callstack 0
  4883                           
  4884 ;; *************** function _indicateInstruction *****************
  4885 ;; Defined at:
  4886 ;;		line 31 in file "feedback.c"
  4887 ;; Parameters:    Size  Location     Type
  4888 ;;  period          1    wreg     unsigned char 
  4889 ;; Auto vars:     Size  Location     Type
  4890 ;;  period          1    5[COMRAM] unsigned char 
  4891 ;;  j               2    6[COMRAM] int 
  4892 ;;  i               2    8[COMRAM] int 
  4893 ;; Return value:  Size  Location     Type
  4894 ;;                  1    wreg      void 
  4895 ;; Registers used:
  4896 ;;		wreg, status,2, status,0
  4897 ;; Tracked objects:
  4898 ;;		On entry : 0/0
  4899 ;;		On exit  : 0/0
  4900 ;;		Unchanged: 0/0
  4901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4902 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4903 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4904 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4905 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4906 ;;Total ram usage:        8 bytes
  4907 ;; Hardware stack levels used: 1
  4908 ;; Hardware stack levels required when called: 4
  4909 ;; This function calls:
  4910 ;;		Nothing
  4911 ;; This function is called by:
  4912 ;;		_main
  4913 ;; This function uses a non-reentrant model
  4914 ;;
  4915                           
  4916                           	psect	text33
  4917   00242A                     __ptext33:
  4918                           	callstack 0
  4919   00242A                     _indicateInstruction:
  4920                           	callstack 26
  4921                           
  4922                           ;incstack = 0
  4923                           ;indicateInstruction@period stored from wreg
  4924   00242A  6E06               	movwf	indicateInstruction@period^0,c
  4925   00242C                     
  4926                           ;feedback.c: 32:     for (int i = 0; i < 2; i++) {
  4927   00242C  0E00               	movlw	0
  4928   00242E  6E0A               	movwf	(indicateInstruction@i+1)^0,c
  4929   002430  0E00               	movlw	0
  4930   002432  6E09               	movwf	indicateInstruction@i^0,c
  4931   002434                     l3370:
  4932                           
  4933                           ;feedback.c: 33:         for (int j = 0; j < period; j++) {
  4934   002434  0E00               	movlw	0
  4935   002436  6E08               	movwf	(indicateInstruction@j+1)^0,c
  4936   002438  0E00               	movlw	0
  4937   00243A  6E07               	movwf	indicateInstruction@j^0,c
  4938   00243C  EF3A  F012         	goto	l674
  4939   002440                     l675:
  4940                           
  4941                           ;feedback.c: 34:             LATHbits.LATH3 = 1;
  4942   002440  8680               	bsf	128,3,c	;volatile
  4943   002442                     
  4944                           ;feedback.c: 35:             _delay((unsigned long)((150)*(64000000/4000.0)));
  4945   002442  0E0D               	movlw	13
  4946   002444  6E04               	movwf	(??_indicateInstruction+1)^0,c
  4947   002446  0E2D               	movlw	45
  4948   002448  6E03               	movwf	??_indicateInstruction^0,c
  4949   00244A  0ED8               	movlw	216
  4950   00244C                     u2187:
  4951   00244C  2EE8               	decfsz	wreg,f,c
  4952   00244E  D7FE               	bra	u2187
  4953   002450  2E03               	decfsz	??_indicateInstruction^0,f,c
  4954   002452  D7FC               	bra	u2187
  4955   002454  2E04               	decfsz	(??_indicateInstruction+1)^0,f,c
  4956   002456  D7FA               	bra	u2187
  4957   002458                     
  4958                           ;feedback.c: 36:             LATHbits.LATH3 = 0;
  4959   002458  9680               	bcf	128,3,c	;volatile
  4960                           
  4961                           ;feedback.c: 37:             _delay((unsigned long)((150)*(64000000/4000.0)));
  4962   00245A  0E0D               	movlw	13
  4963   00245C  6E04               	movwf	(??_indicateInstruction+1)^0,c
  4964   00245E  0E2D               	movlw	45
  4965   002460  6E03               	movwf	??_indicateInstruction^0,c
  4966   002462  0ED8               	movlw	216
  4967   002464                     u2197:
  4968   002464  2EE8               	decfsz	wreg,f,c
  4969   002466  D7FE               	bra	u2197
  4970   002468  2E03               	decfsz	??_indicateInstruction^0,f,c
  4971   00246A  D7FC               	bra	u2197
  4972   00246C  2E04               	decfsz	(??_indicateInstruction+1)^0,f,c
  4973   00246E  D7FA               	bra	u2197
  4974   002470                     
  4975                           ;feedback.c: 38:         }
  4976   002470  4A07               	infsnz	indicateInstruction@j^0,f,c
  4977   002472  2A08               	incf	(indicateInstruction@j+1)^0,f,c
  4978   002474                     l674:
  4979   002474  5006               	movf	indicateInstruction@period^0,w,c
  4980   002476  6E03               	movwf	??_indicateInstruction^0,c
  4981   002478  6A04               	clrf	(??_indicateInstruction+1)^0,c
  4982   00247A  5003               	movf	??_indicateInstruction^0,w,c
  4983   00247C  5C07               	subwf	indicateInstruction@j^0,w,c
  4984   00247E  5008               	movf	(indicateInstruction@j+1)^0,w,c
  4985   002480  0A80               	xorlw	128
  4986   002482  6E05               	movwf	(??_indicateInstruction+2)^0,c
  4987   002484  5004               	movf	(??_indicateInstruction+1)^0,w,c
  4988   002486  0A80               	xorlw	128
  4989   002488  5805               	subwfb	(??_indicateInstruction+2)^0,w,c
  4990   00248A  A0D8               	btfss	status,0,c
  4991   00248C  EF4A  F012         	goto	u1771
  4992   002490  EF4C  F012         	goto	u1770
  4993   002494                     u1771:
  4994   002494  EF20  F012         	goto	l675
  4995   002498                     u1770:
  4996   002498                     
  4997                           ;feedback.c: 39:         _delay((unsigned long)((500)*(64000000/4000.0)));
  4998   002498  0E29               	movlw	41
  4999   00249A  6E04               	movwf	(??_indicateInstruction+1)^0,c
  5000   00249C  0E96               	movlw	150
  5001   00249E  6E03               	movwf	??_indicateInstruction^0,c
  5002   0024A0  0E7F               	movlw	127
  5003   0024A2                     u2207:
  5004   0024A2  2EE8               	decfsz	wreg,f,c
  5005   0024A4  D7FE               	bra	u2207
  5006   0024A6  2E03               	decfsz	??_indicateInstruction^0,f,c
  5007   0024A8  D7FC               	bra	u2207
  5008   0024AA  2E04               	decfsz	(??_indicateInstruction+1)^0,f,c
  5009   0024AC  D7FA               	bra	u2207
  5010   0024AE  0000               	nop	
  5011   0024B0                     
  5012                           ;feedback.c: 40:     }
  5013   0024B0  4A09               	infsnz	indicateInstruction@i^0,f,c
  5014   0024B2  2A0A               	incf	(indicateInstruction@i+1)^0,f,c
  5015   0024B4  BE0A               	btfsc	(indicateInstruction@i+1)^0,7,c
  5016   0024B6  EF66  F012         	goto	u1781
  5017   0024BA  500A               	movf	(indicateInstruction@i+1)^0,w,c
  5018   0024BC  E109               	bnz	u1780
  5019   0024BE  0E02               	movlw	2
  5020   0024C0  5C09               	subwf	indicateInstruction@i^0,w,c
  5021   0024C2  A0D8               	btfss	status,0,c
  5022   0024C4  EF66  F012         	goto	u1781
  5023   0024C8  EF68  F012         	goto	u1780
  5024   0024CC                     u1781:
  5025   0024CC  EF1A  F012         	goto	l3370
  5026   0024D0                     u1780:
  5027   0024D0  0012               	return		;funcret
  5028   0024D2                     __end_of_indicateInstruction:
  5029                           	callstack 0
  5030                           
  5031 ;; *************** function _fastStop *****************
  5032 ;; Defined at:
  5033 ;;		line 141 in file "dc_motor.c"
  5034 ;; Parameters:    Size  Location     Type
  5035 ;;  mL              1   20[COMRAM] PTR struct DC_motor
  5036 ;;		 -> main@motorL(9), 
  5037 ;;  mR              1   21[COMRAM] PTR struct DC_motor
  5038 ;;		 -> main@motorR(9), 
  5039 ;; Auto vars:     Size  Location     Type
  5040 ;;  i               2   25[COMRAM] int 
  5041 ;;  current_powe    2   23[COMRAM] unsigned int 
  5042 ;; Return value:  Size  Location     Type
  5043 ;;                  1    wreg      void 
  5044 ;; Registers used:
  5045 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5046 ;; Tracked objects:
  5047 ;;		On entry : 0/0
  5048 ;;		On exit  : 0/0
  5049 ;;		Unchanged: 0/0
  5050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5051 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5052 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5053 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5054 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5055 ;;Total ram usage:        7 bytes
  5056 ;; Hardware stack levels used: 1
  5057 ;; Hardware stack levels required when called: 6
  5058 ;; This function calls:
  5059 ;;		_setMotorPWM
  5060 ;; This function is called by:
  5061 ;;		_main
  5062 ;; This function uses a non-reentrant model
  5063 ;;
  5064                           
  5065                           	psect	text34
  5066   0025CE                     __ptext34:
  5067                           	callstack 0
  5068   0025CE                     _fastStop:
  5069                           	callstack 24
  5070   0025CE                     
  5071                           ;dc_motor.c: 141: void fastStop(DC_motor *mL, DC_motor *mR);dc_motor.c: 142: {;dc_motor.
      +                          c: 144:     unsigned int current_power = mL->power;
  5072   0025CE  5015               	movf	fastStop@mL^0,w,c
  5073   0025D0  6ED9               	movwf	fsr2l,c
  5074   0025D2  6ADA               	clrf	fsr2h,c
  5075   0025D4  50DF               	movf	indf2,w,c
  5076   0025D6  6E17               	movwf	??_fastStop^0,c
  5077   0025D8  5017               	movf	??_fastStop^0,w,c
  5078   0025DA  6E18               	movwf	fastStop@current_power^0,c
  5079   0025DC  6A19               	clrf	(fastStop@current_power+1)^0,c
  5080   0025DE                     
  5081                           ;dc_motor.c: 146:     for (int i=current_power; i>= 0; i--) {
  5082   0025DE  C018  F01A         	movff	fastStop@current_power,fastStop@i
  5083   0025E2  C019  F01B         	movff	fastStop@current_power+1,fastStop@i+1
  5084   0025E6                     l3348:
  5085   0025E6  BE1B               	btfsc	(fastStop@i+1)^0,7,c
  5086   0025E8  EFFA  F012         	goto	u1760
  5087   0025EC  EFF8  F012         	goto	u1761
  5088   0025F0                     u1761:
  5089   0025F0  EFFC  F012         	goto	l3352
  5090   0025F4                     u1760:
  5091   0025F4  EF1B  F013         	goto	l524
  5092   0025F8                     l3352:
  5093                           
  5094                           ;dc_motor.c: 147:         mL->power = i;
  5095   0025F8  5015               	movf	fastStop@mL^0,w,c
  5096   0025FA  6ED9               	movwf	fsr2l,c
  5097   0025FC  6ADA               	clrf	fsr2h,c
  5098   0025FE  C01A  FFDF         	movff	fastStop@i,indf2
  5099                           
  5100                           ;dc_motor.c: 148:         mR->power = i;
  5101   002602  5016               	movf	fastStop@mR^0,w,c
  5102   002604  6ED9               	movwf	fsr2l,c
  5103   002606  6ADA               	clrf	fsr2h,c
  5104   002608  C01A  FFDF         	movff	fastStop@i,indf2
  5105   00260C                     
  5106                           ;dc_motor.c: 149:         setMotorPWM(mL);
  5107   00260C  C015  F010         	movff	fastStop@mL,setMotorPWM@m
  5108   002610  EC80  F00C         	call	_setMotorPWM	;wreg free
  5109   002614                     
  5110                           ;dc_motor.c: 150:         setMotorPWM(mR);
  5111   002614  C016  F010         	movff	fastStop@mR,setMotorPWM@m
  5112   002618  EC80  F00C         	call	_setMotorPWM	;wreg free
  5113   00261C                     
  5114                           ;dc_motor.c: 151:         _delay((unsigned long)((1)*(64000000/4000.0)));
  5115   00261C  0E15               	movlw	21
  5116   00261E  6E17               	movwf	??_fastStop^0,c
  5117   002620  0EC6               	movlw	198
  5118   002622                     u2217:
  5119   002622  2EE8               	decfsz	wreg,f,c
  5120   002624  D7FE               	bra	u2217
  5121   002626  2E17               	decfsz	??_fastStop^0,f,c
  5122   002628  D7FC               	bra	u2217
  5123   00262A  D000               	nop2	
  5124   00262C                     
  5125                           ;dc_motor.c: 152:     }
  5126   00262C  061A               	decf	fastStop@i^0,f,c
  5127   00262E  A0D8               	btfss	status,0,c
  5128   002630  061B               	decf	(fastStop@i+1)^0,f,c
  5129   002632  EFF3  F012         	goto	l3348
  5130   002636                     l524:
  5131   002636  0012               	return		;funcret
  5132   002638                     __end_of_fastStop:
  5133                           	callstack 0
  5134                           
  5135 ;; *************** function _decideColor *****************
  5136 ;; Defined at:
  5137 ;;		line 161 in file "color.c"
  5138 ;; Parameters:    Size  Location     Type
  5139 ;;  normRGB         1   41[COMRAM] PTR struct normColors
  5140 ;;		 -> main@normRGB(8), 
  5141 ;;  RGBC            1   42[COMRAM] PTR struct colors
  5142 ;;		 -> main@RGBC(8), 
  5143 ;;  mL              1   43[COMRAM] PTR struct DC_motor
  5144 ;;		 -> main@motorL(9), 
  5145 ;;  mR              1   44[COMRAM] PTR struct DC_motor
  5146 ;;		 -> main@motorR(9), 
  5147 ;; Auto vars:     Size  Location     Type
  5148 ;;		None
  5149 ;; Return value:  Size  Location     Type
  5150 ;;                  1    wreg      unsigned char 
  5151 ;; Registers used:
  5152 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5153 ;; Tracked objects:
  5154 ;;		On entry : 0/0
  5155 ;;		On exit  : 0/0
  5156 ;;		Unchanged: 0/0
  5157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5158 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5159 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5160 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5161 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5162 ;;Total ram usage:        6 bytes
  5163 ;; Hardware stack levels used: 1
  5164 ;; Hardware stack levels required when called: 8
  5165 ;; This function calls:
  5166 ;;		_LEDturnON
  5167 ;;		_creep
  5168 ;;		_normalizeColors
  5169 ;;		_readColors
  5170 ;; This function is called by:
  5171 ;;		_main
  5172 ;; This function uses a non-reentrant model
  5173 ;;
  5174                           
  5175                           	psect	text35
  5176   000E02                     __ptext35:
  5177                           	callstack 0
  5178   000E02                     _decideColor:
  5179                           	callstack 22
  5180   000E02                     
  5181                           ;color.c: 162:     if (normRGB->normBlue > 17) {
  5182   000E02  502A               	movf	decideColor@normRGB^0,w,c
  5183   000E04  6ED9               	movwf	fsr2l,c
  5184   000E06  6ADA               	clrf	fsr2h,c
  5185   000E08  0E04               	movlw	4
  5186   000E0A  26D9               	addwf	fsr2l,f,c
  5187   000E0C  0E01               	movlw	1
  5188   000E0E  50DB               	movf	plusw2,w,c
  5189   000E10  E109               	bnz	u1500
  5190   000E12  0E12               	movlw	18
  5191   000E14  5CDE               	subwf	postinc2,w,c
  5192   000E16  A0D8               	btfss	status,0,c
  5193   000E18  EF10  F007         	goto	u1501
  5194   000E1C  EF12  F007         	goto	u1500
  5195   000E20                     u1501:
  5196   000E20  EF21  F007         	goto	l3150
  5197   000E24                     u1500:
  5198   000E24                     
  5199                           ;color.c: 163:         creep(mL, mR, 16, 0);
  5200   000E24  C02C  F01C         	movff	decideColor@mL,creep@mL
  5201   000E28  C02D  F01D         	movff	decideColor@mR,creep@mR
  5202   000E2C  0E00               	movlw	0
  5203   000E2E  6E1F               	movwf	(creep@increments+1)^0,c
  5204   000E30  0E10               	movlw	16
  5205   000E32  6E1E               	movwf	creep@increments^0,c
  5206   000E34  0E00               	movlw	0
  5207   000E36  6E20               	movwf	creep@direction^0,c
  5208   000E38  ECEF  F008         	call	_creep	;wreg free
  5209   000E3C                     
  5210                           ;color.c: 164:         return 2;
  5211   000E3C  0E02               	movlw	2
  5212   000E3E  EF12  F008         	goto	l64
  5213   000E42                     l3150:
  5214                           
  5215                           ;color.c: 166:     if (normRGB->normBlue > 12 && normRGB->normRed < 50) {
  5216   000E42  502A               	movf	decideColor@normRGB^0,w,c
  5217   000E44  6ED9               	movwf	fsr2l,c
  5218   000E46  6ADA               	clrf	fsr2h,c
  5219   000E48  0E04               	movlw	4
  5220   000E4A  26D9               	addwf	fsr2l,f,c
  5221   000E4C  0E01               	movlw	1
  5222   000E4E  50DB               	movf	plusw2,w,c
  5223   000E50  E109               	bnz	u1510
  5224   000E52  0E0D               	movlw	13
  5225   000E54  5CDE               	subwf	postinc2,w,c
  5226   000E56  A0D8               	btfss	status,0,c
  5227   000E58  EF30  F007         	goto	u1511
  5228   000E5C  EF32  F007         	goto	u1510
  5229   000E60                     u1511:
  5230   000E60  EF50  F007         	goto	l3160
  5231   000E64                     u1510:
  5232   000E64  502A               	movf	decideColor@normRGB^0,w,c
  5233   000E66  6ED9               	movwf	fsr2l,c
  5234   000E68  6ADA               	clrf	fsr2h,c
  5235   000E6A  0E01               	movlw	1
  5236   000E6C  50DB               	movf	plusw2,w,c
  5237   000E6E  E107               	bnz	u1521
  5238   000E70  0E32               	movlw	50
  5239   000E72  5CDE               	subwf	postinc2,w,c
  5240   000E74  B0D8               	btfsc	status,0,c
  5241   000E76  EF3F  F007         	goto	u1521
  5242   000E7A  EF41  F007         	goto	u1520
  5243   000E7E                     u1521:
  5244   000E7E  EF50  F007         	goto	l3160
  5245   000E82                     u1520:
  5246   000E82                     
  5247                           ;color.c: 167:         creep(mL, mR, 16, 0);
  5248   000E82  C02C  F01C         	movff	decideColor@mL,creep@mL
  5249   000E86  C02D  F01D         	movff	decideColor@mR,creep@mR
  5250   000E8A  0E00               	movlw	0
  5251   000E8C  6E1F               	movwf	(creep@increments+1)^0,c
  5252   000E8E  0E10               	movlw	16
  5253   000E90  6E1E               	movwf	creep@increments^0,c
  5254   000E92  0E00               	movlw	0
  5255   000E94  6E20               	movwf	creep@direction^0,c
  5256   000E96  ECEF  F008         	call	_creep	;wreg free
  5257   000E9A                     
  5258                           ;color.c: 168:         return 6;
  5259   000E9A  0E06               	movlw	6
  5260   000E9C  EF12  F008         	goto	l64
  5261   000EA0                     l3160:
  5262                           
  5263                           ;color.c: 170:     if (normRGB->normRed > 70,normRGB->normGreen < 22) {
  5264   000EA0  502A               	movf	decideColor@normRGB^0,w,c
  5265   000EA2  6ED9               	movwf	fsr2l,c
  5266   000EA4  6ADA               	clrf	fsr2h,c
  5267   000EA6  0E02               	movlw	2
  5268   000EA8  26D9               	addwf	fsr2l,f,c
  5269   000EAA  0E01               	movlw	1
  5270   000EAC  50DB               	movf	plusw2,w,c
  5271   000EAE  E107               	bnz	u1531
  5272   000EB0  0E16               	movlw	22
  5273   000EB2  5CDE               	subwf	postinc2,w,c
  5274   000EB4  B0D8               	btfsc	status,0,c
  5275   000EB6  EF5F  F007         	goto	u1531
  5276   000EBA  EF61  F007         	goto	u1530
  5277   000EBE                     u1531:
  5278   000EBE  EF70  F007         	goto	l3170
  5279   000EC2                     u1530:
  5280   000EC2                     
  5281                           ;color.c: 171:         creep(mL, mR, 16, 0);
  5282   000EC2  C02C  F01C         	movff	decideColor@mL,creep@mL
  5283   000EC6  C02D  F01D         	movff	decideColor@mR,creep@mR
  5284   000ECA  0E00               	movlw	0
  5285   000ECC  6E1F               	movwf	(creep@increments+1)^0,c
  5286   000ECE  0E10               	movlw	16
  5287   000ED0  6E1E               	movwf	creep@increments^0,c
  5288   000ED2  0E00               	movlw	0
  5289   000ED4  6E20               	movwf	creep@direction^0,c
  5290   000ED6  ECEF  F008         	call	_creep	;wreg free
  5291   000EDA                     
  5292                           ;color.c: 172:         return 0;
  5293   000EDA  0E00               	movlw	0
  5294   000EDC  EF12  F008         	goto	l64
  5295   000EE0                     l3170:
  5296                           
  5297                           ;color.c: 176:         LEDturnON();
  5298   000EE0  ECF2  F015         	call	_LEDturnON	;wreg free
  5299   000EE4                     
  5300                           ;color.c: 177:         _delay((unsigned long)((1000)*(64000000/4000.0)));
  5301   000EE4  0E52               	movlw	82
  5302   000EE6  6E2F               	movwf	(??_decideColor+1)^0,c
  5303   000EE8  0E2B               	movlw	43
  5304   000EEA  6E2E               	movwf	??_decideColor^0,c
  5305   000EEC  0E00               	movlw	0
  5306   000EEE                     u2227:
  5307   000EEE  2EE8               	decfsz	wreg,f,c
  5308   000EF0  D7FE               	bra	u2227
  5309   000EF2  2E2E               	decfsz	??_decideColor^0,f,c
  5310   000EF4  D7FC               	bra	u2227
  5311   000EF6  2E2F               	decfsz	(??_decideColor+1)^0,f,c
  5312   000EF8  D7FA               	bra	u2227
  5313   000EFA  D000               	nop2	
  5314   000EFC                     
  5315                           ;color.c: 178:         creep(mL, mR, 8, 1);
  5316   000EFC  C02C  F01C         	movff	decideColor@mL,creep@mL
  5317   000F00  C02D  F01D         	movff	decideColor@mR,creep@mR
  5318   000F04  0E00               	movlw	0
  5319   000F06  6E1F               	movwf	(creep@increments+1)^0,c
  5320   000F08  0E08               	movlw	8
  5321   000F0A  6E1E               	movwf	creep@increments^0,c
  5322   000F0C  0E01               	movlw	1
  5323   000F0E  6E20               	movwf	creep@direction^0,c
  5324   000F10  ECEF  F008         	call	_creep	;wreg free
  5325   000F14                     
  5326                           ;color.c: 179:         readColors(RGBC);
  5327   000F14  C02B  F00E         	movff	decideColor@RGBC,readColors@RGBC
  5328   000F18  EC88  F00F         	call	_readColors	;wreg free
  5329   000F1C                     
  5330                           ;color.c: 180:         normalizeColors(RGBC, normRGB);
  5331   000F1C  C02B  F010         	movff	decideColor@RGBC,normalizeColors@RGBC
  5332   000F20  C02A  F011         	movff	decideColor@normRGB,normalizeColors@normRGB
  5333   000F24  EC2A  F00D         	call	_normalizeColors	;wreg free
  5334   000F28                     
  5335                           ;color.c: 181:         creep(mL, mR, 16, 0);
  5336   000F28  C02C  F01C         	movff	decideColor@mL,creep@mL
  5337   000F2C  C02D  F01D         	movff	decideColor@mR,creep@mR
  5338   000F30  0E00               	movlw	0
  5339   000F32  6E1F               	movwf	(creep@increments+1)^0,c
  5340   000F34  0E10               	movlw	16
  5341   000F36  6E1E               	movwf	creep@increments^0,c
  5342   000F38  0E00               	movlw	0
  5343   000F3A  6E20               	movwf	creep@direction^0,c
  5344   000F3C  ECEF  F008         	call	_creep	;wreg free
  5345   000F40                     
  5346                           ;color.c: 184:         if (normRGB->clear < 0x300) {
  5347   000F40  502A               	movf	decideColor@normRGB^0,w,c
  5348   000F42  6ED9               	movwf	fsr2l,c
  5349   000F44  6ADA               	clrf	fsr2h,c
  5350   000F46  0E06               	movlw	6
  5351   000F48  26D9               	addwf	fsr2l,f,c
  5352   000F4A  52DE               	movf	postinc2,f,c
  5353   000F4C  0E03               	movlw	3
  5354   000F4E  5CDE               	subwf	postinc2,w,c
  5355   000F50  B0D8               	btfsc	status,0,c
  5356   000F52  EFAD  F007         	goto	u1541
  5357   000F56  EFAF  F007         	goto	u1540
  5358   000F5A                     u1541:
  5359   000F5A  EFB2  F007         	goto	l3188
  5360   000F5E                     u1540:
  5361   000F5E                     
  5362                           ;color.c: 185:             return 8;
  5363   000F5E  0E08               	movlw	8
  5364   000F60  EF12  F008         	goto	l64
  5365   000F64                     l3188:
  5366                           
  5367                           ;color.c: 187:         if (normRGB->normGreen > 48) {
  5368   000F64  502A               	movf	decideColor@normRGB^0,w,c
  5369   000F66  6ED9               	movwf	fsr2l,c
  5370   000F68  6ADA               	clrf	fsr2h,c
  5371   000F6A  0E02               	movlw	2
  5372   000F6C  26D9               	addwf	fsr2l,f,c
  5373   000F6E  0E01               	movlw	1
  5374   000F70  50DB               	movf	plusw2,w,c
  5375   000F72  E109               	bnz	u1550
  5376   000F74  0E31               	movlw	49
  5377   000F76  5CDE               	subwf	postinc2,w,c
  5378   000F78  A0D8               	btfss	status,0,c
  5379   000F7A  EFC1  F007         	goto	u1551
  5380   000F7E  EFC3  F007         	goto	u1550
  5381   000F82                     u1551:
  5382   000F82  EFC6  F007         	goto	l3194
  5383   000F86                     u1550:
  5384   000F86                     
  5385                           ;color.c: 188:             return 1;
  5386   000F86  0E01               	movlw	1
  5387   000F88  EF12  F008         	goto	l64
  5388   000F8C                     l3194:
  5389                           
  5390                           ;color.c: 190:         if (normRGB->normRed > 60 && normRGB->normGreen < 30) {
  5391   000F8C  502A               	movf	decideColor@normRGB^0,w,c
  5392   000F8E  6ED9               	movwf	fsr2l,c
  5393   000F90  6ADA               	clrf	fsr2h,c
  5394   000F92  0E01               	movlw	1
  5395   000F94  50DB               	movf	plusw2,w,c
  5396   000F96  E109               	bnz	u1560
  5397   000F98  0E3D               	movlw	61
  5398   000F9A  5CDE               	subwf	postinc2,w,c
  5399   000F9C  A0D8               	btfss	status,0,c
  5400   000F9E  EFD3  F007         	goto	u1561
  5401   000FA2  EFD5  F007         	goto	u1560
  5402   000FA6                     u1561:
  5403   000FA6  EFE9  F007         	goto	l3202
  5404   000FAA                     u1560:
  5405   000FAA  502A               	movf	decideColor@normRGB^0,w,c
  5406   000FAC  6ED9               	movwf	fsr2l,c
  5407   000FAE  6ADA               	clrf	fsr2h,c
  5408   000FB0  0E02               	movlw	2
  5409   000FB2  26D9               	addwf	fsr2l,f,c
  5410   000FB4  0E01               	movlw	1
  5411   000FB6  50DB               	movf	plusw2,w,c
  5412   000FB8  E107               	bnz	u1571
  5413   000FBA  0E1E               	movlw	30
  5414   000FBC  5CDE               	subwf	postinc2,w,c
  5415   000FBE  B0D8               	btfsc	status,0,c
  5416   000FC0  EFE4  F007         	goto	u1571
  5417   000FC4  EFE6  F007         	goto	u1570
  5418   000FC8                     u1571:
  5419   000FC8  EFE9  F007         	goto	l3202
  5420   000FCC                     u1570:
  5421   000FCC                     
  5422                           ;color.c: 191:             return 5;
  5423   000FCC  0E05               	movlw	5
  5424   000FCE  EF12  F008         	goto	l64
  5425   000FD2                     l3202:
  5426                           
  5427                           ;color.c: 193:         if (normRGB->normBlue < 7) {
  5428   000FD2  502A               	movf	decideColor@normRGB^0,w,c
  5429   000FD4  6ED9               	movwf	fsr2l,c
  5430   000FD6  6ADA               	clrf	fsr2h,c
  5431   000FD8  0E04               	movlw	4
  5432   000FDA  26D9               	addwf	fsr2l,f,c
  5433   000FDC  0E01               	movlw	1
  5434   000FDE  50DB               	movf	plusw2,w,c
  5435   000FE0  E107               	bnz	u1581
  5436   000FE2  0E07               	movlw	7
  5437   000FE4  5CDE               	subwf	postinc2,w,c
  5438   000FE6  B0D8               	btfsc	status,0,c
  5439   000FE8  EFF8  F007         	goto	u1581
  5440   000FEC  EFFA  F007         	goto	u1580
  5441   000FF0                     u1581:
  5442   000FF0  EFFD  F007         	goto	l3210
  5443   000FF4                     u1580:
  5444   000FF4                     
  5445                           ;color.c: 194:             return 3;
  5446   000FF4  0E03               	movlw	3
  5447   000FF6  EF12  F008         	goto	l64
  5448   000FFA                     l3210:
  5449                           
  5450                           ;color.c: 197:             if (normRGB->normGreen > 34) {
  5451   000FFA  502A               	movf	decideColor@normRGB^0,w,c
  5452   000FFC  6ED9               	movwf	fsr2l,c
  5453   000FFE  6ADA               	clrf	fsr2h,c
  5454   001000  0E02               	movlw	2
  5455   001002  26D9               	addwf	fsr2l,f,c
  5456   001004  0E01               	movlw	1
  5457   001006  50DB               	movf	plusw2,w,c
  5458   001008  E109               	bnz	u1590
  5459   00100A  0E23               	movlw	35
  5460   00100C  5CDE               	subwf	postinc2,w,c
  5461   00100E  A0D8               	btfss	status,0,c
  5462   001010  EF0C  F008         	goto	u1591
  5463   001014  EF0E  F008         	goto	u1590
  5464   001018                     u1591:
  5465   001018  EF11  F008         	goto	l3218
  5466   00101C                     u1590:
  5467   00101C                     
  5468                           ;color.c: 198:                 return 7;
  5469   00101C  0E07               	movlw	7
  5470   00101E  EF12  F008         	goto	l64
  5471   001022                     l3218:
  5472                           
  5473                           ;color.c: 201:                 return 4;
  5474   001022  0E04               	movlw	4
  5475   001024                     l64:
  5476   001024  0012               	return		;funcret
  5477   001026                     __end_of_decideColor:
  5478                           	callstack 0
  5479                           
  5480 ;; *************** function _readColors *****************
  5481 ;; Defined at:
  5482 ;;		line 130 in file "color.c"
  5483 ;; Parameters:    Size  Location     Type
  5484 ;;  RGBC            1   13[COMRAM] PTR struct colors
  5485 ;;		 -> main@RGBC(8), 
  5486 ;; Auto vars:     Size  Location     Type
  5487 ;;		None
  5488 ;; Return value:  Size  Location     Type
  5489 ;;                  1    wreg      void 
  5490 ;; Registers used:
  5491 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5492 ;; Tracked objects:
  5493 ;;		On entry : 0/0
  5494 ;;		On exit  : 0/0
  5495 ;;		Unchanged: 0/0
  5496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5497 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5498 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5499 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5500 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5501 ;;Total ram usage:        3 bytes
  5502 ;; Hardware stack levels used: 1
  5503 ;; Hardware stack levels required when called: 7
  5504 ;; This function calls:
  5505 ;;		_LEDturnOFF
  5506 ;;		_LEDturnON
  5507 ;;		_readBlueColor
  5508 ;;		_readClearColor
  5509 ;;		_readGreenColor
  5510 ;;		_readRedColor
  5511 ;; This function is called by:
  5512 ;;		_decideColor
  5513 ;;		_main
  5514 ;; This function uses a non-reentrant model
  5515 ;;
  5516                           
  5517                           	psect	text36
  5518   001F10                     __ptext36:
  5519                           	callstack 0
  5520   001F10                     _readColors:
  5521                           	callstack 23
  5522   001F10                     
  5523                           ;color.c: 133:     LEDturnON();
  5524   001F10  ECF2  F015         	call	_LEDturnON	;wreg free
  5525   001F14                     
  5526                           ;color.c: 134:     RGBC->clear = readClearColor();
  5527   001F14  ECF2  F013         	call	_readClearColor	;wreg free
  5528   001F18  500E               	movf	readColors@RGBC^0,w,c
  5529   001F1A  6ED9               	movwf	fsr2l,c
  5530   001F1C  6ADA               	clrf	fsr2h,c
  5531   001F1E  0E06               	movlw	6
  5532   001F20  26D9               	addwf	fsr2l,f,c
  5533   001F22  C007  FFDE         	movff	?_readClearColor,postinc2
  5534   001F26  C008  FFDD         	movff	?_readClearColor+1,postdec2
  5535   001F2A                     
  5536                           ;color.c: 135:     _delay((unsigned long)((100)*(64000000/4000.0)));
  5537   001F2A  0E09               	movlw	9
  5538   001F2C  6E10               	movwf	(??_readColors+1)^0,c
  5539   001F2E  0E1E               	movlw	30
  5540   001F30  6E0F               	movwf	??_readColors^0,c
  5541   001F32  0EE4               	movlw	228
  5542   001F34                     u2237:
  5543   001F34  2EE8               	decfsz	wreg,f,c
  5544   001F36  D7FE               	bra	u2237
  5545   001F38  2E0F               	decfsz	??_readColors^0,f,c
  5546   001F3A  D7FC               	bra	u2237
  5547   001F3C  2E10               	decfsz	(??_readColors+1)^0,f,c
  5548   001F3E  D7FA               	bra	u2237
  5549   001F40  D000               	nop2	
  5550   001F42                     
  5551                           ;color.c: 136:     LEDturnOFF();
  5552   001F42  ECF7  F015         	call	_LEDturnOFF	;wreg free
  5553   001F46                     
  5554                           ;color.c: 139:     LATGbits.LATG0 = 1;
  5555   001F46  807F               	bsf	127,0,c	;volatile
  5556   001F48                     
  5557                           ;color.c: 140:     _delay((unsigned long)((100)*(64000000/4000.0)));
  5558   001F48  0E09               	movlw	9
  5559   001F4A  6E10               	movwf	(??_readColors+1)^0,c
  5560   001F4C  0E1E               	movlw	30
  5561   001F4E  6E0F               	movwf	??_readColors^0,c
  5562   001F50  0EE4               	movlw	228
  5563   001F52                     u2247:
  5564   001F52  2EE8               	decfsz	wreg,f,c
  5565   001F54  D7FE               	bra	u2247
  5566   001F56  2E0F               	decfsz	??_readColors^0,f,c
  5567   001F58  D7FC               	bra	u2247
  5568   001F5A  2E10               	decfsz	(??_readColors+1)^0,f,c
  5569   001F5C  D7FA               	bra	u2247
  5570   001F5E  D000               	nop2	
  5571                           
  5572                           ;color.c: 141:     RGBC->red = readRedColor();
  5573   001F60  ECA2  F013         	call	_readRedColor	;wreg free
  5574   001F64  500E               	movf	readColors@RGBC^0,w,c
  5575   001F66  6ED9               	movwf	fsr2l,c
  5576   001F68  6ADA               	clrf	fsr2h,c
  5577   001F6A  C007  FFDE         	movff	?_readRedColor,postinc2
  5578   001F6E  C008  FFDD         	movff	?_readRedColor+1,postdec2
  5579   001F72                     
  5580                           ;color.c: 142:     _delay((unsigned long)((100)*(64000000/4000.0)));
  5581   001F72  0E09               	movlw	9
  5582   001F74  6E10               	movwf	(??_readColors+1)^0,c
  5583   001F76  0E1E               	movlw	30
  5584   001F78  6E0F               	movwf	??_readColors^0,c
  5585   001F7A  0EE4               	movlw	228
  5586   001F7C                     u2257:
  5587   001F7C  2EE8               	decfsz	wreg,f,c
  5588   001F7E  D7FE               	bra	u2257
  5589   001F80  2E0F               	decfsz	??_readColors^0,f,c
  5590   001F82  D7FC               	bra	u2257
  5591   001F84  2E10               	decfsz	(??_readColors+1)^0,f,c
  5592   001F86  D7FA               	bra	u2257
  5593   001F88  D000               	nop2	
  5594   001F8A                     
  5595                           ;color.c: 143:     LATGbits.LATG0 = 0;
  5596   001F8A  907F               	bcf	127,0,c	;volatile
  5597   001F8C                     
  5598                           ;color.c: 146:     LATEbits.LATE7 = 1;
  5599   001F8C  8E7D               	bsf	125,7,c	;volatile
  5600   001F8E                     
  5601                           ;color.c: 147:     _delay((unsigned long)((100)*(64000000/4000.0)));
  5602   001F8E  0E09               	movlw	9
  5603   001F90  6E10               	movwf	(??_readColors+1)^0,c
  5604   001F92  0E1E               	movlw	30
  5605   001F94  6E0F               	movwf	??_readColors^0,c
  5606   001F96  0EE4               	movlw	228
  5607   001F98                     u2267:
  5608   001F98  2EE8               	decfsz	wreg,f,c
  5609   001F9A  D7FE               	bra	u2267
  5610   001F9C  2E0F               	decfsz	??_readColors^0,f,c
  5611   001F9E  D7FC               	bra	u2267
  5612   001FA0  2E10               	decfsz	(??_readColors+1)^0,f,c
  5613   001FA2  D7FA               	bra	u2267
  5614   001FA4  D000               	nop2	
  5615                           
  5616                           ;color.c: 148:     RGBC->green = readGreenColor();
  5617   001FA6  ECCA  F013         	call	_readGreenColor	;wreg free
  5618   001FAA  500E               	movf	readColors@RGBC^0,w,c
  5619   001FAC  6ED9               	movwf	fsr2l,c
  5620   001FAE  6ADA               	clrf	fsr2h,c
  5621   001FB0  0E02               	movlw	2
  5622   001FB2  26D9               	addwf	fsr2l,f,c
  5623   001FB4  C007  FFDE         	movff	?_readGreenColor,postinc2
  5624   001FB8  C008  FFDD         	movff	?_readGreenColor+1,postdec2
  5625   001FBC                     
  5626                           ;color.c: 149:     _delay((unsigned long)((100)*(64000000/4000.0)));
  5627   001FBC  0E09               	movlw	9
  5628   001FBE  6E10               	movwf	(??_readColors+1)^0,c
  5629   001FC0  0E1E               	movlw	30
  5630   001FC2  6E0F               	movwf	??_readColors^0,c
  5631   001FC4  0EE4               	movlw	228
  5632   001FC6                     u2277:
  5633   001FC6  2EE8               	decfsz	wreg,f,c
  5634   001FC8  D7FE               	bra	u2277
  5635   001FCA  2E0F               	decfsz	??_readColors^0,f,c
  5636   001FCC  D7FC               	bra	u2277
  5637   001FCE  2E10               	decfsz	(??_readColors+1)^0,f,c
  5638   001FD0  D7FA               	bra	u2277
  5639   001FD2  D000               	nop2	
  5640   001FD4                     
  5641                           ;color.c: 150:     LATEbits.LATE7 = 0;
  5642   001FD4  9E7D               	bcf	125,7,c	;volatile
  5643   001FD6                     
  5644                           ;color.c: 153:     LATAbits.LATA3 = 1;
  5645   001FD6  8679               	bsf	121,3,c	;volatile
  5646   001FD8                     
  5647                           ;color.c: 154:     _delay((unsigned long)((100)*(64000000/4000.0)));
  5648   001FD8  0E09               	movlw	9
  5649   001FDA  6E10               	movwf	(??_readColors+1)^0,c
  5650   001FDC  0E1E               	movlw	30
  5651   001FDE  6E0F               	movwf	??_readColors^0,c
  5652   001FE0  0EE4               	movlw	228
  5653   001FE2                     u2287:
  5654   001FE2  2EE8               	decfsz	wreg,f,c
  5655   001FE4  D7FE               	bra	u2287
  5656   001FE6  2E0F               	decfsz	??_readColors^0,f,c
  5657   001FE8  D7FC               	bra	u2287
  5658   001FEA  2E10               	decfsz	(??_readColors+1)^0,f,c
  5659   001FEC  D7FA               	bra	u2287
  5660   001FEE  D000               	nop2	
  5661                           
  5662                           ;color.c: 155:     RGBC->blue = readBlueColor();
  5663   001FF0  EC1A  F014         	call	_readBlueColor	;wreg free
  5664   001FF4  500E               	movf	readColors@RGBC^0,w,c
  5665   001FF6  6ED9               	movwf	fsr2l,c
  5666   001FF8  6ADA               	clrf	fsr2h,c
  5667   001FFA  0E04               	movlw	4
  5668   001FFC  26D9               	addwf	fsr2l,f,c
  5669   001FFE  C007  FFDE         	movff	?_readBlueColor,postinc2
  5670   002002  C008  FFDD         	movff	?_readBlueColor+1,postdec2
  5671   002006                     
  5672                           ;color.c: 156:     _delay((unsigned long)((100)*(64000000/4000.0)));
  5673   002006  0E09               	movlw	9
  5674   002008  6E10               	movwf	(??_readColors+1)^0,c
  5675   00200A  0E1E               	movlw	30
  5676   00200C  6E0F               	movwf	??_readColors^0,c
  5677   00200E  0EE4               	movlw	228
  5678   002010                     u2297:
  5679   002010  2EE8               	decfsz	wreg,f,c
  5680   002012  D7FE               	bra	u2297
  5681   002014  2E0F               	decfsz	??_readColors^0,f,c
  5682   002016  D7FC               	bra	u2297
  5683   002018  2E10               	decfsz	(??_readColors+1)^0,f,c
  5684   00201A  D7FA               	bra	u2297
  5685   00201C  D000               	nop2	
  5686   00201E                     
  5687                           ;color.c: 157:     LATAbits.LATA3 = 0;
  5688   00201E  9679               	bcf	121,3,c	;volatile
  5689   002020  0012               	return		;funcret
  5690   002022                     __end_of_readColors:
  5691                           	callstack 0
  5692                           
  5693 ;; *************** function _readRedColor *****************
  5694 ;; Defined at:
  5695 ;;		line 57 in file "color.c"
  5696 ;; Parameters:    Size  Location     Type
  5697 ;;		None
  5698 ;; Auto vars:     Size  Location     Type
  5699 ;;  tmp             2   11[COMRAM] unsigned int 
  5700 ;; Return value:  Size  Location     Type
  5701 ;;                  2    6[COMRAM] unsigned int 
  5702 ;; Registers used:
  5703 ;;		wreg, status,2, status,0, cstack
  5704 ;; Tracked objects:
  5705 ;;		On entry : 0/0
  5706 ;;		On exit  : 0/0
  5707 ;;		Unchanged: 0/0
  5708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5709 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5710 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5711 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5712 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5713 ;;Total ram usage:        7 bytes
  5714 ;; Hardware stack levels used: 1
  5715 ;; Hardware stack levels required when called: 6
  5716 ;; This function calls:
  5717 ;;		_I2C_2_Master_Read
  5718 ;;		_I2C_2_Master_RepStart
  5719 ;;		_I2C_2_Master_Start
  5720 ;;		_I2C_2_Master_Stop
  5721 ;;		_I2C_2_Master_Write
  5722 ;; This function is called by:
  5723 ;;		_readColors
  5724 ;; This function uses a non-reentrant model
  5725 ;;
  5726                           
  5727                           	psect	text37
  5728   002744                     __ptext37:
  5729                           	callstack 0
  5730   002744                     _readRedColor:
  5731                           	callstack 23
  5732   002744                     
  5733                           ;color.c: 59:  unsigned int tmp;;color.c: 60:  I2C_2_Master_Start();
  5734   002744  EC01  F016         	call	_I2C_2_Master_Start	;wreg free
  5735                           
  5736                           ;color.c: 61:  I2C_2_Master_Write(0x52 | 0x00);
  5737   002748  0E52               	movlw	82
  5738   00274A  ECDC  F015         	call	_I2C_2_Master_Write
  5739                           
  5740                           ;color.c: 62:  I2C_2_Master_Write(0xA0 | 0x16);
  5741   00274E  0EB6               	movlw	182
  5742   002750  ECDC  F015         	call	_I2C_2_Master_Write
  5743                           
  5744                           ;color.c: 63:  I2C_2_Master_RepStart();
  5745   002754  ECED  F015         	call	_I2C_2_Master_RepStart	;wreg free
  5746                           
  5747                           ;color.c: 64:  I2C_2_Master_Write(0x52 | 0x01);
  5748   002758  0E53               	movlw	83
  5749   00275A  ECDC  F015         	call	_I2C_2_Master_Write
  5750                           
  5751                           ;color.c: 65:  tmp=I2C_2_Master_Read(1);
  5752   00275E  0E01               	movlw	1
  5753   002760  EC42  F014         	call	_I2C_2_Master_Read
  5754   002764  6E09               	movwf	??_readRedColor^0,c
  5755   002766  5009               	movf	??_readRedColor^0,w,c
  5756   002768  6E0C               	movwf	readRedColor@tmp^0,c
  5757   00276A  6A0D               	clrf	(readRedColor@tmp+1)^0,c
  5758                           
  5759                           ;color.c: 66:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5760   00276C  0E00               	movlw	0
  5761   00276E  EC42  F014         	call	_I2C_2_Master_Read
  5762   002772  6E09               	movwf	??_readRedColor^0,c
  5763   002774  5009               	movf	??_readRedColor^0,w,c
  5764   002776  6E0B               	movwf	(??_readRedColor+2)^0,c
  5765   002778  6A0A               	clrf	(??_readRedColor+1)^0,c
  5766   00277A  500C               	movf	readRedColor@tmp^0,w,c
  5767   00277C  100A               	iorwf	(??_readRedColor+1)^0,w,c
  5768   00277E  6E0C               	movwf	readRedColor@tmp^0,c
  5769   002780  500D               	movf	(readRedColor@tmp+1)^0,w,c
  5770   002782  100B               	iorwf	(??_readRedColor+2)^0,w,c
  5771   002784  6E0D               	movwf	(readRedColor@tmp+1)^0,c
  5772                           
  5773                           ;color.c: 67:  I2C_2_Master_Stop();
  5774   002786  ECFC  F015         	call	_I2C_2_Master_Stop	;wreg free
  5775   00278A                     
  5776                           ;color.c: 68:  return tmp;
  5777   00278A  C00C  F007         	movff	readRedColor@tmp,?_readRedColor
  5778   00278E  C00D  F008         	movff	readRedColor@tmp+1,?_readRedColor+1
  5779   002792  0012               	return		;funcret
  5780   002794                     __end_of_readRedColor:
  5781                           	callstack 0
  5782                           
  5783 ;; *************** function _readGreenColor *****************
  5784 ;; Defined at:
  5785 ;;		line 72 in file "color.c"
  5786 ;; Parameters:    Size  Location     Type
  5787 ;;		None
  5788 ;; Auto vars:     Size  Location     Type
  5789 ;;  tmp             2   11[COMRAM] unsigned int 
  5790 ;; Return value:  Size  Location     Type
  5791 ;;                  2    6[COMRAM] unsigned int 
  5792 ;; Registers used:
  5793 ;;		wreg, status,2, status,0, cstack
  5794 ;; Tracked objects:
  5795 ;;		On entry : 0/0
  5796 ;;		On exit  : 0/0
  5797 ;;		Unchanged: 0/0
  5798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5799 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5800 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5801 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5802 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5803 ;;Total ram usage:        7 bytes
  5804 ;; Hardware stack levels used: 1
  5805 ;; Hardware stack levels required when called: 6
  5806 ;; This function calls:
  5807 ;;		_I2C_2_Master_Read
  5808 ;;		_I2C_2_Master_RepStart
  5809 ;;		_I2C_2_Master_Start
  5810 ;;		_I2C_2_Master_Stop
  5811 ;;		_I2C_2_Master_Write
  5812 ;; This function is called by:
  5813 ;;		_readColors
  5814 ;; This function uses a non-reentrant model
  5815 ;;
  5816                           
  5817                           	psect	text38
  5818   002794                     __ptext38:
  5819                           	callstack 0
  5820   002794                     _readGreenColor:
  5821                           	callstack 23
  5822   002794                     
  5823                           ;color.c: 74:  unsigned int tmp;;color.c: 75:  I2C_2_Master_Start();
  5824   002794  EC01  F016         	call	_I2C_2_Master_Start	;wreg free
  5825                           
  5826                           ;color.c: 76:  I2C_2_Master_Write(0x52 | 0x00);
  5827   002798  0E52               	movlw	82
  5828   00279A  ECDC  F015         	call	_I2C_2_Master_Write
  5829                           
  5830                           ;color.c: 77:  I2C_2_Master_Write(0xA0 | 0x18);
  5831   00279E  0EB8               	movlw	184
  5832   0027A0  ECDC  F015         	call	_I2C_2_Master_Write
  5833                           
  5834                           ;color.c: 78:  I2C_2_Master_RepStart();
  5835   0027A4  ECED  F015         	call	_I2C_2_Master_RepStart	;wreg free
  5836                           
  5837                           ;color.c: 79:  I2C_2_Master_Write(0x52 | 0x01);
  5838   0027A8  0E53               	movlw	83
  5839   0027AA  ECDC  F015         	call	_I2C_2_Master_Write
  5840                           
  5841                           ;color.c: 80:  tmp=I2C_2_Master_Read(1);
  5842   0027AE  0E01               	movlw	1
  5843   0027B0  EC42  F014         	call	_I2C_2_Master_Read
  5844   0027B4  6E09               	movwf	??_readGreenColor^0,c
  5845   0027B6  5009               	movf	??_readGreenColor^0,w,c
  5846   0027B8  6E0C               	movwf	readGreenColor@tmp^0,c
  5847   0027BA  6A0D               	clrf	(readGreenColor@tmp+1)^0,c
  5848                           
  5849                           ;color.c: 81:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5850   0027BC  0E00               	movlw	0
  5851   0027BE  EC42  F014         	call	_I2C_2_Master_Read
  5852   0027C2  6E09               	movwf	??_readGreenColor^0,c
  5853   0027C4  5009               	movf	??_readGreenColor^0,w,c
  5854   0027C6  6E0B               	movwf	(??_readGreenColor+2)^0,c
  5855   0027C8  6A0A               	clrf	(??_readGreenColor+1)^0,c
  5856   0027CA  500C               	movf	readGreenColor@tmp^0,w,c
  5857   0027CC  100A               	iorwf	(??_readGreenColor+1)^0,w,c
  5858   0027CE  6E0C               	movwf	readGreenColor@tmp^0,c
  5859   0027D0  500D               	movf	(readGreenColor@tmp+1)^0,w,c
  5860   0027D2  100B               	iorwf	(??_readGreenColor+2)^0,w,c
  5861   0027D4  6E0D               	movwf	(readGreenColor@tmp+1)^0,c
  5862                           
  5863                           ;color.c: 82:  I2C_2_Master_Stop();
  5864   0027D6  ECFC  F015         	call	_I2C_2_Master_Stop	;wreg free
  5865   0027DA                     
  5866                           ;color.c: 83:  return tmp;
  5867   0027DA  C00C  F007         	movff	readGreenColor@tmp,?_readGreenColor
  5868   0027DE  C00D  F008         	movff	readGreenColor@tmp+1,?_readGreenColor+1
  5869   0027E2  0012               	return		;funcret
  5870   0027E4                     __end_of_readGreenColor:
  5871                           	callstack 0
  5872                           
  5873 ;; *************** function _readClearColor *****************
  5874 ;; Defined at:
  5875 ;;		line 102 in file "color.c"
  5876 ;; Parameters:    Size  Location     Type
  5877 ;;		None
  5878 ;; Auto vars:     Size  Location     Type
  5879 ;;  tmp             2   11[COMRAM] unsigned int 
  5880 ;; Return value:  Size  Location     Type
  5881 ;;                  2    6[COMRAM] unsigned int 
  5882 ;; Registers used:
  5883 ;;		wreg, status,2, status,0, cstack
  5884 ;; Tracked objects:
  5885 ;;		On entry : 0/0
  5886 ;;		On exit  : 0/0
  5887 ;;		Unchanged: 0/0
  5888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5889 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5890 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5891 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5892 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5893 ;;Total ram usage:        7 bytes
  5894 ;; Hardware stack levels used: 1
  5895 ;; Hardware stack levels required when called: 6
  5896 ;; This function calls:
  5897 ;;		_I2C_2_Master_Read
  5898 ;;		_I2C_2_Master_RepStart
  5899 ;;		_I2C_2_Master_Start
  5900 ;;		_I2C_2_Master_Stop
  5901 ;;		_I2C_2_Master_Write
  5902 ;; This function is called by:
  5903 ;;		_readColors
  5904 ;; This function uses a non-reentrant model
  5905 ;;
  5906                           
  5907                           	psect	text39
  5908   0027E4                     __ptext39:
  5909                           	callstack 0
  5910   0027E4                     _readClearColor:
  5911                           	callstack 23
  5912   0027E4                     
  5913                           ;color.c: 104:  unsigned int tmp;;color.c: 105:  I2C_2_Master_Start();
  5914   0027E4  EC01  F016         	call	_I2C_2_Master_Start	;wreg free
  5915                           
  5916                           ;color.c: 106:  I2C_2_Master_Write(0x52 | 0x00);
  5917   0027E8  0E52               	movlw	82
  5918   0027EA  ECDC  F015         	call	_I2C_2_Master_Write
  5919                           
  5920                           ;color.c: 107:  I2C_2_Master_Write(0xA0 | 0x14);
  5921   0027EE  0EB4               	movlw	180
  5922   0027F0  ECDC  F015         	call	_I2C_2_Master_Write
  5923                           
  5924                           ;color.c: 108:  I2C_2_Master_RepStart();
  5925   0027F4  ECED  F015         	call	_I2C_2_Master_RepStart	;wreg free
  5926                           
  5927                           ;color.c: 109:  I2C_2_Master_Write(0x52 | 0x01);
  5928   0027F8  0E53               	movlw	83
  5929   0027FA  ECDC  F015         	call	_I2C_2_Master_Write
  5930                           
  5931                           ;color.c: 110:  tmp=I2C_2_Master_Read(1);
  5932   0027FE  0E01               	movlw	1
  5933   002800  EC42  F014         	call	_I2C_2_Master_Read
  5934   002804  6E09               	movwf	??_readClearColor^0,c
  5935   002806  5009               	movf	??_readClearColor^0,w,c
  5936   002808  6E0C               	movwf	readClearColor@tmp^0,c
  5937   00280A  6A0D               	clrf	(readClearColor@tmp+1)^0,c
  5938                           
  5939                           ;color.c: 111:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5940   00280C  0E00               	movlw	0
  5941   00280E  EC42  F014         	call	_I2C_2_Master_Read
  5942   002812  6E09               	movwf	??_readClearColor^0,c
  5943   002814  5009               	movf	??_readClearColor^0,w,c
  5944   002816  6E0B               	movwf	(??_readClearColor+2)^0,c
  5945   002818  6A0A               	clrf	(??_readClearColor+1)^0,c
  5946   00281A  500C               	movf	readClearColor@tmp^0,w,c
  5947   00281C  100A               	iorwf	(??_readClearColor+1)^0,w,c
  5948   00281E  6E0C               	movwf	readClearColor@tmp^0,c
  5949   002820  500D               	movf	(readClearColor@tmp+1)^0,w,c
  5950   002822  100B               	iorwf	(??_readClearColor+2)^0,w,c
  5951   002824  6E0D               	movwf	(readClearColor@tmp+1)^0,c
  5952                           
  5953                           ;color.c: 112:  I2C_2_Master_Stop();
  5954   002826  ECFC  F015         	call	_I2C_2_Master_Stop	;wreg free
  5955   00282A                     
  5956                           ;color.c: 113:  return tmp;
  5957   00282A  C00C  F007         	movff	readClearColor@tmp,?_readClearColor
  5958   00282E  C00D  F008         	movff	readClearColor@tmp+1,?_readClearColor+1
  5959   002832  0012               	return		;funcret
  5960   002834                     __end_of_readClearColor:
  5961                           	callstack 0
  5962                           
  5963 ;; *************** function _readBlueColor *****************
  5964 ;; Defined at:
  5965 ;;		line 87 in file "color.c"
  5966 ;; Parameters:    Size  Location     Type
  5967 ;;		None
  5968 ;; Auto vars:     Size  Location     Type
  5969 ;;  tmp             2   11[COMRAM] unsigned int 
  5970 ;; Return value:  Size  Location     Type
  5971 ;;                  2    6[COMRAM] unsigned int 
  5972 ;; Registers used:
  5973 ;;		wreg, status,2, status,0, cstack
  5974 ;; Tracked objects:
  5975 ;;		On entry : 0/0
  5976 ;;		On exit  : 0/0
  5977 ;;		Unchanged: 0/0
  5978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5979 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5980 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5981 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5982 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5983 ;;Total ram usage:        7 bytes
  5984 ;; Hardware stack levels used: 1
  5985 ;; Hardware stack levels required when called: 6
  5986 ;; This function calls:
  5987 ;;		_I2C_2_Master_Read
  5988 ;;		_I2C_2_Master_RepStart
  5989 ;;		_I2C_2_Master_Start
  5990 ;;		_I2C_2_Master_Stop
  5991 ;;		_I2C_2_Master_Write
  5992 ;; This function is called by:
  5993 ;;		_readColors
  5994 ;; This function uses a non-reentrant model
  5995 ;;
  5996                           
  5997                           	psect	text40
  5998   002834                     __ptext40:
  5999                           	callstack 0
  6000   002834                     _readBlueColor:
  6001                           	callstack 23
  6002   002834                     
  6003                           ;color.c: 89:  unsigned int tmp;;color.c: 90:  I2C_2_Master_Start();
  6004   002834  EC01  F016         	call	_I2C_2_Master_Start	;wreg free
  6005                           
  6006                           ;color.c: 91:  I2C_2_Master_Write(0x52 | 0x00);
  6007   002838  0E52               	movlw	82
  6008   00283A  ECDC  F015         	call	_I2C_2_Master_Write
  6009                           
  6010                           ;color.c: 92:  I2C_2_Master_Write(0xA0 | 0x1A);
  6011   00283E  0EBA               	movlw	186
  6012   002840  ECDC  F015         	call	_I2C_2_Master_Write
  6013                           
  6014                           ;color.c: 93:  I2C_2_Master_RepStart();
  6015   002844  ECED  F015         	call	_I2C_2_Master_RepStart	;wreg free
  6016                           
  6017                           ;color.c: 94:  I2C_2_Master_Write(0x52 | 0x01);
  6018   002848  0E53               	movlw	83
  6019   00284A  ECDC  F015         	call	_I2C_2_Master_Write
  6020                           
  6021                           ;color.c: 95:  tmp=I2C_2_Master_Read(1);
  6022   00284E  0E01               	movlw	1
  6023   002850  EC42  F014         	call	_I2C_2_Master_Read
  6024   002854  6E09               	movwf	??_readBlueColor^0,c
  6025   002856  5009               	movf	??_readBlueColor^0,w,c
  6026   002858  6E0C               	movwf	readBlueColor@tmp^0,c
  6027   00285A  6A0D               	clrf	(readBlueColor@tmp+1)^0,c
  6028                           
  6029                           ;color.c: 96:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  6030   00285C  0E00               	movlw	0
  6031   00285E  EC42  F014         	call	_I2C_2_Master_Read
  6032   002862  6E09               	movwf	??_readBlueColor^0,c
  6033   002864  5009               	movf	??_readBlueColor^0,w,c
  6034   002866  6E0B               	movwf	(??_readBlueColor+2)^0,c
  6035   002868  6A0A               	clrf	(??_readBlueColor+1)^0,c
  6036   00286A  500C               	movf	readBlueColor@tmp^0,w,c
  6037   00286C  100A               	iorwf	(??_readBlueColor+1)^0,w,c
  6038   00286E  6E0C               	movwf	readBlueColor@tmp^0,c
  6039   002870  500D               	movf	(readBlueColor@tmp+1)^0,w,c
  6040   002872  100B               	iorwf	(??_readBlueColor+2)^0,w,c
  6041   002874  6E0D               	movwf	(readBlueColor@tmp+1)^0,c
  6042                           
  6043                           ;color.c: 97:  I2C_2_Master_Stop();
  6044   002876  ECFC  F015         	call	_I2C_2_Master_Stop	;wreg free
  6045   00287A                     
  6046                           ;color.c: 98:  return tmp;
  6047   00287A  C00C  F007         	movff	readBlueColor@tmp,?_readBlueColor
  6048   00287E  C00D  F008         	movff	readBlueColor@tmp+1,?_readBlueColor+1
  6049   002882  0012               	return		;funcret
  6050   002884                     __end_of_readBlueColor:
  6051                           	callstack 0
  6052                           
  6053 ;; *************** function _I2C_2_Master_RepStart *****************
  6054 ;; Defined at:
  6055 ;;		line 37 in file "i2c.c"
  6056 ;; Parameters:    Size  Location     Type
  6057 ;;		None
  6058 ;; Auto vars:     Size  Location     Type
  6059 ;;		None
  6060 ;; Return value:  Size  Location     Type
  6061 ;;                  1    wreg      void 
  6062 ;; Registers used:
  6063 ;;		wreg, status,2, status,0, cstack
  6064 ;; Tracked objects:
  6065 ;;		On entry : 0/0
  6066 ;;		On exit  : 0/0
  6067 ;;		Unchanged: 0/0
  6068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6069 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6070 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6071 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6072 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6073 ;;Total ram usage:        0 bytes
  6074 ;; Hardware stack levels used: 1
  6075 ;; Hardware stack levels required when called: 5
  6076 ;; This function calls:
  6077 ;;		_I2C_2_Master_Idle
  6078 ;; This function is called by:
  6079 ;;		_readRedColor
  6080 ;;		_readGreenColor
  6081 ;;		_readBlueColor
  6082 ;;		_readClearColor
  6083 ;;		_color_readdoublefromaddress
  6084 ;;		_color_readfromaddress
  6085 ;; This function uses a non-reentrant model
  6086 ;;
  6087                           
  6088                           	psect	text41
  6089   002BDA                     __ptext41:
  6090                           	callstack 0
  6091   002BDA                     _I2C_2_Master_RepStart:
  6092                           	callstack 23
  6093   002BDA                     
  6094                           ;i2c.c: 39:   I2C_2_Master_Idle();
  6095   002BDA  ECDA  F014         	call	_I2C_2_Master_Idle	;wreg free
  6096   002BDE                     
  6097                           ;i2c.c: 40:   SSP2CON2bits.RSEN = 1;
  6098   002BDE  010E               	movlb	14	; () banked
  6099   002BE0  83DA               	bsf	218,1,b	;volatile
  6100   002BE2                     
  6101                           ; BSR set to: 14
  6102   002BE2  0012               	return		;funcret
  6103   002BE4                     __end_of_I2C_2_Master_RepStart:
  6104                           	callstack 0
  6105                           
  6106 ;; *************** function _I2C_2_Master_Read *****************
  6107 ;; Defined at:
  6108 ;;		line 55 in file "i2c.c"
  6109 ;; Parameters:    Size  Location     Type
  6110 ;;  ack             1    wreg     unsigned char 
  6111 ;; Auto vars:     Size  Location     Type
  6112 ;;  ack             1    4[COMRAM] unsigned char 
  6113 ;;  tmp             1    5[COMRAM] unsigned char 
  6114 ;; Return value:  Size  Location     Type
  6115 ;;                  1    wreg      unsigned char 
  6116 ;; Registers used:
  6117 ;;		wreg, status,2, status,0, cstack
  6118 ;; Tracked objects:
  6119 ;;		On entry : 0/0
  6120 ;;		On exit  : 0/0
  6121 ;;		Unchanged: 0/0
  6122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6123 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6124 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6125 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6126 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6127 ;;Total ram usage:        3 bytes
  6128 ;; Hardware stack levels used: 1
  6129 ;; Hardware stack levels required when called: 5
  6130 ;; This function calls:
  6131 ;;		_I2C_2_Master_Idle
  6132 ;; This function is called by:
  6133 ;;		_readRedColor
  6134 ;;		_readGreenColor
  6135 ;;		_readBlueColor
  6136 ;;		_readClearColor
  6137 ;;		_color_readdoublefromaddress
  6138 ;;		_color_readfromaddress
  6139 ;; This function uses a non-reentrant model
  6140 ;;
  6141                           
  6142                           	psect	text42
  6143   002884                     __ptext42:
  6144                           	callstack 0
  6145   002884                     _I2C_2_Master_Read:
  6146                           	callstack 23
  6147                           
  6148                           ; BSR set to: 14
  6149                           ;incstack = 0
  6150                           ;I2C_2_Master_Read@ack stored from wreg
  6151   002884  6E05               	movwf	I2C_2_Master_Read@ack^0,c
  6152   002886                     
  6153                           ;i2c.c: 55: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 56: {;i2c.c: 57:  
      +                           unsigned char tmp;;i2c.c: 58:   I2C_2_Master_Idle();
  6154   002886  ECDA  F014         	call	_I2C_2_Master_Idle	;wreg free
  6155   00288A                     
  6156                           ;i2c.c: 59:   SSP2CON2bits.RCEN = 1;
  6157   00288A  010E               	movlb	14	; () banked
  6158   00288C  87DA               	bsf	218,3,b	;volatile
  6159                           
  6160                           ;i2c.c: 60:   I2C_2_Master_Idle();
  6161   00288E  ECDA  F014         	call	_I2C_2_Master_Idle	;wreg free
  6162   002892                     
  6163                           ;i2c.c: 61:   tmp = SSP2BUF;
  6164   002892  CED5 F006          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  6165                           
  6166                           ;i2c.c: 62:   I2C_2_Master_Idle();
  6167   002896  ECDA  F014         	call	_I2C_2_Master_Idle	;wreg free
  6168   00289A                     
  6169                           ;i2c.c: 63:   SSP2CON2bits.ACKDT = !ack;
  6170   00289A  5005               	movf	I2C_2_Master_Read@ack^0,w,c
  6171   00289C  B4D8               	btfsc	status,2,c
  6172   00289E  EF53  F014         	goto	u1161
  6173   0028A2  EF57  F014         	goto	u1160
  6174   0028A6                     u1161:
  6175   0028A6  6A04               	clrf	??_I2C_2_Master_Read^0,c
  6176   0028A8  2A04               	incf	??_I2C_2_Master_Read^0,f,c
  6177   0028AA  EF58  F014         	goto	u1178
  6178   0028AE                     u1160:
  6179   0028AE  6A04               	clrf	??_I2C_2_Master_Read^0,c
  6180   0028B0                     u1178:
  6181   0028B0  3A04               	swapf	??_I2C_2_Master_Read^0,f,c
  6182   0028B2  4604               	rlncf	??_I2C_2_Master_Read^0,f,c
  6183   0028B4  010E               	movlb	14	; () banked
  6184   0028B6  51DA               	movf	218,w,b	;volatile
  6185   0028B8  1804               	xorwf	??_I2C_2_Master_Read^0,w,c
  6186   0028BA  0BDF               	andlw	-33
  6187   0028BC  1804               	xorwf	??_I2C_2_Master_Read^0,w,c
  6188   0028BE  6FDA               	movwf	218,b	;volatile
  6189   0028C0                     
  6190                           ; BSR set to: 14
  6191                           ;i2c.c: 64:   SSP2CON2bits.ACKEN = 1;
  6192   0028C0  89DA               	bsf	218,4,b	;volatile
  6193   0028C2                     
  6194                           ; BSR set to: 14
  6195                           ;i2c.c: 65:   return tmp;
  6196   0028C2  5006               	movf	I2C_2_Master_Read@tmp^0,w,c
  6197   0028C4                     
  6198                           ; BSR set to: 14
  6199   0028C4  0012               	return		;funcret
  6200   0028C6                     __end_of_I2C_2_Master_Read:
  6201                           	callstack 0
  6202                           
  6203 ;; *************** function _LEDturnON *****************
  6204 ;; Defined at:
  6205 ;;		line 25 in file "interact.c"
  6206 ;; Parameters:    Size  Location     Type
  6207 ;;		None
  6208 ;; Auto vars:     Size  Location     Type
  6209 ;;		None
  6210 ;; Return value:  Size  Location     Type
  6211 ;;                  1    wreg      void 
  6212 ;; Registers used:
  6213 ;;		None
  6214 ;; Tracked objects:
  6215 ;;		On entry : 0/0
  6216 ;;		On exit  : 0/0
  6217 ;;		Unchanged: 0/0
  6218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6219 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6220 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6221 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6222 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6223 ;;Total ram usage:        0 bytes
  6224 ;; Hardware stack levels used: 1
  6225 ;; Hardware stack levels required when called: 4
  6226 ;; This function calls:
  6227 ;;		Nothing
  6228 ;; This function is called by:
  6229 ;;		_readColors
  6230 ;;		_decideColor
  6231 ;;		_main
  6232 ;; This function uses a non-reentrant model
  6233 ;;
  6234                           
  6235                           	psect	text43
  6236   002BE4                     __ptext43:
  6237                           	callstack 0
  6238   002BE4                     _LEDturnON:
  6239                           	callstack 25
  6240   002BE4                     
  6241                           ;interact.c: 26:     LATDbits.LATD3 = 1;
  6242   002BE4  867C               	bsf	124,3,c	;volatile
  6243                           
  6244                           ;interact.c: 28:     LATGbits.LATG0 = 1;
  6245   002BE6  807F               	bsf	127,0,c	;volatile
  6246                           
  6247                           ;interact.c: 29:     LATEbits.LATE7 = 1;
  6248   002BE8  8E7D               	bsf	125,7,c	;volatile
  6249                           
  6250                           ;interact.c: 30:     LATAbits.LATA3 = 1;
  6251   002BEA  8679               	bsf	121,3,c	;volatile
  6252   002BEC  0012               	return		;funcret
  6253   002BEE                     __end_of_LEDturnON:
  6254                           	callstack 0
  6255                           
  6256 ;; *************** function _LEDturnOFF *****************
  6257 ;; Defined at:
  6258 ;;		line 33 in file "interact.c"
  6259 ;; Parameters:    Size  Location     Type
  6260 ;;		None
  6261 ;; Auto vars:     Size  Location     Type
  6262 ;;		None
  6263 ;; Return value:  Size  Location     Type
  6264 ;;                  1    wreg      void 
  6265 ;; Registers used:
  6266 ;;		None
  6267 ;; Tracked objects:
  6268 ;;		On entry : 0/0
  6269 ;;		On exit  : 0/0
  6270 ;;		Unchanged: 0/0
  6271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6272 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6273 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6274 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6275 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6276 ;;Total ram usage:        0 bytes
  6277 ;; Hardware stack levels used: 1
  6278 ;; Hardware stack levels required when called: 4
  6279 ;; This function calls:
  6280 ;;		Nothing
  6281 ;; This function is called by:
  6282 ;;		_readColors
  6283 ;; This function uses a non-reentrant model
  6284 ;;
  6285                           
  6286                           	psect	text44
  6287   002BEE                     __ptext44:
  6288                           	callstack 0
  6289   002BEE                     _LEDturnOFF:
  6290                           	callstack 25
  6291   002BEE                     
  6292                           ;interact.c: 34:     LATDbits.LATD3 = 0;
  6293   002BEE  967C               	bcf	124,3,c	;volatile
  6294                           
  6295                           ;interact.c: 37:     LATGbits.LATG0 = 0;
  6296   002BF0  907F               	bcf	127,0,c	;volatile
  6297                           
  6298                           ;interact.c: 38:     LATEbits.LATE7 = 0;
  6299   002BF2  9E7D               	bcf	125,7,c	;volatile
  6300                           
  6301                           ;interact.c: 39:     LATAbits.LATA3 = 0;
  6302   002BF4  9679               	bcf	121,3,c	;volatile
  6303   002BF6  0012               	return		;funcret
  6304   002BF8                     __end_of_LEDturnOFF:
  6305                           	callstack 0
  6306                           
  6307 ;; *************** function _normalizeColors *****************
  6308 ;; Defined at:
  6309 ;;		line 118 in file "color.c"
  6310 ;; Parameters:    Size  Location     Type
  6311 ;;  RGBC            1   15[COMRAM] PTR struct colors
  6312 ;;		 -> main@RGBC(8), 
  6313 ;;  normRGB         1   16[COMRAM] PTR struct normColors
  6314 ;;		 -> main@normRGB(8), 
  6315 ;; Auto vars:     Size  Location     Type
  6316 ;;  sum             2   25[COMRAM] unsigned int 
  6317 ;; Return value:  Size  Location     Type
  6318 ;;                  1    wreg      void 
  6319 ;; Registers used:
  6320 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  6321 ;; Tracked objects:
  6322 ;;		On entry : 0/0
  6323 ;;		On exit  : 0/0
  6324 ;;		Unchanged: 0/0
  6325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6326 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6327 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6328 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6329 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6330 ;;Total ram usage:       14 bytes
  6331 ;; Hardware stack levels used: 1
  6332 ;; Hardware stack levels required when called: 5
  6333 ;; This function calls:
  6334 ;;		___lwdiv
  6335 ;; This function is called by:
  6336 ;;		_decideColor
  6337 ;;		_main
  6338 ;; This function uses a non-reentrant model
  6339 ;;
  6340                           
  6341                           	psect	text45
  6342   001A54                     __ptext45:
  6343                           	callstack 0
  6344   001A54                     _normalizeColors:
  6345                           	callstack 25
  6346   001A54                     
  6347                           ;color.c: 119:     unsigned int sum = (RGBC->red) + (RGBC->green) + (RGBC->blue);
  6348   001A54  5010               	movf	normalizeColors@RGBC^0,w,c
  6349   001A56  6ED9               	movwf	fsr2l,c
  6350   001A58  6ADA               	clrf	fsr2h,c
  6351   001A5A  0E04               	movlw	4
  6352   001A5C  26D9               	addwf	fsr2l,f,c
  6353   001A5E  CFDE F012          	movff	postinc2,??_normalizeColors
  6354   001A62  CFDD F013          	movff	postdec2,??_normalizeColors+1
  6355   001A66  5010               	movf	normalizeColors@RGBC^0,w,c
  6356   001A68  6ED9               	movwf	fsr2l,c
  6357   001A6A  6ADA               	clrf	fsr2h,c
  6358   001A6C  0E02               	movlw	2
  6359   001A6E  26D9               	addwf	fsr2l,f,c
  6360   001A70  CFDE F014          	movff	postinc2,??_normalizeColors+2
  6361   001A74  CFDD F015          	movff	postdec2,??_normalizeColors+3
  6362   001A78  5010               	movf	normalizeColors@RGBC^0,w,c
  6363   001A7A  6ED9               	movwf	fsr2l,c
  6364   001A7C  6ADA               	clrf	fsr2h,c
  6365   001A7E  CFDE F016          	movff	postinc2,??_normalizeColors+4
  6366   001A82  CFDD F017          	movff	postdec2,??_normalizeColors+5
  6367   001A86  5014               	movf	(??_normalizeColors+2)^0,w,c
  6368   001A88  2416               	addwf	(??_normalizeColors+4)^0,w,c
  6369   001A8A  6E18               	movwf	(??_normalizeColors+6)^0,c
  6370   001A8C  5015               	movf	(??_normalizeColors+3)^0,w,c
  6371   001A8E  2017               	addwfc	(??_normalizeColors+5)^0,w,c
  6372   001A90  6E19               	movwf	(??_normalizeColors+7)^0,c
  6373   001A92  5012               	movf	??_normalizeColors^0,w,c
  6374   001A94  2418               	addwf	(??_normalizeColors+6)^0,w,c
  6375   001A96  6E1A               	movwf	normalizeColors@sum^0,c
  6376   001A98  5013               	movf	(??_normalizeColors+1)^0,w,c
  6377   001A9A  2019               	addwfc	(??_normalizeColors+7)^0,w,c
  6378   001A9C  6E1B               	movwf	(normalizeColors@sum+1)^0,c
  6379   001A9E                     
  6380                           ;color.c: 123:     normRGB->normRed = (RGBC->red) / ((sum)/100);
  6381   001A9E  0E00               	movlw	0
  6382   001AA0  6E0C               	movwf	(___lwdiv@divisor+1)^0,c
  6383   001AA2  0E64               	movlw	100
  6384   001AA4  6E0B               	movwf	___lwdiv@divisor^0,c
  6385   001AA6  C01A  F009         	movff	normalizeColors@sum,___lwdiv@dividend
  6386   001AAA  C01B  F00A         	movff	normalizeColors@sum+1,___lwdiv@dividend+1
  6387   001AAE  ECAD  F012         	call	___lwdiv	;wreg free
  6388   001AB2  C009  F01C         	movff	?___lwdiv,_normalizeColors$3128
  6389   001AB6  C00A  F01D         	movff	?___lwdiv+1,_normalizeColors$3128+1
  6390   001ABA                     
  6391                           ;color.c: 123:     normRGB->normRed = (RGBC->red) / ((sum)/100);
  6392   001ABA  5010               	movf	normalizeColors@RGBC^0,w,c
  6393   001ABC  6ED9               	movwf	fsr2l,c
  6394   001ABE  6ADA               	clrf	fsr2h,c
  6395   001AC0  CFDE F009          	movff	postinc2,___lwdiv@dividend
  6396   001AC4  CFDD F00A          	movff	postdec2,___lwdiv@dividend+1
  6397   001AC8  C01C  F00B         	movff	_normalizeColors$3128,___lwdiv@divisor
  6398   001ACC  C01D  F00C         	movff	_normalizeColors$3128+1,___lwdiv@divisor+1
  6399   001AD0  ECAD  F012         	call	___lwdiv	;wreg free
  6400   001AD4  5011               	movf	normalizeColors@normRGB^0,w,c
  6401   001AD6  6ED9               	movwf	fsr2l,c
  6402   001AD8  6ADA               	clrf	fsr2h,c
  6403   001ADA  C009  FFDE         	movff	?___lwdiv,postinc2
  6404   001ADE  C00A  FFDD         	movff	?___lwdiv+1,postdec2
  6405   001AE2                     
  6406                           ;color.c: 124:     normRGB->normGreen = (RGBC->green) / ((sum)/100);
  6407   001AE2  0E00               	movlw	0
  6408   001AE4  6E0C               	movwf	(___lwdiv@divisor+1)^0,c
  6409   001AE6  0E64               	movlw	100
  6410   001AE8  6E0B               	movwf	___lwdiv@divisor^0,c
  6411   001AEA  C01A  F009         	movff	normalizeColors@sum,___lwdiv@dividend
  6412   001AEE  C01B  F00A         	movff	normalizeColors@sum+1,___lwdiv@dividend+1
  6413   001AF2  ECAD  F012         	call	___lwdiv	;wreg free
  6414   001AF6  C009  F01C         	movff	?___lwdiv,_normalizeColors$3128
  6415   001AFA  C00A  F01D         	movff	?___lwdiv+1,_normalizeColors$3128+1
  6416   001AFE                     
  6417                           ;color.c: 124:     normRGB->normGreen = (RGBC->green) / ((sum)/100);
  6418   001AFE  5010               	movf	normalizeColors@RGBC^0,w,c
  6419   001B00  6ED9               	movwf	fsr2l,c
  6420   001B02  6ADA               	clrf	fsr2h,c
  6421   001B04  0E02               	movlw	2
  6422   001B06  26D9               	addwf	fsr2l,f,c
  6423   001B08  CFDE F009          	movff	postinc2,___lwdiv@dividend
  6424   001B0C  CFDD F00A          	movff	postdec2,___lwdiv@dividend+1
  6425   001B10  C01C  F00B         	movff	_normalizeColors$3128,___lwdiv@divisor
  6426   001B14  C01D  F00C         	movff	_normalizeColors$3128+1,___lwdiv@divisor+1
  6427   001B18  ECAD  F012         	call	___lwdiv	;wreg free
  6428   001B1C  5011               	movf	normalizeColors@normRGB^0,w,c
  6429   001B1E  6ED9               	movwf	fsr2l,c
  6430   001B20  6ADA               	clrf	fsr2h,c
  6431   001B22  0E02               	movlw	2
  6432   001B24  26D9               	addwf	fsr2l,f,c
  6433   001B26  C009  FFDE         	movff	?___lwdiv,postinc2
  6434   001B2A  C00A  FFDD         	movff	?___lwdiv+1,postdec2
  6435   001B2E                     
  6436                           ;color.c: 125:     normRGB->normBlue = (RGBC->blue) / ((sum)/100);
  6437   001B2E  0E00               	movlw	0
  6438   001B30  6E0C               	movwf	(___lwdiv@divisor+1)^0,c
  6439   001B32  0E64               	movlw	100
  6440   001B34  6E0B               	movwf	___lwdiv@divisor^0,c
  6441   001B36  C01A  F009         	movff	normalizeColors@sum,___lwdiv@dividend
  6442   001B3A  C01B  F00A         	movff	normalizeColors@sum+1,___lwdiv@dividend+1
  6443   001B3E  ECAD  F012         	call	___lwdiv	;wreg free
  6444   001B42  C009  F01C         	movff	?___lwdiv,_normalizeColors$3128
  6445   001B46  C00A  F01D         	movff	?___lwdiv+1,_normalizeColors$3128+1
  6446   001B4A                     
  6447                           ;color.c: 125:     normRGB->normBlue = (RGBC->blue) / ((sum)/100);
  6448   001B4A  5010               	movf	normalizeColors@RGBC^0,w,c
  6449   001B4C  6ED9               	movwf	fsr2l,c
  6450   001B4E  6ADA               	clrf	fsr2h,c
  6451   001B50  0E04               	movlw	4
  6452   001B52  26D9               	addwf	fsr2l,f,c
  6453   001B54  CFDE F009          	movff	postinc2,___lwdiv@dividend
  6454   001B58  CFDD F00A          	movff	postdec2,___lwdiv@dividend+1
  6455   001B5C  C01C  F00B         	movff	_normalizeColors$3128,___lwdiv@divisor
  6456   001B60  C01D  F00C         	movff	_normalizeColors$3128+1,___lwdiv@divisor+1
  6457   001B64  ECAD  F012         	call	___lwdiv	;wreg free
  6458   001B68  5011               	movf	normalizeColors@normRGB^0,w,c
  6459   001B6A  6ED9               	movwf	fsr2l,c
  6460   001B6C  6ADA               	clrf	fsr2h,c
  6461   001B6E  0E04               	movlw	4
  6462   001B70  26D9               	addwf	fsr2l,f,c
  6463   001B72  C009  FFDE         	movff	?___lwdiv,postinc2
  6464   001B76  C00A  FFDD         	movff	?___lwdiv+1,postdec2
  6465   001B7A                     
  6466                           ;color.c: 126:     normRGB->clear = RGBC->clear;
  6467   001B7A  5010               	movf	normalizeColors@RGBC^0,w,c
  6468   001B7C  6ED9               	movwf	fsr2l,c
  6469   001B7E  6ADA               	clrf	fsr2h,c
  6470   001B80  0E06               	movlw	6
  6471   001B82  26D9               	addwf	fsr2l,f,c
  6472   001B84  5011               	movf	normalizeColors@normRGB^0,w,c
  6473   001B86  6EE1               	movwf	fsr1l,c
  6474   001B88  6AE2               	clrf	fsr1h,c
  6475   001B8A  0E06               	movlw	6
  6476   001B8C  26E1               	addwf	fsr1l,f,c
  6477   001B8E  CFDE FFE6          	movff	postinc2,postinc1
  6478   001B92  CFDD FFE5          	movff	postdec2,postdec1
  6479   001B96  0012               	return		;funcret
  6480   001B98                     __end_of_normalizeColors:
  6481                           	callstack 0
  6482                           
  6483 ;; *************** function _creep *****************
  6484 ;; Defined at:
  6485 ;;		line 384 in file "dc_motor.c"
  6486 ;; Parameters:    Size  Location     Type
  6487 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  6488 ;;		 -> main@motorL(9), 
  6489 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  6490 ;;		 -> main@motorR(9), 
  6491 ;;  increments      2   29[COMRAM] int 
  6492 ;;  direction       1   31[COMRAM] unsigned char 
  6493 ;; Auto vars:     Size  Location     Type
  6494 ;;  i               2   37[COMRAM] int 
  6495 ;;  i               2   35[COMRAM] int 
  6496 ;;  creep_power     1   40[COMRAM] unsigned char 
  6497 ;;  current_powe    1   39[COMRAM] unsigned char 
  6498 ;; Return value:  Size  Location     Type
  6499 ;;                  1    wreg      void 
  6500 ;; Registers used:
  6501 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6502 ;; Tracked objects:
  6503 ;;		On entry : 0/0
  6504 ;;		On exit  : 0/0
  6505 ;;		Unchanged: 0/0
  6506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6507 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6508 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6509 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6510 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6511 ;;Total ram usage:       14 bytes
  6512 ;; Hardware stack levels used: 1
  6513 ;; Hardware stack levels required when called: 7
  6514 ;; This function calls:
  6515 ;;		_setMotorPWM
  6516 ;;		_stop
  6517 ;; This function is called by:
  6518 ;;		_decideColor
  6519 ;; This function uses a non-reentrant model
  6520 ;;
  6521                           
  6522                           	psect	text46
  6523   0011DE                     __ptext46:
  6524                           	callstack 0
  6525   0011DE                     _creep:
  6526                           	callstack 22
  6527   0011DE                     
  6528                           ;dc_motor.c: 385:     if (mL->power != 0 || mR->power != 0) {
  6529   0011DE  501C               	movf	creep@mL^0,w,c
  6530   0011E0  6ED9               	movwf	fsr2l,c
  6531   0011E2  6ADA               	clrf	fsr2h,c
  6532   0011E4  50DF               	movf	indf2,w,c
  6533   0011E6  A4D8               	btfss	status,2,c
  6534   0011E8  EFF8  F008         	goto	u1371
  6535   0011EC  EFFA  F008         	goto	u1370
  6536   0011F0                     u1371:
  6537   0011F0  EF05  F009         	goto	l2988
  6538   0011F4                     u1370:
  6539   0011F4  501D               	movf	creep@mR^0,w,c
  6540   0011F6  6ED9               	movwf	fsr2l,c
  6541   0011F8  6ADA               	clrf	fsr2h,c
  6542   0011FA  50DF               	movf	indf2,w,c
  6543   0011FC  B4D8               	btfsc	status,2,c
  6544   0011FE  EF03  F009         	goto	u1381
  6545   001202  EF05  F009         	goto	u1380
  6546   001206                     u1381:
  6547   001206  EF0B  F009         	goto	l2990
  6548   00120A                     u1380:
  6549   00120A                     l2988:
  6550                           
  6551                           ;dc_motor.c: 386:         stop(mL, mR);
  6552   00120A  C01C  F015         	movff	creep@mL,stop@mL
  6553   00120E  C01D  F016         	movff	creep@mR,stop@mR
  6554   001212  EC1C  F013         	call	_stop	;wreg free
  6555   001216                     l2990:
  6556                           
  6557                           ;dc_motor.c: 388:     increment = 0;
  6558   001216  0E00               	movlw	0
  6559   001218  0100               	movlb	0	; () banked
  6560   00121A  6F89               	movwf	(_increment+1)& (0+255),b
  6561   00121C  0E00               	movlw	0
  6562   00121E  6F88               	movwf	_increment& (0+255),b
  6563   001220                     
  6564                           ; BSR set to: 0
  6565                           ;dc_motor.c: 390:     mL->direction = direction;
  6566   001220  501C               	movf	creep@mL^0,w,c
  6567   001222  6ED9               	movwf	fsr2l,c
  6568   001224  6ADA               	clrf	fsr2h,c
  6569   001226  0E01               	movlw	1
  6570   001228  26D9               	addwf	fsr2l,f,c
  6571   00122A  C020  FFDF         	movff	creep@direction,indf2
  6572   00122E                     
  6573                           ; BSR set to: 0
  6574                           ;dc_motor.c: 391:     mR->direction = direction;
  6575   00122E  501D               	movf	creep@mR^0,w,c
  6576   001230  6ED9               	movwf	fsr2l,c
  6577   001232  6ADA               	clrf	fsr2h,c
  6578   001234  0E01               	movlw	1
  6579   001236  26D9               	addwf	fsr2l,f,c
  6580   001238  C020  FFDF         	movff	creep@direction,indf2
  6581   00123C                     
  6582                           ; BSR set to: 0
  6583                           ;dc_motor.c: 393:     char current_power = mL->power;
  6584   00123C  501C               	movf	creep@mL^0,w,c
  6585   00123E  6ED9               	movwf	fsr2l,c
  6586   001240  6ADA               	clrf	fsr2h,c
  6587   001242  50DF               	movf	indf2,w,c
  6588   001244  6E28               	movwf	creep@current_power^0,c
  6589   001246                     
  6590                           ; BSR set to: 0
  6591                           ;dc_motor.c: 394:     char creep_power;;dc_motor.c: 395:     if (direction==1 ) {
  6592   001246  0420               	decf	creep@direction^0,w,c
  6593   001248  A4D8               	btfss	status,2,c
  6594   00124A  EF29  F009         	goto	u1391
  6595   00124E  EF2B  F009         	goto	u1390
  6596   001252                     u1391:
  6597   001252  EF2F  F009         	goto	l3002
  6598   001256                     u1390:
  6599   001256                     
  6600                           ; BSR set to: 0
  6601                           ;dc_motor.c: 396:         creep_power = 18;
  6602   001256  0E12               	movlw	18
  6603   001258  6E29               	movwf	creep@creep_power^0,c
  6604                           
  6605                           ;dc_motor.c: 397:     } else {
  6606   00125A  EF31  F009         	goto	l3004
  6607   00125E                     l3002:
  6608                           
  6609                           ; BSR set to: 0
  6610                           ;dc_motor.c: 398:         creep_power = 10;
  6611   00125E  0E0A               	movlw	10
  6612   001260  6E29               	movwf	creep@creep_power^0,c
  6613   001262                     l3004:
  6614                           
  6615                           ; BSR set to: 0
  6616                           ;dc_motor.c: 402:     if (creep_power > current_power) {
  6617   001262  5029               	movf	creep@creep_power^0,w,c
  6618   001264  5C28               	subwf	creep@current_power^0,w,c
  6619   001266  B0D8               	btfsc	status,0,c
  6620   001268  EF38  F009         	goto	u1401
  6621   00126C  EF3A  F009         	goto	u1400
  6622   001270                     u1401:
  6623   001270  EF6F  F009         	goto	l595
  6624   001274                     u1400:
  6625   001274                     
  6626                           ; BSR set to: 0
  6627                           ;dc_motor.c: 403:         for (int i=current_power; i<= creep_power; i++) {
  6628   001274  C028  F024         	movff	creep@current_power,creep@i
  6629   001278  6A25               	clrf	(creep@i+1)^0,c
  6630   00127A  EF5B  F009         	goto	l3018
  6631   00127E                     l3008:
  6632                           
  6633                           ;dc_motor.c: 404:             mL->power = i;
  6634   00127E  501C               	movf	creep@mL^0,w,c
  6635   001280  6ED9               	movwf	fsr2l,c
  6636   001282  6ADA               	clrf	fsr2h,c
  6637   001284  C024  FFDF         	movff	creep@i,indf2
  6638                           
  6639                           ;dc_motor.c: 405:             mR->power = i;
  6640   001288  501D               	movf	creep@mR^0,w,c
  6641   00128A  6ED9               	movwf	fsr2l,c
  6642   00128C  6ADA               	clrf	fsr2h,c
  6643   00128E  C024  FFDF         	movff	creep@i,indf2
  6644   001292                     
  6645                           ;dc_motor.c: 406:             setMotorPWM(mL);
  6646   001292  C01C  F010         	movff	creep@mL,setMotorPWM@m
  6647   001296  EC80  F00C         	call	_setMotorPWM	;wreg free
  6648   00129A                     
  6649                           ;dc_motor.c: 407:             setMotorPWM(mR);
  6650   00129A  C01D  F010         	movff	creep@mR,setMotorPWM@m
  6651   00129E  EC80  F00C         	call	_setMotorPWM	;wreg free
  6652   0012A2                     
  6653                           ;dc_motor.c: 408:             _delay((unsigned long)((5)*(64000000/4000.0)));
  6654   0012A2  0E68               	movlw	104
  6655   0012A4  6E21               	movwf	??_creep^0,c
  6656   0012A6  0EE4               	movlw	228
  6657   0012A8                     u2307:
  6658   0012A8  2EE8               	decfsz	wreg,f,c
  6659   0012AA  D7FE               	bra	u2307
  6660   0012AC  2E21               	decfsz	??_creep^0,f,c
  6661   0012AE  D7FC               	bra	u2307
  6662   0012B0  D000               	nop2	
  6663   0012B2                     
  6664                           ;dc_motor.c: 409:         }
  6665   0012B2  4A24               	infsnz	creep@i^0,f,c
  6666   0012B4  2A25               	incf	(creep@i+1)^0,f,c
  6667   0012B6                     l3018:
  6668   0012B6  5029               	movf	creep@creep_power^0,w,c
  6669   0012B8  6E21               	movwf	??_creep^0,c
  6670   0012BA  6A22               	clrf	(??_creep+1)^0,c
  6671   0012BC  5024               	movf	creep@i^0,w,c
  6672   0012BE  5C21               	subwf	??_creep^0,w,c
  6673   0012C0  5022               	movf	(??_creep+1)^0,w,c
  6674   0012C2  0A80               	xorlw	128
  6675   0012C4  6E23               	movwf	(??_creep+2)^0,c
  6676   0012C6  5025               	movf	(creep@i+1)^0,w,c
  6677   0012C8  0A80               	xorlw	128
  6678   0012CA  5823               	subwfb	(??_creep+2)^0,w,c
  6679   0012CC  B0D8               	btfsc	status,0,c
  6680   0012CE  EF6B  F009         	goto	u1411
  6681   0012D2  EF6D  F009         	goto	u1410
  6682   0012D6                     u1411:
  6683   0012D6  EF3F  F009         	goto	l3008
  6684   0012DA                     u1410:
  6685   0012DA  EFA3  F009         	goto	l3032
  6686   0012DE                     l595:
  6687                           
  6688                           ; BSR set to: 0
  6689                           ;dc_motor.c: 412:         for (int i=current_power; i>= creep_power; i--) {
  6690   0012DE  C028  F026         	movff	creep@current_power,creep@i_2190
  6691   0012E2  6A27               	clrf	(creep@i_2190+1)^0,c
  6692   0012E4  EF91  F009         	goto	l3030
  6693   0012E8                     l3020:
  6694                           
  6695                           ;dc_motor.c: 413:             mL->power = i;
  6696   0012E8  501C               	movf	creep@mL^0,w,c
  6697   0012EA  6ED9               	movwf	fsr2l,c
  6698   0012EC  6ADA               	clrf	fsr2h,c
  6699   0012EE  C026  FFDF         	movff	creep@i_2190,indf2
  6700                           
  6701                           ;dc_motor.c: 414:             mR->power = i;
  6702   0012F2  501D               	movf	creep@mR^0,w,c
  6703   0012F4  6ED9               	movwf	fsr2l,c
  6704   0012F6  6ADA               	clrf	fsr2h,c
  6705   0012F8  C026  FFDF         	movff	creep@i_2190,indf2
  6706   0012FC                     
  6707                           ;dc_motor.c: 415:             setMotorPWM(mL);
  6708   0012FC  C01C  F010         	movff	creep@mL,setMotorPWM@m
  6709   001300  EC80  F00C         	call	_setMotorPWM	;wreg free
  6710   001304                     
  6711                           ;dc_motor.c: 416:             setMotorPWM(mR);
  6712   001304  C01D  F010         	movff	creep@mR,setMotorPWM@m
  6713   001308  EC80  F00C         	call	_setMotorPWM	;wreg free
  6714   00130C                     
  6715                           ;dc_motor.c: 417:             _delay((unsigned long)((5)*(64000000/4000.0)));
  6716   00130C  0E68               	movlw	104
  6717   00130E  6E21               	movwf	??_creep^0,c
  6718   001310  0EE4               	movlw	228
  6719   001312                     u2317:
  6720   001312  2EE8               	decfsz	wreg,f,c
  6721   001314  D7FE               	bra	u2317
  6722   001316  2E21               	decfsz	??_creep^0,f,c
  6723   001318  D7FC               	bra	u2317
  6724   00131A  D000               	nop2	
  6725   00131C                     
  6726                           ;dc_motor.c: 418:         }
  6727   00131C  0626               	decf	creep@i_2190^0,f,c
  6728   00131E  A0D8               	btfss	status,0,c
  6729   001320  0627               	decf	(creep@i_2190+1)^0,f,c
  6730   001322                     l3030:
  6731   001322  5029               	movf	creep@creep_power^0,w,c
  6732   001324  6E21               	movwf	??_creep^0,c
  6733   001326  6A22               	clrf	(??_creep+1)^0,c
  6734   001328  5021               	movf	??_creep^0,w,c
  6735   00132A  5C26               	subwf	creep@i_2190^0,w,c
  6736   00132C  5027               	movf	(creep@i_2190+1)^0,w,c
  6737   00132E  0A80               	xorlw	128
  6738   001330  6E23               	movwf	(??_creep+2)^0,c
  6739   001332  5022               	movf	(??_creep+1)^0,w,c
  6740   001334  0A80               	xorlw	128
  6741   001336  5823               	subwfb	(??_creep+2)^0,w,c
  6742   001338  B0D8               	btfsc	status,0,c
  6743   00133A  EFA1  F009         	goto	u1421
  6744   00133E  EFA3  F009         	goto	u1420
  6745   001342                     u1421:
  6746   001342  EF74  F009         	goto	l3020
  6747   001346                     u1420:
  6748   001346                     l3032:
  6749   001346  501E               	movf	creep@increments^0,w,c
  6750   001348  0100               	movlb	0	; () banked
  6751   00134A  5D88               	subwf	_increment& (0+255),w,b
  6752   00134C  5189               	movf	(_increment+1)& (0+255),w,b
  6753   00134E  0A80               	xorlw	128
  6754   001350  6E21               	movwf	??_creep^0,c
  6755   001352  501F               	movf	(creep@increments+1)^0,w,c
  6756   001354  0A80               	xorlw	128
  6757   001356  5821               	subwfb	??_creep^0,w,c
  6758   001358  A0D8               	btfss	status,0,c
  6759   00135A  EFB1  F009         	goto	u1431
  6760   00135E  EFB3  F009         	goto	u1430
  6761   001362                     u1431:
  6762   001362  EFA3  F009         	goto	l3032
  6763   001366                     u1430:
  6764   001366                     
  6765                           ; BSR set to: 0
  6766                           ;dc_motor.c: 421:     stop(mL, mR);
  6767   001366  C01C  F015         	movff	creep@mL,stop@mL
  6768   00136A  C01D  F016         	movff	creep@mR,stop@mR
  6769   00136E  EC1C  F013         	call	_stop	;wreg free
  6770   001372  0012               	return		;funcret
  6771   001374                     __end_of_creep:
  6772                           	callstack 0
  6773                           
  6774 ;; *************** function _stop *****************
  6775 ;; Defined at:
  6776 ;;		line 82 in file "dc_motor.c"
  6777 ;; Parameters:    Size  Location     Type
  6778 ;;  mL              1   20[COMRAM] PTR struct DC_motor
  6779 ;;		 -> main@motorL(9), 
  6780 ;;  mR              1   21[COMRAM] PTR struct DC_motor
  6781 ;;		 -> main@motorR(9), 
  6782 ;; Auto vars:     Size  Location     Type
  6783 ;;  i               2   25[COMRAM] int 
  6784 ;;  current_powe    2   23[COMRAM] unsigned int 
  6785 ;; Return value:  Size  Location     Type
  6786 ;;                  1    wreg      void 
  6787 ;; Registers used:
  6788 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6789 ;; Tracked objects:
  6790 ;;		On entry : 0/0
  6791 ;;		On exit  : 0/0
  6792 ;;		Unchanged: 0/0
  6793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6794 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6795 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6796 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6797 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6798 ;;Total ram usage:        7 bytes
  6799 ;; Hardware stack levels used: 1
  6800 ;; Hardware stack levels required when called: 6
  6801 ;; This function calls:
  6802 ;;		_setMotorPWM
  6803 ;; This function is called by:
  6804 ;;		_reverseRoute
  6805 ;;		_turnLeft
  6806 ;;		_turnRight
  6807 ;;		_turnLeft135
  6808 ;;		_turnRight135
  6809 ;;		_creep
  6810 ;;		_timed_trundle
  6811 ;;		_trundleSquare
  6812 ;; This function uses a non-reentrant model
  6813 ;;
  6814                           
  6815                           	psect	text47
  6816   002638                     __ptext47:
  6817                           	callstack 0
  6818   002638                     _stop:
  6819                           	callstack 22
  6820   002638                     
  6821                           ;dc_motor.c: 82: void stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 83: {;dc_motor.c: 85:
      +                               unsigned int current_power = mL->power;
  6822   002638  5015               	movf	stop@mL^0,w,c
  6823   00263A  6ED9               	movwf	fsr2l,c
  6824   00263C  6ADA               	clrf	fsr2h,c
  6825   00263E  50DF               	movf	indf2,w,c
  6826   002640  6E17               	movwf	??_stop^0,c
  6827   002642  5017               	movf	??_stop^0,w,c
  6828   002644  6E18               	movwf	stop@current_power^0,c
  6829   002646  6A19               	clrf	(stop@current_power+1)^0,c
  6830   002648                     
  6831                           ;dc_motor.c: 87:     for (int i=current_power; i>= 0; i--) {
  6832   002648  C018  F01A         	movff	stop@current_power,stop@i
  6833   00264C  C019  F01B         	movff	stop@current_power+1,stop@i+1
  6834   002650                     l2542:
  6835   002650  BE1B               	btfsc	(stop@i+1)^0,7,c
  6836   002652  EF2F  F013         	goto	u1030
  6837   002656  EF2D  F013         	goto	u1031
  6838   00265A                     u1031:
  6839   00265A  EF31  F013         	goto	l2546
  6840   00265E                     u1030:
  6841   00265E  EF50  F013         	goto	l483
  6842   002662                     l2546:
  6843                           
  6844                           ;dc_motor.c: 88:         mL->power = i;
  6845   002662  5015               	movf	stop@mL^0,w,c
  6846   002664  6ED9               	movwf	fsr2l,c
  6847   002666  6ADA               	clrf	fsr2h,c
  6848   002668  C01A  FFDF         	movff	stop@i,indf2
  6849                           
  6850                           ;dc_motor.c: 89:         mR->power = i;
  6851   00266C  5016               	movf	stop@mR^0,w,c
  6852   00266E  6ED9               	movwf	fsr2l,c
  6853   002670  6ADA               	clrf	fsr2h,c
  6854   002672  C01A  FFDF         	movff	stop@i,indf2
  6855   002676                     
  6856                           ;dc_motor.c: 90:         setMotorPWM(mL);
  6857   002676  C015  F010         	movff	stop@mL,setMotorPWM@m
  6858   00267A  EC80  F00C         	call	_setMotorPWM	;wreg free
  6859   00267E                     
  6860                           ;dc_motor.c: 91:         setMotorPWM(mR);
  6861   00267E  C016  F010         	movff	stop@mR,setMotorPWM@m
  6862   002682  EC80  F00C         	call	_setMotorPWM	;wreg free
  6863   002686                     
  6864                           ;dc_motor.c: 92:         _delay((unsigned long)((5)*(64000000/4000.0)));
  6865   002686  0E68               	movlw	104
  6866   002688  6E17               	movwf	??_stop^0,c
  6867   00268A  0EE4               	movlw	228
  6868   00268C                     u2327:
  6869   00268C  2EE8               	decfsz	wreg,f,c
  6870   00268E  D7FE               	bra	u2327
  6871   002690  2E17               	decfsz	??_stop^0,f,c
  6872   002692  D7FC               	bra	u2327
  6873   002694  D000               	nop2	
  6874   002696                     
  6875                           ;dc_motor.c: 93:     }
  6876   002696  061A               	decf	stop@i^0,f,c
  6877   002698  A0D8               	btfss	status,0,c
  6878   00269A  061B               	decf	(stop@i+1)^0,f,c
  6879   00269C  EF28  F013         	goto	l2542
  6880   0026A0                     l483:
  6881   0026A0  0012               	return		;funcret
  6882   0026A2                     __end_of_stop:
  6883                           	callstack 0
  6884                           
  6885 ;; *************** function _setMotorPWM *****************
  6886 ;; Defined at:
  6887 ;;		line 59 in file "dc_motor.c"
  6888 ;; Parameters:    Size  Location     Type
  6889 ;;  m               1   15[COMRAM] PTR struct DC_motor
  6890 ;;		 -> main@motorR(9), main@motorL(9), 
  6891 ;; Auto vars:     Size  Location     Type
  6892 ;;  negDuty         1   19[COMRAM] unsigned char 
  6893 ;;  posDuty         1   18[COMRAM] unsigned char 
  6894 ;; Return value:  Size  Location     Type
  6895 ;;                  1    wreg      void 
  6896 ;; Registers used:
  6897 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6898 ;; Tracked objects:
  6899 ;;		On entry : 0/0
  6900 ;;		On exit  : 0/0
  6901 ;;		Unchanged: 0/0
  6902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6903 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6904 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6905 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6906 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6907 ;;Total ram usage:        5 bytes
  6908 ;; Hardware stack levels used: 1
  6909 ;; Hardware stack levels required when called: 5
  6910 ;; This function calls:
  6911 ;;		___lwdiv
  6912 ;;		___wmul
  6913 ;; This function is called by:
  6914 ;;		_main
  6915 ;;		_stop
  6916 ;;		_fastStop
  6917 ;;		_turnLeft
  6918 ;;		_turnRight
  6919 ;;		_turnLeft135
  6920 ;;		_turnRight135
  6921 ;;		_trundle
  6922 ;;		_creep
  6923 ;;		_timed_trundle
  6924 ;;		_trundleSquare
  6925 ;;		_fullSpeedAhead
  6926 ;; This function uses a non-reentrant model
  6927 ;;
  6928                           
  6929                           	psect	text48
  6930   001900                     __ptext48:
  6931                           	callstack 0
  6932   001900                     _setMotorPWM:
  6933                           	callstack 24
  6934   001900                     
  6935                           ;dc_motor.c: 59: void setMotorPWM(DC_motor *m);dc_motor.c: 60: {;dc_motor.c: 61:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 63:     if(m->brakemode) {
  6936   001900  5010               	movf	setMotorPWM@m^0,w,c
  6937   001902  6ED9               	movwf	fsr2l,c
  6938   001904  6ADA               	clrf	fsr2h,c
  6939   001906  0E02               	movlw	2
  6940   001908  26D9               	addwf	fsr2l,f,c
  6941   00190A  50DF               	movf	indf2,w,c
  6942   00190C  B4D8               	btfsc	status,2,c
  6943   00190E  EF8B  F00C         	goto	u1011
  6944   001912  EF8D  F00C         	goto	u1010
  6945   001916                     u1011:
  6946   001916  EFBD  F00C         	goto	l2528
  6947   00191A                     u1010:
  6948   00191A                     
  6949                           ;dc_motor.c: 64:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  6950   00191A  5010               	movf	setMotorPWM@m^0,w,c
  6951   00191C  6ED9               	movwf	fsr2l,c
  6952   00191E  6ADA               	clrf	fsr2h,c
  6953   001920  50DF               	movf	indf2,w,c
  6954   001922  6E11               	movwf	??_setMotorPWM^0,c
  6955   001924  5011               	movf	??_setMotorPWM^0,w,c
  6956   001926  6E03               	movwf	___wmul@multiplier^0,c
  6957   001928  6A04               	clrf	(___wmul@multiplier+1)^0,c
  6958   00192A  5010               	movf	setMotorPWM@m^0,w,c
  6959   00192C  6ED9               	movwf	fsr2l,c
  6960   00192E  6ADA               	clrf	fsr2h,c
  6961   001930  0E03               	movlw	3
  6962   001932  26D9               	addwf	fsr2l,f,c
  6963   001934  CFDE F005          	movff	postinc2,___wmul@multiplicand
  6964   001938  CFDD F006          	movff	postdec2,___wmul@multiplicand+1
  6965   00193C  EC28  F015         	call	___wmul	;wreg free
  6966   001940  C003  F009         	movff	?___wmul,___lwdiv@dividend
  6967   001944  C004  F00A         	movff	?___wmul+1,___lwdiv@dividend+1
  6968   001948  0E00               	movlw	0
  6969   00194A  6E0C               	movwf	(___lwdiv@divisor+1)^0,c
  6970   00194C  0E64               	movlw	100
  6971   00194E  6E0B               	movwf	___lwdiv@divisor^0,c
  6972   001950  ECAD  F012         	call	___lwdiv	;wreg free
  6973   001954  5010               	movf	setMotorPWM@m^0,w,c
  6974   001956  6ED9               	movwf	fsr2l,c
  6975   001958  6ADA               	clrf	fsr2h,c
  6976   00195A  0E03               	movlw	3
  6977   00195C  26D9               	addwf	fsr2l,f,c
  6978   00195E  50DF               	movf	indf2,w,c
  6979   001960  6E12               	movwf	(??_setMotorPWM+1)^0,c
  6980   001962  5009               	movf	?___lwdiv^0,w,c
  6981   001964  5C12               	subwf	(??_setMotorPWM+1)^0,w,c
  6982   001966  6E13               	movwf	setMotorPWM@posDuty^0,c
  6983   001968                     
  6984                           ;dc_motor.c: 65:         negDuty=m->PWMperiod;
  6985   001968  5010               	movf	setMotorPWM@m^0,w,c
  6986   00196A  6ED9               	movwf	fsr2l,c
  6987   00196C  6ADA               	clrf	fsr2h,c
  6988   00196E  0E03               	movlw	3
  6989   001970  26D9               	addwf	fsr2l,f,c
  6990   001972  50DF               	movf	indf2,w,c
  6991   001974  6E14               	movwf	setMotorPWM@negDuty^0,c
  6992                           
  6993                           ;dc_motor.c: 66:     }
  6994   001976  EFDE  F00C         	goto	l2532
  6995   00197A                     l2528:
  6996                           
  6997                           ;dc_motor.c: 68:         posDuty=0;
  6998   00197A  0E00               	movlw	0
  6999   00197C  6E13               	movwf	setMotorPWM@posDuty^0,c
  7000   00197E                     
  7001                           ;dc_motor.c: 69:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  7002   00197E  5010               	movf	setMotorPWM@m^0,w,c
  7003   001980  6ED9               	movwf	fsr2l,c
  7004   001982  6ADA               	clrf	fsr2h,c
  7005   001984  50DF               	movf	indf2,w,c
  7006   001986  6E11               	movwf	??_setMotorPWM^0,c
  7007   001988  5011               	movf	??_setMotorPWM^0,w,c
  7008   00198A  6E03               	movwf	___wmul@multiplier^0,c
  7009   00198C  6A04               	clrf	(___wmul@multiplier+1)^0,c
  7010   00198E  5010               	movf	setMotorPWM@m^0,w,c
  7011   001990  6ED9               	movwf	fsr2l,c
  7012   001992  6ADA               	clrf	fsr2h,c
  7013   001994  0E03               	movlw	3
  7014   001996  26D9               	addwf	fsr2l,f,c
  7015   001998  CFDE F005          	movff	postinc2,___wmul@multiplicand
  7016   00199C  CFDD F006          	movff	postdec2,___wmul@multiplicand+1
  7017   0019A0  EC28  F015         	call	___wmul	;wreg free
  7018   0019A4  C003  F009         	movff	?___wmul,___lwdiv@dividend
  7019   0019A8  C004  F00A         	movff	?___wmul+1,___lwdiv@dividend+1
  7020   0019AC  0E00               	movlw	0
  7021   0019AE  6E0C               	movwf	(___lwdiv@divisor+1)^0,c
  7022   0019B0  0E64               	movlw	100
  7023   0019B2  6E0B               	movwf	___lwdiv@divisor^0,c
  7024   0019B4  ECAD  F012         	call	___lwdiv	;wreg free
  7025   0019B8  5009               	movf	?___lwdiv^0,w,c
  7026   0019BA  6E14               	movwf	setMotorPWM@negDuty^0,c
  7027   0019BC                     l2532:
  7028                           
  7029                           ;dc_motor.c: 72:     if (m->direction) {
  7030   0019BC  5010               	movf	setMotorPWM@m^0,w,c
  7031   0019BE  6ED9               	movwf	fsr2l,c
  7032   0019C0  6ADA               	clrf	fsr2h,c
  7033   0019C2  0E01               	movlw	1
  7034   0019C4  26D9               	addwf	fsr2l,f,c
  7035   0019C6  50DF               	movf	indf2,w,c
  7036   0019C8  B4D8               	btfsc	status,2,c
  7037   0019CA  EFE9  F00C         	goto	u1021
  7038   0019CE  EFEB  F00C         	goto	u1020
  7039   0019D2                     u1021:
  7040   0019D2  EF0B  F00D         	goto	l2536
  7041   0019D6                     u1020:
  7042   0019D6                     
  7043                           ;dc_motor.c: 73:         *(m->posDutyHighByte)=posDuty;
  7044   0019D6  5010               	movf	setMotorPWM@m^0,w,c
  7045   0019D8  6ED9               	movwf	fsr2l,c
  7046   0019DA  6ADA               	clrf	fsr2h,c
  7047   0019DC  0E05               	movlw	5
  7048   0019DE  26D9               	addwf	fsr2l,f,c
  7049   0019E0  CFDE F011          	movff	postinc2,??_setMotorPWM
  7050   0019E4  CFDD F012          	movff	postdec2,??_setMotorPWM+1
  7051   0019E8  C011  FFD9         	movff	??_setMotorPWM,fsr2l
  7052   0019EC  C012  FFDA         	movff	??_setMotorPWM+1,fsr2h
  7053   0019F0  C013  FFDF         	movff	setMotorPWM@posDuty,indf2
  7054                           
  7055                           ;dc_motor.c: 74:         *(m->negDutyHighByte)=negDuty;
  7056   0019F4  5010               	movf	setMotorPWM@m^0,w,c
  7057   0019F6  6ED9               	movwf	fsr2l,c
  7058   0019F8  6ADA               	clrf	fsr2h,c
  7059   0019FA  0E07               	movlw	7
  7060   0019FC  26D9               	addwf	fsr2l,f,c
  7061   0019FE  CFDE F011          	movff	postinc2,??_setMotorPWM
  7062   001A02  CFDD F012          	movff	postdec2,??_setMotorPWM+1
  7063   001A06  C011  FFD9         	movff	??_setMotorPWM,fsr2l
  7064   001A0A  C012  FFDA         	movff	??_setMotorPWM+1,fsr2h
  7065   001A0E  C014  FFDF         	movff	setMotorPWM@negDuty,indf2
  7066                           
  7067                           ;dc_motor.c: 75:     } else {
  7068   001A12  EF29  F00D         	goto	l478
  7069   001A16                     l2536:
  7070                           
  7071                           ;dc_motor.c: 76:         *(m->posDutyHighByte)=negDuty;
  7072   001A16  5010               	movf	setMotorPWM@m^0,w,c
  7073   001A18  6ED9               	movwf	fsr2l,c
  7074   001A1A  6ADA               	clrf	fsr2h,c
  7075   001A1C  0E05               	movlw	5
  7076   001A1E  26D9               	addwf	fsr2l,f,c
  7077   001A20  CFDE F011          	movff	postinc2,??_setMotorPWM
  7078   001A24  CFDD F012          	movff	postdec2,??_setMotorPWM+1
  7079   001A28  C011  FFD9         	movff	??_setMotorPWM,fsr2l
  7080   001A2C  C012  FFDA         	movff	??_setMotorPWM+1,fsr2h
  7081   001A30  C014  FFDF         	movff	setMotorPWM@negDuty,indf2
  7082                           
  7083                           ;dc_motor.c: 77:         *(m->negDutyHighByte)=posDuty;
  7084   001A34  5010               	movf	setMotorPWM@m^0,w,c
  7085   001A36  6ED9               	movwf	fsr2l,c
  7086   001A38  6ADA               	clrf	fsr2h,c
  7087   001A3A  0E07               	movlw	7
  7088   001A3C  26D9               	addwf	fsr2l,f,c
  7089   001A3E  CFDE F011          	movff	postinc2,??_setMotorPWM
  7090   001A42  CFDD F012          	movff	postdec2,??_setMotorPWM+1
  7091   001A46  C011  FFD9         	movff	??_setMotorPWM,fsr2l
  7092   001A4A  C012  FFDA         	movff	??_setMotorPWM+1,fsr2h
  7093   001A4E  C013  FFDF         	movff	setMotorPWM@posDuty,indf2
  7094   001A52                     l478:
  7095   001A52  0012               	return		;funcret
  7096   001A54                     __end_of_setMotorPWM:
  7097                           	callstack 0
  7098                           
  7099 ;; *************** function ___wmul *****************
  7100 ;; Defined at:
  7101 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
  7102 ;; Parameters:    Size  Location     Type
  7103 ;;  multiplier      2    2[COMRAM] unsigned int 
  7104 ;;  multiplicand    2    4[COMRAM] unsigned int 
  7105 ;; Auto vars:     Size  Location     Type
  7106 ;;  product         2    6[COMRAM] unsigned int 
  7107 ;; Return value:  Size  Location     Type
  7108 ;;                  2    2[COMRAM] unsigned int 
  7109 ;; Registers used:
  7110 ;;		wreg, status,2, status,0, prodl, prodh
  7111 ;; Tracked objects:
  7112 ;;		On entry : 0/0
  7113 ;;		On exit  : 0/0
  7114 ;;		Unchanged: 0/0
  7115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7116 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7117 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7118 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7119 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7120 ;;Total ram usage:        6 bytes
  7121 ;; Hardware stack levels used: 1
  7122 ;; Hardware stack levels required when called: 4
  7123 ;; This function calls:
  7124 ;;		Nothing
  7125 ;; This function is called by:
  7126 ;;		_setMotorPWM
  7127 ;;		_turnLeft135
  7128 ;;		_turnRight135
  7129 ;;		_checkBattery
  7130 ;; This function uses a non-reentrant model
  7131 ;;
  7132                           
  7133                           	psect	text49
  7134   002A50                     __ptext49:
  7135                           	callstack 0
  7136   002A50                     ___wmul:
  7137                           	callstack 24
  7138   002A50  5003               	movf	___wmul@multiplier^0,w,c
  7139   002A52  0205               	mulwf	___wmul@multiplicand^0,c
  7140   002A54  CFF3 F007          	movff	prodl,___wmul@product
  7141   002A58  CFF4 F008          	movff	prodh,___wmul@product+1
  7142   002A5C  5003               	movf	___wmul@multiplier^0,w,c
  7143   002A5E  0206               	mulwf	(___wmul@multiplicand+1)^0,c
  7144   002A60  50F3               	movf	243,w,c
  7145   002A62  2608               	addwf	(___wmul@product+1)^0,f,c
  7146   002A64  5004               	movf	(___wmul@multiplier+1)^0,w,c
  7147   002A66  0205               	mulwf	___wmul@multiplicand^0,c
  7148   002A68  50F3               	movf	243,w,c
  7149   002A6A  2608               	addwf	(___wmul@product+1)^0,f,c
  7150   002A6C  C007  F003         	movff	___wmul@product,?___wmul
  7151   002A70  C008  F004         	movff	___wmul@product+1,?___wmul+1
  7152   002A74  0012               	return		;funcret
  7153   002A76                     __end_of___wmul:
  7154                           	callstack 0
  7155                           
  7156 ;; *************** function ___lwdiv *****************
  7157 ;; Defined at:
  7158 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
  7159 ;; Parameters:    Size  Location     Type
  7160 ;;  dividend        2    8[COMRAM] unsigned int 
  7161 ;;  divisor         2   10[COMRAM] unsigned int 
  7162 ;; Auto vars:     Size  Location     Type
  7163 ;;  quotient        2   12[COMRAM] unsigned int 
  7164 ;;  counter         1   14[COMRAM] unsigned char 
  7165 ;; Return value:  Size  Location     Type
  7166 ;;                  2    8[COMRAM] unsigned int 
  7167 ;; Registers used:
  7168 ;;		wreg, status,2, status,0
  7169 ;; Tracked objects:
  7170 ;;		On entry : 0/0
  7171 ;;		On exit  : 0/0
  7172 ;;		Unchanged: 0/0
  7173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7174 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7175 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7176 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7177 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7178 ;;Total ram usage:        7 bytes
  7179 ;; Hardware stack levels used: 1
  7180 ;; Hardware stack levels required when called: 4
  7181 ;; This function calls:
  7182 ;;		Nothing
  7183 ;; This function is called by:
  7184 ;;		_normalizeColors
  7185 ;;		_setMotorPWM
  7186 ;; This function uses a non-reentrant model
  7187 ;;
  7188                           
  7189                           	psect	text50
  7190   00255A                     __ptext50:
  7191                           	callstack 0
  7192   00255A                     ___lwdiv:
  7193                           	callstack 24
  7194   00255A  0E00               	movlw	0
  7195   00255C  6E0E               	movwf	(___lwdiv@quotient+1)^0,c
  7196   00255E  0E00               	movlw	0
  7197   002560  6E0D               	movwf	___lwdiv@quotient^0,c
  7198   002562  500B               	movf	___lwdiv@divisor^0,w,c
  7199   002564  100C               	iorwf	(___lwdiv@divisor+1)^0,w,c
  7200   002566  B4D8               	btfsc	status,2,c
  7201   002568  EFB8  F012         	goto	u981
  7202   00256C  EFBA  F012         	goto	u980
  7203   002570                     u981:
  7204   002570  EFE2  F012         	goto	l1180
  7205   002574                     u980:
  7206   002574  0E01               	movlw	1
  7207   002576  6E0F               	movwf	___lwdiv@counter^0,c
  7208   002578  EFC2  F012         	goto	l2508
  7209   00257C                     l2506:
  7210   00257C  90D8               	bcf	status,0,c
  7211   00257E  360B               	rlcf	___lwdiv@divisor^0,f,c
  7212   002580  360C               	rlcf	(___lwdiv@divisor+1)^0,f,c
  7213   002582  2A0F               	incf	___lwdiv@counter^0,f,c
  7214   002584                     l2508:
  7215   002584  AE0C               	btfss	(___lwdiv@divisor+1)^0,7,c
  7216   002586  EFC7  F012         	goto	u991
  7217   00258A  EFC9  F012         	goto	u990
  7218   00258E                     u991:
  7219   00258E  EFBE  F012         	goto	l2506
  7220   002592                     u990:
  7221   002592                     l2510:
  7222   002592  90D8               	bcf	status,0,c
  7223   002594  360D               	rlcf	___lwdiv@quotient^0,f,c
  7224   002596  360E               	rlcf	(___lwdiv@quotient+1)^0,f,c
  7225   002598  500B               	movf	___lwdiv@divisor^0,w,c
  7226   00259A  5C09               	subwf	___lwdiv@dividend^0,w,c
  7227   00259C  500C               	movf	(___lwdiv@divisor+1)^0,w,c
  7228   00259E  580A               	subwfb	(___lwdiv@dividend+1)^0,w,c
  7229   0025A0  A0D8               	btfss	status,0,c
  7230   0025A2  EFD5  F012         	goto	u1001
  7231   0025A6  EFD7  F012         	goto	u1000
  7232   0025AA                     u1001:
  7233   0025AA  EFDC  F012         	goto	l2518
  7234   0025AE                     u1000:
  7235   0025AE  500B               	movf	___lwdiv@divisor^0,w,c
  7236   0025B0  5E09               	subwf	___lwdiv@dividend^0,f,c
  7237   0025B2  500C               	movf	(___lwdiv@divisor+1)^0,w,c
  7238   0025B4  5A0A               	subwfb	(___lwdiv@dividend+1)^0,f,c
  7239   0025B6  800D               	bsf	___lwdiv@quotient^0,0,c
  7240   0025B8                     l2518:
  7241   0025B8  90D8               	bcf	status,0,c
  7242   0025BA  320C               	rrcf	(___lwdiv@divisor+1)^0,f,c
  7243   0025BC  320B               	rrcf	___lwdiv@divisor^0,f,c
  7244   0025BE  2E0F               	decfsz	___lwdiv@counter^0,f,c
  7245   0025C0  EFC9  F012         	goto	l2510
  7246   0025C4                     l1180:
  7247   0025C4  C00D  F009         	movff	___lwdiv@quotient,?___lwdiv
  7248   0025C8  C00E  F00A         	movff	___lwdiv@quotient+1,?___lwdiv+1
  7249   0025CC  0012               	return		;funcret
  7250   0025CE                     __end_of___lwdiv:
  7251                           	callstack 0
  7252                           
  7253 ;; *************** function _color_click_init *****************
  7254 ;; Defined at:
  7255 ;;		line 7 in file "color.c"
  7256 ;; Parameters:    Size  Location     Type
  7257 ;;		None
  7258 ;; Auto vars:     Size  Location     Type
  7259 ;;		None
  7260 ;; Return value:  Size  Location     Type
  7261 ;;                  1    wreg      void 
  7262 ;; Registers used:
  7263 ;;		wreg, status,2, status,0, cstack
  7264 ;; Tracked objects:
  7265 ;;		On entry : 0/0
  7266 ;;		On exit  : 0/0
  7267 ;;		Unchanged: 0/0
  7268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7269 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7270 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7271 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7272 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7273 ;;Total ram usage:        1 bytes
  7274 ;; Hardware stack levels used: 1
  7275 ;; Hardware stack levels required when called: 7
  7276 ;; This function calls:
  7277 ;;		_I2C_2_Master_Init
  7278 ;;		_color_writetoaddr
  7279 ;; This function is called by:
  7280 ;;		_main
  7281 ;; This function uses a non-reentrant model
  7282 ;;
  7283                           
  7284                           	psect	text51
  7285   002960                     __ptext51:
  7286                           	callstack 0
  7287   002960                     _color_click_init:
  7288                           	callstack 23
  7289   002960                     
  7290                           ;color.c: 10:     I2C_2_Master_Init();
  7291   002960  ECC5  F014         	call	_I2C_2_Master_Init	;wreg free
  7292   002964                     
  7293                           ;color.c: 13:  color_writetoaddr(0x01, 0xF6);
  7294   002964  0EF6               	movlw	246
  7295   002966  6E05               	movwf	color_writetoaddr@value^0,c
  7296   002968  0E01               	movlw	1
  7297   00296A  EC3B  F015         	call	_color_writetoaddr
  7298   00296E                     
  7299                           ;color.c: 16:     color_writetoaddr(0x00, 0x13);
  7300   00296E  0E13               	movlw	19
  7301   002970  6E05               	movwf	color_writetoaddr@value^0,c
  7302   002972  0E00               	movlw	0
  7303   002974  EC3B  F015         	call	_color_writetoaddr
  7304   002978                     
  7305                           ;color.c: 17:     _delay((unsigned long)((3)*(64000000/4000.0)));
  7306   002978  0E3F               	movlw	63
  7307   00297A  6E07               	movwf	??_color_click_init^0,c
  7308   00297C  0E55               	movlw	85
  7309   00297E                     u2337:
  7310   00297E  2EE8               	decfsz	wreg,f,c
  7311   002980  D7FE               	bra	u2337
  7312   002982  2E07               	decfsz	??_color_click_init^0,f,c
  7313   002984  D7FC               	bra	u2337
  7314   002986  0000               	nop	
  7315   002988  0012               	return		;funcret
  7316   00298A                     __end_of_color_click_init:
  7317                           	callstack 0
  7318                           
  7319 ;; *************** function _color_writetoaddr *****************
  7320 ;; Defined at:
  7321 ;;		line 48 in file "color.c"
  7322 ;; Parameters:    Size  Location     Type
  7323 ;;  address         1    wreg     unsigned char 
  7324 ;;  value           1    4[COMRAM] unsigned char 
  7325 ;; Auto vars:     Size  Location     Type
  7326 ;;  address         1    5[COMRAM] unsigned char 
  7327 ;; Return value:  Size  Location     Type
  7328 ;;                  1    wreg      void 
  7329 ;; Registers used:
  7330 ;;		wreg, status,2, status,0, cstack
  7331 ;; Tracked objects:
  7332 ;;		On entry : 0/0
  7333 ;;		On exit  : 0/0
  7334 ;;		Unchanged: 0/0
  7335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7336 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7337 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7338 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7339 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7340 ;;Total ram usage:        2 bytes
  7341 ;; Hardware stack levels used: 1
  7342 ;; Hardware stack levels required when called: 6
  7343 ;; This function calls:
  7344 ;;		_I2C_2_Master_Start
  7345 ;;		_I2C_2_Master_Stop
  7346 ;;		_I2C_2_Master_Write
  7347 ;; This function is called by:
  7348 ;;		_color_click_init
  7349 ;;		_interrupts_init
  7350 ;; This function uses a non-reentrant model
  7351 ;;
  7352                           
  7353                           	psect	text52
  7354   002A76                     __ptext52:
  7355                           	callstack 0
  7356   002A76                     _color_writetoaddr:
  7357                           	callstack 23
  7358                           
  7359                           ;incstack = 0
  7360                           ;color_writetoaddr@address stored from wreg
  7361   002A76  6E06               	movwf	color_writetoaddr@address^0,c
  7362   002A78                     
  7363                           ;color.c: 49:     I2C_2_Master_Start();
  7364   002A78  EC01  F016         	call	_I2C_2_Master_Start	;wreg free
  7365                           
  7366                           ;color.c: 50:     I2C_2_Master_Write(0x52 | 0x00);
  7367   002A7C  0E52               	movlw	82
  7368   002A7E  ECDC  F015         	call	_I2C_2_Master_Write
  7369                           
  7370                           ;color.c: 51:     I2C_2_Master_Write(0x80 | address);
  7371   002A82  5006               	movf	color_writetoaddr@address^0,w,c
  7372   002A84  0980               	iorlw	128
  7373   002A86  ECDC  F015         	call	_I2C_2_Master_Write
  7374                           
  7375                           ;color.c: 52:     I2C_2_Master_Write(value);
  7376   002A8A  5005               	movf	color_writetoaddr@value^0,w,c
  7377   002A8C  ECDC  F015         	call	_I2C_2_Master_Write
  7378                           
  7379                           ;color.c: 53:     I2C_2_Master_Stop();
  7380   002A90  ECFC  F015         	call	_I2C_2_Master_Stop	;wreg free
  7381   002A94  0012               	return		;funcret
  7382   002A96                     __end_of_color_writetoaddr:
  7383                           	callstack 0
  7384                           
  7385 ;; *************** function _I2C_2_Master_Write *****************
  7386 ;; Defined at:
  7387 ;;		line 49 in file "i2c.c"
  7388 ;; Parameters:    Size  Location     Type
  7389 ;;  data_byte       1    wreg     unsigned char 
  7390 ;; Auto vars:     Size  Location     Type
  7391 ;;  data_byte       1    3[COMRAM] unsigned char 
  7392 ;; Return value:  Size  Location     Type
  7393 ;;                  1    wreg      void 
  7394 ;; Registers used:
  7395 ;;		wreg, status,2, status,0, cstack
  7396 ;; Tracked objects:
  7397 ;;		On entry : 0/0
  7398 ;;		On exit  : 0/0
  7399 ;;		Unchanged: 0/0
  7400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7401 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7402 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7403 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7404 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7405 ;;Total ram usage:        1 bytes
  7406 ;; Hardware stack levels used: 1
  7407 ;; Hardware stack levels required when called: 5
  7408 ;; This function calls:
  7409 ;;		_I2C_2_Master_Idle
  7410 ;; This function is called by:
  7411 ;;		_color_writetoaddr
  7412 ;;		_readRedColor
  7413 ;;		_readGreenColor
  7414 ;;		_readBlueColor
  7415 ;;		_readClearColor
  7416 ;;		_clearInterrupt
  7417 ;;		_color_readdoublefromaddress
  7418 ;;		_color_readfromaddress
  7419 ;; This function uses a non-reentrant model
  7420 ;;
  7421                           
  7422                           	psect	text53
  7423   002BB8                     __ptext53:
  7424                           	callstack 0
  7425   002BB8                     _I2C_2_Master_Write:
  7426                           	callstack 23
  7427                           
  7428                           ;incstack = 0
  7429                           ;I2C_2_Master_Write@data_byte stored from wreg
  7430   002BB8  6E04               	movwf	I2C_2_Master_Write@data_byte^0,c
  7431   002BBA                     
  7432                           ;i2c.c: 49: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 50: {;i2c.c: 51:   I
      +                          2C_2_Master_Idle();
  7433   002BBA  ECDA  F014         	call	_I2C_2_Master_Idle	;wreg free
  7434   002BBE                     
  7435                           ;i2c.c: 52:   SSP2BUF = data_byte;
  7436   002BBE  C004  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  7437   002BC2  0012               	return		;funcret
  7438   002BC4                     __end_of_I2C_2_Master_Write:
  7439                           	callstack 0
  7440                           
  7441 ;; *************** function _I2C_2_Master_Stop *****************
  7442 ;; Defined at:
  7443 ;;		line 43 in file "i2c.c"
  7444 ;; Parameters:    Size  Location     Type
  7445 ;;		None
  7446 ;; Auto vars:     Size  Location     Type
  7447 ;;		None
  7448 ;; Return value:  Size  Location     Type
  7449 ;;                  1    wreg      void 
  7450 ;; Registers used:
  7451 ;;		wreg, status,2, status,0, cstack
  7452 ;; Tracked objects:
  7453 ;;		On entry : 0/0
  7454 ;;		On exit  : 0/0
  7455 ;;		Unchanged: 0/0
  7456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7457 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7458 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7459 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7460 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7461 ;;Total ram usage:        0 bytes
  7462 ;; Hardware stack levels used: 1
  7463 ;; Hardware stack levels required when called: 5
  7464 ;; This function calls:
  7465 ;;		_I2C_2_Master_Idle
  7466 ;; This function is called by:
  7467 ;;		_color_writetoaddr
  7468 ;;		_readRedColor
  7469 ;;		_readGreenColor
  7470 ;;		_readBlueColor
  7471 ;;		_readClearColor
  7472 ;;		_clearInterrupt
  7473 ;;		_color_readdoublefromaddress
  7474 ;; This function uses a non-reentrant model
  7475 ;;
  7476                           
  7477                           	psect	text54
  7478   002BF8                     __ptext54:
  7479                           	callstack 0
  7480   002BF8                     _I2C_2_Master_Stop:
  7481                           	callstack 23
  7482   002BF8                     
  7483                           ;i2c.c: 45:   I2C_2_Master_Idle();
  7484   002BF8  ECDA  F014         	call	_I2C_2_Master_Idle	;wreg free
  7485   002BFC                     
  7486                           ;i2c.c: 46:   SSP2CON2bits.PEN = 1;
  7487   002BFC  010E               	movlb	14	; () banked
  7488   002BFE  85DA               	bsf	218,2,b	;volatile
  7489   002C00                     
  7490                           ; BSR set to: 14
  7491   002C00  0012               	return		;funcret
  7492   002C02                     __end_of_I2C_2_Master_Stop:
  7493                           	callstack 0
  7494                           
  7495 ;; *************** function _I2C_2_Master_Start *****************
  7496 ;; Defined at:
  7497 ;;		line 31 in file "i2c.c"
  7498 ;; Parameters:    Size  Location     Type
  7499 ;;		None
  7500 ;; Auto vars:     Size  Location     Type
  7501 ;;		None
  7502 ;; Return value:  Size  Location     Type
  7503 ;;                  1    wreg      void 
  7504 ;; Registers used:
  7505 ;;		wreg, status,2, status,0, cstack
  7506 ;; Tracked objects:
  7507 ;;		On entry : 0/0
  7508 ;;		On exit  : 0/0
  7509 ;;		Unchanged: 0/0
  7510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7511 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7512 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7513 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7514 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7515 ;;Total ram usage:        0 bytes
  7516 ;; Hardware stack levels used: 1
  7517 ;; Hardware stack levels required when called: 5
  7518 ;; This function calls:
  7519 ;;		_I2C_2_Master_Idle
  7520 ;; This function is called by:
  7521 ;;		_color_writetoaddr
  7522 ;;		_readRedColor
  7523 ;;		_readGreenColor
  7524 ;;		_readBlueColor
  7525 ;;		_readClearColor
  7526 ;;		_clearInterrupt
  7527 ;;		_color_readdoublefromaddress
  7528 ;;		_color_readfromaddress
  7529 ;; This function uses a non-reentrant model
  7530 ;;
  7531                           
  7532                           	psect	text55
  7533   002C02                     __ptext55:
  7534                           	callstack 0
  7535   002C02                     _I2C_2_Master_Start:
  7536                           	callstack 23
  7537   002C02                     
  7538                           ;i2c.c: 33:   I2C_2_Master_Idle();
  7539   002C02  ECDA  F014         	call	_I2C_2_Master_Idle	;wreg free
  7540   002C06                     
  7541                           ;i2c.c: 34:   SSP2CON2bits.SEN = 1;
  7542   002C06  010E               	movlb	14	; () banked
  7543   002C08  81DA               	bsf	218,0,b	;volatile
  7544   002C0A                     
  7545                           ; BSR set to: 14
  7546   002C0A  0012               	return		;funcret
  7547   002C0C                     __end_of_I2C_2_Master_Start:
  7548                           	callstack 0
  7549                           
  7550 ;; *************** function _I2C_2_Master_Idle *****************
  7551 ;; Defined at:
  7552 ;;		line 26 in file "i2c.c"
  7553 ;; Parameters:    Size  Location     Type
  7554 ;;		None
  7555 ;; Auto vars:     Size  Location     Type
  7556 ;;		None
  7557 ;; Return value:  Size  Location     Type
  7558 ;;                  1    wreg      void 
  7559 ;; Registers used:
  7560 ;;		wreg, status,2, status,0
  7561 ;; Tracked objects:
  7562 ;;		On entry : 0/0
  7563 ;;		On exit  : 0/0
  7564 ;;		Unchanged: 0/0
  7565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7566 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7567 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7568 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7569 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7570 ;;Total ram usage:        1 bytes
  7571 ;; Hardware stack levels used: 1
  7572 ;; Hardware stack levels required when called: 4
  7573 ;; This function calls:
  7574 ;;		Nothing
  7575 ;; This function is called by:
  7576 ;;		_I2C_2_Master_Start
  7577 ;;		_I2C_2_Master_RepStart
  7578 ;;		_I2C_2_Master_Stop
  7579 ;;		_I2C_2_Master_Write
  7580 ;;		_I2C_2_Master_Read
  7581 ;; This function uses a non-reentrant model
  7582 ;;
  7583                           
  7584                           	psect	text56
  7585   0029B4                     __ptext56:
  7586                           	callstack 0
  7587   0029B4                     _I2C_2_Master_Idle:
  7588                           	callstack 23
  7589   0029B4                     l104:
  7590   0029B4  010E               	movlb	14	; () banked
  7591   0029B6  B5D8               	btfsc	216,2,b	;volatile
  7592   0029B8  EFE0  F014         	goto	u1041
  7593   0029BC  EFE2  F014         	goto	u1040
  7594   0029C0                     u1041:
  7595   0029C0  EFDA  F014         	goto	l104
  7596   0029C4                     u1040:
  7597   0029C4                     
  7598                           ; BSR set to: 14
  7599   0029C4  CEDA F003          	movff	3802,??_I2C_2_Master_Idle	;volatile
  7600   0029C8  0E1F               	movlw	31
  7601   0029CA  1603               	andwf	??_I2C_2_Master_Idle^0,f,c
  7602   0029CC  A4D8               	btfss	status,2,c
  7603   0029CE  EFEB  F014         	goto	u1051
  7604   0029D2  EFED  F014         	goto	u1050
  7605   0029D6                     u1051:
  7606   0029D6  EFDA  F014         	goto	l104
  7607   0029DA                     u1050:
  7608   0029DA                     
  7609                           ; BSR set to: 14
  7610   0029DA  0012               	return		;funcret
  7611   0029DC                     __end_of_I2C_2_Master_Idle:
  7612                           	callstack 0
  7613                           
  7614 ;; *************** function _I2C_2_Master_Init *****************
  7615 ;; Defined at:
  7616 ;;		line 8 in file "i2c.c"
  7617 ;; Parameters:    Size  Location     Type
  7618 ;;		None
  7619 ;; Auto vars:     Size  Location     Type
  7620 ;;		None
  7621 ;; Return value:  Size  Location     Type
  7622 ;;                  1    wreg      void 
  7623 ;; Registers used:
  7624 ;;		wreg, status,2
  7625 ;; Tracked objects:
  7626 ;;		On entry : 0/0
  7627 ;;		On exit  : 0/0
  7628 ;;		Unchanged: 0/0
  7629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7630 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7631 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7633 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7634 ;;Total ram usage:        0 bytes
  7635 ;; Hardware stack levels used: 1
  7636 ;; Hardware stack levels required when called: 4
  7637 ;; This function calls:
  7638 ;;		Nothing
  7639 ;; This function is called by:
  7640 ;;		_color_click_init
  7641 ;; This function uses a non-reentrant model
  7642 ;;
  7643                           
  7644                           	psect	text57
  7645   00298A                     __ptext57:
  7646                           	callstack 0
  7647   00298A                     _I2C_2_Master_Init:
  7648                           	callstack 25
  7649   00298A                     
  7650                           ;i2c.c: 11:   SSP2CON1bits.SSPM= 0b1000;
  7651   00298A  010E               	movlb	14	; () banked
  7652   00298C  51D9               	movf	217,w,b	;volatile
  7653   00298E  0BF0               	andlw	-16
  7654   002990  0908               	iorlw	8
  7655   002992  6FD9               	movwf	217,b	;volatile
  7656   002994                     
  7657                           ; BSR set to: 14
  7658                           ;i2c.c: 12:   SSP2CON1bits.SSPEN = 1;
  7659   002994  8BD9               	bsf	217,5,b	;volatile
  7660                           
  7661                           ;i2c.c: 13:   SSP2ADD = (64000000/(4*100000))-1;
  7662   002996  0E9F               	movlw	159
  7663   002998  6FD6               	movwf	214,b	;volatile
  7664   00299A                     
  7665                           ; BSR set to: 14
  7666                           ;i2c.c: 16:   TRISDbits.TRISD5 = 1;
  7667   00299A  8A84               	bsf	132,5,c	;volatile
  7668   00299C                     
  7669                           ; BSR set to: 14
  7670                           ;i2c.c: 17:   TRISDbits.TRISD6 = 1;
  7671   00299C  8C84               	bsf	132,6,c	;volatile
  7672   00299E                     
  7673                           ; BSR set to: 14
  7674                           ;i2c.c: 18:   ANSELDbits.ANSELD5=0;
  7675   00299E  9BA7               	bcf	167,5,b	;volatile
  7676   0029A0                     
  7677                           ; BSR set to: 14
  7678                           ;i2c.c: 19:   ANSELDbits.ANSELD6=0;
  7679   0029A0  9DA7               	bcf	167,6,b	;volatile
  7680                           
  7681                           ;i2c.c: 20:   SSP2DATPPS=0x1D;
  7682   0029A2  0E1D               	movlw	29
  7683   0029A4  6F1D               	movwf	29,b	;volatile
  7684                           
  7685                           ;i2c.c: 21:   SSP2CLKPPS=0x1E;
  7686   0029A6  0E1E               	movlw	30
  7687   0029A8  6F1C               	movwf	28,b	;volatile
  7688                           
  7689                           ;i2c.c: 22:   RD5PPS=0x1C;
  7690   0029AA  0E1C               	movlw	28
  7691   0029AC  6F6F               	movwf	111,b	;volatile
  7692                           
  7693                           ;i2c.c: 23:   RD6PPS=0x1B;
  7694   0029AE  0E1B               	movlw	27
  7695   0029B0  6F70               	movwf	112,b	;volatile
  7696   0029B2                     
  7697                           ; BSR set to: 14
  7698   0029B2  0012               	return		;funcret
  7699   0029B4                     __end_of_I2C_2_Master_Init:
  7700                           	callstack 0
  7701                           
  7702 ;; *************** function _Timer0_init *****************
  7703 ;; Defined at:
  7704 ;;		line 60 in file "interrupts.c"
  7705 ;; Parameters:    Size  Location     Type
  7706 ;;		None
  7707 ;; Auto vars:     Size  Location     Type
  7708 ;;		None
  7709 ;; Return value:  Size  Location     Type
  7710 ;;                  1    wreg      void 
  7711 ;; Registers used:
  7712 ;;		wreg, status,2
  7713 ;; Tracked objects:
  7714 ;;		On entry : 0/0
  7715 ;;		On exit  : 0/0
  7716 ;;		Unchanged: 0/0
  7717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7718 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7719 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7720 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7721 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7722 ;;Total ram usage:        0 bytes
  7723 ;; Hardware stack levels used: 1
  7724 ;; Hardware stack levels required when called: 4
  7725 ;; This function calls:
  7726 ;;		Nothing
  7727 ;; This function is called by:
  7728 ;;		_main
  7729 ;; This function uses a non-reentrant model
  7730 ;;
  7731                           
  7732                           	psect	text58
  7733   002A96                     __ptext58:
  7734                           	callstack 0
  7735   002A96                     _Timer0_init:
  7736                           	callstack 26
  7737   002A96                     
  7738                           ;interrupts.c: 62:     T0CON1bits.T0CS=0b010;
  7739   002A96  50D6               	movf	214,w,c	;volatile
  7740   002A98  0B1F               	andlw	-225
  7741   002A9A  0940               	iorlw	64
  7742   002A9C  6ED6               	movwf	214,c	;volatile
  7743   002A9E                     
  7744                           ;interrupts.c: 63:     T0CON1bits.T0ASYNC=1;
  7745   002A9E  88D6               	bsf	214,4,c	;volatile
  7746                           
  7747                           ;interrupts.c: 64:     T0CON1bits.T0CKPS=0b0101;
  7748   002AA0  50D6               	movf	214,w,c	;volatile
  7749   002AA2  0BF0               	andlw	-16
  7750   002AA4  0905               	iorlw	5
  7751   002AA6  6ED6               	movwf	214,c	;volatile
  7752   002AA8                     
  7753                           ;interrupts.c: 65:     T0CON0bits.T016BIT=1;
  7754   002AA8  88D5               	bsf	213,4,c	;volatile
  7755                           
  7756                           ;interrupts.c: 70:     TMR0H=0;
  7757   002AAA  0E00               	movlw	0
  7758   002AAC  6ED4               	movwf	212,c	;volatile
  7759                           
  7760                           ;interrupts.c: 71:     TMR0L=0;
  7761   002AAE  0E00               	movlw	0
  7762   002AB0  6ED3               	movwf	211,c	;volatile
  7763   002AB2                     
  7764                           ;interrupts.c: 72:     T0CON0bits.T0EN=1;
  7765   002AB2  8ED5               	bsf	213,7,c	;volatile
  7766   002AB4  0012               	return		;funcret
  7767   002AB6                     __end_of_Timer0_init:
  7768                           	callstack 0
  7769                           
  7770 ;; *************** function _High_ISR *****************
  7771 ;; Defined at:
  7772 ;;		line 76 in file "interrupts.c"
  7773 ;; Parameters:    Size  Location     Type
  7774 ;;		None
  7775 ;; Auto vars:     Size  Location     Type
  7776 ;;		None
  7777 ;; Return value:  Size  Location     Type
  7778 ;;                  1    wreg      void 
  7779 ;; Registers used:
  7780 ;;		wreg, status,2, status,0, cstack
  7781 ;; Tracked objects:
  7782 ;;		On entry : 0/0
  7783 ;;		On exit  : 0/0
  7784 ;;		Unchanged: 0/0
  7785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7786 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7787 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7788 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7789 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7790 ;;Total ram usage:        0 bytes
  7791 ;; Hardware stack levels used: 1
  7792 ;; Hardware stack levels required when called: 3
  7793 ;; This function calls:
  7794 ;;		i2_clearInterrupt
  7795 ;; This function is called by:
  7796 ;;		Interrupt level 2
  7797 ;; This function uses a non-reentrant model
  7798 ;;
  7799                           
  7800                           	psect	intcode
  7801   000008                     __pintcode:
  7802                           	callstack 0
  7803   000008                     _High_ISR:
  7804                           	callstack 19
  7805                           
  7806                           ;incstack = 0
  7807   000008  824E               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  7808   00000A                     
  7809                           ;interrupts.c: 77:     if (PIR0bits.INT0IF) {
  7810   00000A  010E               	movlb	14	; () banked
  7811   00000C  A133               	btfss	51,0,b	;volatile
  7812   00000E  EF0B  F000         	goto	i2u188_41
  7813   000012  EF0D  F000         	goto	i2u188_40
  7814   000016                     i2u188_41:
  7815   000016  EF16  F000         	goto	i2l3550
  7816   00001A                     i2u188_40:
  7817   00001A                     
  7818                           ; BSR set to: 14
  7819                           ;interrupts.c: 79:         LATDbits.LATD7 = 1;
  7820   00001A  8E7C               	bsf	124,7,c	;volatile
  7821   00001C                     
  7822                           ; BSR set to: 14
  7823                           ;interrupts.c: 80:         wall_detected = 1;
  7824   00001C  0E01               	movlw	1
  7825   00001E  0100               	movlb	0	; () banked
  7826   000020  6F8C               	movwf	_wall_detected& (0+255),b
  7827   000022                     
  7828                           ; BSR set to: 0
  7829                           ;interrupts.c: 82:         clearInterrupt();
  7830   000022  EC66  F015         	call	i2_clearInterrupt	;wreg free
  7831   000026                     
  7832                           ;interrupts.c: 83:         PIR0bits.INT0IF = 0;
  7833   000026  010E               	movlb	14	; () banked
  7834   000028  9133               	bcf	51,0,b	;volatile
  7835   00002A                     
  7836                           ; BSR set to: 14
  7837                           ;interrupts.c: 87:         INTCONbits.GIE=0;
  7838   00002A  9EF2               	bcf	242,7,c	;volatile
  7839   00002C                     i2l3550:
  7840                           
  7841                           ; BSR set to: 14
  7842                           ;interrupts.c: 90:     if (PIR0bits.TMR0IF) {
  7843   00002C  AB33               	btfss	51,5,b	;volatile
  7844   00002E  EF1B  F000         	goto	i2u189_41
  7845   000032  EF1D  F000         	goto	i2u189_40
  7846   000036                     i2u189_41:
  7847   000036  EF21  F000         	goto	i2l288
  7848   00003A                     i2u189_40:
  7849   00003A                     
  7850                           ; BSR set to: 14
  7851                           ;interrupts.c: 91:         PIR0bits.TMR0IF = 0;
  7852   00003A  9B33               	bcf	51,5,b	;volatile
  7853   00003C                     
  7854                           ; BSR set to: 14
  7855                           ;interrupts.c: 92:         increment++;
  7856   00003C  0100               	movlb	0	; () banked
  7857   00003E  4B88               	infsnz	_increment& (0+255),f,b
  7858   000040  2B89               	incf	(_increment+1)& (0+255),f,b
  7859   000042                     i2l288:
  7860   000042  924E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  7861   000044  0011               	retfie		f
  7862   000046                     __end_of_High_ISR:
  7863                           	callstack 0
  7864                           
  7865 ;; *************** function i2_clearInterrupt *****************
  7866 ;; Defined at:
  7867 ;;		line 99 in file "interrupts.c"
  7868 ;; Parameters:    Size  Location     Type
  7869 ;;		None
  7870 ;; Auto vars:     Size  Location     Type
  7871 ;;		None
  7872 ;; Return value:  Size  Location     Type
  7873 ;;                  1    wreg      void 
  7874 ;; Registers used:
  7875 ;;		wreg, status,2, status,0, cstack
  7876 ;; Tracked objects:
  7877 ;;		On entry : 0/0
  7878 ;;		On exit  : 0/0
  7879 ;;		Unchanged: 0/0
  7880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7882 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7883 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7884 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7885 ;;Total ram usage:        0 bytes
  7886 ;; Hardware stack levels used: 1
  7887 ;; Hardware stack levels required when called: 2
  7888 ;; This function calls:
  7889 ;;		i2_I2C_2_Master_Start
  7890 ;;		i2_I2C_2_Master_Stop
  7891 ;;		i2_I2C_2_Master_Write
  7892 ;; This function is called by:
  7893 ;;		_High_ISR
  7894 ;; This function uses a non-reentrant model
  7895 ;;
  7896                           
  7897                           	psect	text60
  7898   002ACC                     __ptext60:
  7899                           	callstack 0
  7900   002ACC                     i2_clearInterrupt:
  7901                           	callstack 19
  7902   002ACC                     
  7903                           ;interrupts.c: 100:     I2C_2_Master_Start();
  7904   002ACC  EC0B  F016         	call	i2_I2C_2_Master_Start	;wreg free
  7905                           
  7906                           ;interrupts.c: 101:     I2C_2_Master_Write(0x52 | 0x00);
  7907   002AD0  0E52               	movlw	82
  7908   002AD2  ECE2  F015         	call	i2_I2C_2_Master_Write
  7909                           
  7910                           ;interrupts.c: 102:     I2C_2_Master_Write(0xe0 | 0x06 );
  7911   002AD6  0EE6               	movlw	230
  7912   002AD8  ECE2  F015         	call	i2_I2C_2_Master_Write
  7913                           
  7914                           ;interrupts.c: 103:     I2C_2_Master_Stop();
  7915   002ADC  EC06  F016         	call	i2_I2C_2_Master_Stop	;wreg free
  7916   002AE0  0012               	return		;funcret
  7917   002AE2                     __end_ofi2_clearInterrupt:
  7918                           	callstack 0
  7919                           
  7920 ;; *************** function i2_I2C_2_Master_Write *****************
  7921 ;; Defined at:
  7922 ;;		line 49 in file "i2c.c"
  7923 ;; Parameters:    Size  Location     Type
  7924 ;;  data_byte       1    wreg     unsigned char 
  7925 ;; Auto vars:     Size  Location     Type
  7926 ;;  data_byte       1    1[COMRAM] unsigned char 
  7927 ;; Return value:  Size  Location     Type
  7928 ;;                  1    wreg      void 
  7929 ;; Registers used:
  7930 ;;		wreg, status,2, status,0, cstack
  7931 ;; Tracked objects:
  7932 ;;		On entry : 0/0
  7933 ;;		On exit  : 0/0
  7934 ;;		Unchanged: 0/0
  7935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7936 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7937 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7938 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7939 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7940 ;;Total ram usage:        1 bytes
  7941 ;; Hardware stack levels used: 1
  7942 ;; Hardware stack levels required when called: 1
  7943 ;; This function calls:
  7944 ;;		i2_I2C_2_Master_Idle
  7945 ;; This function is called by:
  7946 ;;		i2_clearInterrupt
  7947 ;; This function uses a non-reentrant model
  7948 ;;
  7949                           
  7950                           	psect	text61
  7951   002BC4                     __ptext61:
  7952                           	callstack 0
  7953   002BC4                     i2_I2C_2_Master_Write:
  7954                           	callstack 19
  7955                           
  7956                           ;incstack = 0
  7957                           ;i2I2C_2_Master_Write@data_byte stored from wreg
  7958   002BC4  6E02               	movwf	i2I2C_2_Master_Write@data_byte^0,c
  7959   002BC6                     
  7960                           ;i2c.c: 49: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 50: {;i2c.c: 51:   I
      +                          2C_2_Master_Idle();
  7961   002BC6  ECEE  F014         	call	i2_I2C_2_Master_Idle	;wreg free
  7962   002BCA                     
  7963                           ;i2c.c: 52:   SSP2BUF = data_byte;
  7964   002BCA  C002  FED5         	movff	i2I2C_2_Master_Write@data_byte,3797	;volatile
  7965   002BCE  0012               	return		;funcret
  7966   002BD0                     __end_ofi2_I2C_2_Master_Write:
  7967                           	callstack 0
  7968                           
  7969 ;; *************** function i2_I2C_2_Master_Stop *****************
  7970 ;; Defined at:
  7971 ;;		line 43 in file "i2c.c"
  7972 ;; Parameters:    Size  Location     Type
  7973 ;;		None
  7974 ;; Auto vars:     Size  Location     Type
  7975 ;;		None
  7976 ;; Return value:  Size  Location     Type
  7977 ;;                  1    wreg      void 
  7978 ;; Registers used:
  7979 ;;		wreg, status,2, status,0, cstack
  7980 ;; Tracked objects:
  7981 ;;		On entry : 0/0
  7982 ;;		On exit  : 0/0
  7983 ;;		Unchanged: 0/0
  7984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7986 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7987 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7988 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7989 ;;Total ram usage:        0 bytes
  7990 ;; Hardware stack levels used: 1
  7991 ;; Hardware stack levels required when called: 1
  7992 ;; This function calls:
  7993 ;;		i2_I2C_2_Master_Idle
  7994 ;; This function is called by:
  7995 ;;		i2_clearInterrupt
  7996 ;; This function uses a non-reentrant model
  7997 ;;
  7998                           
  7999                           	psect	text62
  8000   002C0C                     __ptext62:
  8001                           	callstack 0
  8002   002C0C                     i2_I2C_2_Master_Stop:
  8003                           	callstack 19
  8004   002C0C                     
  8005                           ;i2c.c: 45:   I2C_2_Master_Idle();
  8006   002C0C  ECEE  F014         	call	i2_I2C_2_Master_Idle	;wreg free
  8007   002C10                     
  8008                           ;i2c.c: 46:   SSP2CON2bits.PEN = 1;
  8009   002C10  010E               	movlb	14	; () banked
  8010   002C12  85DA               	bsf	218,2,b	;volatile
  8011   002C14                     
  8012                           ; BSR set to: 14
  8013   002C14  0012               	return		;funcret
  8014   002C16                     __end_ofi2_I2C_2_Master_Stop:
  8015                           	callstack 0
  8016                           
  8017 ;; *************** function i2_I2C_2_Master_Start *****************
  8018 ;; Defined at:
  8019 ;;		line 31 in file "i2c.c"
  8020 ;; Parameters:    Size  Location     Type
  8021 ;;		None
  8022 ;; Auto vars:     Size  Location     Type
  8023 ;;		None
  8024 ;; Return value:  Size  Location     Type
  8025 ;;                  1    wreg      void 
  8026 ;; Registers used:
  8027 ;;		wreg, status,2, status,0, cstack
  8028 ;; Tracked objects:
  8029 ;;		On entry : 0/0
  8030 ;;		On exit  : 0/0
  8031 ;;		Unchanged: 0/0
  8032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8033 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8034 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8035 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8036 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8037 ;;Total ram usage:        0 bytes
  8038 ;; Hardware stack levels used: 1
  8039 ;; Hardware stack levels required when called: 1
  8040 ;; This function calls:
  8041 ;;		i2_I2C_2_Master_Idle
  8042 ;; This function is called by:
  8043 ;;		i2_clearInterrupt
  8044 ;; This function uses a non-reentrant model
  8045 ;;
  8046                           
  8047                           	psect	text63
  8048   002C16                     __ptext63:
  8049                           	callstack 0
  8050   002C16                     i2_I2C_2_Master_Start:
  8051                           	callstack 19
  8052   002C16                     
  8053                           ;i2c.c: 33:   I2C_2_Master_Idle();
  8054   002C16  ECEE  F014         	call	i2_I2C_2_Master_Idle	;wreg free
  8055   002C1A                     
  8056                           ;i2c.c: 34:   SSP2CON2bits.SEN = 1;
  8057   002C1A  010E               	movlb	14	; () banked
  8058   002C1C  81DA               	bsf	218,0,b	;volatile
  8059   002C1E                     
  8060                           ; BSR set to: 14
  8061   002C1E  0012               	return		;funcret
  8062   002C20                     __end_ofi2_I2C_2_Master_Start:
  8063                           	callstack 0
  8064                           
  8065 ;; *************** function i2_I2C_2_Master_Idle *****************
  8066 ;; Defined at:
  8067 ;;		line 26 in file "i2c.c"
  8068 ;; Parameters:    Size  Location     Type
  8069 ;;		None
  8070 ;; Auto vars:     Size  Location     Type
  8071 ;;		None
  8072 ;; Return value:  Size  Location     Type
  8073 ;;                  1    wreg      void 
  8074 ;; Registers used:
  8075 ;;		wreg, status,2, status,0
  8076 ;; Tracked objects:
  8077 ;;		On entry : 0/0
  8078 ;;		On exit  : 0/0
  8079 ;;		Unchanged: 0/0
  8080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8081 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8082 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8083 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8084 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8085 ;;Total ram usage:        1 bytes
  8086 ;; Hardware stack levels used: 1
  8087 ;; This function calls:
  8088 ;;		Nothing
  8089 ;; This function is called by:
  8090 ;;		i2_I2C_2_Master_Start
  8091 ;;		i2_I2C_2_Master_Stop
  8092 ;;		i2_I2C_2_Master_Write
  8093 ;; This function uses a non-reentrant model
  8094 ;;
  8095                           
  8096                           	psect	text64
  8097   0029DC                     __ptext64:
  8098                           	callstack 0
  8099   0029DC                     i2_I2C_2_Master_Idle:
  8100                           	callstack 19
  8101   0029DC                     i2l104:
  8102   0029DC  010E               	movlb	14	; () banked
  8103   0029DE  B5D8               	btfsc	216,2,b	;volatile
  8104   0029E0  EFF4  F014         	goto	i2u135_41
  8105   0029E4  EFF6  F014         	goto	i2u135_40
  8106   0029E8                     i2u135_41:
  8107   0029E8  EFEE  F014         	goto	i2l104
  8108   0029EC                     i2u135_40:
  8109   0029EC                     
  8110                           ; BSR set to: 14
  8111   0029EC  CEDA F001          	movff	3802,??i2_I2C_2_Master_Idle	;volatile
  8112   0029F0  0E1F               	movlw	31
  8113   0029F2  1601               	andwf	??i2_I2C_2_Master_Idle^0,f,c
  8114   0029F4  A4D8               	btfss	status,2,c
  8115   0029F6  EFFF  F014         	goto	i2u136_41
  8116   0029FA  EF01  F015         	goto	i2u136_40
  8117   0029FE                     i2u136_41:
  8118   0029FE  EFEE  F014         	goto	i2l104
  8119   002A02                     i2u136_40:
  8120   002A02                     
  8121                           ; BSR set to: 14
  8122   002A02  0012               	return		;funcret
  8123   002A04                     __end_ofi2_I2C_2_Master_Idle:
  8124                           	callstack 0
  8125                           
  8126                           	psect	smallconst
  8127   000E00                     __psmallconst:
  8128                           	callstack 0
  8129   000E00  00                 	db	0
  8130   000E01  00                 	db	0	; dummy byte at the end
  8131   000000                     
  8132                           	psect	rparam
  8133   000000                     
  8134                           	psect	temp
  8135   00004E                     btemp:
  8136                           	callstack 0
  8137   00004E                     	ds	1
  8138   000000                     int$flags	set	btemp
  8139   000000                     wtemp8	set	btemp+1
  8140   000000                     ttemp5	set	btemp+1
  8141   000000                     ttemp6	set	btemp+4
  8142   000000                     ttemp7	set	btemp+8
  8143                           
  8144                           	psect	config
  8145                           
  8146                           ;Config register CONFIG1L @ 0x300000
  8147                           ;	External Oscillator mode Selection bits
  8148                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  8149                           ;	Power-up default value for COSC bits
  8150                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  8151   300000                     	org	3145728
  8152   300000  AA                 	db	170
  8153                           
  8154                           ;Config register CONFIG1H @ 0x300001
  8155                           ;	unspecified, using default values
  8156                           ;	Clock Out Enable bit
  8157                           ;	CLKOUTEN = 0x1, unprogrammed default
  8158                           ;	Clock Switch Enable bit
  8159                           ;	CSWEN = 0x1, unprogrammed default
  8160                           ;	Fail-Safe Clock Monitor Enable bit
  8161                           ;	FCMEN = 0x1, unprogrammed default
  8162   300001                     	org	3145729
  8163   300001  FF                 	db	255
  8164                           
  8165                           ;Config register CONFIG3L @ 0x300004
  8166                           ;	WDT Period Select bits
  8167                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  8168                           ;	WDT operating mode
  8169                           ;	WDTE = OFF, WDT Disabled
  8170   300004                     	org	3145732
  8171   300004  9F                 	db	159
  8172                           
  8173                           ;Config register CONFIG3H @ 0x300005
  8174                           ;	unspecified, using default values
  8175                           ;	WDT Window Select bits
  8176                           ;	WDTCWS = 0x7, unprogrammed default
  8177                           ;	WDT input clock selector
  8178                           ;	WDTCCS = 0x7, unprogrammed default
  8179   300005                     	org	3145733
  8180   300005  FF                 	db	255
  8181                           tosu	equ	0xFFF
  8182                           tosh	equ	0xFFE
  8183                           tosl	equ	0xFFD
  8184                           stkptr	equ	0xFFC
  8185                           pclatu	equ	0xFFB
  8186                           pclath	equ	0xFFA
  8187                           pcl	equ	0xFF9
  8188                           tblptru	equ	0xFF8
  8189                           tblptrh	equ	0xFF7
  8190                           tblptrl	equ	0xFF6
  8191                           tablat	equ	0xFF5
  8192                           prodh	equ	0xFF4
  8193                           prodl	equ	0xFF3
  8194                           indf0	equ	0xFEF
  8195                           postinc0	equ	0xFEE
  8196                           postdec0	equ	0xFED
  8197                           preinc0	equ	0xFEC
  8198                           plusw0	equ	0xFEB
  8199                           fsr0h	equ	0xFEA
  8200                           fsr0l	equ	0xFE9
  8201                           wreg	equ	0xFE8
  8202                           indf1	equ	0xFE7
  8203                           postinc1	equ	0xFE6
  8204                           postdec1	equ	0xFE5
  8205                           preinc1	equ	0xFE4
  8206                           plusw1	equ	0xFE3
  8207                           fsr1h	equ	0xFE2
  8208                           fsr1l	equ	0xFE1
  8209                           bsr	equ	0xFE0
  8210                           indf2	equ	0xFDF
  8211                           postinc2	equ	0xFDE
  8212                           postdec2	equ	0xFDD
  8213                           preinc2	equ	0xFDC
  8214                           plusw2	equ	0xFDB
  8215                           fsr2h	equ	0xFDA
  8216                           fsr2l	equ	0xFD9
  8217                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        12
    BSS         45
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     65      77
    BANK0           160     35      80
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    Black@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    Black@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    Blue@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    Blue@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    creep@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    creep@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    creep@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    creep@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    creep@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    creep@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    decideColor@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    decideColor@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    decideColor@normRGB	PTR struct normColors size(1) Largest target is 8
		 -> main@normRGB(BANK0[8]), 

    decideColor@RGBC	PTR struct colors size(1) Largest target is 8
		 -> main@RGBC(BANK0[8]), 

    executeInstruction@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    executeInstruction@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    fastStop@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    fastStop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    fastStop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    fastStop@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    fastStop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    fastStop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    fullSpeedAhead@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    fullSpeedAhead@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    fullSpeedAhead@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    fullSpeedAhead@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    Green@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    Green@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    leftCali@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    leftCali@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    LightBlue@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    LightBlue@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    normalizeColors@normRGB	PTR struct normColors size(1) Largest target is 8
		 -> main@normRGB(BANK0[8]), 

    normalizeColors@RGBC	PTR struct colors size(1) Largest target is 8
		 -> main@RGBC(BANK0[8]), 

    Orange@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    Orange@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    Pink@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    Pink@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    readColors@RGBC	PTR struct colors size(1) Largest target is 8
		 -> main@RGBC(BANK0[8]), 

    Red@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    Red@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    reverseLightBlue@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    reverseLightBlue@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    reverseOrange@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    reverseOrange@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    reversePink@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    reversePink@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    reverseRoute@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    reverseRoute@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    reverseYellow@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    reverseYellow@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    rightCali@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    rightCali@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    S271DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    S271DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), main@motorR(BANK0[9]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    stop@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    stop@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    timed_trundle@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    timed_trundle@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    timed_trundle@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    timed_trundle@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    timed_trundle@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    timed_trundle@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    trundle@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    trundle@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    trundle@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    trundle@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    trundle@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    trundle@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    trundleSquare@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    trundleSquare@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    trundleSquare@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    trundleSquare@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    trundleSquare@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    trundleSquare@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    turn180@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turn180@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnLeft135@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnLeft135@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    turnLeft135@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    turnLeft135@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnLeft135@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    turnLeft135@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    turnLeft@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnLeft@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    turnLeft@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    turnLeft@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnLeft@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    turnLeft@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    turnRight135@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnRight135@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    turnRight135@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    turnRight135@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnRight135@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    turnRight135@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    turnRight@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnRight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    turnRight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    turnRight@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnRight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    turnRight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    White@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    White@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    Yellow@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    Yellow@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 


Critical Paths under _main in COMRAM

    _main->_reverseRoute
    _trundle->_setMotorPWM
    _rightCali->_turnRight
    _reverseRoute->_executeInstruction
    _timed_trundle->_stop
    _executeInstruction->_Black
    _executeInstruction->_Blue
    _executeInstruction->_White
    _executeInstruction->_reversePink
    _executeInstruction->_reverseYellow
    _reverseYellow->_turn180
    _reversePink->_turn180
    _reverseOrange->_turnRight135
    _reverseLightBlue->_turnLeft135
    _Yellow->_trundleSquare
    _White->_turn180
    _Red->_turnRight
    _turnRight->_stop
    _Pink->_trundleSquare
    _trundleSquare->_stop
    _Orange->_turnRight135
    _turnRight135->_stop
    _LightBlue->_turnLeft135
    _turnLeft135->_stop
    ___awdiv->___wmul
    _Green->_turnLeft
    _Blue->_turn180
    _Black->_turn180
    _turn180->_turnLeft
    _leftCali->_turnLeft
    _turnLeft->_stop
    _interrupts_init->_color_writetoaddr
    _clearInterrupt->_I2C_2_Master_Write
    _fastStop->_setMotorPWM
    _decideColor->_creep
    _readColors->_readBlueColor
    _readColors->_readClearColor
    _readColors->_readGreenColor
    _readColors->_readRedColor
    _readRedColor->_I2C_2_Master_Read
    _readGreenColor->_I2C_2_Master_Read
    _readClearColor->_I2C_2_Master_Read
    _readBlueColor->_I2C_2_Master_Read
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    _normalizeColors->___lwdiv
    _creep->_stop
    _stop->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle

Critical Paths under _High_ISR in COMRAM

    i2_clearInterrupt->i2_I2C_2_Master_Write
    i2_I2C_2_Master_Write->i2_I2C_2_Master_Idle
    i2_I2C_2_Master_Stop->i2_I2C_2_Master_Idle
    i2_I2C_2_Master_Start->i2_I2C_2_Master_Idle

Critical Paths under _main in BANK0

    None.

Critical Paths under _High_ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _High_ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _High_ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _High_ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _High_ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _High_ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _High_ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _High_ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _High_ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _High_ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _High_ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _High_ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _High_ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _High_ISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                39    39      0  641653
                                             63 COMRAM     2     2      0
                                              0 BANK0     35    35      0
                          _LEDturnON
                        _Timer0_init
                     _clearInterrupt
                   _color_click_init
                        _decideColor
                 _executeInstruction
                           _fastStop
                _indicateInstruction
                      _initBoardLEDs
                        _initButtons
                    _initDCmotorsPWM
                   _init_buttons_LED
                    _interrupts_init
                           _leftCali
                    _normalizeColors
                         _readColors
                       _reverseRoute
                          _rightCali
                        _setMotorPWM
                            _trundle
 ---------------------------------------------------------------------------------
 (1) _trundle                                             11     9      2    5827
                                             20 COMRAM    11     9      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _rightCali                                            5     3      2   13909
                                             38 COMRAM     5     3      2
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _reverseRoute                                        14    12      2  297363
                                             49 COMRAM    14    12      2
                 _executeInstruction
                               _stop
                      _timed_trundle
 ---------------------------------------------------------------------------------
 (2) _timed_trundle                                       13     9      4   13115
                                             27 COMRAM    13     9      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (2) _executeInstruction                                   5     2      3  276792
                                             44 COMRAM     5     2      3
                              _Black
                               _Blue
                              _Green
                          _LightBlue
                             _Orange
                               _Pink
                                _Red
                              _White
                             _Yellow
                   _reverseLightBlue
                      _reverseOrange
                        _reversePink
                      _reverseYellow
 ---------------------------------------------------------------------------------
 (3) _reverseYellow                                        2     0      2   43278
                                             42 COMRAM     2     0      2
                      _trundleSquare
                            _turn180
                           _turnLeft
 ---------------------------------------------------------------------------------
 (3) _reversePink                                          2     0      2   42822
                                             42 COMRAM     2     0      2
                      _trundleSquare
                            _turn180
                          _turnRight
 ---------------------------------------------------------------------------------
 (3) _reverseOrange                                        2     0      2   14973
                                             39 COMRAM     2     0      2
                       _turnRight135
 ---------------------------------------------------------------------------------
 (3) _reverseLightBlue                                     2     0      2   14973
                                             39 COMRAM     2     0      2
                        _turnLeft135
 ---------------------------------------------------------------------------------
 (3) _Yellow                                               2     0      2   27808
                                             39 COMRAM     2     0      2
                      _trundleSquare
                          _turnRight
 ---------------------------------------------------------------------------------
 (3) _White                                                2     0      2   15166
                                             42 COMRAM     2     0      2
                            _turn180
 ---------------------------------------------------------------------------------
 (3) _Red                                                  2     0      2   13862
                                             38 COMRAM     2     0      2
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _turnRight                                           11     8      3   13666
                                             27 COMRAM    11     8      3
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (3) _Pink                                                 2     0      2   28264
                                             39 COMRAM     2     0      2
                      _trundleSquare
                           _turnLeft
 ---------------------------------------------------------------------------------
 (4) _trundleSquare                                       12     8      4   13902
                                             27 COMRAM    12     8      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (3) _Orange                                               2     0      2   14973
                                             39 COMRAM     2     0      2
                       _turnRight135
 ---------------------------------------------------------------------------------
 (4) _turnRight135                                        12     8      4   14777
                                             27 COMRAM    12     8      4
                            ___awdiv
                             ___wmul
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (3) _LightBlue                                            2     0      2   14973
                                             39 COMRAM     2     0      2
                        _turnLeft135
 ---------------------------------------------------------------------------------
 (4) _turnLeft135                                         12     8      4   14777
                                             27 COMRAM    12     8      4
                            ___awdiv
                             ___wmul
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4     756
                                              8 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _Green                                                2     0      2   14318
                                             38 COMRAM     2     0      2
                           _turnLeft
 ---------------------------------------------------------------------------------
 (3) _Blue                                                 2     0      2   15166
                                             42 COMRAM     2     0      2
                            _turn180
 ---------------------------------------------------------------------------------
 (3) _Black                                                2     0      2   15166
                                             42 COMRAM     2     0      2
                            _turn180
 ---------------------------------------------------------------------------------
 (4) _turn180                                              4     2      2   14970
                                             38 COMRAM     4     2      2
                           _turnLeft
 ---------------------------------------------------------------------------------
 (1) _leftCali                                             5     3      2   14365
                                             38 COMRAM     5     3      2
                           _turnLeft
 ---------------------------------------------------------------------------------
 (4) _turnLeft                                            11     8      3   14122
                                             27 COMRAM    11     8      3
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (1) _interrupts_init                                      0     0      0     620
                     _clearInterrupt
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _clearInterrupt                                       0     0      0      22
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (1) _init_buttons_LED                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              2 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _initButtons                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initBoardLEDs                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _indicateInstruction                                  8     8      0      92
                                              2 COMRAM     8     8      0
 ---------------------------------------------------------------------------------
 (1) _fastStop                                             7     5      2    5538
                                             20 COMRAM     7     5      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _decideColor                                          6     2      4   17766
                                             41 COMRAM     6     2      4
                          _LEDturnON
                              _creep
                    _normalizeColors
                         _readColors
 ---------------------------------------------------------------------------------
 (1) _readColors                                           3     2      1     692
                                             13 COMRAM     3     2      1
                         _LEDturnOFF
                          _LEDturnON
                      _readBlueColor
                     _readClearColor
                     _readGreenColor
                       _readRedColor
 ---------------------------------------------------------------------------------
 (2) _readRedColor                                         7     5      2     113
                                              6 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _readGreenColor                                       7     5      2     113
                                              6 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _readClearColor                                       7     5      2     113
                                              6 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _readBlueColor                                        7     5      2     113
                                              6 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Read                                    3     3      0      45
                                              3 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _LEDturnON                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LEDturnOFF                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _normalizeColors                                     14    12      2    1790
                                             15 COMRAM    14    12      2
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (2) _creep                                               14     9      5   14474
                                             27 COMRAM    14     9      5
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (3) _stop                                                 7     5      2    7058
                                             20 COMRAM     7     5      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          5     4      1    5163
                                             15 COMRAM     5     4      1
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     811
                                              2 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4    1108
                                              8 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     598
                                              6 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     598
                                              4 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      22
                                              3 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              2 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _High_ISR                                             0     0      0      22
                   i2_clearInterrupt
 ---------------------------------------------------------------------------------
 (10) i2_clearInterrupt                                    0     0      0      22
               i2_I2C_2_Master_Start
                i2_I2C_2_Master_Stop
               i2_I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (11) i2_I2C_2_Master_Write                                1     1      0      22
                                              1 COMRAM     1     1      0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (11) i2_I2C_2_Master_Stop                                 0     0      0       0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (11) i2_I2C_2_Master_Start                                0     0      0       0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (12) i2_I2C_2_Master_Idle                                 1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LEDturnON
   _Timer0_init
   _clearInterrupt
     _I2C_2_Master_Start
       _I2C_2_Master_Idle
     _I2C_2_Master_Stop
       _I2C_2_Master_Idle
     _I2C_2_Master_Write
       _I2C_2_Master_Idle
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _decideColor
     _LEDturnON
     _creep
       _setMotorPWM
         ___lwdiv
           ___wmul (ARG)
         ___wmul
       _stop
         _setMotorPWM
     _normalizeColors
       ___lwdiv
     _readColors
       _LEDturnOFF
       _LEDturnON
       _readBlueColor
         _I2C_2_Master_Read
           _I2C_2_Master_Idle
         _I2C_2_Master_RepStart
           _I2C_2_Master_Idle
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _readClearColor
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _readGreenColor
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _readRedColor
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
   _executeInstruction
     _Black
       _turn180
         _turnLeft
           _setMotorPWM
           _stop
     _Blue
       _turn180
     _Green
       _turnLeft
     _LightBlue
       _turnLeft135
         ___awdiv
           ___wmul (ARG)
         ___wmul
         _setMotorPWM
         _stop
     _Orange
       _turnRight135
         ___awdiv
         ___wmul
         _setMotorPWM
         _stop
     _Pink
       _trundleSquare
         _setMotorPWM
         _stop
       _turnLeft
     _Red
       _turnRight
         _setMotorPWM
         _stop
     _White
       _turn180
     _Yellow
       _trundleSquare
       _turnRight
     _reverseLightBlue
       _turnLeft135
     _reverseOrange
       _turnRight135
     _reversePink
       _trundleSquare
       _turn180
       _turnRight
     _reverseYellow
       _trundleSquare
       _turn180
       _turnLeft
   _fastStop
     _setMotorPWM
   _indicateInstruction
   _initBoardLEDs
   _initButtons
   _initDCmotorsPWM
   _init_buttons_LED
   _interrupts_init
     _clearInterrupt
     _color_writetoaddr
   _leftCali
     _turnLeft
   _normalizeColors
   _readColors
   _reverseRoute
     _executeInstruction
     _stop
     _timed_trundle
       _setMotorPWM
       _stop
   _rightCali
     _turnRight
   _setMotorPWM
   _trundle
     _setMotorPWM

 _High_ISR (ROOT)
   i2_clearInterrupt
     i2_I2C_2_Master_Start
       i2_I2C_2_Master_Idle
     i2_I2C_2_Master_Stop
       i2_I2C_2_Master_Idle
     i2_I2C_2_Master_Write
       i2_I2C_2_Master_Idle

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      65        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     23      50       5       50.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     41      4D       1       81.9%
BITBIGSFRhlllll     46      0       0      48        0.0%
BITBIGSFRlllhlh     35      0       0      58        0.0%
BITBIGSFRhlllhl     31      0       0      46        0.0%
BITBIGSFRllllh      2B      0       0      62        0.0%
BITBIGSFRllhh       20      0       0      50        0.0%
BITBIGSFRhhhhlh     1B      0       0      33        0.0%
BITBIGSFRhhhllh     17      0       0      38        0.0%
BITBIGSFRhlllhh     14      0       0      43        0.0%
BITBIGSFRhhhhll     13      0       0      34        0.0%
BITBIGSFRlllhhl     11      0       0      53        0.0%
BITBIGSFRlllhhl     11      0       0      54        0.0%
BITBIGSFRhhhhll      E      0       0      35        0.0%
BITBIGSFRhhhhh       D      0       0      32        0.0%
BITBIGSFRlllhhh      C      0       0      52        0.0%
BITBIGSFRllhl        C      0       0      51        0.0%
BITBIGSFRlllhll      9      0       0      60        0.0%
BITBIGSFRlllhlh      9      0       0      59        0.0%
BITBIGSFRhlllhh      6      0       0      45        0.0%
BITBIGSFRlllhlh      5      0       0      57        0.0%
BITBIGSFRhhhlll      5      0       0      39        0.0%
BITBIGSFRhlllhh      3      0       0      44        0.0%
BITBIGSFRlllhhl      3      0       0      56        0.0%
BITBIGSFRhllllh      2      0       0      47        0.0%
BITBIGSFRhhhlh       2      0       0      37        0.0%
BITBIGSFRhllh        2      0       0      42        0.0%
BITBIGSFRlllhhl      1      0       0      55        0.0%
BITBIGSFRhhlh        1      0       0      40        0.0%
BITBIGSFRhhhhll      1      0       0      36        0.0%
BITBIGSFRlllhll      1      0       0      61        0.0%
BITBIGSFRlh          1      0       0      49        0.0%
BITBIGSFRhlh         1      0       0      41        0.0%
BITBIGSFRlllll       1      0       0      63        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      9D      64        0.0%
DATA                 0      0      9D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Wed Mar 13 12:04:49 2024

           ??_init_buttons_LED 0003       turnLeft135@turnLeftPower 001E     __end_of_executeInstruction 17AA  
                           l33 2988                             l42 2A94                             l51 2882  
                           l60 2020                             l45 2792                             l54 2832  
                           l48 27E2                             l64 1024                             l57 1B96  
                 ___awdiv@sign 000E            ___wmul@multiplicand 0005                            l101 29B2  
                          l110 2C0A                            l104 29B4                            l113 2BE2  
                          l122 28C4                            l202 110E                            l107 29DA  
                          l116 2C00                            l119 2BC2                            l233 2B6C  
                          l401 2AF4                            l411 241A                            l236 2BEC  
                          l404 2B08                            l501 22BC                            l414 2428  
                          l239 2BF6                            l504 2132                            l281 2AB4  
                          l514 21C2                            l506 2140                            l291 2ACA  
                          l371 2B90                            l524 2636                            l380 2A4E  
                          l612 145A                            l365 17A8                            l509 2170  
                          l606 1372                            l278 2742                            l374 2B9E  
                          l471 2558                            l535 1DEE                            l383 2B30  
                          l623 14EE                            l519 21F6                            l199 10F6  
                          l392 2B58                            l560 1650                            l632 1ECC  
                          l368 2B7E                            l377 2A28                            l386 2B44  
                          l546 1CC2                            l483 26A0                            l491 2236  
                          l571 18FE                            l395 292C                            l636 1F0E  
                          l661 2BD8                            l549 26F2                            l389 2B1C  
                          l478 1A52                            l486 21F8                            l398 295E  
                          l664 2BB6                            l496 2288                            l488 2206  
                          l920 2380                            l674 2474                            l595 12DE  
                          l675 2440                            l587 2130                            l579 20C8  
                          l677 24D0                            l689 2A74                            u980 2574  
                          u981 2570                            u990 2592                            u991 258E  
                          _Red 2B6E                ??_timed_trundle 0020                            wreg 0FE8  
                         ?_Red 0027                           l3000 1256                           l3010 1292  
                         l3002 125E                           l1180 25C4                           l3020 12E8  
                         l3012 129A                           l3004 1262                           l3100 141E  
                         l3022 12FC                           l3030 1322                           l3014 12A2  
                         l3006 1274                           l3110 1480                           l3102 142E  
                         l3024 1304                           l3032 1346                           l3016 12B2  
                         l3008 127E                           l3040 1666                           l3120 14E2  
                         l3112 1488                           l3104 1432                           l3034 1366  
                         l3026 130C                           l3018 12B6                           l3210 0FFA  
                         l3202 0FD2                           l3050 16B6                           l3042 1676  
                         l3114 1498                           l3106 1464                           l1187 25CC  
                         l3140 2978                           l2500 255A                           l3028 131C  
                         l3212 101C                           l3204 0FF4                           l3060 1706  
                         l3052 16C6                           l3044 1686                           l3036 1652  
                         l3108 1478                           l3116 149E                           l3300 21D8  
                         l3134 2960                           l2510 2592                           l2502 2562  
                         l3150 0E42                           l3142 0E02                           l3230 24DA  
                         l3222 2B5A                           l3310 26FA                           l3062 1716  
                         l3054 16D6                           l3046 1696                           l3038 1656  
                         l3118 14C2                           l3302 21E6                           l3136 2964  
                         l2520 25BE                           l2512 2598                           l2504 2574  
                         l3152 0E64                           l3160 0EA0                           l3144 0E24  
                         l3224 2BD0                           l3240 2534                           l3232 2500  
                         l3072 2AB6                           l3320 270E                           l3312 26FE  
                         l2600 1DCC                           l3056 16E6                           l3048 16A6  
                         l3080 13AC                           l3304 21F4                           l3400 2022  
                         l3138 296E                           l2514 25AE                           l2506 257C  
                         l2530 197E                           l2522 1900                           l3218 1022  
                         l3162 0EC2                           l3170 0EE0                           l3154 0E82  
                         l3146 0E3C                           l3226 2BAC                           l3250 2556  
                         l3242 253E                           l3234 2504                           l3330 273A  
                         l3322 2718                           l3314 2700                           l2602 1DD4  
                         l2610 22C2                           l3058 16F6                           l3066 1726  
                         l3090 13E0                           l3082 13B6                           l3074 1374  
                         l3410 2072                           l3402 203E                           l3340 2AA8  
                         l2516 25B6                           l2508 2584                           l2532 19BC  
                         l2524 191A                           l2540 2648                           l3180 0F28  
                         l3172 0EE4                           l3164 0EDA                           l3156 0E9A  
                         l3244 2540                           l3236 2528                           l3228 24D2  
                         l3332 273C                           l3324 2722                           l3316 2702  
                         l3308 26F4                           l2604 1DE4                           l3260 2252  
                         l3252 21F8                           l2620 22F2                           l2612 22D0  
                         l2700 1C18                           l3092 13F0                           l3084 13C4  
                         l3076 138A                           l3412 207C                           l3420 20A0  
                         l3404 2048                           l3500 1104                           l3342 2AB2  
                         l2518 25B8                           l2534 19D6                           l2526 1968  
                         l2550 267E                           l2542 2650                           l3190 0F86  
                         l3182 0F40                           l3174 0EFC                           l3246 254A  
                         l3238 2532                           l3334 2740                           l3326 272C  
                         l3318 2704                           l3270 229C                           l3262 2268  
                         l3254 220E                           l2630 2320                           l2622 22F6  
                         l2614 22D8                           l2710 1C6A                           l2702 1C20  
                         l3094 13FA                           l3086 13D2                           l3078 13A0  
                         l3430 2106                           l3422 20D2                           l3414 2084  
                         l3406 205C                           l3510 115E                           l3502 1120  
                         l3336 2A96                           l2560 29C4                           l2536 1A16  
                         l2528 197A                           l2552 2686                           l3184 0F5E  
                         l3176 0F14                           l3360 262C                           l3352 25F8  
                         l3344 25CE                           l3248 254C                           l3328 2736  
                         l3264 2276                           l3256 2226                           l3272 229E  
                         l2640 2354                           l2632 232E                           l2624 22FE  
                         l2616 22DC                           l2608 22BE                           l2720 1CA0  
                         l2712 1C72                           l2704 1C30                           l3096 140E  
                         l3088 13DC                           l3280 2132                           l3424 20E6  
                         l3432 210C                           l3416 208C                           l3408 2066  
                         l3520 1196                           l3512 1170                           l3504 112C  
                         l3338 2A9E                           l2554 2696                           l2546 2662  
                         l2538 2638                           l3194 0F8C                           l3178 0F1C  
                         l3354 260C                           l3346 25DE                           l3370 2434  
                         l2570 1D08                           l2562 1CC4                           l3274 22AC  
                         l3258 2244                           l2730 26B2                           l2642 235A  
                         l2634 2334                           l2626 2310                           l2618 22EA  
                         l2810 18F4                           l2802 18C0                           l2722 1CA8  
                         l2706 1C34                           l3098 1416                           l3290 21A2  
                         l3282 2148                           l3426 20EE                           l3418 209C  
                         l3522 11A0                           l3514 1180                           l3506 1134  
                         l3450 102E                           l2652 2C02                           l2548 2676  
                         l2660 2BDA                           l3196 0FAA                           l3188 0F64  
                         l3356 2614                           l3348 25E6                           l3380 24B0  
                         l3372 2442                           l3364 242C                           l2580 1D44  
                         l2572 1D16                           l2564 1CDA                           l3276 22BA  
                         l3268 2296                           l2732 26CA                           l2636 234A  
                         l2628 2318                           l2644 2360                           l2820 1528  
                         l2900 2B32                           l2804 18D4                           l2740 1E28  
                         l2724 1CB8                           l2716 1C84                           l2708 1C52  
                         l3620 173A                           l3292 21B0                           l3284 2160  
                         l3428 20F6                           l3524 11A4                           l3516 1182  
                         l3508 1158                           l3532 11AC                           l3460 1048  
                         l3452 1032                           l2558 29B4                           l2654 2C06  
                         l2494 2A50                           l2670 289A                           l2662 2BDE  
                         l3198 0FCC                           l3358 261C                           l3374 2458  
                         l2590 1D96                           l2582 1D4C                           l2574 1D1C  
                         l2566 1CF0                           l2646 2370                           l2638 2352  
                         l2830 1596                           l2822 1534                           l2814 14F0  
                         l2806 18DC                           l2742 1E38                           l2734 1DF0  
                         l2718 1C98                           l2902 2B0A                           l2910 28FC  
                         l3390 23B4                           l3382 2382                           l3286 217E  
                         l3534 11BE                           l3526 11A8                           l3518 1192  
                         l3470 1068                           l3462 104C                           l3454 1036  
                         l3446 1026                           l2680 2BFC                           l2656 2BBA  
                         l2496 2A6C                           l2672 28C0                           l2664 2886  
                         l3376 2470                           l2592 1D9E                           l2584 1D5C  
                         l2576 1D28                           l2568 1CFC                           l2728 26A2  
                         l2648 2378                           l2840 15E0                           l2832 159E  
                         l2824 1542                           l2816 1506                           l2808 18E4  
                         l2760 1EAC                           l2752 1E78                           l2744 1E54  
                         l2736 1E06                           l2904 2B10                           l2912 292E  
                         l3392 23FE                           l3384 2394                           l3296 21D0  
                         l3288 218C                           l3536 11CA                           l3528 11AA  
                         l3480 1086                           l3472 1070                           l3464 1050  
                         l3456 1036                           l3448 102A                           l2930 299E  
                         l2922 298A                           l2658 2BBE                           l2674 28C2  
                         l2666 288A                           l3378 2498                           l2578 1D3C  
                         l2586 1D60                           l2906 2B46                           l2850 1626  
                         l2842 15F8                           l2834 15A6                           l2826 1576  
                         l2818 151C                           l2770 17C0                           l2762 1EB0  
                         l2754 1E8C                           l2746 1E70                           l2738 1E1C  
                         l2690 1BDE                           l2682 1B98                           l2914 2AE2  
                         l3386 23A2                           l3298 21D6                           l3490 10C4  
                         l3482 108E                           l3474 1076                           l3466 1058  
                         l3458 1042                           l2932 29A0                           l2924 2994  
                         l2940 1ABA                           l2668 2892                           l2860 2744  
                         l2596 1DB0                           l2588 1D7E                           l2908 2B4C  
                         l2852 162E                           l2844 1600                           l2836 15BE  
                         l2828 1582                           l2780 182C                           l2772 17D6  
                         l2764 1ED0                           l2756 1E94                           l2692 1BEA  
                         l2684 1BAE                           l2916 2AF6                           l3396 2408  
                         l3492 10D2                           l3484 1096                           l3476 107A  
                         l3468 1060                           l2926 299A                           l2678 2BF8  
                         l2934 2A78                           l2950 1B7A                           l2942 1AE2  
                         l2862 278A                           l2598 1DC4                           l2854 1636  
                         l2838 15C2                           l2790 186C                           l2782 1838  
                         l2774 17E2                           l2766 1F02                           l2758 1E9C  
                         l2694 1BF0                           l2686 1BC4                           l3398 2414  
                         l3494 10D6                           l3486 109E                           l3478 107E  
                         l2928 299C                           l2944 1AFE                           l2936 1A54  
                         l2872 2834                           l2880 282A                           l2960 1F46  
                         l2952 1F10                           l2856 1646                           l2848 1612  
                         l2784 184C                           l2792 1870                           l2776 17F0  
                         l2768 17AA                           l2696 1BFC                           l2688 1BD0  
                         l3496 10DA                           l3488 10AC                           l2946 1B2E  
                         l2938 1A9E                           l2874 287A                           l2866 2794  
                         l2970 1F8E                           l2962 1F48                           l2954 1F14  
                         l2890 2B80                           l2794 188E                           l2786 1854  
                         l2778 17FC                           l2698 1C10                           l3498 10DE  
                         l2948 1B4A                           l2884 2BE4                           l2868 27DA  
                         l2980 2006                           l2972 1FBC                           l2964 1F72  
                         l2956 1F2A                           l2892 2B92                           l2796 18A6  
                         l2788 185C                           l2990 1216                           l2886 2BEE  
                         l2878 27E4                           l2982 201E                           l2974 1FD4  
                         l2966 1F8A                           l2958 1F42                           l2798 18AE  
                         l2894 2A04                           l2992 1220                           l2984 11DE  
                         l2976 1FD6                           l2968 1F8C                           l2896 2A2A  
                         l2888 2B6E                           l2994 122E                           l2986 11F4  
                         l2978 1FD8                           l2898 2B1E                           l2996 123C  
                         l2988 120A                           l2998 1246                           u1000 25AE  
                         u1001 25AA                           u1010 191A                           u1011 1916  
                         u1020 19D6                           u1100 22D0                           u1021 19D2  
                         u1101 22CC                           u1030 265E                           u1110 22EA  
                         u1031 265A                           u1111 22E6                           u1040 29C4  
                         u1120 2310                           u1200 1C52                           u1041 29C0  
                         u1121 230C                           u1201 1C4E                           u1050 29DA  
                         u1130 232E                           u1210 1C80                           u1051 29D6  
                         u1131 232A                           u1211 1C7C                           u1060 1CDA  
                         u1140 234A                           u1300 18BC                           u1220 1E06  
                         u1061 1CD6                           u1141 2346                           u1301 18B8  
                         u1221 1E02                           u1070 1CF0                           u1150 2370  
                         u1310 1506                           u1230 1E1C                           u1071 1CEC  
                         u1151 236C                           u1311 1502                           u1231 1E18  
                         u2007 148E                           u1400 1274                           u1160 28AE  
                         u1080 1D7E                           u1320 151C                           u1240 1E38  
                         u1401 1270                           u1161 28A6                           u1081 1D7A  
                         u1321 1518                           u1241 1E34                           u2017 1C26  
                         u1410 12DA                           u1090 1DAC                           u1330 15E0  
                         u1250 1ECC                           u1411 12D6                           u1091 1DA8  
                         u2107 163C                           u1331 15DC                           u1251 1EC8  
                         u2027 1C5C                           u1420 1346                           u1500 0E24  
                         u1340 160E                           u1260 1F02                           u1180 1BAE  
                         u1421 1342                           u1501 0E20                           u2117 26BC  
                         u1341 160A                           u1261 1EFE                           u2037 1CAE  
                         u1181 1BAA                           u1430 1366                           u1510 0E64  
                         u1270 17C0                           u1190 1BC4                           u1431 1362  
                         u1511 0E60                           u2207 24A2                           u2127 26E4  
                         u1271 17BC                           u2047 1EA2                           u1191 1BC0  
                         u1520 0E82                           u1600 2206                           u1280 17D6  
                         u1440 138A                           u1521 0E7E                           u2217 2622  
                         u2137 2218                           u1601 2202                           u2057 1862  
                         u1281 17D2                           u1441 1386                           u1370 11F4  
                         u1178 28B0                           u1530 0EC2                           u1610 2244  
                         u1290 188E                           u1450 13A0                           u2307 12A8  
                         u1371 11F0                           u2227 0EEE                           u1531 0EBE  
                         u2147 225C                           u1611 2240                           u2067 1898  
                         u1291 188A                           u1451 139C                           u1380 120A  
                         u1540 0F5E                           u1620 2252                           u1460 13F0  
                         u1700 218C                           u2317 1312                           u1381 1206  
                         u2237 1F34                           u1541 0F5A                           u2157 1D52  
                         u1621 224E                           u2077 18EA                           u1461 13EC  
                         u1701 2188                           u1390 1256                           u1550 0F86  
                         u1630 2276                           u1470 1456                           u1710 21B0  
                         u2327 268C                           u1391 1252                           u2247 1F52  
                         u1551 0F82                           u2167 1D88                           u1631 2272  
                         u2087 15B0                           u1471 1452                           u1711 21AC  
                         u1560 0FAA                           u1640 2284                           u1480 14C2  
                         u1800 23B0                           u1720 21BE                           u2337 297E  
                         u2257 1F7C                           u1561 0FA6                           u2177 1DDA  
                         u1641 2280                           u2097 15EA                           u1481 14BE  
                         u1801 23AC                           u1721 21BA                           u1570 0FCC  
                         u1650 2296                           u1490 14E2                           u1810 2428  
                         u1730 21D0                           _T2PR 0FBC                           u2267 1F98  
                         u1571 0FC8                           u2187 244C                           u1651 2292  
                         u1491 14DE                           u1811 2424                           u1731 21CC  
                         u1580 0FF4                           u1660 22AC                           u1740 21E6  
                         u1820 205C                           u2277 1FC6                           u1581 0FF0  
                         u2197 2464                           u1661 22A8                           u1741 21E2  
                         u1821 2058                           u1590 101C                           u1670 22BA  
                         u1750 21F4                           u1830 20C4                           u2287 1FE2  
                         u1591 1018                           u1671 22B6                           u1751 21F0  
                         u1831 20C0                           u1760 25F4                           u1680 2140  
                         u1840 2130                           u2297 2010                           u1761 25F0  
                         u1681 213C                           u1841 212C                           u1770 2498  
                         u1690 217E                           u1850 1104                           u1771 2494  
                         u1691 217A                           u1851 1100                           u1780 24D0  
                         u1860 1120                           u1781 24CC                           u1861 111C  
                         u1870 11BE                           u1791 238C                           u1871 11BA  
                         u1937 10B6                           u1947 10E8                           u1957 2092  
                         u1967 20FC                           u1977 2152                           u1987 2196  
                         u1997 1424                           _Blue 2B92        timed_trundle@increments 001E  
      __end_of_interrupts_init 2744                           _Pink 2A2A                    main@normRGB 008E  
                         _main 1026                           fsr1h 0FE2                           fsr2h 0FDA  
                         indf2 0FDF                           fsr1l 0FE1                           fsr2l 0FD9  
                         btemp 004E                           _stop 2638                           prodh 0FF4  
                         prodl 0FF3                           start 0046                    ?_LEDturnOFF 0001  
                 ___param_bank 0000                    _turnLeft135 14F0             turnRight135@i_2133 0026  
                 ?_initButtons 0001                          ??_Red 0029             normalizeColors@sum 001A  
                        ?_Blue 002B                          ?_Pink 0028                          ?_main 0001  
                        _ADPCH 0F5F                __end_of___awdiv 2382                          ?_stop 0015  
              ___awdiv@divisor 000B                    LightBlue@mL 0028                    LightBlue@mR 0029  
              __end_of___lwdiv 25CE                          i2l110 2C1E                          i2l104 29DC  
                        i2l107 2A02                          i2l116 2C14                          i2l119 2BCE  
              readRedColor@tmp 000C                          i2l291 2AE0                          i2l288 0042  
             i2_clearInterrupt 2ACC                ___awdiv@counter 000D              turnLeft135@i_2114 0026  
                        _TMR0H 0FD4                          _TMR0L 0FD3                          Red@mL 0027  
                        Red@mR 0028                          _Black 2B46                          _Green 2B80  
   __end_of_I2C_2_Master_Start 2C0C                          _White 2B0A     __end_of_I2C_2_Master_Write 2BC4  
                        _creep 11DE                          tablat 0FF5                          plusw1 0FE3  
                        plusw2 0FDB                __end_of_turn180 26F4                          ttemp5 004F  
                        ttemp6 0052                          ttemp7 0056                          stop@i 001A  
                        status 0FD8                          wtemp8 004F                __end_of_trundle 2132  
        _I2C_2_Master_RepStart 2BDA               __end_of_High_ISR 0046                   __end_of_Blue 2BA0  
              __initialization 28C6                   __end_of_Pink 2A50                   __end_of_main 11DE  
                 __end_of_stop 26A2            normalizeColors@RGBC 0010                         ??_Blue 002D  
                       ??_Pink 002A                _normalizeColors 1A54                         ??_main 0040  
                       ??_stop 0017                  decideColor@mL 002C                  decideColor@mR 002D  
                __activetblptr 0003                  ?_readRedColor 0007                   _turnRight135 17AA  
                       ?_Black 002B                         ?_Green 0027      indicateInstruction@period 0006  
                       ?_White 002B             reverseRoute@F14296 0042                   ?_setMotorPWM 0010  
                       ?_creep 001C                         _ADRESH 0F64                         _CCPR1H 0FAA  
                       _CCPR2H 0FA6                         _CCPR3H 0F25                         _CCPR4H 0F21  
             ___awdiv@dividend 0009                         _RE2PPS 0E74                         _RC7PPS 0E69  
                       _RD5PPS 0E6F                         _RE4PPS 0E76                         _RD6PPS 0E70  
                       i2l3122 2C16                         i2l3130 2BC6                         i2l3124 2C1A  
                       i2l3132 2BCA                         i2l3126 2C0C                         i2l3128 2C10  
                       i2l3434 2ACC                         i2l3540 001A                         i2l3542 001C  
                       i2l3550 002C                         i2l2920 29EC                         i2l3552 003A  
                       i2l3544 0022                         i2l3554 003C                         i2l3546 0026  
                       i2l3538 000A                         i2l3548 002A                         i2l2918 29DC  
                       _RG6PPS 0E88                  _initBoardLEDs 2BD0                         Blue@mL 002B  
                       Blue@mR 002C               ?_interrupts_init 0001              __end_of_LEDturnON 2BEE  
     __end_of_color_click_init 298A              readGreenColor@tmp 000C                         Pink@mL 0028  
                       Pink@mR 0029               __end_of_fastStop 2638                  ??_Timer0_init 0003  
                       _Orange 2B1E                   _CCPTMRS0bits 0FAD                         _Yellow 2A04  
             __end_of_leftCali 22BE                         ___wmul 2A50                      ??___awdiv 000D  
                    ??___lwdiv 000D              readClearColor@tmp 000C                   ?_reversePink 002B  
                       clear_0 28EC               ___awdiv@quotient 000F                         isa$std 0001  
                       creep@i 0024                         _square 004D                 ??_readRedColor 0009  
                _readBlueColor 2834                   __pdataCOMRAM 0042     turnRight135@turnRightPower 001E  
                 __mediumconst 0000                         tblptrh 0FF7                         tblptrl 0FF6  
                       tblptru 0FF8                      ??_turn180 0029                         stop@mL 0015  
                       stop@mR 0016              ??_initDCmotorsPWM 0005         normalizeColors@normRGB 0011  
                    ??_trundle 0017               __end_of_turnLeft 1DF0                 ?_initBoardLEDs 0001  
                   __accesstop 0060        __end_of__initialization 28F2     timed_trundle@current_power 0027  
               _clearInterrupt 2AB6         ?_I2C_2_Master_RepStart 0001                  ___rparam_used 0001  
                __end_of_Black 2B5A               _reverseLightBlue 2AF6                  __end_of_Green 2B92  
               __pcstackCOMRAM 0001        __end_of_normalizeColors 1B98                  __end_of_White 2B1E  
            _instruction_array 0060                  __end_of_creep 1374            trundleSquare@square 001E  
          __end_of_Timer0_init 2AB6            _indicateInstruction 242A              __end_of_LightBlue 2B46  
               ?_readBlueColor 0007                  leftCali@power 002B     timed_trundle@trundle_power 0028  
                      ??_Black 002D                  _turnLeftPower 004C               creep@creep_power 0029  
                      ??_Green 0029             _executeInstruction 1652                        ??_White 002D  
                    ?_High_ISR 0001                        ??_creep 0021   trundleSquare@start_increment 0025  
       __end_of_clearInterrupt 2ACC                     __pbssBANK0 0060           ?_indicateInstruction 0001  
        __end_of_reverseOrange 2AF6            ?_executeInstruction 002D          __end_of_reverseYellow 292E  
             _reverseRouteFlag 008A       __end_ofi2_clearInterrupt 2AE2                   ??_LEDturnOFF 0003  
            _color_writetoaddr 2A76                   _T2CLKCONbits 0FBF                        ?_Orange 0028  
                 ?_turnLeft135 001C                        ?_Yellow 0028             ?_color_writetoaddr 0005  
                      ?___wmul 0003                 main@colourCode 008D           ??_executeInstruction 0030  
                _trundleSquare 1DF0            ??_color_writetoaddr 0006           turnRight135@maxpower 0022  
                      Black@mL 002B                        Black@mR 002C                        _INT0PPS 0DF0  
 executeInstruction@colourCode 002F             __end_of_LEDturnOFF 2BF8          __end_of_timed_trundle 14F0  
                  rightCali@mL 0027                    rightCali@mR 0028                        _SSP2ADD 0ED6  
                   ??_High_ISR 0003                        _SSP2BUF 0ED5                ??_initBoardLEDs 0003  
                    ?_fastStop 0015                reverseOrange@mL 0028                reverseOrange@mR 0029  
                      Green@mL 0027                        Green@mR 0028                      ?_leftCali 0027  
              ?_clearInterrupt 0001          ??_indicateInstruction 0003         color_writetoaddr@value 0005  
    __end_of_color_writetoaddr 2A96           __end_of_readRedColor 2794                      _ADREFbits 0F58  
           _I2C_2_Master_Start 2C02            i2_I2C_2_Master_Idle 29DC             _I2C_2_Master_Write 2BB8  
                      __Hparam 0000            i2_I2C_2_Master_Stop 2C0C                        __Lparam 0000  
                  _Timer0_init 2A96                reverseYellow@mL 002B                reverseYellow@mR 002C  
      _instruction_array_index 008B               ?_normalizeColors 0010                        White@mL 002B  
                      White@mR 002C                     _readColors 1F10                        ___awdiv 22BE  
                ??_decideColor 002E            ?_I2C_2_Master_Start 0001                   turnLeft135@i 0024  
                      ___lwdiv 255A            ?_I2C_2_Master_Write 0001                   __psmallconst 0E00  
              ??_readBlueColor 0009                 ?_trundleSquare 001C                        __pcinit 28C6  
                      __ramtop 0E00                      ?_turnLeft 001C                        __ptext0 1026  
                      __ptext1 2022                        __ptext2 2132                        __ptext3 2382  
                      __ptext4 1374                        __ptext5 1652                        __ptext6 28FC  
                      __ptext7 292E                        __ptext8 2AE2                        __ptext9 2AF6  
         trundle@current_power 001E              stop@current_power 0018           ?i2_I2C_2_Master_Idle 0001  
                    _T2CONbits 0FBD                  ?_reverseRoute 0032           ?i2_I2C_2_Master_Stop 0001  
               _readClearColor 27E4                      _T2HLTbits 0FBE                        creep@mL 001C  
                      creep@mR 001D                     ??_fastStop 0017                        _turn180 26A2  
         ??_I2C_2_Master_Start 0004           ??_I2C_2_Master_Write 0004            turnLeft135@maxpower 0022  
                      _trundle 2022           end_of_initialization 28F2                     ??_leftCali 0029  
            __end_of_rightCali 21F8              ?_color_click_init 0001             ??_color_click_init 0007  
         trundle@trundle_power 001F                      _LEDturnON 2BE4                        postdec1 0FE5  
                      postdec2 0FDD                        postinc0 0FEE                        postinc1 0FE6  
                      postinc2 0FDE                _initDCmotorsPWM 24D2                     fastStop@mL 0015  
                   fastStop@mR 0016                     ??_turnLeft 001F                      _PORTFbits 0F8E  
           setMotorPWM@negDuty 0014         __end_of_readClearColor 2834          ??i2_I2C_2_Master_Idle 0001  
               ??_reverseRoute 0034                 readColors@RGBC 000E              __end_of_turnRight 1CC4  
               _readGreenColor 2794          ??i2_I2C_2_Master_Stop 0002               _init_buttons_LED 2B5A  
          __end_of_decideColor 1026                      _TRISAbits 0F81             setMotorPWM@posDuty 0013  
                    _TRISCbits 0F83                      _TRISDbits 0F84                      _TRISEbits 0F85  
                    _TRISFbits 0F86                      _TRISGbits 0F87                      _TRISHbits 0F88  
     __end_of_reverseLightBlue 2B0A       color_writetoaddr@address 0006        ??_I2C_2_Master_RepStart 0004  
                  _CCP1CONbits 0FAB                    _CCP2CONbits 0FA7                    _CCP3CONbits 0F26  
                  _CCP4CONbits 0F22                     main@motorL 00A7                     main@motorR 009E  
                   ?_LEDturnON 0001                     leftCali@mL 0027                     leftCali@mR 0028  
                  ?_readColors 000E                 __end_of_Orange 2B32                ??_trundleSquare 0020  
               __end_of_Yellow 2A2A                 __end_of___wmul 2A76                  __pidataCOMRAM 2BA0  
       __end_of_readGreenColor 27E4                ?_readClearColor 0007           trundleSquare@reverse 001F  
          start_initialization 28C6                      _LightBlue 2B32                    __end_of_Red 2B80  
            ?i2_clearInterrupt 0001                       ??_Orange 002A        __end_of_initDCmotorsPWM 255A  
           creep@current_power 0028                       ??_Yellow 002A             ??i2_clearInterrupt 0003  
                ??_initButtons 0003                       ??___wmul 0007                    _decideColor 0E02  
i2I2C_2_Master_Write@data_byte 0002                decideColor@RGBC 002B                ?_readGreenColor 0007  
 __end_ofi2_I2C_2_Master_Start 2C20   __end_ofi2_I2C_2_Master_Write 2BD0                   _readRedColor 2744  
             ??_clearInterrupt 0005                  __pcstackBANK0 008D                     ?_LightBlue 0028  
         __end_of_reverseRoute 242A                 _turnRightPower 004B                    ??_LEDturnON 0003  
             ___lwdiv@dividend 0009                   ?_Timer0_init 0001                      __pintcode 0008  
                     ?___awdiv 0009                       ?___lwdiv 0009                turnRight@i_2092 0025  
               turnLeft@i_2073 0025           I2C_2_Master_Read@ack 0005              ??_interrupts_init 0007  
         I2C_2_Master_Read@tmp 0006                creep@increments 001E            __end_of_initButtons 2BB8  
                  __smallconst 0E00                  ?_turnRight135 001C              _I2C_2_Master_Idle 29B4  
            _I2C_2_Master_Init 298A              _I2C_2_Master_Read 2884              _I2C_2_Master_Stop 2BF8  
  __end_of_indicateInstruction 24D2                 reverseRoute@mL 0032                 reverseRoute@mR 0033  
                    _increment 0088             ?_I2C_2_Master_Idle 0001             ?_I2C_2_Master_Init 0001  
           ?_I2C_2_Master_Read 0001                  ??_setMotorPWM 0011                       ?_turn180 0027  
           ?_I2C_2_Master_Stop 0001               ___lwdiv@quotient 000D           indicateInstruction@i 0009  
         indicateInstruction@j 0007       initDCmotorsPWM@PWMperiod 0003                       ?_trundle 0015  
        __end_of_initBoardLEDs 2BDA            ??_I2C_2_Master_Idle 0003            ??_I2C_2_Master_Init 0003  
          ??_I2C_2_Master_Read 0004                 ___wmul@product 0007                       _LATAbits 0F79  
          ??_I2C_2_Master_Stop 0004                       _LATDbits 0F7C                       _LATEbits 0F7D  
                     _LATGbits 0F7F                       _LATHbits 0F80                       _IPR0bits 0E1F  
                     _PIE0bits 0E29                      _rightCali 2132       __end_of_init_buttons_LED 2B6E  
                  turnRight@mL 001C                       i2u135_40 29EC                       i2u135_41 29E8  
                  turnRight@mR 001D                       i2u136_40 2A02                       i2u136_41 29FE  
                     _PIR0bits 0E33                       i2u188_40 001A                       i2u188_41 0016  
             readBlueColor@tmp 000C                       i2u189_40 003A                       i2u189_41 0036  
             ?_initDCmotorsPWM 0003                       _SSP2CON2 0EDA                      fastStop@i 001A  
                     _SSP2STAT 0ED8                  ??_reversePink 002D                     _ADCON0bits 0F60  
    __end_of_I2C_2_Master_Idle 29DC          __end_of_readBlueColor 2884      __end_of_I2C_2_Master_Init 29B4  
    __end_of_I2C_2_Master_Read 28C6              ___wmul@multiplier 0003                 ??_turnRight135 0020  
    __end_of_I2C_2_Master_Stop 2C02                   setMotorPWM@m 0010    I2C_2_Master_Write@data_byte 0004  
                  ??_LightBlue 002A                       _High_ISR 0008                      _turnRight 1B98  
            ?_reverseLightBlue 0028                      copy_data0 28DA             reverseLightBlue@mL 0028  
           reverseLightBlue@mR 0029             ??_reverseLightBlue 002A                  _wall_detected 008C  
__end_of_I2C_2_Master_RepStart 2BE4                  _reverseOrange 2AE2                       Orange@mL 0028  
                     Orange@mR 0029            __end_of_setMotorPWM 1A54                  _reverseYellow 28FC  
                   ?_rightCali 0027           i2_I2C_2_Master_Start 2C16           i2_I2C_2_Master_Write 2BC4  
                     __Hrparam 0000            timed_trundle@i_2210 0025                       __Lrparam 0000  
              timed_trundle@mL 001C                timed_trundle@mR 001D                   ??_readColors 000F  
                  _initButtons 2BAC    __end_ofi2_I2C_2_Master_Idle 2A04              turnRight@maxpower 0021  
             ??_readClearColor 0009    __end_ofi2_I2C_2_Master_Stop 2C16                 turnRight135@mL 001C  
               turnRight135@mR 001D                       Yellow@mL 0028                       Yellow@mR 0029  
                turnLeft135@mL 001C                  turnLeft135@mR 001D               turnLeft@maxpower 0021  
               creep@direction 0020                     _ANSELBbits 0E9A                     _ANSELDbits 0EA7  
                   _ANSELFbits 0EB4                     _T0CON0bits 0FD5            __end_of_reversePink 2960  
                   _T0CON1bits 0FD6                ___lwdiv@divisor 000B                ___lwdiv@counter 000F  
                   ?_turnRight 001C                       __ptext10 2A04                       __ptext11 2B0A  
                     __ptext20 22BE                       __ptext12 2B6E                       __ptext21 2B80  
                     __ptext13 1B98                       __ptext30 24D2                       __ptext22 2B92  
                     __ptext14 2A2A                       __ptext31 2BAC                       __ptext23 2B46  
                     __ptext15 1DF0                       __ptext40 2834                       __ptext32 2BD0  
                     __ptext24 26A2                       __ptext16 2B1E                       __ptext41 2BDA  
                     __ptext33 242A                       __ptext25 21F8                       __ptext17 17AA  
                     __ptext50 255A                       __ptext42 2884                       __ptext34 25CE  
                     __ptext26 1CC4                       __ptext18 2B32                       __ptext51 2960  
                     __ptext43 2BE4                       __ptext35 0E02                       __ptext27 26F4  
                     __ptext19 14F0                       __ptext60 2ACC                       __ptext52 2A76  
                     __ptext44 2BEE                       __ptext36 1F10                       __ptext28 2AB6  
                     __ptext61 2BC4                       __ptext53 2BB8                       __ptext45 1A54  
                     __ptext37 2744                       __ptext29 2B5A                       __ptext62 2C0C  
                     __ptext54 2BF8                       __ptext46 11DE                       __ptext38 2794  
                     __ptext63 2C16                       __ptext55 2C02                       __ptext47 2638  
                     __ptext39 27E4                       __ptext64 29DC                       __ptext56 29B4  
                     __ptext48 1900                       __ptext57 298A                       __ptext49 2A50  
                     __ptext58 2A96                       _fastStop 25CE                  _timed_trundle 1374  
                reversePink@mL 002B                  reversePink@mR 002C                   _SSP2CON1bits 0ED9  
                 _SSP2CON2bits 0EDA                       _leftCali 21F8             __end_of_readColors 2022  
         _normalizeColors$3128 001C                 ?_reverseOrange 0028                  reverseRoute@i 003E  
               turnRight@power 001E                 ?_reverseYellow 002B                  turnLeft@power 001E  
                   turnLeft@mL 001C                     turnLeft@mR 001D          ?i2_I2C_2_Master_Start 0001  
        ?i2_I2C_2_Master_Write 0001                     turnRight@i 0023                  ??_turnLeft135 0020  
                     isa$xinst 0000               ??_readGreenColor 0009                       main@RGBC 0096  
                     int$flags 004E                   ?_decideColor 002A          __end_of_trundleSquare 1F10  
                     _turnLeft 1CC4                trundleSquare@mL 001C                trundleSquare@mR 001D  
                    turn180@mL 0027                      turn180@mR 0028                     _INTCONbits 0FF2  
                 _reverseRoute 2382                 timed_trundle@i 0023                 ?_timed_trundle 001C  
                  _setMotorPWM 1900              ??_normalizeColors 0012                  turnRight135@i 0024  
                     intlevel2 0000           __end_of_turnRight135 1900                    ??_rightCali 0029  
                   _LEDturnOFF 2BEE                      turnLeft@i 0023                  trundle@i_2169 001C  
              _interrupts_init 26F4                      trundle@mL 0015                      trundle@mR 0016  
               trundleSquare@i 0026                    _reversePink 292E               _color_click_init 2960  
        fastStop@current_power 0018            __end_of_turnLeft135 1652                     _SSP2DATPPS 0E1D  
                   _SSP2CLKPPS 0E1C                    creep@i_2190 0026                 rightCali@power 002B  
                     trundle@i 001A     reverseRoute@reverseMapping 0035                    ??_turnRight 001F  
         executeInstruction@mL 002D           executeInstruction@mR 002E                ??_reverseOrange 002A  
              ??_reverseYellow 002D         ??i2_I2C_2_Master_Start 0002         ??i2_I2C_2_Master_Write 0002  
           decideColor@normRGB 002A              ?_init_buttons_LED 0001  

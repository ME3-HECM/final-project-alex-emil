

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Tue Mar 12 11:51:38 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	text34,global,reloc=2,class=CODE,delta=1
    47                           	psect	text35,global,reloc=2,class=CODE,delta=1
    48                           	psect	text36,global,reloc=2,class=CODE,delta=1
    49                           	psect	text37,global,reloc=2,class=CODE,delta=1
    50                           	psect	text38,global,reloc=2,class=CODE,delta=1
    51                           	psect	text39,global,reloc=2,class=CODE,delta=1
    52                           	psect	text40,global,reloc=2,class=CODE,delta=1
    53                           	psect	text41,global,reloc=2,class=CODE,delta=1
    54                           	psect	text42,global,reloc=2,class=CODE,delta=1
    55                           	psect	text43,global,reloc=2,class=CODE,delta=1
    56                           	psect	text44,global,reloc=2,class=CODE,delta=1
    57                           	psect	text45,global,reloc=2,class=CODE,delta=1
    58                           	psect	text46,global,reloc=2,class=CODE,delta=1
    59                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    60                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=1
    61                           	psect	text49,global,reloc=2,class=CODE,delta=1
    62                           	psect	text50,global,reloc=2,class=CODE,delta=1
    63                           	psect	text51,global,reloc=2,class=CODE,delta=1
    64                           	psect	text52,global,reloc=2,class=CODE,delta=1
    65                           	psect	text53,global,reloc=2,class=CODE,delta=1
    66                           	psect	text54,global,reloc=2,class=CODE,delta=1
    67                           	psect	text55,global,reloc=2,class=CODE,delta=1
    68                           	psect	text56,global,reloc=2,class=CODE,delta=1
    69                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    70                           	psect	text58,global,reloc=2,class=CODE,delta=1
    71                           	psect	text59,global,reloc=2,class=CODE,delta=1
    72                           	psect	text60,global,reloc=2,class=CODE,delta=1
    73                           	psect	text61,global,reloc=2,class=CODE,delta=1
    74                           	psect	text62,global,reloc=2,class=CODE,delta=1
    75                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
    76                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    77                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    78                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    79                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    80   000000                     
    81                           ; Generated 21/07/2023 GMT
    82                           ; 
    83                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    84                           ; All rights reserved.
    85                           ; 
    86                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    87                           ; 
    88                           ; Redistribution and use in source and binary forms, with or without modification, are
    89                           ; permitted provided that the following conditions are met:
    90                           ; 
    91                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    92                           ;        conditions and the following disclaimer.
    93                           ; 
    94                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    95                           ;        of conditions and the following disclaimer in the documentation and/or other
    96                           ;        materials provided with the distribution. Publication is not required when
    97                           ;        this file is used in an embedded application.
    98                           ; 
    99                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   100                           ;        software without specific prior written permission.
   101                           ; 
   102                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   103                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   104                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   105                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   106                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   107                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   108                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   109                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   110                           ; 
   111                           ; 
   112                           ; Code-generator required, PIC18F67K40 Definitions
   113                           ; 
   114                           ; SFR Addresses
   115   000000                     
   116                           	psect	idataCOMRAM
   117   002A44                     __pidataCOMRAM:
   118                           	callstack 0
   119                           
   120                           ;initializer for reverseRoute@F14289
   121   002A44  01                 	db	1
   122   002A45  00                 	db	0
   123   002A46  02                 	db	2
   124   002A47  09                 	db	9
   125   002A48  0A                 	db	10
   126   002A49  0B                 	db	11
   127   002A4A  0C                 	db	12
   128   002A4B  FF                 	db	255
   129   002A4C  FF                 	db	255
   130                           
   131                           ;initializer for _square
   132   002A4D  10                 	db	16
   133   000000                     _TRISFbits	set	3974
   134   000000                     _LATHbits	set	3968
   135   000000                     _TRISAbits	set	3969
   136   000000                     _TRISEbits	set	3973
   137   000000                     _TRISGbits	set	3975
   138   000000                     _PORTFbits	set	3982
   139   000000                     _TRISDbits	set	3972
   140   000000                     _CCPR2H	set	4006
   141   000000                     _CCPR1H	set	4010
   142   000000                     _SSP2CON2	set	3802
   143   000000                     _INT0PPS	set	3568
   144   000000                     _SSP2CLKPPS	set	3612
   145   000000                     _SSP2DATPPS	set	3613
   146   000000                     _ANSELDbits	set	3751
   147   000000                     _SSP2ADD	set	3798
   148   000000                     _SSP2CON1bits	set	3801
   149   000000                     _SSP2CON2bits	set	3802
   150   000000                     _LATAbits	set	3961
   151   000000                     _LATEbits	set	3965
   152   000000                     _LATGbits	set	3967
   153   000000                     _CCPR4H	set	3873
   154   000000                     _CCPR3H	set	3877
   155   000000                     _LATDbits	set	3964
   156   000000                     _SSP2STAT	set	3800
   157   000000                     _ANSELFbits	set	3764
   158   000000                     _SSP2BUF	set	3797
   159   000000                     _IPR0bits	set	3615
   160   000000                     _PIE0bits	set	3625
   161   000000                     _RD5PPS	set	3695
   162   000000                     _RE2PPS	set	3700
   163   000000                     _ANSELBbits	set	3738
   164   000000                     _RD6PPS	set	3696
   165   000000                     _CCP1CONbits	set	4011
   166   000000                     _CCPTMRS0bits	set	4013
   167   000000                     _T2PR	set	4028
   168   000000                     _T2CONbits	set	4029
   169   000000                     _TMR0L	set	4051
   170   000000                     _TMR0H	set	4052
   171   000000                     _T0CON0bits	set	4053
   172   000000                     _T0CON1bits	set	4054
   173   000000                     _INTCONbits	set	4082
   174   000000                     _CCP2CONbits	set	4007
   175   000000                     _ADREFbits	set	3928
   176   000000                     _CCP3CONbits	set	3878
   177   000000                     _CCP4CONbits	set	3874
   178   000000                     _TRISHbits	set	3976
   179   000000                     _TRISCbits	set	3971
   180   000000                     _PIR0bits	set	3635
   181   000000                     _RC7PPS	set	3689
   182   000000                     _RE4PPS	set	3702
   183   000000                     _RG6PPS	set	3720
   184   000000                     _T2CLKCONbits	set	4031
   185   000000                     _T2HLTbits	set	4030
   186   000000                     _ADPCH	set	3935
   187   000000                     _ADRESH	set	3940
   188   000000                     _ADCON0bits	set	3936
   189                           
   190                           ; #config settings
   191                           
   192                           	psect	cinit
   193   002790                     __pcinit:
   194                           	callstack 0
   195   002790                     start_initialization:
   196                           	callstack 0
   197   002790                     __initialization:
   198                           	callstack 0
   199                           
   200                           ; Initialize objects allocated to COMRAM (10 bytes)
   201                           ; load TBLPTR registers with __pidataCOMRAM
   202   002790  0E44               	movlw	low __pidataCOMRAM
   203   002792  6EF6               	movwf	tblptrl,c
   204   002794  0E2A               	movlw	high __pidataCOMRAM
   205   002796  6EF7               	movwf	tblptrh,c
   206   002798  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   207   00279A  6EF8               	movwf	tblptru,c
   208   00279C  EE00  F041         	lfsr	0,__pdataCOMRAM
   209   0027A0  EE10 F00A          	lfsr	1,10
   210   0027A4                     copy_data0:
   211   0027A4  0009               	tblrd		*+
   212   0027A6  CFF5 FFEE          	movff	tablat,postinc0
   213   0027AA  50E5               	movf	postdec1,w,c
   214   0027AC  50E1               	movf	fsr1l,w,c
   215   0027AE  E1FA               	bnz	copy_data0
   216                           
   217                           ; Clear objects allocated to BANK0 (45 bytes)
   218   0027B0  EE00  F060         	lfsr	0,__pbssBANK0
   219   0027B4  0E2D               	movlw	45
   220   0027B6                     clear_0:
   221   0027B6  6AEE               	clrf	postinc0,c
   222   0027B8  06E8               	decf	wreg,f,c
   223   0027BA  E1FD               	bnz	clear_0
   224                           
   225                           ; Clear objects allocated to COMRAM (1 bytes)
   226   0027BC  6A4B               	clrf	__pbssCOMRAM& (0+255),c
   227   0027BE                     end_of_initialization:
   228                           	callstack 0
   229   0027BE                     __end_of__initialization:
   230                           	callstack 0
   231   0027BE  904C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   232   0027C0  924C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   233   0027C2  0100               	movlb	0
   234   0027C4  EFFB  F007         	goto	_main	;jump to C main() function
   235                           
   236                           	psect	bssCOMRAM
   237   00004B                     __pbssCOMRAM:
   238                           	callstack 0
   239   00004B                     _turnLeftPower:
   240                           	callstack 0
   241   00004B                     	ds	1
   242                           
   243                           	psect	dataCOMRAM
   244   000041                     __pdataCOMRAM:
   245                           	callstack 0
   246   000041                     reverseRoute@F14289:
   247                           	callstack 0
   248   000041                     	ds	9
   249   00004A                     _square:
   250                           	callstack 0
   251   00004A                     	ds	1
   252                           
   253                           	psect	bssBANK0
   254   000060                     __pbssBANK0:
   255                           	callstack 0
   256   000060                     _instruction_array:
   257                           	callstack 0
   258   000060                     	ds	40
   259   000088                     _increment:
   260                           	callstack 0
   261   000088                     	ds	2
   262   00008A                     _reverseRouteFlag:
   263                           	callstack 0
   264   00008A                     	ds	1
   265   00008B                     _instruction_array_index:
   266                           	callstack 0
   267   00008B                     	ds	1
   268   00008C                     _wall_detected:
   269                           	callstack 0
   270   00008C                     	ds	1
   271                           
   272                           	psect	cstackBANK0
   273   00008D                     __pcstackBANK0:
   274                           	callstack 0
   275   00008D                     main@colourCode:
   276                           	callstack 0
   277                           
   278                           ; 1 bytes @ 0x0
   279   00008D                     	ds	1
   280   00008E                     main@normRGB:
   281                           	callstack 0
   282                           
   283                           ; 8 bytes @ 0x1
   284   00008E                     	ds	8
   285   000096                     main@RGBC:
   286                           	callstack 0
   287                           
   288                           ; 8 bytes @ 0x9
   289   000096                     	ds	8
   290   00009E                     main@motorR:
   291                           	callstack 0
   292                           
   293                           ; 9 bytes @ 0x11
   294   00009E                     	ds	9
   295   0000A7                     main@motorL:
   296                           	callstack 0
   297                           
   298                           ; 9 bytes @ 0x1A
   299   0000A7                     	ds	9
   300                           
   301                           	psect	cstackCOMRAM
   302   000001                     __pcstackCOMRAM:
   303                           	callstack 0
   304   000001                     ??i2_I2C_2_Master_Idle:
   305   000001                     
   306                           ; 1 bytes @ 0x0
   307   000001                     	ds	1
   308   000002                     i2I2C_2_Master_Write@data_byte:
   309                           	callstack 0
   310                           
   311                           ; 1 bytes @ 0x1
   312   000002                     	ds	1
   313   000003                     ??_indicateInstruction:
   314   000003                     ??_I2C_2_Master_Idle:
   315   000003                     ?___wmul:
   316                           	callstack 0
   317   000003                     White@mL:
   318                           	callstack 0
   319   000003                     Black@mL:
   320                           	callstack 0
   321   000003                     initDCmotorsPWM@PWMperiod:
   322                           	callstack 0
   323   000003                     ___wmul@multiplier:
   324                           	callstack 0
   325                           
   326                           ; 2 bytes @ 0x2
   327   000003                     	ds	1
   328   000004                     ??_I2C_2_Master_Read:
   329   000004                     I2C_2_Master_Write@data_byte:
   330                           	callstack 0
   331   000004                     White@mR:
   332                           	callstack 0
   333   000004                     Black@mR:
   334                           	callstack 0
   335                           
   336                           ; 1 bytes @ 0x3
   337   000004                     	ds	1
   338   000005                     color_writetoaddr@value:
   339                           	callstack 0
   340   000005                     I2C_2_Master_Read@ack:
   341                           	callstack 0
   342   000005                     ___wmul@multiplicand:
   343                           	callstack 0
   344                           
   345                           ; 2 bytes @ 0x4
   346   000005                     	ds	1
   347   000006                     color_writetoaddr@address:
   348                           	callstack 0
   349   000006                     I2C_2_Master_Read@tmp:
   350                           	callstack 0
   351   000006                     indicateInstruction@period:
   352                           	callstack 0
   353                           
   354                           ; 1 bytes @ 0x5
   355   000006                     	ds	1
   356   000007                     ??_color_click_init:
   357   000007                     ?_readRedColor:
   358                           	callstack 0
   359   000007                     ?_readGreenColor:
   360                           	callstack 0
   361   000007                     ?_readBlueColor:
   362                           	callstack 0
   363   000007                     ?_readClearColor:
   364                           	callstack 0
   365   000007                     indicateInstruction@j:
   366                           	callstack 0
   367   000007                     ___wmul@product:
   368                           	callstack 0
   369                           
   370                           ; 2 bytes @ 0x6
   371   000007                     	ds	2
   372   000009                     ??_readRedColor:
   373   000009                     ??_readGreenColor:
   374   000009                     ??_readBlueColor:
   375   000009                     ??_readClearColor:
   376   000009                     ?___lwdiv:
   377                           	callstack 0
   378   000009                     indicateInstruction@i:
   379                           	callstack 0
   380   000009                     ___lwdiv@dividend:
   381                           	callstack 0
   382                           
   383                           ; 2 bytes @ 0x8
   384   000009                     	ds	2
   385   00000B                     ___lwdiv@divisor:
   386                           	callstack 0
   387                           
   388                           ; 2 bytes @ 0xA
   389   00000B                     	ds	1
   390   00000C                     readRedColor@tmp:
   391                           	callstack 0
   392   00000C                     readGreenColor@tmp:
   393                           	callstack 0
   394   00000C                     readBlueColor@tmp:
   395                           	callstack 0
   396   00000C                     readClearColor@tmp:
   397                           	callstack 0
   398                           
   399                           ; 2 bytes @ 0xB
   400   00000C                     	ds	1
   401   00000D                     ___lwdiv@quotient:
   402                           	callstack 0
   403                           
   404                           ; 2 bytes @ 0xC
   405   00000D                     	ds	1
   406   00000E                     readColors@RGBC:
   407                           	callstack 0
   408                           
   409                           ; 1 bytes @ 0xD
   410   00000E                     	ds	1
   411   00000F                     ??_readColors:
   412   00000F                     ___lwdiv@counter:
   413                           	callstack 0
   414                           
   415                           ; 1 bytes @ 0xE
   416   00000F                     	ds	1
   417   000010                     normalizeColors@RGBC:
   418                           	callstack 0
   419   000010                     setMotorPWM@m:
   420                           	callstack 0
   421                           
   422                           ; 1 bytes @ 0xF
   423   000010                     	ds	1
   424   000011                     ??_setMotorPWM:
   425   000011                     normalizeColors@normRGB:
   426                           	callstack 0
   427                           
   428                           ; 1 bytes @ 0x10
   429   000011                     	ds	1
   430   000012                     ??_normalizeColors:
   431                           
   432                           ; 1 bytes @ 0x11
   433   000012                     	ds	1
   434   000013                     setMotorPWM@posDuty:
   435                           	callstack 0
   436                           
   437                           ; 1 bytes @ 0x12
   438   000013                     	ds	1
   439   000014                     setMotorPWM@negDuty:
   440                           	callstack 0
   441                           
   442                           ; 1 bytes @ 0x13
   443   000014                     	ds	1
   444   000015                     stop@mL:
   445                           	callstack 0
   446   000015                     fastStop@mL:
   447                           	callstack 0
   448   000015                     trundle@mL:
   449                           	callstack 0
   450                           
   451                           ; 1 bytes @ 0x14
   452   000015                     	ds	1
   453   000016                     stop@mR:
   454                           	callstack 0
   455   000016                     fastStop@mR:
   456                           	callstack 0
   457   000016                     trundle@mR:
   458                           	callstack 0
   459                           
   460                           ; 1 bytes @ 0x15
   461   000016                     	ds	1
   462   000017                     ??_fastStop:
   463   000017                     ??_trundle:
   464   000017                     ??_stop:
   465                           
   466                           ; 1 bytes @ 0x16
   467   000017                     	ds	1
   468   000018                     stop@current_power:
   469                           	callstack 0
   470   000018                     fastStop@current_power:
   471                           	callstack 0
   472                           
   473                           ; 2 bytes @ 0x17
   474   000018                     	ds	2
   475   00001A                     normalizeColors@sum:
   476                           	callstack 0
   477   00001A                     stop@i:
   478                           	callstack 0
   479   00001A                     fastStop@i:
   480                           	callstack 0
   481   00001A                     trundle@i:
   482                           	callstack 0
   483                           
   484                           ; 2 bytes @ 0x19
   485   00001A                     	ds	2
   486   00001C                     turnLeft@mL:
   487                           	callstack 0
   488   00001C                     turnRight@mL:
   489                           	callstack 0
   490   00001C                     turn180@mL:
   491                           	callstack 0
   492   00001C                     turnLeft135@mL:
   493                           	callstack 0
   494   00001C                     turnRight135@mL:
   495                           	callstack 0
   496   00001C                     creep@mL:
   497                           	callstack 0
   498   00001C                     timed_trundle@mL:
   499                           	callstack 0
   500   00001C                     trundleSquare@mL:
   501                           	callstack 0
   502   00001C                     trundle@i_2165:
   503                           	callstack 0
   504   00001C                     _normalizeColors$3124:
   505                           	callstack 0
   506                           
   507                           ; 2 bytes @ 0x1B
   508   00001C                     	ds	1
   509   00001D                     turnLeft@mR:
   510                           	callstack 0
   511   00001D                     turnRight@mR:
   512                           	callstack 0
   513   00001D                     turn180@mR:
   514                           	callstack 0
   515   00001D                     turnLeft135@mR:
   516                           	callstack 0
   517   00001D                     turnRight135@mR:
   518                           	callstack 0
   519   00001D                     creep@mR:
   520                           	callstack 0
   521   00001D                     timed_trundle@mR:
   522                           	callstack 0
   523   00001D                     trundleSquare@mR:
   524                           	callstack 0
   525                           
   526                           ; 1 bytes @ 0x1C
   527   00001D                     	ds	1
   528   00001E                     ??_turnRight:
   529   00001E                     ??_turn180:
   530   00001E                     ??_turnRight135:
   531   00001E                     ??_turnLeft135:
   532   00001E                     turnLeft@power:
   533                           	callstack 0
   534   00001E                     trundle@current_power:
   535                           	callstack 0
   536   00001E                     trundleSquare@square:
   537                           	callstack 0
   538   00001E                     creep@increments:
   539                           	callstack 0
   540   00001E                     timed_trundle@increments:
   541                           	callstack 0
   542                           
   543                           ; 2 bytes @ 0x1D
   544   00001E                     	ds	1
   545   00001F                     ??_turnLeft:
   546   00001F                     trundle@trundle_power:
   547                           	callstack 0
   548   00001F                     trundleSquare@reverse:
   549                           	callstack 0
   550                           
   551                           ; 1 bytes @ 0x1E
   552   00001F                     	ds	1
   553   000020                     ??_trundleSquare:
   554   000020                     ??_timed_trundle:
   555   000020                     creep@direction:
   556                           	callstack 0
   557   000020                     turnRight@maxpower:
   558                           	callstack 0
   559   000020                     turn180@maxpower:
   560                           	callstack 0
   561   000020                     turnLeft135@maxpower:
   562                           	callstack 0
   563   000020                     turnRight135@maxpower:
   564                           	callstack 0
   565                           
   566                           ; 2 bytes @ 0x1F
   567   000020                     	ds	1
   568   000021                     ??_creep:
   569   000021                     turnLeft@maxpower:
   570                           	callstack 0
   571                           
   572                           ; 2 bytes @ 0x20
   573   000021                     	ds	1
   574   000022                     turnRight@i:
   575                           	callstack 0
   576   000022                     turn180@i:
   577                           	callstack 0
   578   000022                     turnLeft135@i:
   579                           	callstack 0
   580   000022                     turnRight135@i:
   581                           	callstack 0
   582                           
   583                           ; 2 bytes @ 0x21
   584   000022                     	ds	1
   585   000023                     turnLeft@i:
   586                           	callstack 0
   587   000023                     timed_trundle@i:
   588                           	callstack 0
   589                           
   590                           ; 2 bytes @ 0x22
   591   000023                     	ds	1
   592   000024                     turnRight@i_2075:
   593                           	callstack 0
   594   000024                     turn180@i_2093:
   595                           	callstack 0
   596   000024                     turnLeft135@i_2111:
   597                           	callstack 0
   598   000024                     turnRight135@i_2129:
   599                           	callstack 0
   600   000024                     creep@i:
   601                           	callstack 0
   602                           
   603                           ; 2 bytes @ 0x23
   604   000024                     	ds	1
   605   000025                     trundleSquare@start_increment:
   606                           	callstack 0
   607   000025                     turnLeft@i_2057:
   608                           	callstack 0
   609   000025                     timed_trundle@i_2206:
   610                           	callstack 0
   611                           
   612                           ; 2 bytes @ 0x24
   613   000025                     	ds	1
   614   000026                     Red@mL:
   615                           	callstack 0
   616   000026                     Blue@mL:
   617                           	callstack 0
   618   000026                     Orange@mL:
   619                           	callstack 0
   620   000026                     LightBlue@mL:
   621                           	callstack 0
   622   000026                     reverseOrange@mL:
   623                           	callstack 0
   624   000026                     reverseLightBlue@mL:
   625                           	callstack 0
   626   000026                     creep@i_2186:
   627                           	callstack 0
   628   000026                     trundleSquare@i:
   629                           	callstack 0
   630                           
   631                           ; 2 bytes @ 0x25
   632   000026                     	ds	1
   633   000027                     Red@mR:
   634                           	callstack 0
   635   000027                     Green@mL:
   636                           	callstack 0
   637   000027                     Blue@mR:
   638                           	callstack 0
   639   000027                     Orange@mR:
   640                           	callstack 0
   641   000027                     LightBlue@mR:
   642                           	callstack 0
   643   000027                     reverseOrange@mR:
   644                           	callstack 0
   645   000027                     reverseLightBlue@mR:
   646                           	callstack 0
   647   000027                     leftCali@mL:
   648                           	callstack 0
   649   000027                     timed_trundle@current_power:
   650                           	callstack 0
   651                           
   652                           ; 1 bytes @ 0x26
   653   000027                     	ds	1
   654   000028                     Green@mR:
   655                           	callstack 0
   656   000028                     Yellow@mL:
   657                           	callstack 0
   658   000028                     Pink@mL:
   659                           	callstack 0
   660   000028                     reverseYellow@mL:
   661                           	callstack 0
   662   000028                     reversePink@mL:
   663                           	callstack 0
   664   000028                     leftCali@mR:
   665                           	callstack 0
   666   000028                     creep@current_power:
   667                           	callstack 0
   668   000028                     timed_trundle@trundle_power:
   669                           	callstack 0
   670                           
   671                           ; 1 bytes @ 0x27
   672   000028                     	ds	1
   673   000029                     ??_leftCali:
   674   000029                     Yellow@mR:
   675                           	callstack 0
   676   000029                     Pink@mR:
   677                           	callstack 0
   678   000029                     reverseYellow@mR:
   679                           	callstack 0
   680   000029                     reversePink@mR:
   681                           	callstack 0
   682   000029                     creep@creep_power:
   683                           	callstack 0
   684                           
   685                           ; 1 bytes @ 0x28
   686   000029                     	ds	1
   687   00002A                     decideColor@normRGB:
   688                           	callstack 0
   689   00002A                     executeInstruction@mL:
   690                           	callstack 0
   691                           
   692                           ; 1 bytes @ 0x29
   693   00002A                     	ds	1
   694   00002B                     decideColor@RGBC:
   695                           	callstack 0
   696   00002B                     executeInstruction@mR:
   697                           	callstack 0
   698   00002B                     leftCali@power:
   699                           	callstack 0
   700                           
   701                           ; 1 bytes @ 0x2A
   702   00002B                     	ds	1
   703   00002C                     decideColor@mL:
   704                           	callstack 0
   705   00002C                     executeInstruction@colourCode:
   706                           	callstack 0
   707                           
   708                           ; 1 bytes @ 0x2B
   709   00002C                     	ds	1
   710   00002D                     ??_executeInstruction:
   711   00002D                     decideColor@mR:
   712                           	callstack 0
   713                           
   714                           ; 1 bytes @ 0x2C
   715   00002D                     	ds	1
   716   00002E                     ??_decideColor:
   717                           
   718                           ; 1 bytes @ 0x2D
   719   00002E                     	ds	1
   720   00002F                     reverseRoute@mL:
   721                           	callstack 0
   722                           
   723                           ; 1 bytes @ 0x2E
   724   00002F                     	ds	1
   725   000030                     reverseRoute@mR:
   726                           	callstack 0
   727                           
   728                           ; 1 bytes @ 0x2F
   729   000030                     	ds	1
   730   000031                     ??_reverseRoute:
   731                           
   732                           ; 1 bytes @ 0x30
   733   000031                     	ds	1
   734   000032                     reverseRoute@reverseMapping:
   735                           	callstack 0
   736                           
   737                           ; 9 bytes @ 0x31
   738   000032                     	ds	9
   739   00003B                     reverseRoute@last_increments:
   740                           	callstack 0
   741                           
   742                           ; 2 bytes @ 0x3A
   743   00003B                     	ds	2
   744   00003D                     reverseRoute@i:
   745                           	callstack 0
   746                           
   747                           ; 2 bytes @ 0x3C
   748   00003D                     	ds	2
   749   00003F                     ??_main:
   750                           
   751                           ; 1 bytes @ 0x3E
   752   00003F                     	ds	2
   753                           
   754 ;;
   755 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   756 ;;
   757 ;; *************** function _main *****************
   758 ;; Defined at:
   759 ;;		line 34 in file "main.c"
   760 ;; Parameters:    Size  Location     Type
   761 ;;		None
   762 ;; Auto vars:     Size  Location     Type
   763 ;;  colourCode      1    0[BANK0 ] unsigned char 
   764 ;;  motorL          9   26[BANK0 ] struct DC_motor
   765 ;;  motorR          9   17[BANK0 ] struct DC_motor
   766 ;;  RGBC            8    9[BANK0 ] struct colors
   767 ;;  normRGB         8    1[BANK0 ] struct normColors
   768 ;;  PWMperiod       2    0        unsigned int 
   769 ;; Return value:  Size  Location     Type
   770 ;;                  1    wreg      void 
   771 ;; Registers used:
   772 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   773 ;; Tracked objects:
   774 ;;		On entry : 0/0
   775 ;;		On exit  : 0/0
   776 ;;		Unchanged: 0/0
   777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   778 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   779 ;;      Locals:         0      35       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   780 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   781 ;;      Totals:         2      35       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   782 ;;Total ram usage:       37 bytes
   783 ;; Hardware stack levels required when called: 11
   784 ;; This function calls:
   785 ;;		_LEDturnON
   786 ;;		_Timer0_init
   787 ;;		_clearInterrupt
   788 ;;		_color_click_init
   789 ;;		_decideColor
   790 ;;		_executeInstruction
   791 ;;		_fastStop
   792 ;;		_indicateInstruction
   793 ;;		_initBoardLEDs
   794 ;;		_initButtons
   795 ;;		_initDCmotorsPWM
   796 ;;		_init_buttons_LED
   797 ;;		_interrupts_init
   798 ;;		_leftCali
   799 ;;		_normalizeColors
   800 ;;		_readColors
   801 ;;		_reverseRoute
   802 ;;		_setMotorPWM
   803 ;;		_trundle
   804 ;; This function is called by:
   805 ;;		Startup code after reset
   806 ;; This function uses a non-reentrant model
   807 ;;
   808                           
   809                           	psect	text0
   810   000FF6                     __ptext0:
   811                           	callstack 0
   812   000FF6                     _main:
   813                           	callstack 20
   814   000FF6                     
   815                           ;main.c: 35:     color_click_init();
   816   000FF6  EC14  F014         	call	_color_click_init	;wreg free
   817   000FFA                     
   818                           ;main.c: 36:     init_buttons_LED();
   819   000FFA  ECD3  F014         	call	_init_buttons_LED	;wreg free
   820   000FFE                     
   821                           ;main.c: 37:     initBoardLEDs();
   822   000FFE  EC27  F015         	call	_initBoardLEDs	;wreg free
   823   001002                     
   824                           ;main.c: 38:     initButtons();
   825   001002  EC10  F015         	call	_initButtons	;wreg free
   826   001006                     
   827                           ;main.c: 40:     interrupts_init();
   828   001006  ECDF  F012         	call	_interrupts_init	;wreg free
   829   00100A                     
   830                           ;main.c: 41:     Timer0_init();
   831   00100A  ECAD  F014         	call	_Timer0_init	;wreg free
   832   00100E                     
   833                           ;main.c: 49:     initDCmotorsPWM(PWMperiod);
   834   00100E  0E00               	movlw	0
   835   001010  6E04               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   836   001012  0E63               	movlw	99
   837   001014  6E03               	movwf	initDCmotorsPWM@PWMperiod^0,c
   838   001016  ECF7  F011         	call	_initDCmotorsPWM	;wreg free
   839   00101A                     
   840                           ;main.c: 51:     struct DC_motor motorL;;main.c: 52:     motorL.power = 0;
   841   00101A  0E00               	movlw	0
   842   00101C  0100               	movlb	0	; () banked
   843   00101E  6FA7               	movwf	main@motorL& (0+255),b
   844   001020                     
   845                           ; BSR set to: 0
   846                           ;main.c: 53:     motorL.direction = 1;
   847   001020  0E01               	movlw	1
   848   001022  6FA8               	movwf	(main@motorL+1)& (0+255),b
   849   001024                     
   850                           ; BSR set to: 0
   851                           ;main.c: 54:     motorL.brakemode = 1;
   852   001024  0E01               	movlw	1
   853   001026  6FA9               	movwf	(main@motorL+2)& (0+255),b
   854   001028                     
   855                           ; BSR set to: 0
   856                           ;main.c: 55:     motorL.PWMperiod = PWMperiod;
   857   001028  0E00               	movlw	0
   858   00102A  6FAB               	movwf	(main@motorL+4)& (0+255),b
   859   00102C  0E63               	movlw	99
   860   00102E  6FAA               	movwf	(main@motorL+3)& (0+255),b
   861   001030                     
   862                           ; BSR set to: 0
   863                           ;main.c: 56:     motorL.posDutyHighByte = &CCPR1H;
   864   001030  0EAA               	movlw	170
   865   001032  6FAC               	movwf	(main@motorL+5)& (0+255),b
   866   001034  0E0F               	movlw	15
   867   001036  6FAD               	movwf	(main@motorL+6)& (0+255),b
   868   001038                     
   869                           ; BSR set to: 0
   870                           ;main.c: 57:     motorL.negDutyHighByte = &CCPR2H;
   871   001038  0EA6               	movlw	166
   872   00103A  6FAE               	movwf	(main@motorL+7)& (0+255),b
   873   00103C  0E0F               	movlw	15
   874   00103E  6FAF               	movwf	(main@motorL+8)& (0+255),b
   875   001040                     
   876                           ; BSR set to: 0
   877                           ;main.c: 58:     setMotorPWM(&motorL);
   878   001040  0EA7               	movlw	low main@motorL
   879   001042  6E10               	movwf	setMotorPWM@m^0,c
   880   001044  ECF6  F00A         	call	_setMotorPWM	;wreg free
   881   001048                     
   882                           ;main.c: 59:     struct DC_motor motorR;;main.c: 60:     motorR.power = 0;
   883   001048  0E00               	movlw	0
   884   00104A  0100               	movlb	0	; () banked
   885   00104C  6F9E               	movwf	main@motorR& (0+255),b
   886   00104E                     
   887                           ; BSR set to: 0
   888                           ;main.c: 61:     motorR.direction = 1;
   889   00104E  0E01               	movlw	1
   890   001050  6F9F               	movwf	(main@motorR+1)& (0+255),b
   891   001052                     
   892                           ; BSR set to: 0
   893                           ;main.c: 62:     motorR.brakemode = 1;
   894   001052  0E01               	movlw	1
   895   001054  6FA0               	movwf	(main@motorR+2)& (0+255),b
   896   001056                     
   897                           ; BSR set to: 0
   898                           ;main.c: 63:     motorR.PWMperiod = PWMperiod;
   899   001056  0E00               	movlw	0
   900   001058  6FA2               	movwf	(main@motorR+4)& (0+255),b
   901   00105A  0E63               	movlw	99
   902   00105C  6FA1               	movwf	(main@motorR+3)& (0+255),b
   903   00105E                     
   904                           ; BSR set to: 0
   905                           ;main.c: 64:     motorR.posDutyHighByte = &CCPR3H;
   906   00105E  0E25               	movlw	37
   907   001060  6FA3               	movwf	(main@motorR+5)& (0+255),b
   908   001062  0E0F               	movlw	15
   909   001064  6FA4               	movwf	(main@motorR+6)& (0+255),b
   910   001066                     
   911                           ; BSR set to: 0
   912                           ;main.c: 65:     motorR.negDutyHighByte = &CCPR4H;
   913   001066  0E21               	movlw	33
   914   001068  6FA5               	movwf	(main@motorR+7)& (0+255),b
   915   00106A  0E0F               	movlw	15
   916   00106C  6FA6               	movwf	(main@motorR+8)& (0+255),b
   917   00106E                     
   918                           ; BSR set to: 0
   919                           ;main.c: 66:     setMotorPWM(&motorR);
   920   00106E  0E9E               	movlw	low main@motorR
   921   001070  6E10               	movwf	setMotorPWM@m^0,c
   922   001072  ECF6  F00A         	call	_setMotorPWM	;wreg free
   923   001076                     
   924                           ;main.c: 71:     turnLeftPower = leftCali(&motorL, &motorR);
   925   001076  0EA7               	movlw	low main@motorL
   926   001078  6E27               	movwf	leftCali@mL^0,c
   927   00107A  0E9E               	movlw	low main@motorR
   928   00107C  6E28               	movwf	leftCali@mR^0,c
   929   00107E  EC40  F011         	call	_leftCali	;wreg free
   930   001082  6E4B               	movwf	_turnLeftPower^0,c
   931   001084                     
   932                           ;main.c: 73:     LEDturnON();
   933   001084  EC31  F015         	call	_LEDturnON	;wreg free
   934   001088                     
   935                           ;main.c: 74:     _delay((unsigned long)((1000)*(64000000/4000.0)));
   936   001088  0E52               	movlw	82
   937   00108A  6E40               	movwf	(??_main+1)^0,c
   938   00108C  0E2B               	movlw	43
   939   00108E  6E3F               	movwf	??_main^0,c
   940   001090  0E00               	movlw	0
   941   001092                     u1737:
   942   001092  2EE8               	decfsz	wreg,f,c
   943   001094  D7FE               	bra	u1737
   944   001096  2E3F               	decfsz	??_main^0,f,c
   945   001098  D7FC               	bra	u1737
   946   00109A  2E40               	decfsz	(??_main+1)^0,f,c
   947   00109C  D7FA               	bra	u1737
   948   00109E  D000               	nop2	
   949   0010A0                     l195:
   950   0010A0  B48E               	btfsc	142,2,c	;volatile
   951   0010A2  EF55  F008         	goto	u1641
   952   0010A6  EF57  F008         	goto	u1640
   953   0010AA                     u1641:
   954   0010AA  EF50  F008         	goto	l195
   955   0010AE                     u1640:
   956   0010AE                     
   957                           ;main.c: 77:     increment = 0;
   958   0010AE  0E00               	movlw	0
   959   0010B0  0100               	movlb	0	; () banked
   960   0010B2  6F89               	movwf	(_increment+1)& (0+255),b
   961   0010B4  0E00               	movlw	0
   962   0010B6  6F88               	movwf	_increment& (0+255),b
   963   0010B8                     l198:
   964                           
   965                           ;main.c: 81:         if (wall_detected) {
   966   0010B8  0100               	movlb	0	; () banked
   967   0010BA  518C               	movf	_wall_detected& (0+255),w,b
   968   0010BC  B4D8               	btfsc	status,2,c
   969   0010BE  EF63  F008         	goto	u1651
   970   0010C2  EF65  F008         	goto	u1650
   971   0010C6                     u1651:
   972   0010C6  EFAB  F008         	goto	l3419
   973   0010CA                     u1650:
   974   0010CA                     
   975                           ; BSR set to: 0
   976                           ;main.c: 83:             fastStop(&motorL, &motorR);
   977   0010CA  0EA7               	movlw	low main@motorL
   978   0010CC  6E15               	movwf	fastStop@mL^0,c
   979   0010CE  0E9E               	movlw	low main@motorR
   980   0010D0  6E16               	movwf	fastStop@mR^0,c
   981   0010D2  EC75  F012         	call	_fastStop	;wreg free
   982   0010D6                     
   983                           ;main.c: 85:             readColors(&RGBC);
   984   0010D6  0E96               	movlw	low main@RGBC
   985   0010D8  6E0E               	movwf	readColors@RGBC^0,c
   986   0010DA  ECCC  F00F         	call	_readColors	;wreg free
   987   0010DE                     
   988                           ;main.c: 87:             normalizeColors(&RGBC, &normRGB);
   989   0010DE  0E96               	movlw	low main@RGBC
   990   0010E0  6E10               	movwf	normalizeColors@RGBC^0,c
   991   0010E2  0E8E               	movlw	low main@normRGB
   992   0010E4  6E11               	movwf	normalizeColors@normRGB^0,c
   993   0010E6  ECA0  F00B         	call	_normalizeColors	;wreg free
   994                           
   995                           ;main.c: 89:             char colourCode = decideColor(&normRGB, &RGBC, &motorL, &motorR
      +                          );
   996   0010EA  0E8E               	movlw	low main@normRGB
   997   0010EC  6E2A               	movwf	decideColor@normRGB^0,c
   998   0010EE  0E96               	movlw	low main@RGBC
   999   0010F0  6E2B               	movwf	decideColor@RGBC^0,c
  1000   0010F2  0EA7               	movlw	low main@motorL
  1001   0010F4  6E2C               	movwf	decideColor@mL^0,c
  1002   0010F6  0E9E               	movlw	low main@motorR
  1003   0010F8  6E2D               	movwf	decideColor@mR^0,c
  1004   0010FA  EC01  F007         	call	_decideColor	;wreg free
  1005   0010FE  0100               	movlb	0	; () banked
  1006   001100  6F8D               	movwf	main@colourCode& (0+255),b
  1007   001102                     
  1008                           ; BSR set to: 0
  1009                           ;main.c: 93:             indicateInstruction(colourCode);
  1010   001102  518D               	movf	main@colourCode& (0+255),w,b
  1011   001104  ECA3  F011         	call	_indicateInstruction
  1012   001108                     
  1013                           ;main.c: 99:             instruction_array[instruction_array_index][0] = colourCode;
  1014   001108  0100               	movlb	0	; () banked
  1015   00110A  518B               	movf	_instruction_array_index& (0+255),w,b
  1016   00110C  0D02               	mullw	2
  1017   00110E  50F3               	movf	243,w,c
  1018   001110  0F60               	addlw	low _instruction_array
  1019   001112  6ED9               	movwf	fsr2l,c
  1020   001114  6ADA               	clrf	fsr2h,c
  1021   001116  C08D  FFDF         	movff	main@colourCode,indf2
  1022   00111A                     
  1023                           ; BSR set to: 0
  1024                           ;main.c: 100:             instruction_array[instruction_array_index][1] = increment;
  1025   00111A  518B               	movf	_instruction_array_index& (0+255),w,b
  1026   00111C  0D02               	mullw	2
  1027   00111E  50F3               	movf	243,w,c
  1028   001120  0F61               	addlw	low (_instruction_array+1)
  1029   001122  6ED9               	movwf	fsr2l,c
  1030   001124  6ADA               	clrf	fsr2h,c
  1031   001126  C088  FFDF         	movff	_increment,indf2
  1032   00112A                     
  1033                           ; BSR set to: 0
  1034                           ;main.c: 101:             instruction_array_index += 1;
  1035   00112A  2B8B               	incf	_instruction_array_index& (0+255),f,b
  1036   00112C                     
  1037                           ; BSR set to: 0
  1038                           ;main.c: 103:             executeInstruction(&motorL, &motorR, colourCode);
  1039   00112C  0EA7               	movlw	low main@motorL
  1040   00112E  6E2A               	movwf	executeInstruction@mL^0,c
  1041   001130  0E9E               	movlw	low main@motorR
  1042   001132  6E2B               	movwf	executeInstruction@mR^0,c
  1043   001134  C08D  F02C         	movff	main@colourCode,executeInstruction@colourCode
  1044   001138  EC4A  F00A         	call	_executeInstruction	;wreg free
  1045   00113C                     
  1046                           ;main.c: 104:             LEDturnON();
  1047   00113C  EC31  F015         	call	_LEDturnON	;wreg free
  1048   001140                     
  1049                           ;main.c: 105:             increment = 0;
  1050   001140  0E00               	movlw	0
  1051   001142  0100               	movlb	0	; () banked
  1052   001144  6F89               	movwf	(_increment+1)& (0+255),b
  1053   001146  0E00               	movlw	0
  1054   001148  6F88               	movwf	_increment& (0+255),b
  1055   00114A                     
  1056                           ; BSR set to: 0
  1057                           ;main.c: 109:             wall_detected = 0;
  1058   00114A  0E00               	movlw	0
  1059   00114C  6F8C               	movwf	_wall_detected& (0+255),b
  1060   00114E                     
  1061                           ; BSR set to: 0
  1062                           ;main.c: 110:             clearInterrupt();
  1063   00114E  ECBD  F014         	call	_clearInterrupt	;wreg free
  1064   001152                     
  1065                           ;main.c: 111:             INTCONbits.GIE=1;
  1066   001152  8EF2               	bsf	242,7,c	;volatile
  1067   001154                     
  1068                           ;main.c: 113:             LATDbits.LATD7 = 0;
  1069   001154  9E7C               	bcf	124,7,c	;volatile
  1070   001156                     l3419:
  1071                           
  1072                           ;main.c: 122:         if (reverseRouteFlag) {
  1073   001156  0100               	movlb	0	; () banked
  1074   001158  518A               	movf	_reverseRouteFlag& (0+255),w,b
  1075   00115A  B4D8               	btfsc	status,2,c
  1076   00115C  EFB2  F008         	goto	u1661
  1077   001160  EFB4  F008         	goto	u1660
  1078   001164                     u1661:
  1079   001164  EFBA  F008         	goto	l3423
  1080   001168                     u1660:
  1081   001168                     
  1082                           ; BSR set to: 0
  1083                           ;main.c: 123:             reverseRoute(&motorL, &motorR);
  1084   001168  0EA7               	movlw	low main@motorL
  1085   00116A  6E2F               	movwf	reverseRoute@mL^0,c
  1086   00116C  0E9E               	movlw	low main@motorR
  1087   00116E  6E30               	movwf	reverseRoute@mR^0,c
  1088   001170  ECDC  F010         	call	_reverseRoute	;wreg free
  1089   001174                     l3423:
  1090                           
  1091                           ;main.c: 127:         if (!PORTFbits.RF3) {
  1092   001174  B68E               	btfsc	142,3,c	;volatile
  1093   001176  EFBF  F008         	goto	u1671
  1094   00117A  EFC1  F008         	goto	u1670
  1095   00117E                     u1671:
  1096   00117E  EFC4  F008         	goto	l3427
  1097   001182                     u1670:
  1098   001182                     
  1099                           ;main.c: 128:             reverseRouteFlag=1;
  1100   001182  0E01               	movlw	1
  1101   001184  0100               	movlb	0	; () banked
  1102   001186  6F8A               	movwf	_reverseRouteFlag& (0+255),b
  1103   001188                     l3427:
  1104                           
  1105                           ;main.c: 131:             trundle(&motorL, &motorR);
  1106   001188  0EA7               	movlw	low main@motorL
  1107   00118A  6E15               	movwf	trundle@mL^0,c
  1108   00118C  0E9E               	movlw	low main@motorR
  1109   00118E  6E16               	movwf	trundle@mR^0,c
  1110   001190  EC55  F010         	call	_trundle	;wreg free
  1111   001194  EF5C  F008         	goto	l198
  1112   001198  EF23  F000         	goto	start
  1113   00119C                     __end_of_main:
  1114                           	callstack 0
  1115                           
  1116 ;; *************** function _trundle *****************
  1117 ;; Defined at:
  1118 ;;		line 351 in file "dc_motor.c"
  1119 ;; Parameters:    Size  Location     Type
  1120 ;;  mL              1   20[COMRAM] PTR struct DC_motor
  1121 ;;		 -> main@motorL(9), 
  1122 ;;  mR              1   21[COMRAM] PTR struct DC_motor
  1123 ;;		 -> main@motorR(9), 
  1124 ;; Auto vars:     Size  Location     Type
  1125 ;;  i               2   27[COMRAM] int 
  1126 ;;  i               2   25[COMRAM] int 
  1127 ;;  trundle_powe    1   30[COMRAM] unsigned char 
  1128 ;;  current_powe    1   29[COMRAM] unsigned char 
  1129 ;; Return value:  Size  Location     Type
  1130 ;;                  1    wreg      void 
  1131 ;; Registers used:
  1132 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1133 ;; Tracked objects:
  1134 ;;		On entry : 0/0
  1135 ;;		On exit  : 0/0
  1136 ;;		Unchanged: 0/0
  1137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1138 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1139 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1140 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1141 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1142 ;;Total ram usage:       11 bytes
  1143 ;; Hardware stack levels used: 1
  1144 ;; Hardware stack levels required when called: 6
  1145 ;; This function calls:
  1146 ;;		_setMotorPWM
  1147 ;; This function is called by:
  1148 ;;		_main
  1149 ;; This function uses a non-reentrant model
  1150 ;;
  1151                           
  1152                           	psect	text1
  1153   0020AA                     __ptext1:
  1154                           	callstack 0
  1155   0020AA                     _trundle:
  1156                           	callstack 24
  1157   0020AA                     
  1158                           ;dc_motor.c: 351: void trundle(DC_motor *mL, DC_motor *mR);dc_motor.c: 352: {;dc_motor.c
      +                          : 357:     mL->direction = 1;
  1159   0020AA  5015               	movf	trundle@mL^0,w,c
  1160   0020AC  6ED9               	movwf	fsr2l,c
  1161   0020AE  6ADA               	clrf	fsr2h,c
  1162   0020B0  0E01               	movlw	1
  1163   0020B2  26D9               	addwf	fsr2l,f,c
  1164   0020B4  0E01               	movlw	1
  1165   0020B6  6EDF               	movwf	indf2,c
  1166                           
  1167                           ;dc_motor.c: 358:     mR->direction = 1;
  1168   0020B8  5016               	movf	trundle@mR^0,w,c
  1169   0020BA  6ED9               	movwf	fsr2l,c
  1170   0020BC  6ADA               	clrf	fsr2h,c
  1171   0020BE  0E01               	movlw	1
  1172   0020C0  26D9               	addwf	fsr2l,f,c
  1173   0020C2  0E01               	movlw	1
  1174   0020C4  6EDF               	movwf	indf2,c
  1175   0020C6                     
  1176                           ;dc_motor.c: 360:     char current_power = mL->power;
  1177   0020C6  5015               	movf	trundle@mL^0,w,c
  1178   0020C8  6ED9               	movwf	fsr2l,c
  1179   0020CA  6ADA               	clrf	fsr2h,c
  1180   0020CC  50DF               	movf	indf2,w,c
  1181   0020CE  6E1E               	movwf	trundle@current_power^0,c
  1182   0020D0                     
  1183                           ;dc_motor.c: 361:     char trundle_power = 12;
  1184   0020D0  0E0C               	movlw	12
  1185   0020D2  6E1F               	movwf	trundle@trundle_power^0,c
  1186                           
  1187                           ;dc_motor.c: 363:     if (trundle_power > current_power) {
  1188   0020D4  0E0C               	movlw	12
  1189   0020D6  601E               	cpfslt	trundle@current_power^0,c
  1190   0020D8  EF70  F010         	goto	u1611
  1191   0020DC  EF72  F010         	goto	u1610
  1192   0020E0                     u1611:
  1193   0020E0  EFA7  F010         	goto	l560
  1194   0020E4                     u1610:
  1195   0020E4                     
  1196                           ;dc_motor.c: 364:         for (int i=current_power; i<= trundle_power; i++) {
  1197   0020E4  C01E  F01A         	movff	trundle@current_power,trundle@i
  1198   0020E8  6A1B               	clrf	(trundle@i+1)^0,c
  1199   0020EA  EF93  F010         	goto	l3313
  1200   0020EE                     l3303:
  1201                           
  1202                           ;dc_motor.c: 365:             mL->power = i;
  1203   0020EE  5015               	movf	trundle@mL^0,w,c
  1204   0020F0  6ED9               	movwf	fsr2l,c
  1205   0020F2  6ADA               	clrf	fsr2h,c
  1206   0020F4  C01A  FFDF         	movff	trundle@i,indf2
  1207                           
  1208                           ;dc_motor.c: 366:             mR->power = i;
  1209   0020F8  5016               	movf	trundle@mR^0,w,c
  1210   0020FA  6ED9               	movwf	fsr2l,c
  1211   0020FC  6ADA               	clrf	fsr2h,c
  1212   0020FE  C01A  FFDF         	movff	trundle@i,indf2
  1213   002102                     
  1214                           ;dc_motor.c: 367:             setMotorPWM(mL);
  1215   002102  C015  F010         	movff	trundle@mL,setMotorPWM@m
  1216   002106  ECF6  F00A         	call	_setMotorPWM	;wreg free
  1217   00210A                     
  1218                           ;dc_motor.c: 368:             setMotorPWM(mR);
  1219   00210A  C016  F010         	movff	trundle@mR,setMotorPWM@m
  1220   00210E  ECF6  F00A         	call	_setMotorPWM	;wreg free
  1221   002112                     
  1222                           ;dc_motor.c: 369:             _delay((unsigned long)((5)*(64000000/4000.0)));
  1223   002112  0E68               	movlw	104
  1224   002114  6E17               	movwf	??_trundle^0,c
  1225   002116  0EE4               	movlw	228
  1226   002118                     u1747:
  1227   002118  2EE8               	decfsz	wreg,f,c
  1228   00211A  D7FE               	bra	u1747
  1229   00211C  2E17               	decfsz	??_trundle^0,f,c
  1230   00211E  D7FC               	bra	u1747
  1231   002120  D000               	nop2	
  1232   002122                     
  1233                           ;dc_motor.c: 370:         }
  1234   002122  4A1A               	infsnz	trundle@i^0,f,c
  1235   002124  2A1B               	incf	(trundle@i+1)^0,f,c
  1236   002126                     l3313:
  1237   002126  501F               	movf	trundle@trundle_power^0,w,c
  1238   002128  6E17               	movwf	??_trundle^0,c
  1239   00212A  6A18               	clrf	(??_trundle+1)^0,c
  1240   00212C  501A               	movf	trundle@i^0,w,c
  1241   00212E  5C17               	subwf	??_trundle^0,w,c
  1242   002130  5018               	movf	(??_trundle+1)^0,w,c
  1243   002132  0A80               	xorlw	128
  1244   002134  6E19               	movwf	(??_trundle+2)^0,c
  1245   002136  501B               	movf	(trundle@i+1)^0,w,c
  1246   002138  0A80               	xorlw	128
  1247   00213A  5819               	subwfb	(??_trundle+2)^0,w,c
  1248   00213C  B0D8               	btfsc	status,0,c
  1249   00213E  EFA3  F010         	goto	u1621
  1250   002142  EFA5  F010         	goto	u1620
  1251   002146                     u1621:
  1252   002146  EF77  F010         	goto	l3303
  1253   00214A                     u1620:
  1254   00214A  EFDB  F010         	goto	l568
  1255   00214E                     l560:
  1256                           
  1257                           ;dc_motor.c: 373:         for (int i=current_power; i>= trundle_power; i--) {
  1258   00214E  C01E  F01C         	movff	trundle@current_power,trundle@i_2165
  1259   002152  6A1D               	clrf	(trundle@i_2165+1)^0,c
  1260   002154  EFC9  F010         	goto	l3325
  1261   002158                     l3315:
  1262                           
  1263                           ;dc_motor.c: 374:             mL->power = i;
  1264   002158  5015               	movf	trundle@mL^0,w,c
  1265   00215A  6ED9               	movwf	fsr2l,c
  1266   00215C  6ADA               	clrf	fsr2h,c
  1267   00215E  C01C  FFDF         	movff	trundle@i_2165,indf2
  1268                           
  1269                           ;dc_motor.c: 375:             mR->power = i;
  1270   002162  5016               	movf	trundle@mR^0,w,c
  1271   002164  6ED9               	movwf	fsr2l,c
  1272   002166  6ADA               	clrf	fsr2h,c
  1273   002168  C01C  FFDF         	movff	trundle@i_2165,indf2
  1274   00216C                     
  1275                           ;dc_motor.c: 376:             setMotorPWM(mL);
  1276   00216C  C015  F010         	movff	trundle@mL,setMotorPWM@m
  1277   002170  ECF6  F00A         	call	_setMotorPWM	;wreg free
  1278   002174                     
  1279                           ;dc_motor.c: 377:             setMotorPWM(mR);
  1280   002174  C016  F010         	movff	trundle@mR,setMotorPWM@m
  1281   002178  ECF6  F00A         	call	_setMotorPWM	;wreg free
  1282   00217C                     
  1283                           ;dc_motor.c: 378:             _delay((unsigned long)((5)*(64000000/4000.0)));
  1284   00217C  0E68               	movlw	104
  1285   00217E  6E17               	movwf	??_trundle^0,c
  1286   002180  0EE4               	movlw	228
  1287   002182                     u1757:
  1288   002182  2EE8               	decfsz	wreg,f,c
  1289   002184  D7FE               	bra	u1757
  1290   002186  2E17               	decfsz	??_trundle^0,f,c
  1291   002188  D7FC               	bra	u1757
  1292   00218A  D000               	nop2	
  1293   00218C                     
  1294                           ;dc_motor.c: 379:         }
  1295   00218C  061C               	decf	trundle@i_2165^0,f,c
  1296   00218E  A0D8               	btfss	status,0,c
  1297   002190  061D               	decf	(trundle@i_2165+1)^0,f,c
  1298   002192                     l3325:
  1299   002192  501F               	movf	trundle@trundle_power^0,w,c
  1300   002194  6E17               	movwf	??_trundle^0,c
  1301   002196  6A18               	clrf	(??_trundle+1)^0,c
  1302   002198  5017               	movf	??_trundle^0,w,c
  1303   00219A  5C1C               	subwf	trundle@i_2165^0,w,c
  1304   00219C  501D               	movf	(trundle@i_2165+1)^0,w,c
  1305   00219E  0A80               	xorlw	128
  1306   0021A0  6E19               	movwf	(??_trundle+2)^0,c
  1307   0021A2  5018               	movf	(??_trundle+1)^0,w,c
  1308   0021A4  0A80               	xorlw	128
  1309   0021A6  5819               	subwfb	(??_trundle+2)^0,w,c
  1310   0021A8  B0D8               	btfsc	status,0,c
  1311   0021AA  EFD9  F010         	goto	u1631
  1312   0021AE  EFDB  F010         	goto	u1630
  1313   0021B2                     u1631:
  1314   0021B2  EFAC  F010         	goto	l3315
  1315   0021B6                     u1630:
  1316   0021B6                     l568:
  1317   0021B6  0012               	return		;funcret
  1318   0021B8                     __end_of_trundle:
  1319                           	callstack 0
  1320                           
  1321 ;; *************** function _reverseRoute *****************
  1322 ;; Defined at:
  1323 ;;		line 117 in file "instructions.c"
  1324 ;; Parameters:    Size  Location     Type
  1325 ;;  mL              1   46[COMRAM] PTR struct DC_motor
  1326 ;;		 -> main@motorL(9), 
  1327 ;;  mR              1   47[COMRAM] PTR struct DC_motor
  1328 ;;		 -> main@motorR(9), 
  1329 ;; Auto vars:     Size  Location     Type
  1330 ;;  i               2   60[COMRAM] int 
  1331 ;;  reverseMappi    9   49[COMRAM] unsigned char [9]
  1332 ;;  last_increme    2   58[COMRAM] int 
  1333 ;; Return value:  Size  Location     Type
  1334 ;;                  1    wreg      void 
  1335 ;; Registers used:
  1336 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1337 ;; Tracked objects:
  1338 ;;		On entry : 0/0
  1339 ;;		On exit  : 0/0
  1340 ;;		Unchanged: 0/0
  1341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1342 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1343 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1344 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1345 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1346 ;;Total ram usage:       16 bytes
  1347 ;; Hardware stack levels used: 1
  1348 ;; Hardware stack levels required when called: 10
  1349 ;; This function calls:
  1350 ;;		_executeInstruction
  1351 ;;		_stop
  1352 ;;		_timed_trundle
  1353 ;;		_turn180
  1354 ;; This function is called by:
  1355 ;;		_main
  1356 ;; This function uses a non-reentrant model
  1357 ;;
  1358                           
  1359                           	psect	text2
  1360   0021B8                     __ptext2:
  1361                           	callstack 0
  1362   0021B8                     _reverseRoute:
  1363                           	callstack 20
  1364   0021B8                     
  1365                           ;instructions.c: 119:     int last_increments = increment;
  1366   0021B8  C088  F03B         	movff	_increment,reverseRoute@last_increments
  1367   0021BC  C089  F03C         	movff	_increment+1,reverseRoute@last_increments+1
  1368   0021C0                     
  1369                           ;instructions.c: 120:     turn180(mL, mR);
  1370   0021C0  C02F  F01C         	movff	reverseRoute@mL,turn180@mL
  1371   0021C4  C030  F01D         	movff	reverseRoute@mR,turn180@mR
  1372   0021C8  ECA5  F00E         	call	_turn180	;wreg free
  1373                           
  1374                           ;instructions.c: 121:     timed_trundle(mL, mR, last_increments);
  1375   0021CC  C02F  F01C         	movff	reverseRoute@mL,timed_trundle@mL
  1376   0021D0  C030  F01D         	movff	reverseRoute@mR,timed_trundle@mR
  1377   0021D4  C03B  F01E         	movff	reverseRoute@last_increments,timed_trundle@increments
  1378   0021D8  C03C  F01F         	movff	reverseRoute@last_increments+1,timed_trundle@increments+1
  1379   0021DC  ECCE  F008         	call	_timed_trundle	;wreg free
  1380   0021E0                     
  1381                           ;instructions.c: 124:     char reverseMapping[9] = {1, 0, 2, 9, 10, 11, 12, -1, -1};
  1382   0021E0  EE20  F041         	lfsr	2,reverseRoute@F14289
  1383   0021E4  EE10  F032         	lfsr	1,reverseRoute@reverseMapping
  1384   0021E8  0E08               	movlw	8
  1385   0021EA                     u1581:
  1386   0021EA  CFDB FFE3          	movff	plusw2,plusw1
  1387   0021EE  06E8               	decf	wreg,f,c
  1388   0021F0  E2FC               	bc	u1581
  1389   0021F2                     
  1390                           ;instructions.c: 125:     for (int i = instruction_array_index; i >= 0; i--) {
  1391   0021F2  C08B  F03D         	movff	_instruction_array_index,reverseRoute@i
  1392   0021F6  6A3E               	clrf	(reverseRoute@i+1)^0,c
  1393   0021F8                     l3281:
  1394   0021F8  BE3E               	btfsc	(reverseRoute@i+1)^0,7,c
  1395   0021FA  EF03  F011         	goto	u1590
  1396   0021FE  EF01  F011         	goto	u1591
  1397   002202                     u1591:
  1398   002202  EF05  F011         	goto	l3285
  1399   002206                     u1590:
  1400   002206  EF2F  F011         	goto	l3291
  1401   00220A                     l3285:
  1402                           
  1403                           ;instructions.c: 126:         executeInstruction(mL, mR, reverseMapping[instruction_arra
      +                          y[i][0]]);
  1404   00220A  C02F  F02A         	movff	reverseRoute@mL,executeInstruction@mL
  1405   00220E  C030  F02B         	movff	reverseRoute@mR,executeInstruction@mR
  1406   002212  503D               	movf	reverseRoute@i^0,w,c
  1407   002214  0D02               	mullw	2
  1408   002216  50F3               	movf	243,w,c
  1409   002218  0F60               	addlw	low _instruction_array
  1410   00221A  6ED9               	movwf	fsr2l,c
  1411   00221C  6ADA               	clrf	fsr2h,c
  1412   00221E  50DF               	movf	indf2,w,c
  1413   002220  6E31               	movwf	??_reverseRoute^0,c
  1414   002222  5031               	movf	??_reverseRoute^0,w,c
  1415   002224  0F32               	addlw	low reverseRoute@reverseMapping
  1416   002226  6ED9               	movwf	fsr2l,c
  1417   002228  6ADA               	clrf	fsr2h,c
  1418   00222A  50DF               	movf	indf2,w,c
  1419   00222C  6E2C               	movwf	executeInstruction@colourCode^0,c
  1420   00222E  EC4A  F00A         	call	_executeInstruction	;wreg free
  1421                           
  1422                           ;instructions.c: 127:         timed_trundle(mL, mR, instruction_array[i][1]);
  1423   002232  C02F  F01C         	movff	reverseRoute@mL,timed_trundle@mL
  1424   002236  C030  F01D         	movff	reverseRoute@mR,timed_trundle@mR
  1425   00223A  503D               	movf	reverseRoute@i^0,w,c
  1426   00223C  0D02               	mullw	2
  1427   00223E  50F3               	movf	243,w,c
  1428   002240  0F61               	addlw	low (_instruction_array+1)
  1429   002242  6ED9               	movwf	fsr2l,c
  1430   002244  6ADA               	clrf	fsr2h,c
  1431   002246  50DF               	movf	indf2,w,c
  1432   002248  6E31               	movwf	??_reverseRoute^0,c
  1433   00224A  5031               	movf	??_reverseRoute^0,w,c
  1434   00224C  6E1E               	movwf	timed_trundle@increments^0,c
  1435   00224E  6A1F               	clrf	(timed_trundle@increments+1)^0,c
  1436   002250  ECCE  F008         	call	_timed_trundle	;wreg free
  1437   002254                     
  1438                           ;instructions.c: 128:     }
  1439   002254  063D               	decf	reverseRoute@i^0,f,c
  1440   002256  A0D8               	btfss	status,0,c
  1441   002258  063E               	decf	(reverseRoute@i+1)^0,f,c
  1442   00225A  EFFC  F010         	goto	l3281
  1443   00225E                     l3291:
  1444                           
  1445                           ;instructions.c: 129:     stop(mL, mR);
  1446   00225E  C02F  F015         	movff	reverseRoute@mL,stop@mL
  1447   002262  C030  F016         	movff	reverseRoute@mR,stop@mR
  1448   002266  ECAA  F012         	call	_stop	;wreg free
  1449   00226A                     
  1450                           ;instructions.c: 130:     instruction_array_index = 0;
  1451   00226A  0E00               	movlw	0
  1452   00226C  0100               	movlb	0	; () banked
  1453   00226E  6F8B               	movwf	_instruction_array_index& (0+255),b
  1454   002270                     l408:
  1455   002270  B48E               	btfsc	142,2,c	;volatile
  1456   002272  EF3D  F011         	goto	u1601
  1457   002276  EF3F  F011         	goto	u1600
  1458   00227A                     u1601:
  1459   00227A  EF38  F011         	goto	l408
  1460   00227E                     u1600:
  1461   00227E  0012               	return		;funcret
  1462   002280                     __end_of_reverseRoute:
  1463                           	callstack 0
  1464                           
  1465 ;; *************** function _timed_trundle *****************
  1466 ;; Defined at:
  1467 ;;		line 419 in file "dc_motor.c"
  1468 ;; Parameters:    Size  Location     Type
  1469 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  1470 ;;		 -> main@motorL(9), 
  1471 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  1472 ;;		 -> main@motorR(9), 
  1473 ;;  increments      2   29[COMRAM] int 
  1474 ;; Auto vars:     Size  Location     Type
  1475 ;;  i               2   36[COMRAM] int 
  1476 ;;  i               2   34[COMRAM] int 
  1477 ;;  trundle_powe    1   39[COMRAM] unsigned char 
  1478 ;;  current_powe    1   38[COMRAM] unsigned char 
  1479 ;; Return value:  Size  Location     Type
  1480 ;;                  1    wreg      void 
  1481 ;; Registers used:
  1482 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1483 ;; Tracked objects:
  1484 ;;		On entry : 0/0
  1485 ;;		On exit  : 0/0
  1486 ;;		Unchanged: 0/0
  1487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1488 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1489 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1490 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1491 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1492 ;;Total ram usage:       13 bytes
  1493 ;; Hardware stack levels used: 1
  1494 ;; Hardware stack levels required when called: 7
  1495 ;; This function calls:
  1496 ;;		_setMotorPWM
  1497 ;;		_stop
  1498 ;; This function is called by:
  1499 ;;		_reverseRoute
  1500 ;; This function uses a non-reentrant model
  1501 ;;
  1502                           
  1503                           	psect	text3
  1504   00119C                     __ptext3:
  1505                           	callstack 0
  1506   00119C                     _timed_trundle:
  1507                           	callstack 22
  1508   00119C                     
  1509                           ;dc_motor.c: 420:     if (mL->power != 0 || mR->power != 0) {
  1510   00119C  501C               	movf	timed_trundle@mL^0,w,c
  1511   00119E  6ED9               	movwf	fsr2l,c
  1512   0011A0  6ADA               	clrf	fsr2h,c
  1513   0011A2  50DF               	movf	indf2,w,c
  1514   0011A4  A4D8               	btfss	status,2,c
  1515   0011A6  EFD7  F008         	goto	u1311
  1516   0011AA  EFD9  F008         	goto	u1310
  1517   0011AE                     u1311:
  1518   0011AE  EFE4  F008         	goto	l2999
  1519   0011B2                     u1310:
  1520   0011B2  501D               	movf	timed_trundle@mR^0,w,c
  1521   0011B4  6ED9               	movwf	fsr2l,c
  1522   0011B6  6ADA               	clrf	fsr2h,c
  1523   0011B8  50DF               	movf	indf2,w,c
  1524   0011BA  B4D8               	btfsc	status,2,c
  1525   0011BC  EFE2  F008         	goto	u1321
  1526   0011C0  EFE4  F008         	goto	u1320
  1527   0011C4                     u1321:
  1528   0011C4  EFEA  F008         	goto	l3001
  1529   0011C8                     u1320:
  1530   0011C8                     l2999:
  1531                           
  1532                           ;dc_motor.c: 421:         stop(mL, mR);
  1533   0011C8  C01C  F015         	movff	timed_trundle@mL,stop@mL
  1534   0011CC  C01D  F016         	movff	timed_trundle@mR,stop@mR
  1535   0011D0  ECAA  F012         	call	_stop	;wreg free
  1536   0011D4                     l3001:
  1537                           
  1538                           ;dc_motor.c: 423:     increment = 0;
  1539   0011D4  0E00               	movlw	0
  1540   0011D6  0100               	movlb	0	; () banked
  1541   0011D8  6F89               	movwf	(_increment+1)& (0+255),b
  1542   0011DA  0E00               	movlw	0
  1543   0011DC  6F88               	movwf	_increment& (0+255),b
  1544   0011DE                     
  1545                           ; BSR set to: 0
  1546                           ;dc_motor.c: 425:     mL->direction = 1;
  1547   0011DE  501C               	movf	timed_trundle@mL^0,w,c
  1548   0011E0  6ED9               	movwf	fsr2l,c
  1549   0011E2  6ADA               	clrf	fsr2h,c
  1550   0011E4  0E01               	movlw	1
  1551   0011E6  26D9               	addwf	fsr2l,f,c
  1552   0011E8  0E01               	movlw	1
  1553   0011EA  6EDF               	movwf	indf2,c
  1554   0011EC                     
  1555                           ; BSR set to: 0
  1556                           ;dc_motor.c: 426:     mR->direction = 1;
  1557   0011EC  501D               	movf	timed_trundle@mR^0,w,c
  1558   0011EE  6ED9               	movwf	fsr2l,c
  1559   0011F0  6ADA               	clrf	fsr2h,c
  1560   0011F2  0E01               	movlw	1
  1561   0011F4  26D9               	addwf	fsr2l,f,c
  1562   0011F6  0E01               	movlw	1
  1563   0011F8  6EDF               	movwf	indf2,c
  1564   0011FA                     
  1565                           ; BSR set to: 0
  1566                           ;dc_motor.c: 428:     char current_power = mL->power;
  1567   0011FA  501C               	movf	timed_trundle@mL^0,w,c
  1568   0011FC  6ED9               	movwf	fsr2l,c
  1569   0011FE  6ADA               	clrf	fsr2h,c
  1570   001200  50DF               	movf	indf2,w,c
  1571   001202  6E27               	movwf	timed_trundle@current_power^0,c
  1572   001204                     
  1573                           ; BSR set to: 0
  1574                           ;dc_motor.c: 429:     char trundle_power = 10;
  1575   001204  0E0A               	movlw	10
  1576   001206  6E28               	movwf	timed_trundle@trundle_power^0,c
  1577   001208                     
  1578                           ; BSR set to: 0
  1579                           ;dc_motor.c: 431:     if (trundle_power > current_power) {
  1580   001208  0E0A               	movlw	10
  1581   00120A  6027               	cpfslt	timed_trundle@current_power^0,c
  1582   00120C  EF0A  F009         	goto	u1331
  1583   001210  EF0C  F009         	goto	u1330
  1584   001214                     u1331:
  1585   001214  EF41  F009         	goto	l591
  1586   001218                     u1330:
  1587   001218                     
  1588                           ; BSR set to: 0
  1589                           ;dc_motor.c: 432:         for (int i=current_power; i<= trundle_power; i++) {
  1590   001218  C027  F023         	movff	timed_trundle@current_power,timed_trundle@i
  1591   00121C  6A24               	clrf	(timed_trundle@i+1)^0,c
  1592   00121E  EF2D  F009         	goto	l3025
  1593   001222                     l3015:
  1594                           
  1595                           ;dc_motor.c: 433:             mL->power = i;
  1596   001222  501C               	movf	timed_trundle@mL^0,w,c
  1597   001224  6ED9               	movwf	fsr2l,c
  1598   001226  6ADA               	clrf	fsr2h,c
  1599   001228  C023  FFDF         	movff	timed_trundle@i,indf2
  1600                           
  1601                           ;dc_motor.c: 434:             mR->power = i;
  1602   00122C  501D               	movf	timed_trundle@mR^0,w,c
  1603   00122E  6ED9               	movwf	fsr2l,c
  1604   001230  6ADA               	clrf	fsr2h,c
  1605   001232  C023  FFDF         	movff	timed_trundle@i,indf2
  1606   001236                     
  1607                           ;dc_motor.c: 435:             setMotorPWM(mL);
  1608   001236  C01C  F010         	movff	timed_trundle@mL,setMotorPWM@m
  1609   00123A  ECF6  F00A         	call	_setMotorPWM	;wreg free
  1610   00123E                     
  1611                           ;dc_motor.c: 436:             setMotorPWM(mR);
  1612   00123E  C01D  F010         	movff	timed_trundle@mR,setMotorPWM@m
  1613   001242  ECF6  F00A         	call	_setMotorPWM	;wreg free
  1614   001246                     
  1615                           ;dc_motor.c: 437:             _delay((unsigned long)((5)*(64000000/4000.0)));
  1616   001246  0E68               	movlw	104
  1617   001248  6E20               	movwf	??_timed_trundle^0,c
  1618   00124A  0EE4               	movlw	228
  1619   00124C                     u1767:
  1620   00124C  2EE8               	decfsz	wreg,f,c
  1621   00124E  D7FE               	bra	u1767
  1622   001250  2E20               	decfsz	??_timed_trundle^0,f,c
  1623   001252  D7FC               	bra	u1767
  1624   001254  D000               	nop2	
  1625   001256                     
  1626                           ;dc_motor.c: 438:         }
  1627   001256  4A23               	infsnz	timed_trundle@i^0,f,c
  1628   001258  2A24               	incf	(timed_trundle@i+1)^0,f,c
  1629   00125A                     l3025:
  1630   00125A  5028               	movf	timed_trundle@trundle_power^0,w,c
  1631   00125C  6E20               	movwf	??_timed_trundle^0,c
  1632   00125E  6A21               	clrf	(??_timed_trundle+1)^0,c
  1633   001260  5023               	movf	timed_trundle@i^0,w,c
  1634   001262  5C20               	subwf	??_timed_trundle^0,w,c
  1635   001264  5021               	movf	(??_timed_trundle+1)^0,w,c
  1636   001266  0A80               	xorlw	128
  1637   001268  6E22               	movwf	(??_timed_trundle+2)^0,c
  1638   00126A  5024               	movf	(timed_trundle@i+1)^0,w,c
  1639   00126C  0A80               	xorlw	128
  1640   00126E  5822               	subwfb	(??_timed_trundle+2)^0,w,c
  1641   001270  B0D8               	btfsc	status,0,c
  1642   001272  EF3D  F009         	goto	u1341
  1643   001276  EF3F  F009         	goto	u1340
  1644   00127A                     u1341:
  1645   00127A  EF11  F009         	goto	l3015
  1646   00127E                     u1340:
  1647   00127E  EF75  F009         	goto	l3039
  1648   001282                     l591:
  1649                           
  1650                           ; BSR set to: 0
  1651                           ;dc_motor.c: 441:         for (int i=current_power; i>= trundle_power; i--) {
  1652   001282  C027  F025         	movff	timed_trundle@current_power,timed_trundle@i_2206
  1653   001286  6A26               	clrf	(timed_trundle@i_2206+1)^0,c
  1654   001288  EF63  F009         	goto	l3037
  1655   00128C                     l3027:
  1656                           
  1657                           ;dc_motor.c: 442:             mL->power = i;
  1658   00128C  501C               	movf	timed_trundle@mL^0,w,c
  1659   00128E  6ED9               	movwf	fsr2l,c
  1660   001290  6ADA               	clrf	fsr2h,c
  1661   001292  C025  FFDF         	movff	timed_trundle@i_2206,indf2
  1662                           
  1663                           ;dc_motor.c: 443:             mR->power = i;
  1664   001296  501D               	movf	timed_trundle@mR^0,w,c
  1665   001298  6ED9               	movwf	fsr2l,c
  1666   00129A  6ADA               	clrf	fsr2h,c
  1667   00129C  C025  FFDF         	movff	timed_trundle@i_2206,indf2
  1668   0012A0                     
  1669                           ;dc_motor.c: 444:             setMotorPWM(mL);
  1670   0012A0  C01C  F010         	movff	timed_trundle@mL,setMotorPWM@m
  1671   0012A4  ECF6  F00A         	call	_setMotorPWM	;wreg free
  1672   0012A8                     
  1673                           ;dc_motor.c: 445:             setMotorPWM(mR);
  1674   0012A8  C01D  F010         	movff	timed_trundle@mR,setMotorPWM@m
  1675   0012AC  ECF6  F00A         	call	_setMotorPWM	;wreg free
  1676   0012B0                     
  1677                           ;dc_motor.c: 446:             _delay((unsigned long)((5)*(64000000/4000.0)));
  1678   0012B0  0E68               	movlw	104
  1679   0012B2  6E20               	movwf	??_timed_trundle^0,c
  1680   0012B4  0EE4               	movlw	228
  1681   0012B6                     u1777:
  1682   0012B6  2EE8               	decfsz	wreg,f,c
  1683   0012B8  D7FE               	bra	u1777
  1684   0012BA  2E20               	decfsz	??_timed_trundle^0,f,c
  1685   0012BC  D7FC               	bra	u1777
  1686   0012BE  D000               	nop2	
  1687   0012C0                     
  1688                           ;dc_motor.c: 447:         }
  1689   0012C0  0625               	decf	timed_trundle@i_2206^0,f,c
  1690   0012C2  A0D8               	btfss	status,0,c
  1691   0012C4  0626               	decf	(timed_trundle@i_2206+1)^0,f,c
  1692   0012C6                     l3037:
  1693   0012C6  5028               	movf	timed_trundle@trundle_power^0,w,c
  1694   0012C8  6E20               	movwf	??_timed_trundle^0,c
  1695   0012CA  6A21               	clrf	(??_timed_trundle+1)^0,c
  1696   0012CC  5020               	movf	??_timed_trundle^0,w,c
  1697   0012CE  5C25               	subwf	timed_trundle@i_2206^0,w,c
  1698   0012D0  5026               	movf	(timed_trundle@i_2206+1)^0,w,c
  1699   0012D2  0A80               	xorlw	128
  1700   0012D4  6E22               	movwf	(??_timed_trundle+2)^0,c
  1701   0012D6  5021               	movf	(??_timed_trundle+1)^0,w,c
  1702   0012D8  0A80               	xorlw	128
  1703   0012DA  5822               	subwfb	(??_timed_trundle+2)^0,w,c
  1704   0012DC  B0D8               	btfsc	status,0,c
  1705   0012DE  EF73  F009         	goto	u1351
  1706   0012E2  EF75  F009         	goto	u1350
  1707   0012E6                     u1351:
  1708   0012E6  EF46  F009         	goto	l3027
  1709   0012EA                     u1350:
  1710   0012EA                     l3039:
  1711   0012EA  501E               	movf	timed_trundle@increments^0,w,c
  1712   0012EC  0100               	movlb	0	; () banked
  1713   0012EE  5D88               	subwf	_increment& (0+255),w,b
  1714   0012F0  5189               	movf	(_increment+1)& (0+255),w,b
  1715   0012F2  0A80               	xorlw	128
  1716   0012F4  6E20               	movwf	??_timed_trundle^0,c
  1717   0012F6  501F               	movf	(timed_trundle@increments+1)^0,w,c
  1718   0012F8  0A80               	xorlw	128
  1719   0012FA  5820               	subwfb	??_timed_trundle^0,w,c
  1720   0012FC  A0D8               	btfss	status,0,c
  1721   0012FE  EF83  F009         	goto	u1361
  1722   001302  EF85  F009         	goto	u1360
  1723   001306                     u1361:
  1724   001306  EF75  F009         	goto	l3039
  1725   00130A                     u1360:
  1726   00130A                     
  1727                           ; BSR set to: 0
  1728                           ;dc_motor.c: 451:     stop(mL, mR);
  1729   00130A  C01C  F015         	movff	timed_trundle@mL,stop@mL
  1730   00130E  C01D  F016         	movff	timed_trundle@mR,stop@mR
  1731   001312  ECAA  F012         	call	_stop	;wreg free
  1732   001316  0012               	return		;funcret
  1733   001318                     __end_of_timed_trundle:
  1734                           	callstack 0
  1735                           
  1736 ;; *************** function _executeInstruction *****************
  1737 ;; Defined at:
  1738 ;;		line 8 in file "instructions.c"
  1739 ;; Parameters:    Size  Location     Type
  1740 ;;  mL              1   41[COMRAM] PTR struct DC_motor
  1741 ;;		 -> main@motorL(9), 
  1742 ;;  mR              1   42[COMRAM] PTR struct DC_motor
  1743 ;;		 -> main@motorR(9), 
  1744 ;;  colourCode      1   43[COMRAM] unsigned char 
  1745 ;; Auto vars:     Size  Location     Type
  1746 ;;		None
  1747 ;; Return value:  Size  Location     Type
  1748 ;;                  1    wreg      void 
  1749 ;; Registers used:
  1750 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1751 ;; Tracked objects:
  1752 ;;		On entry : 0/0
  1753 ;;		On exit  : 0/0
  1754 ;;		Unchanged: 0/0
  1755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1756 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1757 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1758 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1759 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1760 ;;Total ram usage:        5 bytes
  1761 ;; Hardware stack levels used: 1
  1762 ;; Hardware stack levels required when called: 9
  1763 ;; This function calls:
  1764 ;;		_Black
  1765 ;;		_Blue
  1766 ;;		_Green
  1767 ;;		_LightBlue
  1768 ;;		_Orange
  1769 ;;		_Pink
  1770 ;;		_Red
  1771 ;;		_White
  1772 ;;		_Yellow
  1773 ;;		_reverseLightBlue
  1774 ;;		_reverseOrange
  1775 ;;		_reversePink
  1776 ;;		_reverseYellow
  1777 ;; This function is called by:
  1778 ;;		_main
  1779 ;;		_reverseRoute
  1780 ;; This function uses a non-reentrant model
  1781 ;;
  1782                           
  1783                           	psect	text4
  1784   001494                     __ptext4:
  1785                           	callstack 0
  1786   001494                     _executeInstruction:
  1787                           	callstack 20
  1788   001494                     
  1789                           ;instructions.c: 9:     switch (colourCode) {
  1790   001494  EFB4  F00A         	goto	l2987
  1791   001498                     l2959:
  1792                           
  1793                           ;instructions.c: 11:             Red(mL, mR);
  1794   001498  C02A  F026         	movff	executeInstruction@mL,Red@mL
  1795   00149C  C02B  F027         	movff	executeInstruction@mR,Red@mR
  1796   0014A0  ECF4  F014         	call	_Red	;wreg free
  1797                           
  1798                           ;instructions.c: 12:             break;
  1799   0014A4  EFF5  F00A         	goto	l362
  1800   0014A8                     l2961:
  1801                           
  1802                           ;instructions.c: 14:             Green(mL, mR);
  1803   0014A8  C02A  F027         	movff	executeInstruction@mL,Green@mL
  1804   0014AC  C02B  F028         	movff	executeInstruction@mR,Green@mR
  1805   0014B0  ECDD  F014         	call	_Green	;wreg free
  1806                           
  1807                           ;instructions.c: 15:             break;
  1808   0014B4  EFF5  F00A         	goto	l362
  1809   0014B8                     l2963:
  1810                           
  1811                           ;instructions.c: 17:             Blue(mL, mR);
  1812   0014B8  C02A  F026         	movff	executeInstruction@mL,Blue@mL
  1813   0014BC  C02B  F027         	movff	executeInstruction@mR,Blue@mR
  1814   0014C0  EC09  F015         	call	_Blue	;wreg free
  1815                           
  1816                           ;instructions.c: 18:             break;
  1817   0014C4  EFF5  F00A         	goto	l362
  1818   0014C8                     l2965:
  1819                           
  1820                           ;instructions.c: 20:             Yellow(mL, mR);
  1821   0014C8  C02A  F028         	movff	executeInstruction@mL,Yellow@mL
  1822   0014CC  C02B  F029         	movff	executeInstruction@mR,Yellow@mR
  1823   0014D0  EC8C  F014         	call	_Yellow	;wreg free
  1824                           
  1825                           ;instructions.c: 21:             break;
  1826   0014D4  EFF5  F00A         	goto	l362
  1827   0014D8                     l2967:
  1828                           
  1829                           ;instructions.c: 23:             Pink(mL, mR);
  1830   0014D8  C02A  F028         	movff	executeInstruction@mL,Pink@mL
  1831   0014DC  C02B  F029         	movff	executeInstruction@mR,Pink@mR
  1832   0014E0  EC66  F014         	call	_Pink	;wreg free
  1833                           
  1834                           ;instructions.c: 24:             break;
  1835   0014E4  EFF5  F00A         	goto	l362
  1836   0014E8                     l2969:
  1837                           
  1838                           ;instructions.c: 26:             Orange(mL, mR);
  1839   0014E8  C02A  F026         	movff	executeInstruction@mL,Orange@mL
  1840   0014EC  C02B  F027         	movff	executeInstruction@mR,Orange@mR
  1841   0014F0  ECFB  F014         	call	_Orange	;wreg free
  1842                           
  1843                           ;instructions.c: 27:             break;
  1844   0014F4  EFF5  F00A         	goto	l362
  1845   0014F8                     l2971:
  1846                           
  1847                           ;instructions.c: 29:             LightBlue(mL, mR);
  1848   0014F8  C02A  F026         	movff	executeInstruction@mL,LightBlue@mL
  1849   0014FC  C02B  F027         	movff	executeInstruction@mR,LightBlue@mR
  1850   001500  EC02  F015         	call	_LightBlue	;wreg free
  1851                           
  1852                           ;instructions.c: 30:             break;
  1853   001504  EFF5  F00A         	goto	l362
  1854   001508                     l2973:
  1855                           
  1856                           ;instructions.c: 32:             White(mL, mR);
  1857   001508  C02A  F003         	movff	executeInstruction@mL,White@mL
  1858   00150C  C02B  F004         	movff	executeInstruction@mR,White@mR
  1859   001510  EC4F  F015         	call	_White	;wreg free
  1860                           
  1861                           ;instructions.c: 33:             break;
  1862   001514  EFF5  F00A         	goto	l362
  1863   001518                     l2975:
  1864                           
  1865                           ;instructions.c: 35:             Black(mL, mR);
  1866   001518  C02A  F003         	movff	executeInstruction@mL,Black@mL
  1867   00151C  C02B  F004         	movff	executeInstruction@mR,Black@mR
  1868   001520  EC53  F015         	call	_Black	;wreg free
  1869                           
  1870                           ;instructions.c: 36:             break;
  1871   001524  EFF5  F00A         	goto	l362
  1872   001528                     l2977:
  1873                           
  1874                           ;instructions.c: 38:             reverseYellow(mL, mR);
  1875   001528  C02A  F028         	movff	executeInstruction@mL,reverseYellow@mL
  1876   00152C  C02B  F029         	movff	executeInstruction@mR,reverseYellow@mR
  1877   001530  ECE4  F013         	call	_reverseYellow	;wreg free
  1878                           
  1879                           ;instructions.c: 39:             break;
  1880   001534  EFF5  F00A         	goto	l362
  1881   001538                     l2979:
  1882                           
  1883                           ;instructions.c: 41:             reversePink(mL, mR);
  1884   001538  C02A  F028         	movff	executeInstruction@mL,reversePink@mL
  1885   00153C  C02B  F029         	movff	executeInstruction@mR,reversePink@mR
  1886   001540  ECFD  F013         	call	_reversePink	;wreg free
  1887                           
  1888                           ;instructions.c: 42:             break;
  1889   001544  EFF5  F00A         	goto	l362
  1890   001548                     l2981:
  1891                           
  1892                           ;instructions.c: 44:             reverseOrange(mL, mR);
  1893   001548  C02A  F026         	movff	executeInstruction@mL,reverseOrange@mL
  1894   00154C  C02B  F027         	movff	executeInstruction@mR,reverseOrange@mR
  1895   001550  ECE6  F014         	call	_reverseOrange	;wreg free
  1896                           
  1897                           ;instructions.c: 45:             break;
  1898   001554  EFF5  F00A         	goto	l362
  1899   001558                     l2983:
  1900                           
  1901                           ;instructions.c: 47:             reverseLightBlue(mL, mR);
  1902   001558  C02A  F026         	movff	executeInstruction@mL,reverseLightBlue@mL
  1903   00155C  C02B  F027         	movff	executeInstruction@mR,reverseLightBlue@mR
  1904   001560  ECED  F014         	call	_reverseLightBlue	;wreg free
  1905                           
  1906                           ;instructions.c: 48:             break;
  1907   001564  EFF5  F00A         	goto	l362
  1908   001568                     l2987:
  1909   001568  502C               	movf	executeInstruction@colourCode^0,w,c
  1910   00156A  6E2D               	movwf	??_executeInstruction^0,c
  1911   00156C  6A2E               	clrf	(??_executeInstruction+1)^0,c
  1912                           
  1913                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1914                           ; Switch size 1, requested type "simple"
  1915                           ; Number of cases is 1, Range of values is 0 to 0
  1916                           ; switch strategies available:
  1917                           ; Name         Instructions Cycles
  1918                           ; simple_byte            4     3 (average)
  1919                           ;	Chosen strategy is simple_byte
  1920   00156E  502E               	movf	(??_executeInstruction+1)^0,w,c
  1921   001570  0A00               	xorlw	0	; case 0
  1922   001572  B4D8               	btfsc	status,2,c
  1923   001574  EFBE  F00A         	goto	l3511
  1924   001578  EFF5  F00A         	goto	l362
  1925   00157C                     l3511:
  1926                           
  1927                           ; Switch size 1, requested type "simple"
  1928                           ; Number of cases is 13, Range of values is 0 to 12
  1929                           ; switch strategies available:
  1930                           ; Name         Instructions Cycles
  1931                           ; simple_byte           40    21 (average)
  1932                           ;	Chosen strategy is simple_byte
  1933   00157C  502D               	movf	??_executeInstruction^0,w,c
  1934   00157E  0A00               	xorlw	0	; case 0
  1935   001580  B4D8               	btfsc	status,2,c
  1936   001582  EF4C  F00A         	goto	l2959
  1937   001586  0A01               	xorlw	1	; case 1
  1938   001588  B4D8               	btfsc	status,2,c
  1939   00158A  EF54  F00A         	goto	l2961
  1940   00158E  0A03               	xorlw	3	; case 2
  1941   001590  B4D8               	btfsc	status,2,c
  1942   001592  EF5C  F00A         	goto	l2963
  1943   001596  0A01               	xorlw	1	; case 3
  1944   001598  B4D8               	btfsc	status,2,c
  1945   00159A  EF64  F00A         	goto	l2965
  1946   00159E  0A07               	xorlw	7	; case 4
  1947   0015A0  B4D8               	btfsc	status,2,c
  1948   0015A2  EF6C  F00A         	goto	l2967
  1949   0015A6  0A01               	xorlw	1	; case 5
  1950   0015A8  B4D8               	btfsc	status,2,c
  1951   0015AA  EF74  F00A         	goto	l2969
  1952   0015AE  0A03               	xorlw	3	; case 6
  1953   0015B0  B4D8               	btfsc	status,2,c
  1954   0015B2  EF7C  F00A         	goto	l2971
  1955   0015B6  0A01               	xorlw	1	; case 7
  1956   0015B8  B4D8               	btfsc	status,2,c
  1957   0015BA  EF84  F00A         	goto	l2973
  1958   0015BE  0A0F               	xorlw	15	; case 8
  1959   0015C0  B4D8               	btfsc	status,2,c
  1960   0015C2  EF8C  F00A         	goto	l2975
  1961   0015C6  0A01               	xorlw	1	; case 9
  1962   0015C8  B4D8               	btfsc	status,2,c
  1963   0015CA  EF94  F00A         	goto	l2977
  1964   0015CE  0A03               	xorlw	3	; case 10
  1965   0015D0  B4D8               	btfsc	status,2,c
  1966   0015D2  EF9C  F00A         	goto	l2979
  1967   0015D6  0A01               	xorlw	1	; case 11
  1968   0015D8  B4D8               	btfsc	status,2,c
  1969   0015DA  EFA4  F00A         	goto	l2981
  1970   0015DE  0A07               	xorlw	7	; case 12
  1971   0015E0  B4D8               	btfsc	status,2,c
  1972   0015E2  EFAC  F00A         	goto	l2983
  1973   0015E6  EFF5  F00A         	goto	l362
  1974   0015EA                     l362:
  1975   0015EA  0012               	return		;funcret
  1976   0015EC                     __end_of_executeInstruction:
  1977                           	callstack 0
  1978                           
  1979 ;; *************** function _reverseYellow *****************
  1980 ;; Defined at:
  1981 ;;		line 94 in file "instructions.c"
  1982 ;; Parameters:    Size  Location     Type
  1983 ;;  mL              1   39[COMRAM] PTR struct DC_motor
  1984 ;;		 -> main@motorL(9), 
  1985 ;;  mR              1   40[COMRAM] PTR struct DC_motor
  1986 ;;		 -> main@motorR(9), 
  1987 ;; Auto vars:     Size  Location     Type
  1988 ;;		None
  1989 ;; Return value:  Size  Location     Type
  1990 ;;                  1    wreg      void 
  1991 ;; Registers used:
  1992 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1993 ;; Tracked objects:
  1994 ;;		On entry : 0/0
  1995 ;;		On exit  : 0/0
  1996 ;;		Unchanged: 0/0
  1997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1998 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1999 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2000 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2001 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2002 ;;Total ram usage:        2 bytes
  2003 ;; Hardware stack levels used: 1
  2004 ;; Hardware stack levels required when called: 8
  2005 ;; This function calls:
  2006 ;;		_trundleSquare
  2007 ;;		_turn180
  2008 ;;		_turnLeft
  2009 ;; This function is called by:
  2010 ;;		_executeInstruction
  2011 ;; This function uses a non-reentrant model
  2012 ;;
  2013                           
  2014                           	psect	text5
  2015   0027C8                     __ptext5:
  2016                           	callstack 0
  2017   0027C8                     _reverseYellow:
  2018                           	callstack 20
  2019   0027C8                     
  2020                           ;instructions.c: 95:     turnLeft(mL, mR, turnLeftPower);
  2021   0027C8  C028  F01C         	movff	reverseYellow@mL,turnLeft@mL
  2022   0027CC  C029  F01D         	movff	reverseYellow@mR,turnLeft@mR
  2023   0027D0  C04B  F01E         	movff	_turnLeftPower,turnLeft@power
  2024   0027D4  ECDD  F00C         	call	_turnLeft	;wreg free
  2025   0027D8  C028  F01C         	movff	reverseYellow@mL,trundleSquare@mL
  2026   0027DC  C029  F01D         	movff	reverseYellow@mR,trundleSquare@mR
  2027   0027E0  0E10               	movlw	16
  2028   0027E2  6E1E               	movwf	trundleSquare@square^0,c
  2029   0027E4  0E00               	movlw	0
  2030   0027E6  6E1F               	movwf	trundleSquare@reverse^0,c
  2031   0027E8  EC3C  F00F         	call	_trundleSquare	;wreg free
  2032                           
  2033                           ;instructions.c: 97:     turn180(mL, mR);
  2034   0027EC  C028  F01C         	movff	reverseYellow@mL,turn180@mL
  2035   0027F0  C029  F01D         	movff	reverseYellow@mR,turn180@mR
  2036   0027F4  ECA5  F00E         	call	_turn180	;wreg free
  2037   0027F8  0012               	return		;funcret
  2038   0027FA                     __end_of_reverseYellow:
  2039                           	callstack 0
  2040                           
  2041 ;; *************** function _reversePink *****************
  2042 ;; Defined at:
  2043 ;;		line 100 in file "instructions.c"
  2044 ;; Parameters:    Size  Location     Type
  2045 ;;  mL              1   39[COMRAM] PTR struct DC_motor
  2046 ;;		 -> main@motorL(9), 
  2047 ;;  mR              1   40[COMRAM] PTR struct DC_motor
  2048 ;;		 -> main@motorR(9), 
  2049 ;; Auto vars:     Size  Location     Type
  2050 ;;		None
  2051 ;; Return value:  Size  Location     Type
  2052 ;;                  1    wreg      void 
  2053 ;; Registers used:
  2054 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2055 ;; Tracked objects:
  2056 ;;		On entry : 0/0
  2057 ;;		On exit  : 0/0
  2058 ;;		Unchanged: 0/0
  2059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2060 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2061 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2062 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2063 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2064 ;;Total ram usage:        2 bytes
  2065 ;; Hardware stack levels used: 1
  2066 ;; Hardware stack levels required when called: 8
  2067 ;; This function calls:
  2068 ;;		_trundleSquare
  2069 ;;		_turn180
  2070 ;;		_turnRight
  2071 ;; This function is called by:
  2072 ;;		_executeInstruction
  2073 ;; This function uses a non-reentrant model
  2074 ;;
  2075                           
  2076                           	psect	text6
  2077   0027FA                     __ptext6:
  2078                           	callstack 0
  2079   0027FA                     _reversePink:
  2080                           	callstack 20
  2081   0027FA                     
  2082                           ;instructions.c: 101:     turnRight(mL, mR);
  2083   0027FA  C028  F01C         	movff	reversePink@mL,turnRight@mL
  2084   0027FE  C029  F01D         	movff	reversePink@mR,turnRight@mR
  2085   002802  EC42  F00C         	call	_turnRight	;wreg free
  2086   002806  C028  F01C         	movff	reversePink@mL,trundleSquare@mL
  2087   00280A  C029  F01D         	movff	reversePink@mR,trundleSquare@mR
  2088   00280E  0E10               	movlw	16
  2089   002810  6E1E               	movwf	trundleSquare@square^0,c
  2090   002812  0E00               	movlw	0
  2091   002814  6E1F               	movwf	trundleSquare@reverse^0,c
  2092   002816  EC3C  F00F         	call	_trundleSquare	;wreg free
  2093                           
  2094                           ;instructions.c: 103:     turn180(mL, mR);
  2095   00281A  C028  F01C         	movff	reversePink@mL,turn180@mL
  2096   00281E  C029  F01D         	movff	reversePink@mR,turn180@mR
  2097   002822  ECA5  F00E         	call	_turn180	;wreg free
  2098   002826  0012               	return		;funcret
  2099   002828                     __end_of_reversePink:
  2100                           	callstack 0
  2101                           
  2102 ;; *************** function _reverseOrange *****************
  2103 ;; Defined at:
  2104 ;;		line 107 in file "instructions.c"
  2105 ;; Parameters:    Size  Location     Type
  2106 ;;  mL              1   37[COMRAM] PTR struct DC_motor
  2107 ;;		 -> main@motorL(9), 
  2108 ;;  mR              1   38[COMRAM] PTR struct DC_motor
  2109 ;;		 -> main@motorR(9), 
  2110 ;; Auto vars:     Size  Location     Type
  2111 ;;		None
  2112 ;; Return value:  Size  Location     Type
  2113 ;;                  1    wreg      void 
  2114 ;; Registers used:
  2115 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2116 ;; Tracked objects:
  2117 ;;		On entry : 0/0
  2118 ;;		On exit  : 0/0
  2119 ;;		Unchanged: 0/0
  2120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2121 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2122 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2123 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2124 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2125 ;;Total ram usage:        2 bytes
  2126 ;; Hardware stack levels used: 1
  2127 ;; Hardware stack levels required when called: 8
  2128 ;; This function calls:
  2129 ;;		_turnRight135
  2130 ;; This function is called by:
  2131 ;;		_executeInstruction
  2132 ;; This function uses a non-reentrant model
  2133 ;;
  2134                           
  2135                           	psect	text7
  2136   0029CC                     __ptext7:
  2137                           	callstack 0
  2138   0029CC                     _reverseOrange:
  2139                           	callstack 20
  2140   0029CC                     
  2141                           ;instructions.c: 108:     turnRight135(mL, mR);
  2142   0029CC  C026  F01C         	movff	reverseOrange@mL,turnRight135@mL
  2143   0029D0  C027  F01D         	movff	reverseOrange@mR,turnRight135@mR
  2144   0029D4  EC77  F00D         	call	_turnRight135	;wreg free
  2145   0029D8  0012               	return		;funcret
  2146   0029DA                     __end_of_reverseOrange:
  2147                           	callstack 0
  2148                           
  2149 ;; *************** function _reverseLightBlue *****************
  2150 ;; Defined at:
  2151 ;;		line 111 in file "instructions.c"
  2152 ;; Parameters:    Size  Location     Type
  2153 ;;  mL              1   37[COMRAM] PTR struct DC_motor
  2154 ;;		 -> main@motorL(9), 
  2155 ;;  mR              1   38[COMRAM] PTR struct DC_motor
  2156 ;;		 -> main@motorR(9), 
  2157 ;; Auto vars:     Size  Location     Type
  2158 ;;		None
  2159 ;; Return value:  Size  Location     Type
  2160 ;;                  1    wreg      void 
  2161 ;; Registers used:
  2162 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2163 ;; Tracked objects:
  2164 ;;		On entry : 0/0
  2165 ;;		On exit  : 0/0
  2166 ;;		Unchanged: 0/0
  2167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2168 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2169 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2170 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2171 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2172 ;;Total ram usage:        2 bytes
  2173 ;; Hardware stack levels used: 1
  2174 ;; Hardware stack levels required when called: 8
  2175 ;; This function calls:
  2176 ;;		_turnLeft135
  2177 ;; This function is called by:
  2178 ;;		_executeInstruction
  2179 ;; This function uses a non-reentrant model
  2180 ;;
  2181                           
  2182                           	psect	text8
  2183   0029DA                     __ptext8:
  2184                           	callstack 0
  2185   0029DA                     _reverseLightBlue:
  2186                           	callstack 20
  2187   0029DA                     
  2188                           ;instructions.c: 112:     turnLeft135(mL, mR);
  2189   0029DA  C026  F01C         	movff	reverseLightBlue@mL,turnLeft135@mL
  2190   0029DE  C027  F01D         	movff	reverseLightBlue@mR,turnLeft135@mR
  2191   0029E2  EC0E  F00E         	call	_turnLeft135	;wreg free
  2192   0029E6  0012               	return		;funcret
  2193   0029E8                     __end_of_reverseLightBlue:
  2194                           	callstack 0
  2195                           
  2196 ;; *************** function _Yellow *****************
  2197 ;; Defined at:
  2198 ;;		line 65 in file "instructions.c"
  2199 ;; Parameters:    Size  Location     Type
  2200 ;;  mL              1   39[COMRAM] PTR struct DC_motor
  2201 ;;		 -> main@motorL(9), 
  2202 ;;  mR              1   40[COMRAM] PTR struct DC_motor
  2203 ;;		 -> main@motorR(9), 
  2204 ;; Auto vars:     Size  Location     Type
  2205 ;;		None
  2206 ;; Return value:  Size  Location     Type
  2207 ;;                  1    wreg      void 
  2208 ;; Registers used:
  2209 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2210 ;; Tracked objects:
  2211 ;;		On entry : 0/0
  2212 ;;		On exit  : 0/0
  2213 ;;		Unchanged: 0/0
  2214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2215 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2216 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2217 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2218 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2219 ;;Total ram usage:        2 bytes
  2220 ;; Hardware stack levels used: 1
  2221 ;; Hardware stack levels required when called: 8
  2222 ;; This function calls:
  2223 ;;		_trundleSquare
  2224 ;;		_turnRight
  2225 ;; This function is called by:
  2226 ;;		_executeInstruction
  2227 ;; This function uses a non-reentrant model
  2228 ;;
  2229                           
  2230                           	psect	text9
  2231   002918                     __ptext9:
  2232                           	callstack 0
  2233   002918                     _Yellow:
  2234                           	callstack 20
  2235   002918  C028  F01C         	movff	Yellow@mL,trundleSquare@mL
  2236   00291C  C029  F01D         	movff	Yellow@mR,trundleSquare@mR
  2237   002920  0E10               	movlw	16
  2238   002922  6E1E               	movwf	trundleSquare@square^0,c
  2239   002924  0E01               	movlw	1
  2240   002926  6E1F               	movwf	trundleSquare@reverse^0,c
  2241   002928  EC3C  F00F         	call	_trundleSquare	;wreg free
  2242                           
  2243                           ;instructions.c: 67:     turnRight(mL, mR);
  2244   00292C  C028  F01C         	movff	Yellow@mL,turnRight@mL
  2245   002930  C029  F01D         	movff	Yellow@mR,turnRight@mR
  2246   002934  EC42  F00C         	call	_turnRight	;wreg free
  2247   002938  0012               	return		;funcret
  2248   00293A                     __end_of_Yellow:
  2249                           	callstack 0
  2250                           
  2251 ;; *************** function _White *****************
  2252 ;; Defined at:
  2253 ;;		line 84 in file "instructions.c"
  2254 ;; Parameters:    Size  Location     Type
  2255 ;;  mL              1    2[COMRAM] PTR struct DC_motor
  2256 ;;		 -> main@motorL(9), 
  2257 ;;  mR              1    3[COMRAM] PTR struct DC_motor
  2258 ;;		 -> main@motorR(9), 
  2259 ;; Auto vars:     Size  Location     Type
  2260 ;;		None
  2261 ;; Return value:  Size  Location     Type
  2262 ;;                  1    wreg      void 
  2263 ;; Registers used:
  2264 ;;		wreg, status,2
  2265 ;; Tracked objects:
  2266 ;;		On entry : 0/0
  2267 ;;		On exit  : 0/0
  2268 ;;		Unchanged: 0/0
  2269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2270 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2271 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2272 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2273 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2274 ;;Total ram usage:        2 bytes
  2275 ;; Hardware stack levels used: 1
  2276 ;; Hardware stack levels required when called: 4
  2277 ;; This function calls:
  2278 ;;		Nothing
  2279 ;; This function is called by:
  2280 ;;		_executeInstruction
  2281 ;; This function uses a non-reentrant model
  2282 ;;
  2283                           
  2284                           	psect	text10
  2285   002A9E                     __ptext10:
  2286                           	callstack 0
  2287   002A9E                     _White:
  2288                           	callstack 24
  2289   002A9E                     
  2290                           ;instructions.c: 85:     reverseRouteFlag=1;
  2291   002A9E  0E01               	movlw	1
  2292   002AA0  0100               	movlb	0	; () banked
  2293   002AA2  6F8A               	movwf	_reverseRouteFlag& (0+255),b
  2294   002AA4                     
  2295                           ; BSR set to: 0
  2296   002AA4  0012               	return		;funcret
  2297   002AA6                     __end_of_White:
  2298                           	callstack 0
  2299                           
  2300 ;; *************** function _Red *****************
  2301 ;; Defined at:
  2302 ;;		line 53 in file "instructions.c"
  2303 ;; Parameters:    Size  Location     Type
  2304 ;;  mL              1   37[COMRAM] PTR struct DC_motor
  2305 ;;		 -> main@motorL(9), 
  2306 ;;  mR              1   38[COMRAM] PTR struct DC_motor
  2307 ;;		 -> main@motorR(9), 
  2308 ;; Auto vars:     Size  Location     Type
  2309 ;;		None
  2310 ;; Return value:  Size  Location     Type
  2311 ;;                  1    wreg      void 
  2312 ;; Registers used:
  2313 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2314 ;; Tracked objects:
  2315 ;;		On entry : 0/0
  2316 ;;		On exit  : 0/0
  2317 ;;		Unchanged: 0/0
  2318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2319 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2320 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2321 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2322 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2323 ;;Total ram usage:        2 bytes
  2324 ;; Hardware stack levels used: 1
  2325 ;; Hardware stack levels required when called: 8
  2326 ;; This function calls:
  2327 ;;		_turnRight
  2328 ;; This function is called by:
  2329 ;;		_executeInstruction
  2330 ;; This function uses a non-reentrant model
  2331 ;;
  2332                           
  2333                           	psect	text11
  2334   0029E8                     __ptext11:
  2335                           	callstack 0
  2336   0029E8                     _Red:
  2337                           	callstack 20
  2338   0029E8                     
  2339                           ;instructions.c: 54:     turnRight(mL, mR);
  2340   0029E8  C026  F01C         	movff	Red@mL,turnRight@mL
  2341   0029EC  C027  F01D         	movff	Red@mR,turnRight@mR
  2342   0029F0  EC42  F00C         	call	_turnRight	;wreg free
  2343   0029F4  0012               	return		;funcret
  2344   0029F6                     __end_of_Red:
  2345                           	callstack 0
  2346                           
  2347 ;; *************** function _turnRight *****************
  2348 ;; Defined at:
  2349 ;;		line 170 in file "dc_motor.c"
  2350 ;; Parameters:    Size  Location     Type
  2351 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  2352 ;;		 -> main@motorL(9), 
  2353 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  2354 ;;		 -> main@motorR(9), 
  2355 ;; Auto vars:     Size  Location     Type
  2356 ;;  i               2   35[COMRAM] int 
  2357 ;;  i               2   33[COMRAM] int 
  2358 ;;  maxpower        2   31[COMRAM] int 
  2359 ;; Return value:  Size  Location     Type
  2360 ;;                  1    wreg      void 
  2361 ;; Registers used:
  2362 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2363 ;; Tracked objects:
  2364 ;;		On entry : 0/0
  2365 ;;		On exit  : 0/0
  2366 ;;		Unchanged: 0/0
  2367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2368 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2369 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2370 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2371 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2372 ;;Total ram usage:       10 bytes
  2373 ;; Hardware stack levels used: 1
  2374 ;; Hardware stack levels required when called: 7
  2375 ;; This function calls:
  2376 ;;		_setMotorPWM
  2377 ;;		_stop
  2378 ;; This function is called by:
  2379 ;;		_Red
  2380 ;;		_Yellow
  2381 ;;		_reversePink
  2382 ;; This function uses a non-reentrant model
  2383 ;;
  2384                           
  2385                           	psect	text12
  2386   001884                     __ptext12:
  2387                           	callstack 0
  2388   001884                     _turnRight:
  2389                           	callstack 20
  2390   001884                     
  2391                           ;dc_motor.c: 170: void turnRight(DC_motor *mL, DC_motor *mR);dc_motor.c: 171: {;dc_motor
      +                          .c: 173:     if (mL->power != 0 || mR->power != 0) {
  2392   001884  501C               	movf	turnRight@mL^0,w,c
  2393   001886  6ED9               	movwf	fsr2l,c
  2394   001888  6ADA               	clrf	fsr2h,c
  2395   00188A  50DF               	movf	indf2,w,c
  2396   00188C  A4D8               	btfss	status,2,c
  2397   00188E  EF4B  F00C         	goto	u981
  2398   001892  EF4D  F00C         	goto	u980
  2399   001896                     u981:
  2400   001896  EF58  F00C         	goto	l2531
  2401   00189A                     u980:
  2402   00189A  501D               	movf	turnRight@mR^0,w,c
  2403   00189C  6ED9               	movwf	fsr2l,c
  2404   00189E  6ADA               	clrf	fsr2h,c
  2405   0018A0  50DF               	movf	indf2,w,c
  2406   0018A2  B4D8               	btfsc	status,2,c
  2407   0018A4  EF56  F00C         	goto	u991
  2408   0018A8  EF58  F00C         	goto	u990
  2409   0018AC                     u991:
  2410   0018AC  EF5E  F00C         	goto	l2533
  2411   0018B0                     u990:
  2412   0018B0                     l2531:
  2413                           
  2414                           ;dc_motor.c: 174:         stop(mL, mR);
  2415   0018B0  C01C  F015         	movff	turnRight@mL,stop@mL
  2416   0018B4  C01D  F016         	movff	turnRight@mR,stop@mR
  2417   0018B8  ECAA  F012         	call	_stop	;wreg free
  2418   0018BC                     l2533:
  2419                           
  2420                           ;dc_motor.c: 178:     mL->direction = 1;
  2421   0018BC  501C               	movf	turnRight@mL^0,w,c
  2422   0018BE  6ED9               	movwf	fsr2l,c
  2423   0018C0  6ADA               	clrf	fsr2h,c
  2424   0018C2  0E01               	movlw	1
  2425   0018C4  26D9               	addwf	fsr2l,f,c
  2426   0018C6  0E01               	movlw	1
  2427   0018C8  6EDF               	movwf	indf2,c
  2428   0018CA                     
  2429                           ;dc_motor.c: 179:     mR->direction = 0;
  2430   0018CA  501D               	movf	turnRight@mR^0,w,c
  2431   0018CC  6ED9               	movwf	fsr2l,c
  2432   0018CE  6ADA               	clrf	fsr2h,c
  2433   0018D0  0E01               	movlw	1
  2434   0018D2  26D9               	addwf	fsr2l,f,c
  2435   0018D4  6ADF               	clrf	indf2,c
  2436   0018D6                     
  2437                           ;dc_motor.c: 180:     int maxpower = 28;
  2438   0018D6  0E00               	movlw	0
  2439   0018D8  6E21               	movwf	(turnRight@maxpower+1)^0,c
  2440   0018DA  0E1C               	movlw	28
  2441   0018DC  6E20               	movwf	turnRight@maxpower^0,c
  2442   0018DE                     
  2443                           ;dc_motor.c: 183:     for (int i = 0; i < maxpower; i++) {
  2444   0018DE  0E00               	movlw	0
  2445   0018E0  6E23               	movwf	(turnRight@i+1)^0,c
  2446   0018E2  0E00               	movlw	0
  2447   0018E4  6E22               	movwf	turnRight@i^0,c
  2448   0018E6  EF95  F00C         	goto	l2551
  2449   0018EA                     l2541:
  2450                           
  2451                           ;dc_motor.c: 184:         mL->power = i;
  2452   0018EA  501C               	movf	turnRight@mL^0,w,c
  2453   0018EC  6ED9               	movwf	fsr2l,c
  2454   0018EE  6ADA               	clrf	fsr2h,c
  2455   0018F0  C022  FFDF         	movff	turnRight@i,indf2
  2456                           
  2457                           ;dc_motor.c: 185:         mR->power = i;
  2458   0018F4  501D               	movf	turnRight@mR^0,w,c
  2459   0018F6  6ED9               	movwf	fsr2l,c
  2460   0018F8  6ADA               	clrf	fsr2h,c
  2461   0018FA  C022  FFDF         	movff	turnRight@i,indf2
  2462   0018FE                     
  2463                           ;dc_motor.c: 186:         setMotorPWM(mL);
  2464   0018FE  C01C  F010         	movff	turnRight@mL,setMotorPWM@m
  2465   001902  ECF6  F00A         	call	_setMotorPWM	;wreg free
  2466   001906                     
  2467                           ;dc_motor.c: 187:         setMotorPWM(mR);
  2468   001906  C01D  F010         	movff	turnRight@mR,setMotorPWM@m
  2469   00190A  ECF6  F00A         	call	_setMotorPWM	;wreg free
  2470   00190E                     
  2471                           ;dc_motor.c: 188:         _delay((unsigned long)((15)*(64000000/4000.0)));
  2472   00190E  0E02               	movlw	2
  2473   001910  6E1F               	movwf	(??_turnRight+1)^0,c
  2474   001912  0E38               	movlw	56
  2475   001914  6E1E               	movwf	??_turnRight^0,c
  2476   001916  0EAD               	movlw	173
  2477   001918                     u1787:
  2478   001918  2EE8               	decfsz	wreg,f,c
  2479   00191A  D7FE               	bra	u1787
  2480   00191C  2E1E               	decfsz	??_turnRight^0,f,c
  2481   00191E  D7FC               	bra	u1787
  2482   001920  2E1F               	decfsz	(??_turnRight+1)^0,f,c
  2483   001922  D7FA               	bra	u1787
  2484   001924  0000               	nop	
  2485   001926                     
  2486                           ;dc_motor.c: 190:     }
  2487   001926  4A22               	infsnz	turnRight@i^0,f,c
  2488   001928  2A23               	incf	(turnRight@i+1)^0,f,c
  2489   00192A                     l2551:
  2490   00192A  5020               	movf	turnRight@maxpower^0,w,c
  2491   00192C  5C22               	subwf	turnRight@i^0,w,c
  2492   00192E  5023               	movf	(turnRight@i+1)^0,w,c
  2493   001930  0A80               	xorlw	128
  2494   001932  6E1E               	movwf	??_turnRight^0,c
  2495   001934  5021               	movf	(turnRight@maxpower+1)^0,w,c
  2496   001936  0A80               	xorlw	128
  2497   001938  581E               	subwfb	??_turnRight^0,w,c
  2498   00193A  A0D8               	btfss	status,0,c
  2499   00193C  EFA2  F00C         	goto	u1001
  2500   001940  EFA4  F00C         	goto	u1000
  2501   001944                     u1001:
  2502   001944  EF75  F00C         	goto	l2541
  2503   001948                     u1000:
  2504   001948                     
  2505                           ;dc_motor.c: 192:     _delay((unsigned long)((250)*(64000000/4000.0)));
  2506   001948  0E15               	movlw	21
  2507   00194A  6E1F               	movwf	(??_turnRight+1)^0,c
  2508   00194C  0E4B               	movlw	75
  2509   00194E  6E1E               	movwf	??_turnRight^0,c
  2510   001950  0EBE               	movlw	190
  2511   001952                     u1797:
  2512   001952  2EE8               	decfsz	wreg,f,c
  2513   001954  D7FE               	bra	u1797
  2514   001956  2E1E               	decfsz	??_turnRight^0,f,c
  2515   001958  D7FC               	bra	u1797
  2516   00195A  2E1F               	decfsz	(??_turnRight+1)^0,f,c
  2517   00195C  D7FA               	bra	u1797
  2518   00195E  D000               	nop2	
  2519   001960                     
  2520                           ;dc_motor.c: 195:     for (int i = maxpower; i >= 0; i--) {
  2521   001960  C020  F024         	movff	turnRight@maxpower,turnRight@i_2075
  2522   001964  C021  F025         	movff	turnRight@maxpower+1,turnRight@i_2075+1
  2523   001968                     l2557:
  2524   001968  BE25               	btfsc	(turnRight@i_2075+1)^0,7,c
  2525   00196A  EFBB  F00C         	goto	u1010
  2526   00196E  EFB9  F00C         	goto	u1011
  2527   001972                     u1011:
  2528   001972  EFBD  F00C         	goto	l2561
  2529   001976                     u1010:
  2530   001976  EFDC  F00C         	goto	l519
  2531   00197A                     l2561:
  2532                           
  2533                           ;dc_motor.c: 196:         mL->power = i;
  2534   00197A  501C               	movf	turnRight@mL^0,w,c
  2535   00197C  6ED9               	movwf	fsr2l,c
  2536   00197E  6ADA               	clrf	fsr2h,c
  2537   001980  C024  FFDF         	movff	turnRight@i_2075,indf2
  2538                           
  2539                           ;dc_motor.c: 197:         mR->power = i;
  2540   001984  501D               	movf	turnRight@mR^0,w,c
  2541   001986  6ED9               	movwf	fsr2l,c
  2542   001988  6ADA               	clrf	fsr2h,c
  2543   00198A  C024  FFDF         	movff	turnRight@i_2075,indf2
  2544   00198E                     
  2545                           ;dc_motor.c: 198:         setMotorPWM(mL);
  2546   00198E  C01C  F010         	movff	turnRight@mL,setMotorPWM@m
  2547   001992  ECF6  F00A         	call	_setMotorPWM	;wreg free
  2548   001996                     
  2549                           ;dc_motor.c: 199:         setMotorPWM(mR);
  2550   001996  C01D  F010         	movff	turnRight@mR,setMotorPWM@m
  2551   00199A  ECF6  F00A         	call	_setMotorPWM	;wreg free
  2552   00199E                     
  2553                           ;dc_motor.c: 200:         _delay((unsigned long)((5)*(64000000/4000.0)));
  2554   00199E  0E68               	movlw	104
  2555   0019A0  6E1E               	movwf	??_turnRight^0,c
  2556   0019A2  0EE4               	movlw	228
  2557   0019A4                     u1807:
  2558   0019A4  2EE8               	decfsz	wreg,f,c
  2559   0019A6  D7FE               	bra	u1807
  2560   0019A8  2E1E               	decfsz	??_turnRight^0,f,c
  2561   0019AA  D7FC               	bra	u1807
  2562   0019AC  D000               	nop2	
  2563   0019AE                     
  2564                           ;dc_motor.c: 202:     }
  2565   0019AE  0624               	decf	turnRight@i_2075^0,f,c
  2566   0019B0  A0D8               	btfss	status,0,c
  2567   0019B2  0625               	decf	(turnRight@i_2075+1)^0,f,c
  2568   0019B4  EFB4  F00C         	goto	l2557
  2569   0019B8                     l519:
  2570   0019B8  0012               	return		;funcret
  2571   0019BA                     __end_of_turnRight:
  2572                           	callstack 0
  2573                           
  2574 ;; *************** function _Pink *****************
  2575 ;; Defined at:
  2576 ;;		line 70 in file "instructions.c"
  2577 ;; Parameters:    Size  Location     Type
  2578 ;;  mL              1   39[COMRAM] PTR struct DC_motor
  2579 ;;		 -> main@motorL(9), 
  2580 ;;  mR              1   40[COMRAM] PTR struct DC_motor
  2581 ;;		 -> main@motorR(9), 
  2582 ;; Auto vars:     Size  Location     Type
  2583 ;;		None
  2584 ;; Return value:  Size  Location     Type
  2585 ;;                  1    wreg      void 
  2586 ;; Registers used:
  2587 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2588 ;; Tracked objects:
  2589 ;;		On entry : 0/0
  2590 ;;		On exit  : 0/0
  2591 ;;		Unchanged: 0/0
  2592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2593 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2594 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2595 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2596 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2597 ;;Total ram usage:        2 bytes
  2598 ;; Hardware stack levels used: 1
  2599 ;; Hardware stack levels required when called: 8
  2600 ;; This function calls:
  2601 ;;		_trundleSquare
  2602 ;;		_turnLeft
  2603 ;; This function is called by:
  2604 ;;		_executeInstruction
  2605 ;; This function uses a non-reentrant model
  2606 ;;
  2607                           
  2608                           	psect	text13
  2609   0028CC                     __ptext13:
  2610                           	callstack 0
  2611   0028CC                     _Pink:
  2612                           	callstack 20
  2613   0028CC  C028  F01C         	movff	Pink@mL,trundleSquare@mL
  2614   0028D0  C029  F01D         	movff	Pink@mR,trundleSquare@mR
  2615   0028D4  0E10               	movlw	16
  2616   0028D6  6E1E               	movwf	trundleSquare@square^0,c
  2617   0028D8  0E01               	movlw	1
  2618   0028DA  6E1F               	movwf	trundleSquare@reverse^0,c
  2619   0028DC  EC3C  F00F         	call	_trundleSquare	;wreg free
  2620                           
  2621                           ;instructions.c: 72:     turnLeft(mL, mR, turnLeftPower);
  2622   0028E0  C028  F01C         	movff	Pink@mL,turnLeft@mL
  2623   0028E4  C029  F01D         	movff	Pink@mR,turnLeft@mR
  2624   0028E8  C04B  F01E         	movff	_turnLeftPower,turnLeft@power
  2625   0028EC  ECDD  F00C         	call	_turnLeft	;wreg free
  2626   0028F0  0012               	return		;funcret
  2627   0028F2                     __end_of_Pink:
  2628                           	callstack 0
  2629                           
  2630 ;; *************** function _trundleSquare *****************
  2631 ;; Defined at:
  2632 ;;		line 455 in file "dc_motor.c"
  2633 ;; Parameters:    Size  Location     Type
  2634 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  2635 ;;		 -> main@motorL(9), 
  2636 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  2637 ;;		 -> main@motorR(9), 
  2638 ;;  square          1   29[COMRAM] unsigned char 
  2639 ;;  reverse         1   30[COMRAM] unsigned char 
  2640 ;; Auto vars:     Size  Location     Type
  2641 ;;  i               2   37[COMRAM] int 
  2642 ;;  start_increm    1   36[COMRAM] unsigned char 
  2643 ;; Return value:  Size  Location     Type
  2644 ;;                  1    wreg      void 
  2645 ;; Registers used:
  2646 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2647 ;; Tracked objects:
  2648 ;;		On entry : 0/0
  2649 ;;		On exit  : 0/0
  2650 ;;		Unchanged: 0/0
  2651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2652 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2653 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2654 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2655 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2656 ;;Total ram usage:       12 bytes
  2657 ;; Hardware stack levels used: 1
  2658 ;; Hardware stack levels required when called: 7
  2659 ;; This function calls:
  2660 ;;		_setMotorPWM
  2661 ;;		_stop
  2662 ;; This function is called by:
  2663 ;;		_Yellow
  2664 ;;		_Pink
  2665 ;;		_reverseYellow
  2666 ;;		_reversePink
  2667 ;; This function uses a non-reentrant model
  2668 ;;
  2669                           
  2670                           	psect	text14
  2671   001E78                     __ptext14:
  2672                           	callstack 0
  2673   001E78                     _trundleSquare:
  2674                           	callstack 20
  2675   001E78                     
  2676                           ;dc_motor.c: 457:     if (mL->power != 0 || mR->power != 0) {
  2677   001E78  501C               	movf	trundleSquare@mL^0,w,c
  2678   001E7A  6ED9               	movwf	fsr2l,c
  2679   001E7C  6ADA               	clrf	fsr2h,c
  2680   001E7E  50DF               	movf	indf2,w,c
  2681   001E80  A4D8               	btfss	status,2,c
  2682   001E82  EF45  F00F         	goto	u1101
  2683   001E86  EF47  F00F         	goto	u1100
  2684   001E8A                     u1101:
  2685   001E8A  EF52  F00F         	goto	l2669
  2686   001E8E                     u1100:
  2687   001E8E  501D               	movf	trundleSquare@mR^0,w,c
  2688   001E90  6ED9               	movwf	fsr2l,c
  2689   001E92  6ADA               	clrf	fsr2h,c
  2690   001E94  50DF               	movf	indf2,w,c
  2691   001E96  B4D8               	btfsc	status,2,c
  2692   001E98  EF50  F00F         	goto	u1111
  2693   001E9C  EF52  F00F         	goto	u1110
  2694   001EA0                     u1111:
  2695   001EA0  EF58  F00F         	goto	l2671
  2696   001EA4                     u1110:
  2697   001EA4                     l2669:
  2698                           
  2699                           ;dc_motor.c: 458:         stop(mL, mR);
  2700   001EA4  C01C  F015         	movff	trundleSquare@mL,stop@mL
  2701   001EA8  C01D  F016         	movff	trundleSquare@mR,stop@mR
  2702   001EAC  ECAA  F012         	call	_stop	;wreg free
  2703   001EB0                     l2671:
  2704                           
  2705                           ;dc_motor.c: 461:     if (reverse == 1) {
  2706   001EB0  041F               	decf	trundleSquare@reverse^0,w,c
  2707   001EB2  A4D8               	btfss	status,2,c
  2708   001EB4  EF5E  F00F         	goto	u1121
  2709   001EB8  EF60  F00F         	goto	u1120
  2710   001EBC                     u1121:
  2711   001EBC  EF6E  F00F         	goto	l2675
  2712   001EC0                     u1120:
  2713   001EC0                     
  2714                           ;dc_motor.c: 462:         mL->direction = 0;
  2715   001EC0  501C               	movf	trundleSquare@mL^0,w,c
  2716   001EC2  6ED9               	movwf	fsr2l,c
  2717   001EC4  6ADA               	clrf	fsr2h,c
  2718   001EC6  0E01               	movlw	1
  2719   001EC8  26D9               	addwf	fsr2l,f,c
  2720   001ECA  6ADF               	clrf	indf2,c
  2721                           
  2722                           ;dc_motor.c: 463:         mR->direction = 0;
  2723   001ECC  501D               	movf	trundleSquare@mR^0,w,c
  2724   001ECE  6ED9               	movwf	fsr2l,c
  2725   001ED0  6ADA               	clrf	fsr2h,c
  2726   001ED2  0E01               	movlw	1
  2727   001ED4  26D9               	addwf	fsr2l,f,c
  2728   001ED6  6ADF               	clrf	indf2,c
  2729                           
  2730                           ;dc_motor.c: 464:     }
  2731   001ED8  EF7C  F00F         	goto	l2677
  2732   001EDC                     l2675:
  2733                           
  2734                           ;dc_motor.c: 466:         mL->direction = 1;
  2735   001EDC  501C               	movf	trundleSquare@mL^0,w,c
  2736   001EDE  6ED9               	movwf	fsr2l,c
  2737   001EE0  6ADA               	clrf	fsr2h,c
  2738   001EE2  0E01               	movlw	1
  2739   001EE4  26D9               	addwf	fsr2l,f,c
  2740   001EE6  0E01               	movlw	1
  2741   001EE8  6EDF               	movwf	indf2,c
  2742                           
  2743                           ;dc_motor.c: 467:         mR->direction = 1;
  2744   001EEA  501D               	movf	trundleSquare@mR^0,w,c
  2745   001EEC  6ED9               	movwf	fsr2l,c
  2746   001EEE  6ADA               	clrf	fsr2h,c
  2747   001EF0  0E01               	movlw	1
  2748   001EF2  26D9               	addwf	fsr2l,f,c
  2749   001EF4  0E01               	movlw	1
  2750   001EF6  6EDF               	movwf	indf2,c
  2751   001EF8                     l2677:
  2752                           
  2753                           ;dc_motor.c: 470:     for (int i=0; i<= 20; i++) {
  2754   001EF8  0E00               	movlw	0
  2755   001EFA  6E27               	movwf	(trundleSquare@i+1)^0,c
  2756   001EFC  0E00               	movlw	0
  2757   001EFE  6E26               	movwf	trundleSquare@i^0,c
  2758   001F00                     l2683:
  2759                           
  2760                           ;dc_motor.c: 471:         mL->power = i;
  2761   001F00  501C               	movf	trundleSquare@mL^0,w,c
  2762   001F02  6ED9               	movwf	fsr2l,c
  2763   001F04  6ADA               	clrf	fsr2h,c
  2764   001F06  C026  FFDF         	movff	trundleSquare@i,indf2
  2765                           
  2766                           ;dc_motor.c: 472:         mR->power = i;
  2767   001F0A  501D               	movf	trundleSquare@mR^0,w,c
  2768   001F0C  6ED9               	movwf	fsr2l,c
  2769   001F0E  6ADA               	clrf	fsr2h,c
  2770   001F10  C026  FFDF         	movff	trundleSquare@i,indf2
  2771   001F14                     
  2772                           ;dc_motor.c: 473:         setMotorPWM(mL);
  2773   001F14  C01C  F010         	movff	trundleSquare@mL,setMotorPWM@m
  2774   001F18  ECF6  F00A         	call	_setMotorPWM	;wreg free
  2775   001F1C                     
  2776                           ;dc_motor.c: 474:         setMotorPWM(mR);
  2777   001F1C  C01D  F010         	movff	trundleSquare@mR,setMotorPWM@m
  2778   001F20  ECF6  F00A         	call	_setMotorPWM	;wreg free
  2779   001F24                     
  2780                           ;dc_motor.c: 475:         _delay((unsigned long)((5)*(64000000/4000.0)));
  2781   001F24  0E68               	movlw	104
  2782   001F26  6E20               	movwf	??_trundleSquare^0,c
  2783   001F28  0EE4               	movlw	228
  2784   001F2A                     u1817:
  2785   001F2A  2EE8               	decfsz	wreg,f,c
  2786   001F2C  D7FE               	bra	u1817
  2787   001F2E  2E20               	decfsz	??_trundleSquare^0,f,c
  2788   001F30  D7FC               	bra	u1817
  2789   001F32  D000               	nop2	
  2790   001F34                     
  2791                           ;dc_motor.c: 476:     }
  2792   001F34  4A26               	infsnz	trundleSquare@i^0,f,c
  2793   001F36  2A27               	incf	(trundleSquare@i+1)^0,f,c
  2794   001F38  BE27               	btfsc	(trundleSquare@i+1)^0,7,c
  2795   001F3A  EFA8  F00F         	goto	u1131
  2796   001F3E  5027               	movf	(trundleSquare@i+1)^0,w,c
  2797   001F40  E109               	bnz	u1130
  2798   001F42  0E15               	movlw	21
  2799   001F44  5C26               	subwf	trundleSquare@i^0,w,c
  2800   001F46  A0D8               	btfss	status,0,c
  2801   001F48  EFA8  F00F         	goto	u1131
  2802   001F4C  EFAA  F00F         	goto	u1130
  2803   001F50                     u1131:
  2804   001F50  EF80  F00F         	goto	l2683
  2805   001F54                     u1130:
  2806   001F54                     
  2807                           ;dc_motor.c: 479:     char start_increment = increment;
  2808   001F54  C088  F025         	movff	_increment,trundleSquare@start_increment
  2809   001F58                     l2695:
  2810   001F58  501E               	movf	trundleSquare@square^0,w,c
  2811   001F5A  6E20               	movwf	??_trundleSquare^0,c
  2812   001F5C  6A21               	clrf	(??_trundleSquare+1)^0,c
  2813   001F5E  5025               	movf	trundleSquare@start_increment^0,w,c
  2814   001F60  0100               	movlb	0	; () banked
  2815   001F62  5D88               	subwf	_increment& (0+255),w,b
  2816   001F64  6E22               	movwf	(??_trundleSquare+2)^0,c
  2817   001F66  0E00               	movlw	0
  2818   001F68  5989               	subwfb	(_increment+1)& (0+255),w,b
  2819   001F6A  6E23               	movwf	(??_trundleSquare+3)^0,c
  2820   001F6C  5020               	movf	??_trundleSquare^0,w,c
  2821   001F6E  5C22               	subwf	(??_trundleSquare+2)^0,w,c
  2822   001F70  5023               	movf	(??_trundleSquare+3)^0,w,c
  2823   001F72  0A80               	xorlw	128
  2824   001F74  6E24               	movwf	(??_trundleSquare+4)^0,c
  2825   001F76  5021               	movf	(??_trundleSquare+1)^0,w,c
  2826   001F78  0A80               	xorlw	128
  2827   001F7A  5824               	subwfb	(??_trundleSquare+4)^0,w,c
  2828   001F7C  A0D8               	btfss	status,0,c
  2829   001F7E  EFC3  F00F         	goto	u1141
  2830   001F82  EFC5  F00F         	goto	u1140
  2831   001F86                     u1141:
  2832   001F86  EFAC  F00F         	goto	l2695
  2833   001F8A                     u1140:
  2834   001F8A                     
  2835                           ; BSR set to: 0
  2836                           ;dc_motor.c: 481:     stop(mL, mR);
  2837   001F8A  C01C  F015         	movff	trundleSquare@mL,stop@mL
  2838   001F8E  C01D  F016         	movff	trundleSquare@mR,stop@mR
  2839   001F92  ECAA  F012         	call	_stop	;wreg free
  2840   001F96  0012               	return		;funcret
  2841   001F98                     __end_of_trundleSquare:
  2842                           	callstack 0
  2843                           
  2844 ;; *************** function _Orange *****************
  2845 ;; Defined at:
  2846 ;;		line 76 in file "instructions.c"
  2847 ;; Parameters:    Size  Location     Type
  2848 ;;  mL              1   37[COMRAM] PTR struct DC_motor
  2849 ;;		 -> main@motorL(9), 
  2850 ;;  mR              1   38[COMRAM] PTR struct DC_motor
  2851 ;;		 -> main@motorR(9), 
  2852 ;; Auto vars:     Size  Location     Type
  2853 ;;		None
  2854 ;; Return value:  Size  Location     Type
  2855 ;;                  1    wreg      void 
  2856 ;; Registers used:
  2857 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2858 ;; Tracked objects:
  2859 ;;		On entry : 0/0
  2860 ;;		On exit  : 0/0
  2861 ;;		Unchanged: 0/0
  2862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2863 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2864 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2865 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2866 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2867 ;;Total ram usage:        2 bytes
  2868 ;; Hardware stack levels used: 1
  2869 ;; Hardware stack levels required when called: 8
  2870 ;; This function calls:
  2871 ;;		_turnRight135
  2872 ;; This function is called by:
  2873 ;;		_executeInstruction
  2874 ;; This function uses a non-reentrant model
  2875 ;;
  2876                           
  2877                           	psect	text15
  2878   0029F6                     __ptext15:
  2879                           	callstack 0
  2880   0029F6                     _Orange:
  2881                           	callstack 20
  2882   0029F6                     
  2883                           ;instructions.c: 77:     turnRight135(mL, mR);
  2884   0029F6  C026  F01C         	movff	Orange@mL,turnRight135@mL
  2885   0029FA  C027  F01D         	movff	Orange@mR,turnRight135@mR
  2886   0029FE  EC77  F00D         	call	_turnRight135	;wreg free
  2887   002A02  0012               	return		;funcret
  2888   002A04                     __end_of_Orange:
  2889                           	callstack 0
  2890                           
  2891 ;; *************** function _turnRight135 *****************
  2892 ;; Defined at:
  2893 ;;		line 295 in file "dc_motor.c"
  2894 ;; Parameters:    Size  Location     Type
  2895 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  2896 ;;		 -> main@motorL(9), 
  2897 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  2898 ;;		 -> main@motorR(9), 
  2899 ;; Auto vars:     Size  Location     Type
  2900 ;;  i               2   35[COMRAM] int 
  2901 ;;  i               2   33[COMRAM] int 
  2902 ;;  maxpower        2   31[COMRAM] int 
  2903 ;; Return value:  Size  Location     Type
  2904 ;;                  1    wreg      void 
  2905 ;; Registers used:
  2906 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2907 ;; Tracked objects:
  2908 ;;		On entry : 0/0
  2909 ;;		On exit  : 0/0
  2910 ;;		Unchanged: 0/0
  2911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2912 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2913 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2914 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2915 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2916 ;;Total ram usage:       10 bytes
  2917 ;; Hardware stack levels used: 1
  2918 ;; Hardware stack levels required when called: 7
  2919 ;; This function calls:
  2920 ;;		_setMotorPWM
  2921 ;;		_stop
  2922 ;; This function is called by:
  2923 ;;		_Orange
  2924 ;;		_reverseOrange
  2925 ;; This function uses a non-reentrant model
  2926 ;;
  2927                           
  2928                           	psect	text16
  2929   001AEE                     __ptext16:
  2930                           	callstack 0
  2931   001AEE                     _turnRight135:
  2932                           	callstack 20
  2933   001AEE                     
  2934                           ;dc_motor.c: 295: void turnRight135(DC_motor *mL, DC_motor *mR);dc_motor.c: 296: {;dc_mo
      +                          tor.c: 298:     if (mL->power != 0 || mR->power != 0) {
  2935   001AEE  501C               	movf	turnRight135@mL^0,w,c
  2936   001AF0  6ED9               	movwf	fsr2l,c
  2937   001AF2  6ADA               	clrf	fsr2h,c
  2938   001AF4  50DF               	movf	indf2,w,c
  2939   001AF6  A4D8               	btfss	status,2,c
  2940   001AF8  EF80  F00D         	goto	u1151
  2941   001AFC  EF82  F00D         	goto	u1150
  2942   001B00                     u1151:
  2943   001B00  EF8D  F00D         	goto	l2703
  2944   001B04                     u1150:
  2945   001B04  501D               	movf	turnRight135@mR^0,w,c
  2946   001B06  6ED9               	movwf	fsr2l,c
  2947   001B08  6ADA               	clrf	fsr2h,c
  2948   001B0A  50DF               	movf	indf2,w,c
  2949   001B0C  B4D8               	btfsc	status,2,c
  2950   001B0E  EF8B  F00D         	goto	u1161
  2951   001B12  EF8D  F00D         	goto	u1160
  2952   001B16                     u1161:
  2953   001B16  EF93  F00D         	goto	l2705
  2954   001B1A                     u1160:
  2955   001B1A                     l2703:
  2956                           
  2957                           ;dc_motor.c: 299:         stop(mL, mR);
  2958   001B1A  C01C  F015         	movff	turnRight135@mL,stop@mL
  2959   001B1E  C01D  F016         	movff	turnRight135@mR,stop@mR
  2960   001B22  ECAA  F012         	call	_stop	;wreg free
  2961   001B26                     l2705:
  2962                           
  2963                           ;dc_motor.c: 303:     mL->direction = 1;
  2964   001B26  501C               	movf	turnRight135@mL^0,w,c
  2965   001B28  6ED9               	movwf	fsr2l,c
  2966   001B2A  6ADA               	clrf	fsr2h,c
  2967   001B2C  0E01               	movlw	1
  2968   001B2E  26D9               	addwf	fsr2l,f,c
  2969   001B30  0E01               	movlw	1
  2970   001B32  6EDF               	movwf	indf2,c
  2971   001B34                     
  2972                           ;dc_motor.c: 304:     mR->direction = 0;
  2973   001B34  501D               	movf	turnRight135@mR^0,w,c
  2974   001B36  6ED9               	movwf	fsr2l,c
  2975   001B38  6ADA               	clrf	fsr2h,c
  2976   001B3A  0E01               	movlw	1
  2977   001B3C  26D9               	addwf	fsr2l,f,c
  2978   001B3E  6ADF               	clrf	indf2,c
  2979   001B40                     
  2980                           ;dc_motor.c: 305:     int maxpower = 40;
  2981   001B40  0E00               	movlw	0
  2982   001B42  6E21               	movwf	(turnRight135@maxpower+1)^0,c
  2983   001B44  0E28               	movlw	40
  2984   001B46  6E20               	movwf	turnRight135@maxpower^0,c
  2985   001B48                     
  2986                           ;dc_motor.c: 308:     for (int i = 0; i < maxpower; i++) {
  2987   001B48  0E00               	movlw	0
  2988   001B4A  6E23               	movwf	(turnRight135@i+1)^0,c
  2989   001B4C  0E00               	movlw	0
  2990   001B4E  6E22               	movwf	turnRight135@i^0,c
  2991   001B50  EFC6  F00D         	goto	l2723
  2992   001B54                     l2713:
  2993                           
  2994                           ;dc_motor.c: 309:         mL->power = i;
  2995   001B54  501C               	movf	turnRight135@mL^0,w,c
  2996   001B56  6ED9               	movwf	fsr2l,c
  2997   001B58  6ADA               	clrf	fsr2h,c
  2998   001B5A  C022  FFDF         	movff	turnRight135@i,indf2
  2999                           
  3000                           ;dc_motor.c: 310:         mR->power = i;
  3001   001B5E  501D               	movf	turnRight135@mR^0,w,c
  3002   001B60  6ED9               	movwf	fsr2l,c
  3003   001B62  6ADA               	clrf	fsr2h,c
  3004   001B64  C022  FFDF         	movff	turnRight135@i,indf2
  3005   001B68                     
  3006                           ;dc_motor.c: 311:         setMotorPWM(mL);
  3007   001B68  C01C  F010         	movff	turnRight135@mL,setMotorPWM@m
  3008   001B6C  ECF6  F00A         	call	_setMotorPWM	;wreg free
  3009   001B70                     
  3010                           ;dc_motor.c: 312:         setMotorPWM(mR);
  3011   001B70  C01D  F010         	movff	turnRight135@mR,setMotorPWM@m
  3012   001B74  ECF6  F00A         	call	_setMotorPWM	;wreg free
  3013   001B78                     
  3014                           ;dc_motor.c: 313:         _delay((unsigned long)((5)*(64000000/4000.0)));
  3015   001B78  0E68               	movlw	104
  3016   001B7A  6E1E               	movwf	??_turnRight135^0,c
  3017   001B7C  0EE4               	movlw	228
  3018   001B7E                     u1827:
  3019   001B7E  2EE8               	decfsz	wreg,f,c
  3020   001B80  D7FE               	bra	u1827
  3021   001B82  2E1E               	decfsz	??_turnRight135^0,f,c
  3022   001B84  D7FC               	bra	u1827
  3023   001B86  D000               	nop2	
  3024   001B88                     
  3025                           ;dc_motor.c: 315:     }
  3026   001B88  4A22               	infsnz	turnRight135@i^0,f,c
  3027   001B8A  2A23               	incf	(turnRight135@i+1)^0,f,c
  3028   001B8C                     l2723:
  3029   001B8C  5020               	movf	turnRight135@maxpower^0,w,c
  3030   001B8E  5C22               	subwf	turnRight135@i^0,w,c
  3031   001B90  5023               	movf	(turnRight135@i+1)^0,w,c
  3032   001B92  0A80               	xorlw	128
  3033   001B94  6E1E               	movwf	??_turnRight135^0,c
  3034   001B96  5021               	movf	(turnRight135@maxpower+1)^0,w,c
  3035   001B98  0A80               	xorlw	128
  3036   001B9A  581E               	subwfb	??_turnRight135^0,w,c
  3037   001B9C  A0D8               	btfss	status,0,c
  3038   001B9E  EFD3  F00D         	goto	u1171
  3039   001BA2  EFD5  F00D         	goto	u1170
  3040   001BA6                     u1171:
  3041   001BA6  EFAA  F00D         	goto	l2713
  3042   001BAA                     u1170:
  3043   001BAA                     
  3044                           ;dc_motor.c: 317:     _delay((unsigned long)((410)*(64000000/4000.0)));
  3045   001BAA  0E22               	movlw	34
  3046   001BAC  6E1F               	movwf	(??_turnRight135+1)^0,c
  3047   001BAE  0E48               	movlw	72
  3048   001BB0  6E1E               	movwf	??_turnRight135^0,c
  3049   001BB2  0E62               	movlw	98
  3050   001BB4                     u1837:
  3051   001BB4  2EE8               	decfsz	wreg,f,c
  3052   001BB6  D7FE               	bra	u1837
  3053   001BB8  2E1E               	decfsz	??_turnRight135^0,f,c
  3054   001BBA  D7FC               	bra	u1837
  3055   001BBC  2E1F               	decfsz	(??_turnRight135+1)^0,f,c
  3056   001BBE  D7FA               	bra	u1837
  3057   001BC0  D000               	nop2	
  3058   001BC2                     
  3059                           ;dc_motor.c: 320:     for (int i = maxpower; i >= 0; i--) {
  3060   001BC2  C020  F024         	movff	turnRight135@maxpower,turnRight135@i_2129
  3061   001BC6  C021  F025         	movff	turnRight135@maxpower+1,turnRight135@i_2129+1
  3062   001BCA                     l2729:
  3063   001BCA  BE25               	btfsc	(turnRight135@i_2129+1)^0,7,c
  3064   001BCC  EFEC  F00D         	goto	u1180
  3065   001BD0  EFEA  F00D         	goto	u1181
  3066   001BD4                     u1181:
  3067   001BD4  EFEE  F00D         	goto	l2733
  3068   001BD8                     u1180:
  3069   001BD8  EF0D  F00E         	goto	l552
  3070   001BDC                     l2733:
  3071                           
  3072                           ;dc_motor.c: 321:         mL->power = i;
  3073   001BDC  501C               	movf	turnRight135@mL^0,w,c
  3074   001BDE  6ED9               	movwf	fsr2l,c
  3075   001BE0  6ADA               	clrf	fsr2h,c
  3076   001BE2  C024  FFDF         	movff	turnRight135@i_2129,indf2
  3077                           
  3078                           ;dc_motor.c: 322:         mR->power = i;
  3079   001BE6  501D               	movf	turnRight135@mR^0,w,c
  3080   001BE8  6ED9               	movwf	fsr2l,c
  3081   001BEA  6ADA               	clrf	fsr2h,c
  3082   001BEC  C024  FFDF         	movff	turnRight135@i_2129,indf2
  3083   001BF0                     
  3084                           ;dc_motor.c: 323:         setMotorPWM(mL);
  3085   001BF0  C01C  F010         	movff	turnRight135@mL,setMotorPWM@m
  3086   001BF4  ECF6  F00A         	call	_setMotorPWM	;wreg free
  3087   001BF8                     
  3088                           ;dc_motor.c: 324:         setMotorPWM(mR);
  3089   001BF8  C01D  F010         	movff	turnRight135@mR,setMotorPWM@m
  3090   001BFC  ECF6  F00A         	call	_setMotorPWM	;wreg free
  3091   001C00                     
  3092                           ;dc_motor.c: 325:         _delay((unsigned long)((5)*(64000000/4000.0)));
  3093   001C00  0E68               	movlw	104
  3094   001C02  6E1E               	movwf	??_turnRight135^0,c
  3095   001C04  0EE4               	movlw	228
  3096   001C06                     u1847:
  3097   001C06  2EE8               	decfsz	wreg,f,c
  3098   001C08  D7FE               	bra	u1847
  3099   001C0A  2E1E               	decfsz	??_turnRight135^0,f,c
  3100   001C0C  D7FC               	bra	u1847
  3101   001C0E  D000               	nop2	
  3102   001C10                     
  3103                           ;dc_motor.c: 327:     }
  3104   001C10  0624               	decf	turnRight135@i_2129^0,f,c
  3105   001C12  A0D8               	btfss	status,0,c
  3106   001C14  0625               	decf	(turnRight135@i_2129+1)^0,f,c
  3107   001C16  EFE5  F00D         	goto	l2729
  3108   001C1A                     l552:
  3109   001C1A  0012               	return		;funcret
  3110   001C1C                     __end_of_turnRight135:
  3111                           	callstack 0
  3112                           
  3113 ;; *************** function _LightBlue *****************
  3114 ;; Defined at:
  3115 ;;		line 80 in file "instructions.c"
  3116 ;; Parameters:    Size  Location     Type
  3117 ;;  mL              1   37[COMRAM] PTR struct DC_motor
  3118 ;;		 -> main@motorL(9), 
  3119 ;;  mR              1   38[COMRAM] PTR struct DC_motor
  3120 ;;		 -> main@motorR(9), 
  3121 ;; Auto vars:     Size  Location     Type
  3122 ;;		None
  3123 ;; Return value:  Size  Location     Type
  3124 ;;                  1    wreg      void 
  3125 ;; Registers used:
  3126 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3127 ;; Tracked objects:
  3128 ;;		On entry : 0/0
  3129 ;;		On exit  : 0/0
  3130 ;;		Unchanged: 0/0
  3131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3132 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3133 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3134 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3135 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3136 ;;Total ram usage:        2 bytes
  3137 ;; Hardware stack levels used: 1
  3138 ;; Hardware stack levels required when called: 8
  3139 ;; This function calls:
  3140 ;;		_turnLeft135
  3141 ;; This function is called by:
  3142 ;;		_executeInstruction
  3143 ;; This function uses a non-reentrant model
  3144 ;;
  3145                           
  3146                           	psect	text17
  3147   002A04                     __ptext17:
  3148                           	callstack 0
  3149   002A04                     _LightBlue:
  3150                           	callstack 20
  3151   002A04                     
  3152                           ;instructions.c: 81:     turnLeft135(mL, mR);
  3153   002A04  C026  F01C         	movff	LightBlue@mL,turnLeft135@mL
  3154   002A08  C027  F01D         	movff	LightBlue@mR,turnLeft135@mR
  3155   002A0C  EC0E  F00E         	call	_turnLeft135	;wreg free
  3156   002A10  0012               	return		;funcret
  3157   002A12                     __end_of_LightBlue:
  3158                           	callstack 0
  3159                           
  3160 ;; *************** function _turnLeft135 *****************
  3161 ;; Defined at:
  3162 ;;		line 258 in file "dc_motor.c"
  3163 ;; Parameters:    Size  Location     Type
  3164 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  3165 ;;		 -> main@motorL(9), 
  3166 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  3167 ;;		 -> main@motorR(9), 
  3168 ;; Auto vars:     Size  Location     Type
  3169 ;;  i               2   35[COMRAM] int 
  3170 ;;  i               2   33[COMRAM] int 
  3171 ;;  maxpower        2   31[COMRAM] int 
  3172 ;; Return value:  Size  Location     Type
  3173 ;;                  1    wreg      void 
  3174 ;; Registers used:
  3175 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3176 ;; Tracked objects:
  3177 ;;		On entry : 0/0
  3178 ;;		On exit  : 0/0
  3179 ;;		Unchanged: 0/0
  3180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3181 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3182 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3183 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3184 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3185 ;;Total ram usage:       10 bytes
  3186 ;; Hardware stack levels used: 1
  3187 ;; Hardware stack levels required when called: 7
  3188 ;; This function calls:
  3189 ;;		_setMotorPWM
  3190 ;;		_stop
  3191 ;; This function is called by:
  3192 ;;		_LightBlue
  3193 ;;		_reverseLightBlue
  3194 ;; This function uses a non-reentrant model
  3195 ;;
  3196                           
  3197                           	psect	text18
  3198   001C1C                     __ptext18:
  3199                           	callstack 0
  3200   001C1C                     _turnLeft135:
  3201                           	callstack 20
  3202   001C1C                     
  3203                           ;dc_motor.c: 258: void turnLeft135(DC_motor *mL, DC_motor *mR);dc_motor.c: 259: {;dc_mot
      +                          or.c: 261:     if (mL->power != 0 || mR->power != 0) {
  3204   001C1C  501C               	movf	turnLeft135@mL^0,w,c
  3205   001C1E  6ED9               	movwf	fsr2l,c
  3206   001C20  6ADA               	clrf	fsr2h,c
  3207   001C22  50DF               	movf	indf2,w,c
  3208   001C24  A4D8               	btfss	status,2,c
  3209   001C26  EF17  F00E         	goto	u1191
  3210   001C2A  EF19  F00E         	goto	u1190
  3211   001C2E                     u1191:
  3212   001C2E  EF24  F00E         	goto	l2749
  3213   001C32                     u1190:
  3214   001C32  501D               	movf	turnLeft135@mR^0,w,c
  3215   001C34  6ED9               	movwf	fsr2l,c
  3216   001C36  6ADA               	clrf	fsr2h,c
  3217   001C38  50DF               	movf	indf2,w,c
  3218   001C3A  B4D8               	btfsc	status,2,c
  3219   001C3C  EF22  F00E         	goto	u1201
  3220   001C40  EF24  F00E         	goto	u1200
  3221   001C44                     u1201:
  3222   001C44  EF2A  F00E         	goto	l2751
  3223   001C48                     u1200:
  3224   001C48                     l2749:
  3225                           
  3226                           ;dc_motor.c: 262:         stop(mL, mR);
  3227   001C48  C01C  F015         	movff	turnLeft135@mL,stop@mL
  3228   001C4C  C01D  F016         	movff	turnLeft135@mR,stop@mR
  3229   001C50  ECAA  F012         	call	_stop	;wreg free
  3230   001C54                     l2751:
  3231                           
  3232                           ;dc_motor.c: 266:     mL->direction = 0;
  3233   001C54  501C               	movf	turnLeft135@mL^0,w,c
  3234   001C56  6ED9               	movwf	fsr2l,c
  3235   001C58  6ADA               	clrf	fsr2h,c
  3236   001C5A  0E01               	movlw	1
  3237   001C5C  26D9               	addwf	fsr2l,f,c
  3238   001C5E  6ADF               	clrf	indf2,c
  3239   001C60                     
  3240                           ;dc_motor.c: 267:     mR->direction = 1;
  3241   001C60  501D               	movf	turnLeft135@mR^0,w,c
  3242   001C62  6ED9               	movwf	fsr2l,c
  3243   001C64  6ADA               	clrf	fsr2h,c
  3244   001C66  0E01               	movlw	1
  3245   001C68  26D9               	addwf	fsr2l,f,c
  3246   001C6A  0E01               	movlw	1
  3247   001C6C  6EDF               	movwf	indf2,c
  3248   001C6E                     
  3249                           ;dc_motor.c: 268:     int maxpower = 40;
  3250   001C6E  0E00               	movlw	0
  3251   001C70  6E21               	movwf	(turnLeft135@maxpower+1)^0,c
  3252   001C72  0E28               	movlw	40
  3253   001C74  6E20               	movwf	turnLeft135@maxpower^0,c
  3254   001C76                     
  3255                           ;dc_motor.c: 271:     for (int i = 0; i < maxpower; i++) {
  3256   001C76  0E00               	movlw	0
  3257   001C78  6E23               	movwf	(turnLeft135@i+1)^0,c
  3258   001C7A  0E00               	movlw	0
  3259   001C7C  6E22               	movwf	turnLeft135@i^0,c
  3260   001C7E  EF5D  F00E         	goto	l2769
  3261   001C82                     l2759:
  3262                           
  3263                           ;dc_motor.c: 272:         mL->power = i;
  3264   001C82  501C               	movf	turnLeft135@mL^0,w,c
  3265   001C84  6ED9               	movwf	fsr2l,c
  3266   001C86  6ADA               	clrf	fsr2h,c
  3267   001C88  C022  FFDF         	movff	turnLeft135@i,indf2
  3268                           
  3269                           ;dc_motor.c: 273:         mR->power = i;
  3270   001C8C  501D               	movf	turnLeft135@mR^0,w,c
  3271   001C8E  6ED9               	movwf	fsr2l,c
  3272   001C90  6ADA               	clrf	fsr2h,c
  3273   001C92  C022  FFDF         	movff	turnLeft135@i,indf2
  3274   001C96                     
  3275                           ;dc_motor.c: 274:         setMotorPWM(mL);
  3276   001C96  C01C  F010         	movff	turnLeft135@mL,setMotorPWM@m
  3277   001C9A  ECF6  F00A         	call	_setMotorPWM	;wreg free
  3278   001C9E                     
  3279                           ;dc_motor.c: 275:         setMotorPWM(mR);
  3280   001C9E  C01D  F010         	movff	turnLeft135@mR,setMotorPWM@m
  3281   001CA2  ECF6  F00A         	call	_setMotorPWM	;wreg free
  3282   001CA6                     
  3283                           ;dc_motor.c: 276:         _delay((unsigned long)((5)*(64000000/4000.0)));
  3284   001CA6  0E68               	movlw	104
  3285   001CA8  6E1E               	movwf	??_turnLeft135^0,c
  3286   001CAA  0EE4               	movlw	228
  3287   001CAC                     u1857:
  3288   001CAC  2EE8               	decfsz	wreg,f,c
  3289   001CAE  D7FE               	bra	u1857
  3290   001CB0  2E1E               	decfsz	??_turnLeft135^0,f,c
  3291   001CB2  D7FC               	bra	u1857
  3292   001CB4  D000               	nop2	
  3293   001CB6                     
  3294                           ;dc_motor.c: 278:     }
  3295   001CB6  4A22               	infsnz	turnLeft135@i^0,f,c
  3296   001CB8  2A23               	incf	(turnLeft135@i+1)^0,f,c
  3297   001CBA                     l2769:
  3298   001CBA  5020               	movf	turnLeft135@maxpower^0,w,c
  3299   001CBC  5C22               	subwf	turnLeft135@i^0,w,c
  3300   001CBE  5023               	movf	(turnLeft135@i+1)^0,w,c
  3301   001CC0  0A80               	xorlw	128
  3302   001CC2  6E1E               	movwf	??_turnLeft135^0,c
  3303   001CC4  5021               	movf	(turnLeft135@maxpower+1)^0,w,c
  3304   001CC6  0A80               	xorlw	128
  3305   001CC8  581E               	subwfb	??_turnLeft135^0,w,c
  3306   001CCA  A0D8               	btfss	status,0,c
  3307   001CCC  EF6A  F00E         	goto	u1211
  3308   001CD0  EF6C  F00E         	goto	u1210
  3309   001CD4                     u1211:
  3310   001CD4  EF41  F00E         	goto	l2759
  3311   001CD8                     u1210:
  3312   001CD8                     
  3313                           ;dc_motor.c: 280:     _delay((unsigned long)((410)*(64000000/4000.0)));
  3314   001CD8  0E22               	movlw	34
  3315   001CDA  6E1F               	movwf	(??_turnLeft135+1)^0,c
  3316   001CDC  0E48               	movlw	72
  3317   001CDE  6E1E               	movwf	??_turnLeft135^0,c
  3318   001CE0  0E62               	movlw	98
  3319   001CE2                     u1867:
  3320   001CE2  2EE8               	decfsz	wreg,f,c
  3321   001CE4  D7FE               	bra	u1867
  3322   001CE6  2E1E               	decfsz	??_turnLeft135^0,f,c
  3323   001CE8  D7FC               	bra	u1867
  3324   001CEA  2E1F               	decfsz	(??_turnLeft135+1)^0,f,c
  3325   001CEC  D7FA               	bra	u1867
  3326   001CEE  D000               	nop2	
  3327   001CF0                     
  3328                           ;dc_motor.c: 283:     for (int i = maxpower; i >= 0; i--) {
  3329   001CF0  C020  F024         	movff	turnLeft135@maxpower,turnLeft135@i_2111
  3330   001CF4  C021  F025         	movff	turnLeft135@maxpower+1,turnLeft135@i_2111+1
  3331   001CF8                     l2775:
  3332   001CF8  BE25               	btfsc	(turnLeft135@i_2111+1)^0,7,c
  3333   001CFA  EF83  F00E         	goto	u1220
  3334   001CFE  EF81  F00E         	goto	u1221
  3335   001D02                     u1221:
  3336   001D02  EF85  F00E         	goto	l2779
  3337   001D06                     u1220:
  3338   001D06  EFA4  F00E         	goto	l541
  3339   001D0A                     l2779:
  3340                           
  3341                           ;dc_motor.c: 284:         mL->power = i;
  3342   001D0A  501C               	movf	turnLeft135@mL^0,w,c
  3343   001D0C  6ED9               	movwf	fsr2l,c
  3344   001D0E  6ADA               	clrf	fsr2h,c
  3345   001D10  C024  FFDF         	movff	turnLeft135@i_2111,indf2
  3346                           
  3347                           ;dc_motor.c: 285:         mR->power = i;
  3348   001D14  501D               	movf	turnLeft135@mR^0,w,c
  3349   001D16  6ED9               	movwf	fsr2l,c
  3350   001D18  6ADA               	clrf	fsr2h,c
  3351   001D1A  C024  FFDF         	movff	turnLeft135@i_2111,indf2
  3352   001D1E                     
  3353                           ;dc_motor.c: 286:         setMotorPWM(mL);
  3354   001D1E  C01C  F010         	movff	turnLeft135@mL,setMotorPWM@m
  3355   001D22  ECF6  F00A         	call	_setMotorPWM	;wreg free
  3356   001D26                     
  3357                           ;dc_motor.c: 287:         setMotorPWM(mR);
  3358   001D26  C01D  F010         	movff	turnLeft135@mR,setMotorPWM@m
  3359   001D2A  ECF6  F00A         	call	_setMotorPWM	;wreg free
  3360   001D2E                     
  3361                           ;dc_motor.c: 288:         _delay((unsigned long)((5)*(64000000/4000.0)));
  3362   001D2E  0E68               	movlw	104
  3363   001D30  6E1E               	movwf	??_turnLeft135^0,c
  3364   001D32  0EE4               	movlw	228
  3365   001D34                     u1877:
  3366   001D34  2EE8               	decfsz	wreg,f,c
  3367   001D36  D7FE               	bra	u1877
  3368   001D38  2E1E               	decfsz	??_turnLeft135^0,f,c
  3369   001D3A  D7FC               	bra	u1877
  3370   001D3C  D000               	nop2	
  3371   001D3E                     
  3372                           ;dc_motor.c: 290:     }
  3373   001D3E  0624               	decf	turnLeft135@i_2111^0,f,c
  3374   001D40  A0D8               	btfss	status,0,c
  3375   001D42  0625               	decf	(turnLeft135@i_2111+1)^0,f,c
  3376   001D44  EF7C  F00E         	goto	l2775
  3377   001D48                     l541:
  3378   001D48  0012               	return		;funcret
  3379   001D4A                     __end_of_turnLeft135:
  3380                           	callstack 0
  3381                           
  3382 ;; *************** function _Green *****************
  3383 ;; Defined at:
  3384 ;;		line 57 in file "instructions.c"
  3385 ;; Parameters:    Size  Location     Type
  3386 ;;  mL              1   38[COMRAM] PTR struct DC_motor
  3387 ;;		 -> main@motorL(9), 
  3388 ;;  mR              1   39[COMRAM] PTR struct DC_motor
  3389 ;;		 -> main@motorR(9), 
  3390 ;; Auto vars:     Size  Location     Type
  3391 ;;		None
  3392 ;; Return value:  Size  Location     Type
  3393 ;;                  1    wreg      void 
  3394 ;; Registers used:
  3395 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3396 ;; Tracked objects:
  3397 ;;		On entry : 0/0
  3398 ;;		On exit  : 0/0
  3399 ;;		Unchanged: 0/0
  3400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3401 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3402 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3403 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3404 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3405 ;;Total ram usage:        2 bytes
  3406 ;; Hardware stack levels used: 1
  3407 ;; Hardware stack levels required when called: 8
  3408 ;; This function calls:
  3409 ;;		_turnLeft
  3410 ;; This function is called by:
  3411 ;;		_executeInstruction
  3412 ;; This function uses a non-reentrant model
  3413 ;;
  3414                           
  3415                           	psect	text19
  3416   0029BA                     __ptext19:
  3417                           	callstack 0
  3418   0029BA                     _Green:
  3419                           	callstack 20
  3420   0029BA                     
  3421                           ;instructions.c: 58:     turnLeft(mL, mR, turnLeftPower);
  3422   0029BA  C027  F01C         	movff	Green@mL,turnLeft@mL
  3423   0029BE  C028  F01D         	movff	Green@mR,turnLeft@mR
  3424   0029C2  C04B  F01E         	movff	_turnLeftPower,turnLeft@power
  3425   0029C6  ECDD  F00C         	call	_turnLeft	;wreg free
  3426   0029CA  0012               	return		;funcret
  3427   0029CC                     __end_of_Green:
  3428                           	callstack 0
  3429                           
  3430 ;; *************** function _Blue *****************
  3431 ;; Defined at:
  3432 ;;		line 61 in file "instructions.c"
  3433 ;; Parameters:    Size  Location     Type
  3434 ;;  mL              1   37[COMRAM] PTR struct DC_motor
  3435 ;;		 -> main@motorL(9), 
  3436 ;;  mR              1   38[COMRAM] PTR struct DC_motor
  3437 ;;		 -> main@motorR(9), 
  3438 ;; Auto vars:     Size  Location     Type
  3439 ;;		None
  3440 ;; Return value:  Size  Location     Type
  3441 ;;                  1    wreg      void 
  3442 ;; Registers used:
  3443 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3444 ;; Tracked objects:
  3445 ;;		On entry : 0/0
  3446 ;;		On exit  : 0/0
  3447 ;;		Unchanged: 0/0
  3448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3449 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3450 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3451 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3452 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3453 ;;Total ram usage:        2 bytes
  3454 ;; Hardware stack levels used: 1
  3455 ;; Hardware stack levels required when called: 8
  3456 ;; This function calls:
  3457 ;;		_turn180
  3458 ;; This function is called by:
  3459 ;;		_executeInstruction
  3460 ;; This function uses a non-reentrant model
  3461 ;;
  3462                           
  3463                           	psect	text20
  3464   002A12                     __ptext20:
  3465                           	callstack 0
  3466   002A12                     _Blue:
  3467                           	callstack 20
  3468   002A12                     
  3469                           ;instructions.c: 62:     turn180(mL, mR);
  3470   002A12  C026  F01C         	movff	Blue@mL,turn180@mL
  3471   002A16  C027  F01D         	movff	Blue@mR,turn180@mR
  3472   002A1A  ECA5  F00E         	call	_turn180	;wreg free
  3473   002A1E  0012               	return		;funcret
  3474   002A20                     __end_of_Blue:
  3475                           	callstack 0
  3476                           
  3477 ;; *************** function _turn180 *****************
  3478 ;; Defined at:
  3479 ;;		line 221 in file "dc_motor.c"
  3480 ;; Parameters:    Size  Location     Type
  3481 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  3482 ;;		 -> main@motorL(9), 
  3483 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  3484 ;;		 -> main@motorR(9), 
  3485 ;; Auto vars:     Size  Location     Type
  3486 ;;  i               2   35[COMRAM] int 
  3487 ;;  i               2   33[COMRAM] int 
  3488 ;;  maxpower        2   31[COMRAM] int 
  3489 ;; Return value:  Size  Location     Type
  3490 ;;                  1    wreg      void 
  3491 ;; Registers used:
  3492 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3493 ;; Tracked objects:
  3494 ;;		On entry : 0/0
  3495 ;;		On exit  : 0/0
  3496 ;;		Unchanged: 0/0
  3497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3498 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3499 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3500 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3501 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3502 ;;Total ram usage:       10 bytes
  3503 ;; Hardware stack levels used: 1
  3504 ;; Hardware stack levels required when called: 7
  3505 ;; This function calls:
  3506 ;;		_setMotorPWM
  3507 ;;		_stop
  3508 ;; This function is called by:
  3509 ;;		_Blue
  3510 ;;		_reverseYellow
  3511 ;;		_reversePink
  3512 ;;		_reverseRoute
  3513 ;; This function uses a non-reentrant model
  3514 ;;
  3515                           
  3516                           	psect	text21
  3517   001D4A                     __ptext21:
  3518                           	callstack 0
  3519   001D4A                     _turn180:
  3520                           	callstack 22
  3521   001D4A                     
  3522                           ;dc_motor.c: 221: void turn180(DC_motor *mL, DC_motor *mR);dc_motor.c: 222: {;dc_motor.c
      +                          : 224:     if (mL->power != 0 || mR->power != 0) {
  3523   001D4A  501C               	movf	turn180@mL^0,w,c
  3524   001D4C  6ED9               	movwf	fsr2l,c
  3525   001D4E  6ADA               	clrf	fsr2h,c
  3526   001D50  50DF               	movf	indf2,w,c
  3527   001D52  A4D8               	btfss	status,2,c
  3528   001D54  EFAE  F00E         	goto	u1061
  3529   001D58  EFB0  F00E         	goto	u1060
  3530   001D5C                     u1061:
  3531   001D5C  EFBB  F00E         	goto	l2623
  3532   001D60                     u1060:
  3533   001D60  501D               	movf	turn180@mR^0,w,c
  3534   001D62  6ED9               	movwf	fsr2l,c
  3535   001D64  6ADA               	clrf	fsr2h,c
  3536   001D66  50DF               	movf	indf2,w,c
  3537   001D68  B4D8               	btfsc	status,2,c
  3538   001D6A  EFB9  F00E         	goto	u1071
  3539   001D6E  EFBB  F00E         	goto	u1070
  3540   001D72                     u1071:
  3541   001D72  EFC1  F00E         	goto	l2625
  3542   001D76                     u1070:
  3543   001D76                     l2623:
  3544                           
  3545                           ;dc_motor.c: 225:         stop(mL, mR);
  3546   001D76  C01C  F015         	movff	turn180@mL,stop@mL
  3547   001D7A  C01D  F016         	movff	turn180@mR,stop@mR
  3548   001D7E  ECAA  F012         	call	_stop	;wreg free
  3549   001D82                     l2625:
  3550                           
  3551                           ;dc_motor.c: 229:     mL->direction = 0;
  3552   001D82  501C               	movf	turn180@mL^0,w,c
  3553   001D84  6ED9               	movwf	fsr2l,c
  3554   001D86  6ADA               	clrf	fsr2h,c
  3555   001D88  0E01               	movlw	1
  3556   001D8A  26D9               	addwf	fsr2l,f,c
  3557   001D8C  6ADF               	clrf	indf2,c
  3558   001D8E                     
  3559                           ;dc_motor.c: 230:     mR->direction = 1;
  3560   001D8E  501D               	movf	turn180@mR^0,w,c
  3561   001D90  6ED9               	movwf	fsr2l,c
  3562   001D92  6ADA               	clrf	fsr2h,c
  3563   001D94  0E01               	movlw	1
  3564   001D96  26D9               	addwf	fsr2l,f,c
  3565   001D98  0E01               	movlw	1
  3566   001D9A  6EDF               	movwf	indf2,c
  3567   001D9C                     
  3568                           ;dc_motor.c: 231:     int maxpower = 40;
  3569   001D9C  0E00               	movlw	0
  3570   001D9E  6E21               	movwf	(turn180@maxpower+1)^0,c
  3571   001DA0  0E28               	movlw	40
  3572   001DA2  6E20               	movwf	turn180@maxpower^0,c
  3573   001DA4                     
  3574                           ;dc_motor.c: 234:     for (int i = 0; i < maxpower; i++) {
  3575   001DA4  0E00               	movlw	0
  3576   001DA6  6E23               	movwf	(turn180@i+1)^0,c
  3577   001DA8  0E00               	movlw	0
  3578   001DAA  6E22               	movwf	turn180@i^0,c
  3579   001DAC  EFF4  F00E         	goto	l2643
  3580   001DB0                     l2633:
  3581                           
  3582                           ;dc_motor.c: 235:         mL->power = i;
  3583   001DB0  501C               	movf	turn180@mL^0,w,c
  3584   001DB2  6ED9               	movwf	fsr2l,c
  3585   001DB4  6ADA               	clrf	fsr2h,c
  3586   001DB6  C022  FFDF         	movff	turn180@i,indf2
  3587                           
  3588                           ;dc_motor.c: 236:         mR->power = i;
  3589   001DBA  501D               	movf	turn180@mR^0,w,c
  3590   001DBC  6ED9               	movwf	fsr2l,c
  3591   001DBE  6ADA               	clrf	fsr2h,c
  3592   001DC0  C022  FFDF         	movff	turn180@i,indf2
  3593   001DC4                     
  3594                           ;dc_motor.c: 237:         setMotorPWM(mL);
  3595   001DC4  C01C  F010         	movff	turn180@mL,setMotorPWM@m
  3596   001DC8  ECF6  F00A         	call	_setMotorPWM	;wreg free
  3597   001DCC                     
  3598                           ;dc_motor.c: 238:         setMotorPWM(mR);
  3599   001DCC  C01D  F010         	movff	turn180@mR,setMotorPWM@m
  3600   001DD0  ECF6  F00A         	call	_setMotorPWM	;wreg free
  3601   001DD4                     
  3602                           ;dc_motor.c: 239:         _delay((unsigned long)((5)*(64000000/4000.0)));
  3603   001DD4  0E68               	movlw	104
  3604   001DD6  6E1E               	movwf	??_turn180^0,c
  3605   001DD8  0EE4               	movlw	228
  3606   001DDA                     u1887:
  3607   001DDA  2EE8               	decfsz	wreg,f,c
  3608   001DDC  D7FE               	bra	u1887
  3609   001DDE  2E1E               	decfsz	??_turn180^0,f,c
  3610   001DE0  D7FC               	bra	u1887
  3611   001DE2  D000               	nop2	
  3612   001DE4                     
  3613                           ;dc_motor.c: 241:     }
  3614   001DE4  4A22               	infsnz	turn180@i^0,f,c
  3615   001DE6  2A23               	incf	(turn180@i+1)^0,f,c
  3616   001DE8                     l2643:
  3617   001DE8  5020               	movf	turn180@maxpower^0,w,c
  3618   001DEA  5C22               	subwf	turn180@i^0,w,c
  3619   001DEC  5023               	movf	(turn180@i+1)^0,w,c
  3620   001DEE  0A80               	xorlw	128
  3621   001DF0  6E1E               	movwf	??_turn180^0,c
  3622   001DF2  5021               	movf	(turn180@maxpower+1)^0,w,c
  3623   001DF4  0A80               	xorlw	128
  3624   001DF6  581E               	subwfb	??_turn180^0,w,c
  3625   001DF8  A0D8               	btfss	status,0,c
  3626   001DFA  EF01  F00F         	goto	u1081
  3627   001DFE  EF03  F00F         	goto	u1080
  3628   001E02                     u1081:
  3629   001E02  EFD8  F00E         	goto	l2633
  3630   001E06                     u1080:
  3631   001E06                     
  3632                           ;dc_motor.c: 243:     _delay((unsigned long)((500)*(64000000/4000.0)));
  3633   001E06  0E29               	movlw	41
  3634   001E08  6E1F               	movwf	(??_turn180+1)^0,c
  3635   001E0A  0E96               	movlw	150
  3636   001E0C  6E1E               	movwf	??_turn180^0,c
  3637   001E0E  0E7F               	movlw	127
  3638   001E10                     u1897:
  3639   001E10  2EE8               	decfsz	wreg,f,c
  3640   001E12  D7FE               	bra	u1897
  3641   001E14  2E1E               	decfsz	??_turn180^0,f,c
  3642   001E16  D7FC               	bra	u1897
  3643   001E18  2E1F               	decfsz	(??_turn180+1)^0,f,c
  3644   001E1A  D7FA               	bra	u1897
  3645   001E1C  0000               	nop	
  3646   001E1E                     
  3647                           ;dc_motor.c: 246:     for (int i = maxpower; i >= 0; i--) {
  3648   001E1E  C020  F024         	movff	turn180@maxpower,turn180@i_2093
  3649   001E22  C021  F025         	movff	turn180@maxpower+1,turn180@i_2093+1
  3650   001E26                     l2649:
  3651   001E26  BE25               	btfsc	(turn180@i_2093+1)^0,7,c
  3652   001E28  EF1A  F00F         	goto	u1090
  3653   001E2C  EF18  F00F         	goto	u1091
  3654   001E30                     u1091:
  3655   001E30  EF1C  F00F         	goto	l2653
  3656   001E34                     u1090:
  3657   001E34  EF3B  F00F         	goto	l530
  3658   001E38                     l2653:
  3659                           
  3660                           ;dc_motor.c: 247:         mL->power = i;
  3661   001E38  501C               	movf	turn180@mL^0,w,c
  3662   001E3A  6ED9               	movwf	fsr2l,c
  3663   001E3C  6ADA               	clrf	fsr2h,c
  3664   001E3E  C024  FFDF         	movff	turn180@i_2093,indf2
  3665                           
  3666                           ;dc_motor.c: 248:         mR->power = i;
  3667   001E42  501D               	movf	turn180@mR^0,w,c
  3668   001E44  6ED9               	movwf	fsr2l,c
  3669   001E46  6ADA               	clrf	fsr2h,c
  3670   001E48  C024  FFDF         	movff	turn180@i_2093,indf2
  3671   001E4C                     
  3672                           ;dc_motor.c: 249:         setMotorPWM(mL);
  3673   001E4C  C01C  F010         	movff	turn180@mL,setMotorPWM@m
  3674   001E50  ECF6  F00A         	call	_setMotorPWM	;wreg free
  3675   001E54                     
  3676                           ;dc_motor.c: 250:         setMotorPWM(mR);
  3677   001E54  C01D  F010         	movff	turn180@mR,setMotorPWM@m
  3678   001E58  ECF6  F00A         	call	_setMotorPWM	;wreg free
  3679   001E5C                     
  3680                           ;dc_motor.c: 251:         _delay((unsigned long)((5)*(64000000/4000.0)));
  3681   001E5C  0E68               	movlw	104
  3682   001E5E  6E1E               	movwf	??_turn180^0,c
  3683   001E60  0EE4               	movlw	228
  3684   001E62                     u1907:
  3685   001E62  2EE8               	decfsz	wreg,f,c
  3686   001E64  D7FE               	bra	u1907
  3687   001E66  2E1E               	decfsz	??_turn180^0,f,c
  3688   001E68  D7FC               	bra	u1907
  3689   001E6A  D000               	nop2	
  3690   001E6C                     
  3691                           ;dc_motor.c: 253:     }
  3692   001E6C  0624               	decf	turn180@i_2093^0,f,c
  3693   001E6E  A0D8               	btfss	status,0,c
  3694   001E70  0625               	decf	(turn180@i_2093+1)^0,f,c
  3695   001E72  EF13  F00F         	goto	l2649
  3696   001E76                     l530:
  3697   001E76  0012               	return		;funcret
  3698   001E78                     __end_of_turn180:
  3699                           	callstack 0
  3700                           
  3701 ;; *************** function _Black *****************
  3702 ;; Defined at:
  3703 ;;		line 88 in file "instructions.c"
  3704 ;; Parameters:    Size  Location     Type
  3705 ;;  mL              1    2[COMRAM] PTR struct DC_motor
  3706 ;;		 -> main@motorL(9), 
  3707 ;;  mR              1    3[COMRAM] PTR struct DC_motor
  3708 ;;		 -> main@motorR(9), 
  3709 ;; Auto vars:     Size  Location     Type
  3710 ;;		None
  3711 ;; Return value:  Size  Location     Type
  3712 ;;                  1    wreg      void 
  3713 ;; Registers used:
  3714 ;;		None
  3715 ;; Tracked objects:
  3716 ;;		On entry : 0/0
  3717 ;;		On exit  : 0/0
  3718 ;;		Unchanged: 0/0
  3719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3720 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3721 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3722 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3723 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3724 ;;Total ram usage:        2 bytes
  3725 ;; Hardware stack levels used: 1
  3726 ;; Hardware stack levels required when called: 4
  3727 ;; This function calls:
  3728 ;;		Nothing
  3729 ;; This function is called by:
  3730 ;;		_executeInstruction
  3731 ;; This function uses a non-reentrant model
  3732 ;;
  3733                           
  3734                           	psect	text22
  3735   002AA6                     __ptext22:
  3736                           	callstack 0
  3737   002AA6                     _Black:
  3738                           	callstack 24
  3739   002AA6  0012               	return		;funcret
  3740   002AA8                     __end_of_Black:
  3741                           	callstack 0
  3742                           
  3743 ;; *************** function _leftCali *****************
  3744 ;; Defined at:
  3745 ;;		line 96 in file "dc_motor.c"
  3746 ;; Parameters:    Size  Location     Type
  3747 ;;  mL              1   38[COMRAM] PTR struct DC_motor
  3748 ;;		 -> main@motorL(9), 
  3749 ;;  mR              1   39[COMRAM] PTR struct DC_motor
  3750 ;;		 -> main@motorR(9), 
  3751 ;; Auto vars:     Size  Location     Type
  3752 ;;  power           1   42[COMRAM] unsigned char 
  3753 ;; Return value:  Size  Location     Type
  3754 ;;                  1    wreg      unsigned char 
  3755 ;; Registers used:
  3756 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3757 ;; Tracked objects:
  3758 ;;		On entry : 0/0
  3759 ;;		On exit  : 0/0
  3760 ;;		Unchanged: 0/0
  3761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3762 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3763 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3764 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3765 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3766 ;;Total ram usage:        5 bytes
  3767 ;; Hardware stack levels used: 1
  3768 ;; Hardware stack levels required when called: 8
  3769 ;; This function calls:
  3770 ;;		_turnLeft
  3771 ;; This function is called by:
  3772 ;;		_main
  3773 ;; This function uses a non-reentrant model
  3774 ;;
  3775                           
  3776                           	psect	text23
  3777   002280                     __ptext23:
  3778                           	callstack 0
  3779   002280                     _leftCali:
  3780                           	callstack 22
  3781   002280                     l477:
  3782   002280  B48E               	btfsc	142,2,c	;volatile
  3783   002282  EF45  F011         	goto	u1471
  3784   002286  EF47  F011         	goto	u1470
  3785   00228A                     u1471:
  3786   00228A  EF40  F011         	goto	l477
  3787   00228E                     u1470:
  3788   00228E                     
  3789                           ;dc_motor.c: 98:     char power = 26;
  3790   00228E  0E1A               	movlw	26
  3791   002290  6E2B               	movwf	leftCali@power^0,c
  3792                           
  3793                           ;dc_motor.c: 99:     while (PORTFbits.RF2 || PORTFbits.RF3) {
  3794   002292  EF93  F011         	goto	l3227
  3795   002296                     l3209:
  3796                           
  3797                           ;dc_motor.c: 100:         _delay((unsigned long)((1000)*(64000000/4000.0)));
  3798   002296  0E52               	movlw	82
  3799   002298  6E2A               	movwf	(??_leftCali+1)^0,c
  3800   00229A  0E2B               	movlw	43
  3801   00229C  6E29               	movwf	??_leftCali^0,c
  3802   00229E  0E00               	movlw	0
  3803   0022A0                     u1917:
  3804   0022A0  2EE8               	decfsz	wreg,f,c
  3805   0022A2  D7FE               	bra	u1917
  3806   0022A4  2E29               	decfsz	??_leftCali^0,f,c
  3807   0022A6  D7FC               	bra	u1917
  3808   0022A8  2E2A               	decfsz	(??_leftCali+1)^0,f,c
  3809   0022AA  D7FA               	bra	u1917
  3810   0022AC  D000               	nop2	
  3811   0022AE                     
  3812                           ;dc_motor.c: 101:         turnLeft(mL,mR,power);
  3813   0022AE  C027  F01C         	movff	leftCali@mL,turnLeft@mL
  3814   0022B2  C028  F01D         	movff	leftCali@mR,turnLeft@mR
  3815   0022B6  C02B  F01E         	movff	leftCali@power,turnLeft@power
  3816   0022BA  ECDD  F00C         	call	_turnLeft	;wreg free
  3817   0022BE                     l482:
  3818   0022BE  A48E               	btfss	142,2,c	;volatile
  3819   0022C0  EF64  F011         	goto	u1481
  3820   0022C4  EF66  F011         	goto	u1480
  3821   0022C8                     u1481:
  3822   0022C8  EF6D  F011         	goto	l3215
  3823   0022CC                     u1480:
  3824   0022CC  B68E               	btfsc	142,3,c	;volatile
  3825   0022CE  EF6B  F011         	goto	u1491
  3826   0022D2  EF6D  F011         	goto	u1490
  3827   0022D6                     u1491:
  3828   0022D6  EF5F  F011         	goto	l482
  3829   0022DA                     u1490:
  3830   0022DA                     l3215:
  3831                           
  3832                           ;dc_motor.c: 104:         _delay((unsigned long)((80)*(64000000/4000.0)));
  3833   0022DA  0E07               	movlw	7
  3834   0022DC  6E2A               	movwf	(??_leftCali+1)^0,c
  3835   0022DE  0E7F               	movlw	127
  3836   0022E0  6E29               	movwf	??_leftCali^0,c
  3837   0022E2  0E50               	movlw	80
  3838   0022E4                     u1927:
  3839   0022E4  2EE8               	decfsz	wreg,f,c
  3840   0022E6  D7FE               	bra	u1927
  3841   0022E8  2E29               	decfsz	??_leftCali^0,f,c
  3842   0022EA  D7FC               	bra	u1927
  3843   0022EC  2E2A               	decfsz	(??_leftCali+1)^0,f,c
  3844   0022EE  D7FA               	bra	u1927
  3845   0022F0                     
  3846                           ;dc_motor.c: 105:         if(!PORTFbits.RF2 && !PORTFbits.RF3) {
  3847   0022F0  B48E               	btfsc	142,2,c	;volatile
  3848   0022F2  EF7D  F011         	goto	u1501
  3849   0022F6  EF7F  F011         	goto	u1500
  3850   0022FA                     u1501:
  3851   0022FA  EF88  F011         	goto	l487
  3852   0022FE                     u1500:
  3853   0022FE  B68E               	btfsc	142,3,c	;volatile
  3854   002300  EF84  F011         	goto	u1511
  3855   002304  EF86  F011         	goto	u1510
  3856   002308                     u1511:
  3857   002308  EF88  F011         	goto	l487
  3858   00230C                     u1510:
  3859   00230C  EF93  F011         	goto	l3227
  3860   002310                     l487:
  3861                           
  3862                           ;dc_motor.c: 107:             if(!PORTFbits.RF2){
  3863   002310  B48E               	btfsc	142,2,c	;volatile
  3864   002312  EF8D  F011         	goto	u1521
  3865   002316  EF8F  F011         	goto	u1520
  3866   00231A                     u1521:
  3867   00231A  EF92  F011         	goto	l3225
  3868   00231E                     u1520:
  3869   00231E                     
  3870                           ;dc_motor.c: 108:                 power--;
  3871   00231E  062B               	decf	leftCali@power^0,f,c
  3872                           
  3873                           ;dc_motor.c: 109:             }
  3874   002320  EF93  F011         	goto	l3227
  3875   002324                     l3225:
  3876                           
  3877                           ;dc_motor.c: 111:                 power++;
  3878   002324  2A2B               	incf	leftCali@power^0,f,c
  3879   002326                     l3227:
  3880                           
  3881                           ;dc_motor.c: 99:     while (PORTFbits.RF2 || PORTFbits.RF3) {
  3882   002326  B48E               	btfsc	142,2,c	;volatile
  3883   002328  EF98  F011         	goto	u1531
  3884   00232C  EF9A  F011         	goto	u1530
  3885   002330                     u1531:
  3886   002330  EF4B  F011         	goto	l3209
  3887   002334                     u1530:
  3888   002334  B68E               	btfsc	142,3,c	;volatile
  3889   002336  EF9F  F011         	goto	u1541
  3890   00233A  EFA1  F011         	goto	u1540
  3891   00233E                     u1541:
  3892   00233E  EF4B  F011         	goto	l3209
  3893   002342                     u1540:
  3894   002342                     
  3895                           ;dc_motor.c: 115:     return power;
  3896   002342  502B               	movf	leftCali@power^0,w,c
  3897   002344  0012               	return		;funcret
  3898   002346                     __end_of_leftCali:
  3899                           	callstack 0
  3900                           
  3901 ;; *************** function _turnLeft *****************
  3902 ;; Defined at:
  3903 ;;		line 133 in file "dc_motor.c"
  3904 ;; Parameters:    Size  Location     Type
  3905 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  3906 ;;		 -> main@motorL(9), 
  3907 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  3908 ;;		 -> main@motorR(9), 
  3909 ;;  power           1   29[COMRAM] unsigned char 
  3910 ;; Auto vars:     Size  Location     Type
  3911 ;;  i               2   36[COMRAM] int 
  3912 ;;  i               2   34[COMRAM] int 
  3913 ;;  maxpower        2   32[COMRAM] int 
  3914 ;; Return value:  Size  Location     Type
  3915 ;;                  1    wreg      void 
  3916 ;; Registers used:
  3917 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3918 ;; Tracked objects:
  3919 ;;		On entry : 0/0
  3920 ;;		On exit  : 0/0
  3921 ;;		Unchanged: 0/0
  3922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3923 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3924 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3925 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3926 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3927 ;;Total ram usage:       11 bytes
  3928 ;; Hardware stack levels used: 1
  3929 ;; Hardware stack levels required when called: 7
  3930 ;; This function calls:
  3931 ;;		_setMotorPWM
  3932 ;;		_stop
  3933 ;; This function is called by:
  3934 ;;		_Green
  3935 ;;		_Pink
  3936 ;;		_reverseYellow
  3937 ;;		_leftCali
  3938 ;; This function uses a non-reentrant model
  3939 ;;
  3940                           
  3941                           	psect	text24
  3942   0019BA                     __ptext24:
  3943                           	callstack 0
  3944   0019BA                     _turnLeft:
  3945                           	callstack 20
  3946   0019BA                     
  3947                           ;dc_motor.c: 133: void turnLeft(DC_motor *mL, DC_motor *mR, char power);dc_motor.c: 134:
      +                           {;dc_motor.c: 136:     if (mL->power != 0 || mR->power != 0) {
  3948   0019BA  501C               	movf	turnLeft@mL^0,w,c
  3949   0019BC  6ED9               	movwf	fsr2l,c
  3950   0019BE  6ADA               	clrf	fsr2h,c
  3951   0019C0  50DF               	movf	indf2,w,c
  3952   0019C2  A4D8               	btfss	status,2,c
  3953   0019C4  EFE6  F00C         	goto	u1021
  3954   0019C8  EFE8  F00C         	goto	u1020
  3955   0019CC                     u1021:
  3956   0019CC  EFF3  F00C         	goto	l2577
  3957   0019D0                     u1020:
  3958   0019D0  501D               	movf	turnLeft@mR^0,w,c
  3959   0019D2  6ED9               	movwf	fsr2l,c
  3960   0019D4  6ADA               	clrf	fsr2h,c
  3961   0019D6  50DF               	movf	indf2,w,c
  3962   0019D8  B4D8               	btfsc	status,2,c
  3963   0019DA  EFF1  F00C         	goto	u1031
  3964   0019DE  EFF3  F00C         	goto	u1030
  3965   0019E2                     u1031:
  3966   0019E2  EFF9  F00C         	goto	l2579
  3967   0019E6                     u1030:
  3968   0019E6                     l2577:
  3969                           
  3970                           ;dc_motor.c: 137:         stop(mL, mR);
  3971   0019E6  C01C  F015         	movff	turnLeft@mL,stop@mL
  3972   0019EA  C01D  F016         	movff	turnLeft@mR,stop@mR
  3973   0019EE  ECAA  F012         	call	_stop	;wreg free
  3974   0019F2                     l2579:
  3975                           
  3976                           ;dc_motor.c: 141:     mL->direction = 0;
  3977   0019F2  501C               	movf	turnLeft@mL^0,w,c
  3978   0019F4  6ED9               	movwf	fsr2l,c
  3979   0019F6  6ADA               	clrf	fsr2h,c
  3980   0019F8  0E01               	movlw	1
  3981   0019FA  26D9               	addwf	fsr2l,f,c
  3982   0019FC  6ADF               	clrf	indf2,c
  3983   0019FE                     
  3984                           ;dc_motor.c: 142:     mR->direction = 1;
  3985   0019FE  501D               	movf	turnLeft@mR^0,w,c
  3986   001A00  6ED9               	movwf	fsr2l,c
  3987   001A02  6ADA               	clrf	fsr2h,c
  3988   001A04  0E01               	movlw	1
  3989   001A06  26D9               	addwf	fsr2l,f,c
  3990   001A08  0E01               	movlw	1
  3991   001A0A  6EDF               	movwf	indf2,c
  3992   001A0C                     
  3993                           ;dc_motor.c: 143:     int maxpower = power;
  3994   001A0C  C01E  F021         	movff	turnLeft@power,turnLeft@maxpower
  3995   001A10  6A22               	clrf	(turnLeft@maxpower+1)^0,c
  3996   001A12                     
  3997                           ;dc_motor.c: 146:     for (int i = 0; i < maxpower; i++) {
  3998   001A12  0E00               	movlw	0
  3999   001A14  6E24               	movwf	(turnLeft@i+1)^0,c
  4000   001A16  0E00               	movlw	0
  4001   001A18  6E23               	movwf	turnLeft@i^0,c
  4002   001A1A  EF2F  F00D         	goto	l2597
  4003   001A1E                     l2587:
  4004                           
  4005                           ;dc_motor.c: 147:         mL->power = i;
  4006   001A1E  501C               	movf	turnLeft@mL^0,w,c
  4007   001A20  6ED9               	movwf	fsr2l,c
  4008   001A22  6ADA               	clrf	fsr2h,c
  4009   001A24  C023  FFDF         	movff	turnLeft@i,indf2
  4010                           
  4011                           ;dc_motor.c: 148:         mR->power = i;
  4012   001A28  501D               	movf	turnLeft@mR^0,w,c
  4013   001A2A  6ED9               	movwf	fsr2l,c
  4014   001A2C  6ADA               	clrf	fsr2h,c
  4015   001A2E  C023  FFDF         	movff	turnLeft@i,indf2
  4016   001A32                     
  4017                           ;dc_motor.c: 149:         setMotorPWM(mL);
  4018   001A32  C01C  F010         	movff	turnLeft@mL,setMotorPWM@m
  4019   001A36  ECF6  F00A         	call	_setMotorPWM	;wreg free
  4020   001A3A                     
  4021                           ;dc_motor.c: 150:         setMotorPWM(mR);
  4022   001A3A  C01D  F010         	movff	turnLeft@mR,setMotorPWM@m
  4023   001A3E  ECF6  F00A         	call	_setMotorPWM	;wreg free
  4024   001A42                     
  4025                           ;dc_motor.c: 151:         _delay((unsigned long)((15)*(64000000/4000.0)));
  4026   001A42  0E02               	movlw	2
  4027   001A44  6E20               	movwf	(??_turnLeft+1)^0,c
  4028   001A46  0E38               	movlw	56
  4029   001A48  6E1F               	movwf	??_turnLeft^0,c
  4030   001A4A  0EAD               	movlw	173
  4031   001A4C                     u1937:
  4032   001A4C  2EE8               	decfsz	wreg,f,c
  4033   001A4E  D7FE               	bra	u1937
  4034   001A50  2E1F               	decfsz	??_turnLeft^0,f,c
  4035   001A52  D7FC               	bra	u1937
  4036   001A54  2E20               	decfsz	(??_turnLeft+1)^0,f,c
  4037   001A56  D7FA               	bra	u1937
  4038   001A58  0000               	nop	
  4039   001A5A                     
  4040                           ;dc_motor.c: 153:     }
  4041   001A5A  4A23               	infsnz	turnLeft@i^0,f,c
  4042   001A5C  2A24               	incf	(turnLeft@i+1)^0,f,c
  4043   001A5E                     l2597:
  4044   001A5E  5021               	movf	turnLeft@maxpower^0,w,c
  4045   001A60  5C23               	subwf	turnLeft@i^0,w,c
  4046   001A62  5024               	movf	(turnLeft@i+1)^0,w,c
  4047   001A64  0A80               	xorlw	128
  4048   001A66  6E1F               	movwf	??_turnLeft^0,c
  4049   001A68  5022               	movf	(turnLeft@maxpower+1)^0,w,c
  4050   001A6A  0A80               	xorlw	128
  4051   001A6C  581F               	subwfb	??_turnLeft^0,w,c
  4052   001A6E  A0D8               	btfss	status,0,c
  4053   001A70  EF3C  F00D         	goto	u1041
  4054   001A74  EF3E  F00D         	goto	u1040
  4055   001A78                     u1041:
  4056   001A78  EF0F  F00D         	goto	l2587
  4057   001A7C                     u1040:
  4058   001A7C                     
  4059                           ;dc_motor.c: 155:     _delay((unsigned long)((280)*(64000000/4000.0)));
  4060   001A7C  0E17               	movlw	23
  4061   001A7E  6E20               	movwf	(??_turnLeft+1)^0,c
  4062   001A80  0EBB               	movlw	187
  4063   001A82  6E1F               	movwf	??_turnLeft^0,c
  4064   001A84  0E1D               	movlw	29
  4065   001A86                     u1947:
  4066   001A86  2EE8               	decfsz	wreg,f,c
  4067   001A88  D7FE               	bra	u1947
  4068   001A8A  2E1F               	decfsz	??_turnLeft^0,f,c
  4069   001A8C  D7FC               	bra	u1947
  4070   001A8E  2E20               	decfsz	(??_turnLeft+1)^0,f,c
  4071   001A90  D7FA               	bra	u1947
  4072   001A92  0000               	nop	
  4073   001A94                     
  4074                           ;dc_motor.c: 158:     for (int i = maxpower; i >= 0; i--) {
  4075   001A94  C021  F025         	movff	turnLeft@maxpower,turnLeft@i_2057
  4076   001A98  C022  F026         	movff	turnLeft@maxpower+1,turnLeft@i_2057+1
  4077   001A9C                     l2603:
  4078   001A9C  BE26               	btfsc	(turnLeft@i_2057+1)^0,7,c
  4079   001A9E  EF55  F00D         	goto	u1050
  4080   001AA2  EF53  F00D         	goto	u1051
  4081   001AA6                     u1051:
  4082   001AA6  EF57  F00D         	goto	l2607
  4083   001AAA                     u1050:
  4084   001AAA  EF76  F00D         	goto	l508
  4085   001AAE                     l2607:
  4086                           
  4087                           ;dc_motor.c: 159:         mL->power = i;
  4088   001AAE  501C               	movf	turnLeft@mL^0,w,c
  4089   001AB0  6ED9               	movwf	fsr2l,c
  4090   001AB2  6ADA               	clrf	fsr2h,c
  4091   001AB4  C025  FFDF         	movff	turnLeft@i_2057,indf2
  4092                           
  4093                           ;dc_motor.c: 160:         mR->power = i;
  4094   001AB8  501D               	movf	turnLeft@mR^0,w,c
  4095   001ABA  6ED9               	movwf	fsr2l,c
  4096   001ABC  6ADA               	clrf	fsr2h,c
  4097   001ABE  C025  FFDF         	movff	turnLeft@i_2057,indf2
  4098   001AC2                     
  4099                           ;dc_motor.c: 161:         setMotorPWM(mL);
  4100   001AC2  C01C  F010         	movff	turnLeft@mL,setMotorPWM@m
  4101   001AC6  ECF6  F00A         	call	_setMotorPWM	;wreg free
  4102   001ACA                     
  4103                           ;dc_motor.c: 162:         setMotorPWM(mR);
  4104   001ACA  C01D  F010         	movff	turnLeft@mR,setMotorPWM@m
  4105   001ACE  ECF6  F00A         	call	_setMotorPWM	;wreg free
  4106   001AD2                     
  4107                           ;dc_motor.c: 163:         _delay((unsigned long)((5)*(64000000/4000.0)));
  4108   001AD2  0E68               	movlw	104
  4109   001AD4  6E1F               	movwf	??_turnLeft^0,c
  4110   001AD6  0EE4               	movlw	228
  4111   001AD8                     u1957:
  4112   001AD8  2EE8               	decfsz	wreg,f,c
  4113   001ADA  D7FE               	bra	u1957
  4114   001ADC  2E1F               	decfsz	??_turnLeft^0,f,c
  4115   001ADE  D7FC               	bra	u1957
  4116   001AE0  D000               	nop2	
  4117   001AE2                     
  4118                           ;dc_motor.c: 165:     }
  4119   001AE2  0625               	decf	turnLeft@i_2057^0,f,c
  4120   001AE4  A0D8               	btfss	status,0,c
  4121   001AE6  0626               	decf	(turnLeft@i_2057+1)^0,f,c
  4122   001AE8  EF4E  F00D         	goto	l2603
  4123   001AEC                     l508:
  4124   001AEC  0012               	return		;funcret
  4125   001AEE                     __end_of_turnLeft:
  4126                           	callstack 0
  4127                           
  4128 ;; *************** function _interrupts_init *****************
  4129 ;; Defined at:
  4130 ;;		line 14 in file "interrupts.c"
  4131 ;; Parameters:    Size  Location     Type
  4132 ;;		None
  4133 ;; Auto vars:     Size  Location     Type
  4134 ;;		None
  4135 ;; Return value:  Size  Location     Type
  4136 ;;                  1    wreg      void 
  4137 ;; Registers used:
  4138 ;;		wreg, status,2, status,0, cstack
  4139 ;; Tracked objects:
  4140 ;;		On entry : 0/0
  4141 ;;		On exit  : 0/0
  4142 ;;		Unchanged: 0/0
  4143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4144 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4145 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4146 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4147 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4148 ;;Total ram usage:        0 bytes
  4149 ;; Hardware stack levels used: 1
  4150 ;; Hardware stack levels required when called: 7
  4151 ;; This function calls:
  4152 ;;		_clearInterrupt
  4153 ;;		_color_writetoaddr
  4154 ;; This function is called by:
  4155 ;;		_main
  4156 ;; This function uses a non-reentrant model
  4157 ;;
  4158                           
  4159                           	psect	text25
  4160   0025BE                     __ptext25:
  4161                           	callstack 0
  4162   0025BE                     _interrupts_init:
  4163                           	callstack 23
  4164   0025BE                     
  4165                           ;interrupts.c: 21:     INT0PPS = 0x08;
  4166   0025BE  0E08               	movlw	8
  4167   0025C0  010D               	movlb	13	; () banked
  4168   0025C2  6FF0               	movwf	240,b	;volatile
  4169   0025C4                     
  4170                           ; BSR set to: 13
  4171                           ;interrupts.c: 22:     PIE0bits.INT0IE = 1;
  4172   0025C4  010E               	movlb	14	; () banked
  4173   0025C6  8129               	bsf	41,0,b	;volatile
  4174   0025C8                     
  4175                           ; BSR set to: 14
  4176                           ;interrupts.c: 23:     INTCONbits.INT0EDG = 0;
  4177   0025C8  90F2               	bcf	242,0,c	;volatile
  4178   0025CA                     
  4179                           ; BSR set to: 14
  4180                           ;interrupts.c: 24:     IPR0bits.INT0IP = 0;
  4181   0025CA  911F               	bcf	31,0,b	;volatile
  4182   0025CC                     
  4183                           ; BSR set to: 14
  4184                           ;interrupts.c: 25:     ANSELBbits.ANSELB0 = 0;
  4185   0025CC  919A               	bcf	154,0,b	;volatile
  4186   0025CE                     
  4187                           ; BSR set to: 14
  4188                           ;interrupts.c: 28:     color_writetoaddr(0x04, 0x00);
  4189   0025CE  0E00               	movlw	0
  4190   0025D0  6E05               	movwf	color_writetoaddr@value^0,c
  4191   0025D2  0E04               	movlw	4
  4192   0025D4  EC9D  F014         	call	_color_writetoaddr
  4193   0025D8                     
  4194                           ;interrupts.c: 29:     color_writetoaddr(0x05, 0x01);
  4195   0025D8  0E01               	movlw	1
  4196   0025DA  6E05               	movwf	color_writetoaddr@value^0,c
  4197   0025DC  0E05               	movlw	5
  4198   0025DE  EC9D  F014         	call	_color_writetoaddr
  4199   0025E2                     
  4200                           ;interrupts.c: 30:     color_writetoaddr(0x06, 0b00000000);
  4201   0025E2  0E00               	movlw	0
  4202   0025E4  6E05               	movwf	color_writetoaddr@value^0,c
  4203   0025E6  0E06               	movlw	6
  4204   0025E8  EC9D  F014         	call	_color_writetoaddr
  4205   0025EC                     
  4206                           ;interrupts.c: 31:     color_writetoaddr(0x07, 0b00000010);
  4207   0025EC  0E02               	movlw	2
  4208   0025EE  6E05               	movwf	color_writetoaddr@value^0,c
  4209   0025F0  0E07               	movlw	7
  4210   0025F2  EC9D  F014         	call	_color_writetoaddr
  4211   0025F6                     
  4212                           ;interrupts.c: 37:     color_writetoaddr(0x0C, 0b0011);
  4213   0025F6  0E03               	movlw	3
  4214   0025F8  6E05               	movwf	color_writetoaddr@value^0,c
  4215   0025FA  0E0C               	movlw	12
  4216   0025FC  EC9D  F014         	call	_color_writetoaddr
  4217   002600                     
  4218                           ;interrupts.c: 40:     PIE0bits.TMR0IE = 1;
  4219   002600  010E               	movlb	14	; () banked
  4220   002602  8B29               	bsf	41,5,b	;volatile
  4221   002604                     
  4222                           ; BSR set to: 14
  4223                           ;interrupts.c: 41:     INTCONbits.PEIE=1;
  4224   002604  8CF2               	bsf	242,6,c	;volatile
  4225   002606                     
  4226                           ; BSR set to: 14
  4227                           ;interrupts.c: 53:     clearInterrupt();
  4228   002606  ECBD  F014         	call	_clearInterrupt	;wreg free
  4229   00260A                     
  4230                           ;interrupts.c: 56:     INTCONbits.GIE=1;
  4231   00260A  8EF2               	bsf	242,7,c	;volatile
  4232   00260C  0012               	return		;funcret
  4233   00260E                     __end_of_interrupts_init:
  4234                           	callstack 0
  4235                           
  4236 ;; *************** function _clearInterrupt *****************
  4237 ;; Defined at:
  4238 ;;		line 99 in file "interrupts.c"
  4239 ;; Parameters:    Size  Location     Type
  4240 ;;		None
  4241 ;; Auto vars:     Size  Location     Type
  4242 ;;		None
  4243 ;; Return value:  Size  Location     Type
  4244 ;;                  1    wreg      void 
  4245 ;; Registers used:
  4246 ;;		wreg, status,2, status,0, cstack
  4247 ;; Tracked objects:
  4248 ;;		On entry : 0/0
  4249 ;;		On exit  : 0/0
  4250 ;;		Unchanged: 0/0
  4251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4252 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4253 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4254 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4255 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4256 ;;Total ram usage:        0 bytes
  4257 ;; Hardware stack levels used: 1
  4258 ;; Hardware stack levels required when called: 6
  4259 ;; This function calls:
  4260 ;;		_I2C_2_Master_Start
  4261 ;;		_I2C_2_Master_Stop
  4262 ;;		_I2C_2_Master_Write
  4263 ;; This function is called by:
  4264 ;;		_main
  4265 ;;		_interrupts_init
  4266 ;; This function uses a non-reentrant model
  4267 ;;
  4268                           
  4269                           	psect	text26
  4270   00297A                     __ptext26:
  4271                           	callstack 0
  4272   00297A                     _clearInterrupt:
  4273                           	callstack 23
  4274   00297A                     
  4275                           ;interrupts.c: 100:     I2C_2_Master_Start();
  4276   00297A  EC40  F015         	call	_I2C_2_Master_Start	;wreg free
  4277                           
  4278                           ;interrupts.c: 101:     I2C_2_Master_Write(0x52 | 0x00);
  4279   00297E  0E52               	movlw	82
  4280   002980  EC16  F015         	call	_I2C_2_Master_Write
  4281                           
  4282                           ;interrupts.c: 102:     I2C_2_Master_Write(0xe0 | 0x06 );
  4283   002984  0EE6               	movlw	230
  4284   002986  EC16  F015         	call	_I2C_2_Master_Write
  4285                           
  4286                           ;interrupts.c: 103:     I2C_2_Master_Stop();
  4287   00298A  EC3B  F015         	call	_I2C_2_Master_Stop	;wreg free
  4288   00298E  0012               	return		;funcret
  4289   002990                     __end_of_clearInterrupt:
  4290                           	callstack 0
  4291                           
  4292 ;; *************** function _init_buttons_LED *****************
  4293 ;; Defined at:
  4294 ;;		line 8 in file "interact.c"
  4295 ;; Parameters:    Size  Location     Type
  4296 ;;		None
  4297 ;; Auto vars:     Size  Location     Type
  4298 ;;		None
  4299 ;; Return value:  Size  Location     Type
  4300 ;;                  1    wreg      void 
  4301 ;; Registers used:
  4302 ;;		None
  4303 ;; Tracked objects:
  4304 ;;		On entry : 0/0
  4305 ;;		On exit  : 0/0
  4306 ;;		Unchanged: 0/0
  4307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4308 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4309 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4310 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4311 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4312 ;;Total ram usage:        0 bytes
  4313 ;; Hardware stack levels used: 1
  4314 ;; Hardware stack levels required when called: 4
  4315 ;; This function calls:
  4316 ;;		Nothing
  4317 ;; This function is called by:
  4318 ;;		_main
  4319 ;; This function uses a non-reentrant model
  4320 ;;
  4321                           
  4322                           	psect	text27
  4323   0029A6                     __ptext27:
  4324                           	callstack 0
  4325   0029A6                     _init_buttons_LED:
  4326                           	callstack 26
  4327   0029A6                     
  4328                           ;interact.c: 10:     TRISGbits.TRISG0 = 0;
  4329   0029A6  9087               	bcf	135,0,c	;volatile
  4330                           
  4331                           ;interact.c: 11:     TRISEbits.TRISE7 = 0;
  4332   0029A8  9E85               	bcf	133,7,c	;volatile
  4333                           
  4334                           ;interact.c: 12:     TRISAbits.TRISA3 = 0;
  4335   0029AA  9681               	bcf	129,3,c	;volatile
  4336                           
  4337                           ;interact.c: 13:     TRISDbits.TRISD3 = 0;
  4338   0029AC  9684               	bcf	132,3,c	;volatile
  4339                           
  4340                           ;interact.c: 14:     TRISHbits.TRISH1 = 0;
  4341   0029AE  9288               	bcf	136,1,c	;volatile
  4342                           
  4343                           ;interact.c: 15:     TRISDbits.TRISD4 = 0;
  4344   0029B0  9884               	bcf	132,4,c	;volatile
  4345                           
  4346                           ;interact.c: 19:     LATGbits.LATG0 = 0;
  4347   0029B2  907F               	bcf	127,0,c	;volatile
  4348                           
  4349                           ;interact.c: 20:     LATEbits.LATE7 = 0;
  4350   0029B4  9E7D               	bcf	125,7,c	;volatile
  4351                           
  4352                           ;interact.c: 21:     LATAbits.LATA3 = 0;
  4353   0029B6  9679               	bcf	121,3,c	;volatile
  4354   0029B8  0012               	return		;funcret
  4355   0029BA                     __end_of_init_buttons_LED:
  4356                           	callstack 0
  4357                           
  4358 ;; *************** function _initDCmotorsPWM *****************
  4359 ;; Defined at:
  4360 ;;		line 4 in file "dc_motor.c"
  4361 ;; Parameters:    Size  Location     Type
  4362 ;;  PWMperiod       2    2[COMRAM] unsigned int 
  4363 ;; Auto vars:     Size  Location     Type
  4364 ;;		None
  4365 ;; Return value:  Size  Location     Type
  4366 ;;                  1    wreg      void 
  4367 ;; Registers used:
  4368 ;;		wreg, status,2
  4369 ;; Tracked objects:
  4370 ;;		On entry : 0/0
  4371 ;;		On exit  : 0/0
  4372 ;;		Unchanged: 0/0
  4373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4374 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4375 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4376 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4377 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4378 ;;Total ram usage:        2 bytes
  4379 ;; Hardware stack levels used: 1
  4380 ;; Hardware stack levels required when called: 4
  4381 ;; This function calls:
  4382 ;;		Nothing
  4383 ;; This function is called by:
  4384 ;;		_main
  4385 ;; This function uses a non-reentrant model
  4386 ;;
  4387                           
  4388                           	psect	text28
  4389   0023EE                     __ptext28:
  4390                           	callstack 0
  4391   0023EE                     _initDCmotorsPWM:
  4392                           	callstack 26
  4393   0023EE                     
  4394                           ;dc_motor.c: 6:     TRISEbits.TRISE2 = 0;
  4395   0023EE  9485               	bcf	133,2,c	;volatile
  4396                           
  4397                           ;dc_motor.c: 7:     TRISEbits.TRISE4 = 0;
  4398   0023F0  9885               	bcf	133,4,c	;volatile
  4399                           
  4400                           ;dc_motor.c: 8:     TRISCbits.TRISC7 = 0;
  4401   0023F2  9E83               	bcf	131,7,c	;volatile
  4402                           
  4403                           ;dc_motor.c: 9:     TRISGbits.TRISG6 = 0;
  4404   0023F4  9C87               	bcf	135,6,c	;volatile
  4405   0023F6                     
  4406                           ;dc_motor.c: 12:     RE2PPS=0x05;
  4407   0023F6  0E05               	movlw	5
  4408   0023F8  010E               	movlb	14	; () banked
  4409   0023FA  6F74               	movwf	116,b	;volatile
  4410                           
  4411                           ;dc_motor.c: 13:     RE4PPS=0x06;
  4412   0023FC  0E06               	movlw	6
  4413   0023FE  6F76               	movwf	118,b	;volatile
  4414                           
  4415                           ;dc_motor.c: 14:     RC7PPS=0x07;
  4416   002400  0E07               	movlw	7
  4417   002402  6F69               	movwf	105,b	;volatile
  4418                           
  4419                           ;dc_motor.c: 15:     RG6PPS=0x08;
  4420   002404  0E08               	movlw	8
  4421   002406  6F88               	movwf	136,b	;volatile
  4422                           
  4423                           ;dc_motor.c: 18:     T2CONbits.CKPS=0b100;
  4424   002408  50BD               	movf	189,w,c	;volatile
  4425   00240A  0B8F               	andlw	-113
  4426   00240C  0940               	iorlw	64
  4427   00240E  6EBD               	movwf	189,c	;volatile
  4428                           
  4429                           ;dc_motor.c: 19:     T2HLTbits.MODE=0b00000;
  4430   002410  0EE0               	movlw	-32
  4431   002412  16BE               	andwf	190,f,c	;volatile
  4432                           
  4433                           ;dc_motor.c: 20:     T2CLKCONbits.CS=0b0001;
  4434   002414  50BF               	movf	191,w,c	;volatile
  4435   002416  0BF0               	andlw	-16
  4436   002418  0901               	iorlw	1
  4437   00241A  6EBF               	movwf	191,c	;volatile
  4438   00241C                     
  4439                           ; BSR set to: 14
  4440                           ;dc_motor.c: 24:     T2PR=PWMperiod;
  4441   00241C  C003  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  4442   002420                     
  4443                           ; BSR set to: 14
  4444                           ;dc_motor.c: 25:     T2CONbits.ON=1;
  4445   002420  8EBD               	bsf	189,7,c	;volatile
  4446                           
  4447                           ;dc_motor.c: 29:     CCPR1H=0;
  4448   002422  0E00               	movlw	0
  4449   002424  6EAA               	movwf	170,c	;volatile
  4450                           
  4451                           ;dc_motor.c: 30:     CCPR2H=0;
  4452   002426  0E00               	movlw	0
  4453   002428  6EA6               	movwf	166,c	;volatile
  4454                           
  4455                           ;dc_motor.c: 31:     CCPR3H=0;
  4456   00242A  0E00               	movlw	0
  4457   00242C  010F               	movlb	15	; () banked
  4458   00242E  6F25               	movwf	37,b	;volatile
  4459                           
  4460                           ;dc_motor.c: 32:     CCPR4H=0;
  4461   002430  0E00               	movlw	0
  4462   002432  6F21               	movwf	33,b	;volatile
  4463                           
  4464                           ;dc_motor.c: 35:     CCPTMRS0bits.C1TSEL=0;
  4465   002434  0EFC               	movlw	-4
  4466   002436  16AD               	andwf	173,f,c	;volatile
  4467                           
  4468                           ;dc_motor.c: 36:     CCPTMRS0bits.C2TSEL=0;
  4469   002438  0EF3               	movlw	-13
  4470   00243A  16AD               	andwf	173,f,c	;volatile
  4471                           
  4472                           ;dc_motor.c: 37:     CCPTMRS0bits.C3TSEL=0;
  4473   00243C  0ECF               	movlw	-49
  4474   00243E  16AD               	andwf	173,f,c	;volatile
  4475                           
  4476                           ;dc_motor.c: 38:     CCPTMRS0bits.C4TSEL=0;
  4477   002440  0E3F               	movlw	-193
  4478   002442  16AD               	andwf	173,f,c	;volatile
  4479   002444                     
  4480                           ; BSR set to: 15
  4481                           ;dc_motor.c: 41:     CCP1CONbits.FMT=1;
  4482   002444  88AB               	bsf	171,4,c	;volatile
  4483                           
  4484                           ;dc_motor.c: 42:     CCP1CONbits.CCP1MODE=0b1100;
  4485   002446  50AB               	movf	171,w,c	;volatile
  4486   002448  0BF0               	andlw	-16
  4487   00244A  090C               	iorlw	12
  4488   00244C  6EAB               	movwf	171,c	;volatile
  4489   00244E                     
  4490                           ; BSR set to: 15
  4491                           ;dc_motor.c: 43:     CCP1CONbits.EN=1;
  4492   00244E  8EAB               	bsf	171,7,c	;volatile
  4493   002450                     
  4494                           ; BSR set to: 15
  4495                           ;dc_motor.c: 45:     CCP2CONbits.FMT=1;
  4496   002450  88A7               	bsf	167,4,c	;volatile
  4497                           
  4498                           ;dc_motor.c: 46:     CCP2CONbits.CCP2MODE=0b1100;
  4499   002452  50A7               	movf	167,w,c	;volatile
  4500   002454  0BF0               	andlw	-16
  4501   002456  090C               	iorlw	12
  4502   002458  6EA7               	movwf	167,c	;volatile
  4503   00245A                     
  4504                           ; BSR set to: 15
  4505                           ;dc_motor.c: 47:     CCP2CONbits.EN=1;
  4506   00245A  8EA7               	bsf	167,7,c	;volatile
  4507   00245C                     
  4508                           ; BSR set to: 15
  4509                           ;dc_motor.c: 49:     CCP3CONbits.FMT=1;
  4510   00245C  8926               	bsf	38,4,b	;volatile
  4511                           
  4512                           ;dc_motor.c: 50:     CCP3CONbits.CCP3MODE=0b1100;
  4513   00245E  5126               	movf	38,w,b	;volatile
  4514   002460  0BF0               	andlw	-16
  4515   002462  090C               	iorlw	12
  4516   002464  6F26               	movwf	38,b	;volatile
  4517   002466                     
  4518                           ; BSR set to: 15
  4519                           ;dc_motor.c: 51:     CCP3CONbits.EN=1;
  4520   002466  8F26               	bsf	38,7,b	;volatile
  4521   002468                     
  4522                           ; BSR set to: 15
  4523                           ;dc_motor.c: 53:     CCP4CONbits.FMT=1;
  4524   002468  8922               	bsf	34,4,b	;volatile
  4525                           
  4526                           ;dc_motor.c: 54:     CCP4CONbits.CCP4MODE=0b1100;
  4527   00246A  5122               	movf	34,w,b	;volatile
  4528   00246C  0BF0               	andlw	-16
  4529   00246E  090C               	iorlw	12
  4530   002470  6F22               	movwf	34,b	;volatile
  4531   002472                     
  4532                           ; BSR set to: 15
  4533                           ;dc_motor.c: 55:     CCP4CONbits.EN=1;
  4534   002472  8F22               	bsf	34,7,b	;volatile
  4535   002474                     
  4536                           ; BSR set to: 15
  4537   002474  0012               	return		;funcret
  4538   002476                     __end_of_initDCmotorsPWM:
  4539                           	callstack 0
  4540                           
  4541 ;; *************** function _initButtons *****************
  4542 ;; Defined at:
  4543 ;;		line 12 in file "feedback.c"
  4544 ;; Parameters:    Size  Location     Type
  4545 ;;		None
  4546 ;; Auto vars:     Size  Location     Type
  4547 ;;		None
  4548 ;; Return value:  Size  Location     Type
  4549 ;;                  1    wreg      void 
  4550 ;; Registers used:
  4551 ;;		None
  4552 ;; Tracked objects:
  4553 ;;		On entry : 0/0
  4554 ;;		On exit  : 0/0
  4555 ;;		Unchanged: 0/0
  4556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4557 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4558 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4559 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4560 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4561 ;;Total ram usage:        0 bytes
  4562 ;; Hardware stack levels used: 1
  4563 ;; Hardware stack levels required when called: 4
  4564 ;; This function calls:
  4565 ;;		Nothing
  4566 ;; This function is called by:
  4567 ;;		_main
  4568 ;; This function uses a non-reentrant model
  4569 ;;
  4570                           
  4571                           	psect	text29
  4572   002A20                     __ptext29:
  4573                           	callstack 0
  4574   002A20                     _initButtons:
  4575                           	callstack 26
  4576   002A20                     
  4577                           ;feedback.c: 13:     TRISFbits.TRISF2 = 1;
  4578   002A20  8486               	bsf	134,2,c	;volatile
  4579                           
  4580                           ;feedback.c: 14:     ANSELFbits.ANSELF2=0;
  4581   002A22  010E               	movlb	14	; () banked
  4582   002A24  95B4               	bcf	180,2,b	;volatile
  4583                           
  4584                           ;feedback.c: 15:     TRISFbits.TRISF3 = 1;
  4585   002A26  8686               	bsf	134,3,c	;volatile
  4586                           
  4587                           ;feedback.c: 16:     ANSELFbits.ANSELF3=0;
  4588   002A28  97B4               	bcf	180,3,b	;volatile
  4589   002A2A                     
  4590                           ; BSR set to: 14
  4591   002A2A  0012               	return		;funcret
  4592   002A2C                     __end_of_initButtons:
  4593                           	callstack 0
  4594                           
  4595 ;; *************** function _initBoardLEDs *****************
  4596 ;; Defined at:
  4597 ;;		line 5 in file "feedback.c"
  4598 ;; Parameters:    Size  Location     Type
  4599 ;;		None
  4600 ;; Auto vars:     Size  Location     Type
  4601 ;;		None
  4602 ;; Return value:  Size  Location     Type
  4603 ;;                  1    wreg      void 
  4604 ;; Registers used:
  4605 ;;		None
  4606 ;; Tracked objects:
  4607 ;;		On entry : 0/0
  4608 ;;		On exit  : 0/0
  4609 ;;		Unchanged: 0/0
  4610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4611 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4612 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4613 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4614 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4615 ;;Total ram usage:        0 bytes
  4616 ;; Hardware stack levels used: 1
  4617 ;; Hardware stack levels required when called: 4
  4618 ;; This function calls:
  4619 ;;		Nothing
  4620 ;; This function is called by:
  4621 ;;		_main
  4622 ;; This function uses a non-reentrant model
  4623 ;;
  4624                           
  4625                           	psect	text30
  4626   002A4E                     __ptext30:
  4627                           	callstack 0
  4628   002A4E                     _initBoardLEDs:
  4629                           	callstack 26
  4630   002A4E                     
  4631                           ;feedback.c: 6:     TRISDbits.TRISD7 = 0;
  4632   002A4E  9E84               	bcf	132,7,c	;volatile
  4633                           
  4634                           ;feedback.c: 7:     LATDbits.LATD7 = 0;
  4635   002A50  9E7C               	bcf	124,7,c	;volatile
  4636                           
  4637                           ;feedback.c: 8:     TRISHbits.TRISH3 = 0;
  4638   002A52  9688               	bcf	136,3,c	;volatile
  4639                           
  4640                           ;feedback.c: 9:     LATHbits.LATH3 = 0;
  4641   002A54  9680               	bcf	128,3,c	;volatile
  4642   002A56  0012               	return		;funcret
  4643   002A58                     __end_of_initBoardLEDs:
  4644                           	callstack 0
  4645                           
  4646 ;; *************** function _indicateInstruction *****************
  4647 ;; Defined at:
  4648 ;;		line 31 in file "feedback.c"
  4649 ;; Parameters:    Size  Location     Type
  4650 ;;  period          1    wreg     unsigned char 
  4651 ;; Auto vars:     Size  Location     Type
  4652 ;;  period          1    5[COMRAM] unsigned char 
  4653 ;;  j               2    6[COMRAM] int 
  4654 ;;  i               2    8[COMRAM] int 
  4655 ;; Return value:  Size  Location     Type
  4656 ;;                  1    wreg      void 
  4657 ;; Registers used:
  4658 ;;		wreg, status,2, status,0
  4659 ;; Tracked objects:
  4660 ;;		On entry : 0/0
  4661 ;;		On exit  : 0/0
  4662 ;;		Unchanged: 0/0
  4663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4664 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4665 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4666 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4667 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4668 ;;Total ram usage:        8 bytes
  4669 ;; Hardware stack levels used: 1
  4670 ;; Hardware stack levels required when called: 4
  4671 ;; This function calls:
  4672 ;;		Nothing
  4673 ;; This function is called by:
  4674 ;;		_main
  4675 ;; This function uses a non-reentrant model
  4676 ;;
  4677                           
  4678                           	psect	text31
  4679   002346                     __ptext31:
  4680                           	callstack 0
  4681   002346                     _indicateInstruction:
  4682                           	callstack 26
  4683                           
  4684                           ;incstack = 0
  4685                           ;indicateInstruction@period stored from wreg
  4686   002346  6E06               	movwf	indicateInstruction@period^0,c
  4687   002348                     
  4688                           ;feedback.c: 32:     for (int i = 0; i < 2; i++) {
  4689   002348  0E00               	movlw	0
  4690   00234A  6E0A               	movwf	(indicateInstruction@i+1)^0,c
  4691   00234C  0E00               	movlw	0
  4692   00234E  6E09               	movwf	indicateInstruction@i^0,c
  4693   002350                     l3261:
  4694                           
  4695                           ;feedback.c: 33:         for (int j = 0; j < period; j++) {
  4696   002350  0E00               	movlw	0
  4697   002352  6E08               	movwf	(indicateInstruction@j+1)^0,c
  4698   002354  0E00               	movlw	0
  4699   002356  6E07               	movwf	indicateInstruction@j^0,c
  4700   002358  EFC8  F011         	goto	l653
  4701   00235C                     l654:
  4702                           
  4703                           ;feedback.c: 34:             LATHbits.LATH3 = 1;
  4704   00235C  8680               	bsf	128,3,c	;volatile
  4705   00235E                     
  4706                           ;feedback.c: 35:             _delay((unsigned long)((150)*(64000000/4000.0)));
  4707   00235E  0E0D               	movlw	13
  4708   002360  6E04               	movwf	(??_indicateInstruction+1)^0,c
  4709   002362  0E2D               	movlw	45
  4710   002364  6E03               	movwf	??_indicateInstruction^0,c
  4711   002366  0ED8               	movlw	216
  4712   002368                     u1967:
  4713   002368  2EE8               	decfsz	wreg,f,c
  4714   00236A  D7FE               	bra	u1967
  4715   00236C  2E03               	decfsz	??_indicateInstruction^0,f,c
  4716   00236E  D7FC               	bra	u1967
  4717   002370  2E04               	decfsz	(??_indicateInstruction+1)^0,f,c
  4718   002372  D7FA               	bra	u1967
  4719   002374                     
  4720                           ;feedback.c: 36:             LATHbits.LATH3 = 0;
  4721   002374  9680               	bcf	128,3,c	;volatile
  4722                           
  4723                           ;feedback.c: 37:             _delay((unsigned long)((150)*(64000000/4000.0)));
  4724   002376  0E0D               	movlw	13
  4725   002378  6E04               	movwf	(??_indicateInstruction+1)^0,c
  4726   00237A  0E2D               	movlw	45
  4727   00237C  6E03               	movwf	??_indicateInstruction^0,c
  4728   00237E  0ED8               	movlw	216
  4729   002380                     u1977:
  4730   002380  2EE8               	decfsz	wreg,f,c
  4731   002382  D7FE               	bra	u1977
  4732   002384  2E03               	decfsz	??_indicateInstruction^0,f,c
  4733   002386  D7FC               	bra	u1977
  4734   002388  2E04               	decfsz	(??_indicateInstruction+1)^0,f,c
  4735   00238A  D7FA               	bra	u1977
  4736   00238C                     
  4737                           ;feedback.c: 38:         }
  4738   00238C  4A07               	infsnz	indicateInstruction@j^0,f,c
  4739   00238E  2A08               	incf	(indicateInstruction@j+1)^0,f,c
  4740   002390                     l653:
  4741   002390  5006               	movf	indicateInstruction@period^0,w,c
  4742   002392  6E03               	movwf	??_indicateInstruction^0,c
  4743   002394  6A04               	clrf	(??_indicateInstruction+1)^0,c
  4744   002396  5003               	movf	??_indicateInstruction^0,w,c
  4745   002398  5C07               	subwf	indicateInstruction@j^0,w,c
  4746   00239A  5008               	movf	(indicateInstruction@j+1)^0,w,c
  4747   00239C  0A80               	xorlw	128
  4748   00239E  6E05               	movwf	(??_indicateInstruction+2)^0,c
  4749   0023A0  5004               	movf	(??_indicateInstruction+1)^0,w,c
  4750   0023A2  0A80               	xorlw	128
  4751   0023A4  5805               	subwfb	(??_indicateInstruction+2)^0,w,c
  4752   0023A6  A0D8               	btfss	status,0,c
  4753   0023A8  EFD8  F011         	goto	u1561
  4754   0023AC  EFDA  F011         	goto	u1560
  4755   0023B0                     u1561:
  4756   0023B0  EFAE  F011         	goto	l654
  4757   0023B4                     u1560:
  4758   0023B4                     
  4759                           ;feedback.c: 39:         _delay((unsigned long)((500)*(64000000/4000.0)));
  4760   0023B4  0E29               	movlw	41
  4761   0023B6  6E04               	movwf	(??_indicateInstruction+1)^0,c
  4762   0023B8  0E96               	movlw	150
  4763   0023BA  6E03               	movwf	??_indicateInstruction^0,c
  4764   0023BC  0E7F               	movlw	127
  4765   0023BE                     u1987:
  4766   0023BE  2EE8               	decfsz	wreg,f,c
  4767   0023C0  D7FE               	bra	u1987
  4768   0023C2  2E03               	decfsz	??_indicateInstruction^0,f,c
  4769   0023C4  D7FC               	bra	u1987
  4770   0023C6  2E04               	decfsz	(??_indicateInstruction+1)^0,f,c
  4771   0023C8  D7FA               	bra	u1987
  4772   0023CA  0000               	nop	
  4773   0023CC                     
  4774                           ;feedback.c: 40:     }
  4775   0023CC  4A09               	infsnz	indicateInstruction@i^0,f,c
  4776   0023CE  2A0A               	incf	(indicateInstruction@i+1)^0,f,c
  4777   0023D0  BE0A               	btfsc	(indicateInstruction@i+1)^0,7,c
  4778   0023D2  EFF4  F011         	goto	u1571
  4779   0023D6  500A               	movf	(indicateInstruction@i+1)^0,w,c
  4780   0023D8  E109               	bnz	u1570
  4781   0023DA  0E02               	movlw	2
  4782   0023DC  5C09               	subwf	indicateInstruction@i^0,w,c
  4783   0023DE  A0D8               	btfss	status,0,c
  4784   0023E0  EFF4  F011         	goto	u1571
  4785   0023E4  EFF6  F011         	goto	u1570
  4786   0023E8                     u1571:
  4787   0023E8  EFA8  F011         	goto	l3261
  4788   0023EC                     u1570:
  4789   0023EC  0012               	return		;funcret
  4790   0023EE                     __end_of_indicateInstruction:
  4791                           	callstack 0
  4792                           
  4793 ;; *************** function _fastStop *****************
  4794 ;; Defined at:
  4795 ;;		line 118 in file "dc_motor.c"
  4796 ;; Parameters:    Size  Location     Type
  4797 ;;  mL              1   20[COMRAM] PTR struct DC_motor
  4798 ;;		 -> main@motorL(9), 
  4799 ;;  mR              1   21[COMRAM] PTR struct DC_motor
  4800 ;;		 -> main@motorR(9), 
  4801 ;; Auto vars:     Size  Location     Type
  4802 ;;  i               2   25[COMRAM] int 
  4803 ;;  current_powe    2   23[COMRAM] unsigned int 
  4804 ;; Return value:  Size  Location     Type
  4805 ;;                  1    wreg      void 
  4806 ;; Registers used:
  4807 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4808 ;; Tracked objects:
  4809 ;;		On entry : 0/0
  4810 ;;		On exit  : 0/0
  4811 ;;		Unchanged: 0/0
  4812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4813 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4814 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4815 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4816 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4817 ;;Total ram usage:        7 bytes
  4818 ;; Hardware stack levels used: 1
  4819 ;; Hardware stack levels required when called: 6
  4820 ;; This function calls:
  4821 ;;		_setMotorPWM
  4822 ;; This function is called by:
  4823 ;;		_main
  4824 ;; This function uses a non-reentrant model
  4825 ;;
  4826                           
  4827                           	psect	text32
  4828   0024EA                     __ptext32:
  4829                           	callstack 0
  4830   0024EA                     _fastStop:
  4831                           	callstack 24
  4832   0024EA                     
  4833                           ;dc_motor.c: 118: void fastStop(DC_motor *mL, DC_motor *mR);dc_motor.c: 119: {;dc_motor.
      +                          c: 121:     unsigned int current_power = mL->power;
  4834   0024EA  5015               	movf	fastStop@mL^0,w,c
  4835   0024EC  6ED9               	movwf	fsr2l,c
  4836   0024EE  6ADA               	clrf	fsr2h,c
  4837   0024F0  50DF               	movf	indf2,w,c
  4838   0024F2  6E17               	movwf	??_fastStop^0,c
  4839   0024F4  5017               	movf	??_fastStop^0,w,c
  4840   0024F6  6E18               	movwf	fastStop@current_power^0,c
  4841   0024F8  6A19               	clrf	(fastStop@current_power+1)^0,c
  4842   0024FA                     
  4843                           ;dc_motor.c: 123:     for (int i=current_power; i>= 0; i--) {
  4844   0024FA  C018  F01A         	movff	fastStop@current_power,fastStop@i
  4845   0024FE  C019  F01B         	movff	fastStop@current_power+1,fastStop@i+1
  4846   002502                     l3239:
  4847   002502  BE1B               	btfsc	(fastStop@i+1)^0,7,c
  4848   002504  EF88  F012         	goto	u1550
  4849   002508  EF86  F012         	goto	u1551
  4850   00250C                     u1551:
  4851   00250C  EF8A  F012         	goto	l3243
  4852   002510                     u1550:
  4853   002510  EFA9  F012         	goto	l497
  4854   002514                     l3243:
  4855                           
  4856                           ;dc_motor.c: 124:         mL->power = i;
  4857   002514  5015               	movf	fastStop@mL^0,w,c
  4858   002516  6ED9               	movwf	fsr2l,c
  4859   002518  6ADA               	clrf	fsr2h,c
  4860   00251A  C01A  FFDF         	movff	fastStop@i,indf2
  4861                           
  4862                           ;dc_motor.c: 125:         mR->power = i;
  4863   00251E  5016               	movf	fastStop@mR^0,w,c
  4864   002520  6ED9               	movwf	fsr2l,c
  4865   002522  6ADA               	clrf	fsr2h,c
  4866   002524  C01A  FFDF         	movff	fastStop@i,indf2
  4867   002528                     
  4868                           ;dc_motor.c: 126:         setMotorPWM(mL);
  4869   002528  C015  F010         	movff	fastStop@mL,setMotorPWM@m
  4870   00252C  ECF6  F00A         	call	_setMotorPWM	;wreg free
  4871   002530                     
  4872                           ;dc_motor.c: 127:         setMotorPWM(mR);
  4873   002530  C016  F010         	movff	fastStop@mR,setMotorPWM@m
  4874   002534  ECF6  F00A         	call	_setMotorPWM	;wreg free
  4875   002538                     
  4876                           ;dc_motor.c: 128:         _delay((unsigned long)((1)*(64000000/4000.0)));
  4877   002538  0E15               	movlw	21
  4878   00253A  6E17               	movwf	??_fastStop^0,c
  4879   00253C  0EC6               	movlw	198
  4880   00253E                     u1997:
  4881   00253E  2EE8               	decfsz	wreg,f,c
  4882   002540  D7FE               	bra	u1997
  4883   002542  2E17               	decfsz	??_fastStop^0,f,c
  4884   002544  D7FC               	bra	u1997
  4885   002546  D000               	nop2	
  4886   002548                     
  4887                           ;dc_motor.c: 129:     }
  4888   002548  061A               	decf	fastStop@i^0,f,c
  4889   00254A  A0D8               	btfss	status,0,c
  4890   00254C  061B               	decf	(fastStop@i+1)^0,f,c
  4891   00254E  EF81  F012         	goto	l3239
  4892   002552                     l497:
  4893   002552  0012               	return		;funcret
  4894   002554                     __end_of_fastStop:
  4895                           	callstack 0
  4896                           
  4897 ;; *************** function _decideColor *****************
  4898 ;; Defined at:
  4899 ;;		line 161 in file "color.c"
  4900 ;; Parameters:    Size  Location     Type
  4901 ;;  normRGB         1   41[COMRAM] PTR struct normColors
  4902 ;;		 -> main@normRGB(8), 
  4903 ;;  RGBC            1   42[COMRAM] PTR struct colors
  4904 ;;		 -> main@RGBC(8), 
  4905 ;;  mL              1   43[COMRAM] PTR struct DC_motor
  4906 ;;		 -> main@motorL(9), 
  4907 ;;  mR              1   44[COMRAM] PTR struct DC_motor
  4908 ;;		 -> main@motorR(9), 
  4909 ;; Auto vars:     Size  Location     Type
  4910 ;;		None
  4911 ;; Return value:  Size  Location     Type
  4912 ;;                  1    wreg      unsigned char 
  4913 ;; Registers used:
  4914 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4915 ;; Tracked objects:
  4916 ;;		On entry : 0/0
  4917 ;;		On exit  : 0/0
  4918 ;;		Unchanged: 0/0
  4919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4920 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4921 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4922 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4923 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4924 ;;Total ram usage:        6 bytes
  4925 ;; Hardware stack levels used: 1
  4926 ;; Hardware stack levels required when called: 8
  4927 ;; This function calls:
  4928 ;;		_LEDturnON
  4929 ;;		_creep
  4930 ;;		_normalizeColors
  4931 ;;		_readColors
  4932 ;; This function is called by:
  4933 ;;		_main
  4934 ;; This function uses a non-reentrant model
  4935 ;;
  4936                           
  4937                           	psect	text33
  4938   000E02                     __ptext33:
  4939                           	callstack 0
  4940   000E02                     _decideColor:
  4941                           	callstack 22
  4942   000E02                     
  4943                           ;color.c: 162:     if (normRGB->normBlue > 17) {
  4944   000E02  502A               	movf	decideColor@normRGB^0,w,c
  4945   000E04  6ED9               	movwf	fsr2l,c
  4946   000E06  6ADA               	clrf	fsr2h,c
  4947   000E08  0E04               	movlw	4
  4948   000E0A  26D9               	addwf	fsr2l,f,c
  4949   000E0C  0E01               	movlw	1
  4950   000E0E  50DB               	movf	plusw2,w,c
  4951   000E10  E109               	bnz	u1370
  4952   000E12  0E12               	movlw	18
  4953   000E14  5CDE               	subwf	postinc2,w,c
  4954   000E16  A0D8               	btfss	status,0,c
  4955   000E18  EF10  F007         	goto	u1371
  4956   000E1C  EF12  F007         	goto	u1370
  4957   000E20                     u1371:
  4958   000E20  EF21  F007         	goto	l3071
  4959   000E24                     u1370:
  4960   000E24                     
  4961                           ;color.c: 163:         creep(mL, mR, 16, 0);
  4962   000E24  C02C  F01C         	movff	decideColor@mL,creep@mL
  4963   000E28  C02D  F01D         	movff	decideColor@mR,creep@mR
  4964   000E2C  0E00               	movlw	0
  4965   000E2E  6E1F               	movwf	(creep@increments+1)^0,c
  4966   000E30  0E10               	movlw	16
  4967   000E32  6E1E               	movwf	creep@increments^0,c
  4968   000E34  0E00               	movlw	0
  4969   000E36  6E20               	movwf	creep@direction^0,c
  4970   000E38  EC8C  F009         	call	_creep	;wreg free
  4971   000E3C                     
  4972                           ;color.c: 164:         return 2;
  4973   000E3C  0E02               	movlw	2
  4974   000E3E  EFFA  F007         	goto	l64
  4975   000E42                     l3071:
  4976                           
  4977                           ;color.c: 166:     if (normRGB->normBlue > 12 && normRGB->normRed < 50) {
  4978   000E42  502A               	movf	decideColor@normRGB^0,w,c
  4979   000E44  6ED9               	movwf	fsr2l,c
  4980   000E46  6ADA               	clrf	fsr2h,c
  4981   000E48  0E04               	movlw	4
  4982   000E4A  26D9               	addwf	fsr2l,f,c
  4983   000E4C  0E01               	movlw	1
  4984   000E4E  50DB               	movf	plusw2,w,c
  4985   000E50  E109               	bnz	u1380
  4986   000E52  0E0D               	movlw	13
  4987   000E54  5CDE               	subwf	postinc2,w,c
  4988   000E56  A0D8               	btfss	status,0,c
  4989   000E58  EF30  F007         	goto	u1381
  4990   000E5C  EF32  F007         	goto	u1380
  4991   000E60                     u1381:
  4992   000E60  EF44  F007         	goto	l3079
  4993   000E64                     u1380:
  4994   000E64  502A               	movf	decideColor@normRGB^0,w,c
  4995   000E66  6ED9               	movwf	fsr2l,c
  4996   000E68  6ADA               	clrf	fsr2h,c
  4997   000E6A  0E01               	movlw	1
  4998   000E6C  50DB               	movf	plusw2,w,c
  4999   000E6E  E107               	bnz	u1391
  5000   000E70  0E32               	movlw	50
  5001   000E72  5CDE               	subwf	postinc2,w,c
  5002   000E74  B0D8               	btfsc	status,0,c
  5003   000E76  EF3F  F007         	goto	u1391
  5004   000E7A  EF41  F007         	goto	u1390
  5005   000E7E                     u1391:
  5006   000E7E  EF44  F007         	goto	l3079
  5007   000E82                     u1390:
  5008   000E82                     
  5009                           ;color.c: 167:         return 6;
  5010   000E82  0E06               	movlw	6
  5011   000E84  EFFA  F007         	goto	l64
  5012   000E88                     l3079:
  5013                           
  5014                           ;color.c: 169:     if (normRGB->normRed > 70,normRGB->normGreen < 22) {
  5015   000E88  502A               	movf	decideColor@normRGB^0,w,c
  5016   000E8A  6ED9               	movwf	fsr2l,c
  5017   000E8C  6ADA               	clrf	fsr2h,c
  5018   000E8E  0E02               	movlw	2
  5019   000E90  26D9               	addwf	fsr2l,f,c
  5020   000E92  0E01               	movlw	1
  5021   000E94  50DB               	movf	plusw2,w,c
  5022   000E96  E107               	bnz	u1401
  5023   000E98  0E16               	movlw	22
  5024   000E9A  5CDE               	subwf	postinc2,w,c
  5025   000E9C  B0D8               	btfsc	status,0,c
  5026   000E9E  EF53  F007         	goto	u1401
  5027   000EA2  EF55  F007         	goto	u1400
  5028   000EA6                     u1401:
  5029   000EA6  EF58  F007         	goto	l3087
  5030   000EAA                     u1400:
  5031   000EAA                     
  5032                           ;color.c: 170:         return 0;
  5033   000EAA  0E00               	movlw	0
  5034   000EAC  EFFA  F007         	goto	l64
  5035   000EB0                     l3087:
  5036                           
  5037                           ;color.c: 174:         LEDturnON();
  5038   000EB0  EC31  F015         	call	_LEDturnON	;wreg free
  5039   000EB4                     
  5040                           ;color.c: 175:         _delay((unsigned long)((1000)*(64000000/4000.0)));
  5041   000EB4  0E52               	movlw	82
  5042   000EB6  6E2F               	movwf	(??_decideColor+1)^0,c
  5043   000EB8  0E2B               	movlw	43
  5044   000EBA  6E2E               	movwf	??_decideColor^0,c
  5045   000EBC  0E00               	movlw	0
  5046   000EBE                     u2007:
  5047   000EBE  2EE8               	decfsz	wreg,f,c
  5048   000EC0  D7FE               	bra	u2007
  5049   000EC2  2E2E               	decfsz	??_decideColor^0,f,c
  5050   000EC4  D7FC               	bra	u2007
  5051   000EC6  2E2F               	decfsz	(??_decideColor+1)^0,f,c
  5052   000EC8  D7FA               	bra	u2007
  5053   000ECA  D000               	nop2	
  5054   000ECC                     
  5055                           ;color.c: 176:         creep(mL, mR, 8, 1);
  5056   000ECC  C02C  F01C         	movff	decideColor@mL,creep@mL
  5057   000ED0  C02D  F01D         	movff	decideColor@mR,creep@mR
  5058   000ED4  0E00               	movlw	0
  5059   000ED6  6E1F               	movwf	(creep@increments+1)^0,c
  5060   000ED8  0E08               	movlw	8
  5061   000EDA  6E1E               	movwf	creep@increments^0,c
  5062   000EDC  0E01               	movlw	1
  5063   000EDE  6E20               	movwf	creep@direction^0,c
  5064   000EE0  EC8C  F009         	call	_creep	;wreg free
  5065   000EE4                     
  5066                           ;color.c: 177:         readColors(RGBC);
  5067   000EE4  C02B  F00E         	movff	decideColor@RGBC,readColors@RGBC
  5068   000EE8  ECCC  F00F         	call	_readColors	;wreg free
  5069   000EEC                     
  5070                           ;color.c: 178:         normalizeColors(RGBC, normRGB);
  5071   000EEC  C02B  F010         	movff	decideColor@RGBC,normalizeColors@RGBC
  5072   000EF0  C02A  F011         	movff	decideColor@normRGB,normalizeColors@normRGB
  5073   000EF4  ECA0  F00B         	call	_normalizeColors	;wreg free
  5074   000EF8                     
  5075                           ;color.c: 179:         creep(mL, mR, 16, 0);
  5076   000EF8  C02C  F01C         	movff	decideColor@mL,creep@mL
  5077   000EFC  C02D  F01D         	movff	decideColor@mR,creep@mR
  5078   000F00  0E00               	movlw	0
  5079   000F02  6E1F               	movwf	(creep@increments+1)^0,c
  5080   000F04  0E10               	movlw	16
  5081   000F06  6E1E               	movwf	creep@increments^0,c
  5082   000F08  0E00               	movlw	0
  5083   000F0A  6E20               	movwf	creep@direction^0,c
  5084   000F0C  EC8C  F009         	call	_creep	;wreg free
  5085   000F10                     
  5086                           ;color.c: 182:         if (normRGB->clear < 0x300) {
  5087   000F10  502A               	movf	decideColor@normRGB^0,w,c
  5088   000F12  6ED9               	movwf	fsr2l,c
  5089   000F14  6ADA               	clrf	fsr2h,c
  5090   000F16  0E06               	movlw	6
  5091   000F18  26D9               	addwf	fsr2l,f,c
  5092   000F1A  52DE               	movf	postinc2,f,c
  5093   000F1C  0E03               	movlw	3
  5094   000F1E  5CDE               	subwf	postinc2,w,c
  5095   000F20  B0D8               	btfsc	status,0,c
  5096   000F22  EF95  F007         	goto	u1411
  5097   000F26  EF97  F007         	goto	u1410
  5098   000F2A                     u1411:
  5099   000F2A  EF9A  F007         	goto	l3105
  5100   000F2E                     u1410:
  5101   000F2E                     
  5102                           ;color.c: 183:             return 8;
  5103   000F2E  0E08               	movlw	8
  5104   000F30  EFFA  F007         	goto	l64
  5105   000F34                     l3105:
  5106                           
  5107                           ;color.c: 185:         if (normRGB->normGreen > 48) {
  5108   000F34  502A               	movf	decideColor@normRGB^0,w,c
  5109   000F36  6ED9               	movwf	fsr2l,c
  5110   000F38  6ADA               	clrf	fsr2h,c
  5111   000F3A  0E02               	movlw	2
  5112   000F3C  26D9               	addwf	fsr2l,f,c
  5113   000F3E  0E01               	movlw	1
  5114   000F40  50DB               	movf	plusw2,w,c
  5115   000F42  E109               	bnz	u1420
  5116   000F44  0E31               	movlw	49
  5117   000F46  5CDE               	subwf	postinc2,w,c
  5118   000F48  A0D8               	btfss	status,0,c
  5119   000F4A  EFA9  F007         	goto	u1421
  5120   000F4E  EFAB  F007         	goto	u1420
  5121   000F52                     u1421:
  5122   000F52  EFAE  F007         	goto	l3111
  5123   000F56                     u1420:
  5124   000F56                     
  5125                           ;color.c: 186:             return 1;
  5126   000F56  0E01               	movlw	1
  5127   000F58  EFFA  F007         	goto	l64
  5128   000F5C                     l3111:
  5129                           
  5130                           ;color.c: 188:         if (normRGB->normRed > 60 && normRGB->normGreen < 30) {
  5131   000F5C  502A               	movf	decideColor@normRGB^0,w,c
  5132   000F5E  6ED9               	movwf	fsr2l,c
  5133   000F60  6ADA               	clrf	fsr2h,c
  5134   000F62  0E01               	movlw	1
  5135   000F64  50DB               	movf	plusw2,w,c
  5136   000F66  E109               	bnz	u1430
  5137   000F68  0E3D               	movlw	61
  5138   000F6A  5CDE               	subwf	postinc2,w,c
  5139   000F6C  A0D8               	btfss	status,0,c
  5140   000F6E  EFBB  F007         	goto	u1431
  5141   000F72  EFBD  F007         	goto	u1430
  5142   000F76                     u1431:
  5143   000F76  EFD1  F007         	goto	l3119
  5144   000F7A                     u1430:
  5145   000F7A  502A               	movf	decideColor@normRGB^0,w,c
  5146   000F7C  6ED9               	movwf	fsr2l,c
  5147   000F7E  6ADA               	clrf	fsr2h,c
  5148   000F80  0E02               	movlw	2
  5149   000F82  26D9               	addwf	fsr2l,f,c
  5150   000F84  0E01               	movlw	1
  5151   000F86  50DB               	movf	plusw2,w,c
  5152   000F88  E107               	bnz	u1441
  5153   000F8A  0E1E               	movlw	30
  5154   000F8C  5CDE               	subwf	postinc2,w,c
  5155   000F8E  B0D8               	btfsc	status,0,c
  5156   000F90  EFCC  F007         	goto	u1441
  5157   000F94  EFCE  F007         	goto	u1440
  5158   000F98                     u1441:
  5159   000F98  EFD1  F007         	goto	l3119
  5160   000F9C                     u1440:
  5161   000F9C                     
  5162                           ;color.c: 189:             return 5;
  5163   000F9C  0E05               	movlw	5
  5164   000F9E  EFFA  F007         	goto	l64
  5165   000FA2                     l3119:
  5166                           
  5167                           ;color.c: 191:         if (normRGB->normBlue < 7) {
  5168   000FA2  502A               	movf	decideColor@normRGB^0,w,c
  5169   000FA4  6ED9               	movwf	fsr2l,c
  5170   000FA6  6ADA               	clrf	fsr2h,c
  5171   000FA8  0E04               	movlw	4
  5172   000FAA  26D9               	addwf	fsr2l,f,c
  5173   000FAC  0E01               	movlw	1
  5174   000FAE  50DB               	movf	plusw2,w,c
  5175   000FB0  E107               	bnz	u1451
  5176   000FB2  0E07               	movlw	7
  5177   000FB4  5CDE               	subwf	postinc2,w,c
  5178   000FB6  B0D8               	btfsc	status,0,c
  5179   000FB8  EFE0  F007         	goto	u1451
  5180   000FBC  EFE2  F007         	goto	u1450
  5181   000FC0                     u1451:
  5182   000FC0  EFE5  F007         	goto	l3127
  5183   000FC4                     u1450:
  5184   000FC4                     
  5185                           ;color.c: 192:             return 3;
  5186   000FC4  0E03               	movlw	3
  5187   000FC6  EFFA  F007         	goto	l64
  5188   000FCA                     l3127:
  5189                           
  5190                           ;color.c: 195:             if (normRGB->normGreen > 34) {
  5191   000FCA  502A               	movf	decideColor@normRGB^0,w,c
  5192   000FCC  6ED9               	movwf	fsr2l,c
  5193   000FCE  6ADA               	clrf	fsr2h,c
  5194   000FD0  0E02               	movlw	2
  5195   000FD2  26D9               	addwf	fsr2l,f,c
  5196   000FD4  0E01               	movlw	1
  5197   000FD6  50DB               	movf	plusw2,w,c
  5198   000FD8  E109               	bnz	u1460
  5199   000FDA  0E23               	movlw	35
  5200   000FDC  5CDE               	subwf	postinc2,w,c
  5201   000FDE  A0D8               	btfss	status,0,c
  5202   000FE0  EFF4  F007         	goto	u1461
  5203   000FE4  EFF6  F007         	goto	u1460
  5204   000FE8                     u1461:
  5205   000FE8  EFF9  F007         	goto	l3135
  5206   000FEC                     u1460:
  5207   000FEC                     
  5208                           ;color.c: 196:                 return 7;
  5209   000FEC  0E07               	movlw	7
  5210   000FEE  EFFA  F007         	goto	l64
  5211   000FF2                     l3135:
  5212                           
  5213                           ;color.c: 199:                 return 4;
  5214   000FF2  0E04               	movlw	4
  5215   000FF4                     l64:
  5216   000FF4  0012               	return		;funcret
  5217   000FF6                     __end_of_decideColor:
  5218                           	callstack 0
  5219                           
  5220 ;; *************** function _readColors *****************
  5221 ;; Defined at:
  5222 ;;		line 130 in file "color.c"
  5223 ;; Parameters:    Size  Location     Type
  5224 ;;  RGBC            1   13[COMRAM] PTR struct colors
  5225 ;;		 -> main@RGBC(8), 
  5226 ;; Auto vars:     Size  Location     Type
  5227 ;;		None
  5228 ;; Return value:  Size  Location     Type
  5229 ;;                  1    wreg      void 
  5230 ;; Registers used:
  5231 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5232 ;; Tracked objects:
  5233 ;;		On entry : 0/0
  5234 ;;		On exit  : 0/0
  5235 ;;		Unchanged: 0/0
  5236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5237 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5238 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5239 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5240 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5241 ;;Total ram usage:        3 bytes
  5242 ;; Hardware stack levels used: 1
  5243 ;; Hardware stack levels required when called: 7
  5244 ;; This function calls:
  5245 ;;		_LEDturnOFF
  5246 ;;		_LEDturnON
  5247 ;;		_readBlueColor
  5248 ;;		_readClearColor
  5249 ;;		_readGreenColor
  5250 ;;		_readRedColor
  5251 ;; This function is called by:
  5252 ;;		_decideColor
  5253 ;;		_main
  5254 ;; This function uses a non-reentrant model
  5255 ;;
  5256                           
  5257                           	psect	text34
  5258   001F98                     __ptext34:
  5259                           	callstack 0
  5260   001F98                     _readColors:
  5261                           	callstack 23
  5262   001F98                     
  5263                           ;color.c: 133:     LEDturnON();
  5264   001F98  EC31  F015         	call	_LEDturnON	;wreg free
  5265   001F9C                     
  5266                           ;color.c: 134:     RGBC->clear = readClearColor();
  5267   001F9C  EC57  F013         	call	_readClearColor	;wreg free
  5268   001FA0  500E               	movf	readColors@RGBC^0,w,c
  5269   001FA2  6ED9               	movwf	fsr2l,c
  5270   001FA4  6ADA               	clrf	fsr2h,c
  5271   001FA6  0E06               	movlw	6
  5272   001FA8  26D9               	addwf	fsr2l,f,c
  5273   001FAA  C007  FFDE         	movff	?_readClearColor,postinc2
  5274   001FAE  C008  FFDD         	movff	?_readClearColor+1,postdec2
  5275   001FB2                     
  5276                           ;color.c: 135:     _delay((unsigned long)((100)*(64000000/4000.0)));
  5277   001FB2  0E09               	movlw	9
  5278   001FB4  6E10               	movwf	(??_readColors+1)^0,c
  5279   001FB6  0E1E               	movlw	30
  5280   001FB8  6E0F               	movwf	??_readColors^0,c
  5281   001FBA  0EE4               	movlw	228
  5282   001FBC                     u2017:
  5283   001FBC  2EE8               	decfsz	wreg,f,c
  5284   001FBE  D7FE               	bra	u2017
  5285   001FC0  2E0F               	decfsz	??_readColors^0,f,c
  5286   001FC2  D7FC               	bra	u2017
  5287   001FC4  2E10               	decfsz	(??_readColors+1)^0,f,c
  5288   001FC6  D7FA               	bra	u2017
  5289   001FC8  D000               	nop2	
  5290   001FCA                     
  5291                           ;color.c: 136:     LEDturnOFF();
  5292   001FCA  EC36  F015         	call	_LEDturnOFF	;wreg free
  5293   001FCE                     
  5294                           ;color.c: 139:     LATGbits.LATG0 = 1;
  5295   001FCE  807F               	bsf	127,0,c	;volatile
  5296   001FD0                     
  5297                           ;color.c: 140:     _delay((unsigned long)((100)*(64000000/4000.0)));
  5298   001FD0  0E09               	movlw	9
  5299   001FD2  6E10               	movwf	(??_readColors+1)^0,c
  5300   001FD4  0E1E               	movlw	30
  5301   001FD6  6E0F               	movwf	??_readColors^0,c
  5302   001FD8  0EE4               	movlw	228
  5303   001FDA                     u2027:
  5304   001FDA  2EE8               	decfsz	wreg,f,c
  5305   001FDC  D7FE               	bra	u2027
  5306   001FDE  2E0F               	decfsz	??_readColors^0,f,c
  5307   001FE0  D7FC               	bra	u2027
  5308   001FE2  2E10               	decfsz	(??_readColors+1)^0,f,c
  5309   001FE4  D7FA               	bra	u2027
  5310   001FE6  D000               	nop2	
  5311                           
  5312                           ;color.c: 141:     RGBC->red = readRedColor();
  5313   001FE8  EC07  F013         	call	_readRedColor	;wreg free
  5314   001FEC  500E               	movf	readColors@RGBC^0,w,c
  5315   001FEE  6ED9               	movwf	fsr2l,c
  5316   001FF0  6ADA               	clrf	fsr2h,c
  5317   001FF2  C007  FFDE         	movff	?_readRedColor,postinc2
  5318   001FF6  C008  FFDD         	movff	?_readRedColor+1,postdec2
  5319   001FFA                     
  5320                           ;color.c: 142:     _delay((unsigned long)((100)*(64000000/4000.0)));
  5321   001FFA  0E09               	movlw	9
  5322   001FFC  6E10               	movwf	(??_readColors+1)^0,c
  5323   001FFE  0E1E               	movlw	30
  5324   002000  6E0F               	movwf	??_readColors^0,c
  5325   002002  0EE4               	movlw	228
  5326   002004                     u2037:
  5327   002004  2EE8               	decfsz	wreg,f,c
  5328   002006  D7FE               	bra	u2037
  5329   002008  2E0F               	decfsz	??_readColors^0,f,c
  5330   00200A  D7FC               	bra	u2037
  5331   00200C  2E10               	decfsz	(??_readColors+1)^0,f,c
  5332   00200E  D7FA               	bra	u2037
  5333   002010  D000               	nop2	
  5334   002012                     
  5335                           ;color.c: 143:     LATGbits.LATG0 = 0;
  5336   002012  907F               	bcf	127,0,c	;volatile
  5337   002014                     
  5338                           ;color.c: 146:     LATEbits.LATE7 = 1;
  5339   002014  8E7D               	bsf	125,7,c	;volatile
  5340   002016                     
  5341                           ;color.c: 147:     _delay((unsigned long)((100)*(64000000/4000.0)));
  5342   002016  0E09               	movlw	9
  5343   002018  6E10               	movwf	(??_readColors+1)^0,c
  5344   00201A  0E1E               	movlw	30
  5345   00201C  6E0F               	movwf	??_readColors^0,c
  5346   00201E  0EE4               	movlw	228
  5347   002020                     u2047:
  5348   002020  2EE8               	decfsz	wreg,f,c
  5349   002022  D7FE               	bra	u2047
  5350   002024  2E0F               	decfsz	??_readColors^0,f,c
  5351   002026  D7FC               	bra	u2047
  5352   002028  2E10               	decfsz	(??_readColors+1)^0,f,c
  5353   00202A  D7FA               	bra	u2047
  5354   00202C  D000               	nop2	
  5355                           
  5356                           ;color.c: 148:     RGBC->green = readGreenColor();
  5357   00202E  EC2F  F013         	call	_readGreenColor	;wreg free
  5358   002032  500E               	movf	readColors@RGBC^0,w,c
  5359   002034  6ED9               	movwf	fsr2l,c
  5360   002036  6ADA               	clrf	fsr2h,c
  5361   002038  0E02               	movlw	2
  5362   00203A  26D9               	addwf	fsr2l,f,c
  5363   00203C  C007  FFDE         	movff	?_readGreenColor,postinc2
  5364   002040  C008  FFDD         	movff	?_readGreenColor+1,postdec2
  5365   002044                     
  5366                           ;color.c: 149:     _delay((unsigned long)((100)*(64000000/4000.0)));
  5367   002044  0E09               	movlw	9
  5368   002046  6E10               	movwf	(??_readColors+1)^0,c
  5369   002048  0E1E               	movlw	30
  5370   00204A  6E0F               	movwf	??_readColors^0,c
  5371   00204C  0EE4               	movlw	228
  5372   00204E                     u2057:
  5373   00204E  2EE8               	decfsz	wreg,f,c
  5374   002050  D7FE               	bra	u2057
  5375   002052  2E0F               	decfsz	??_readColors^0,f,c
  5376   002054  D7FC               	bra	u2057
  5377   002056  2E10               	decfsz	(??_readColors+1)^0,f,c
  5378   002058  D7FA               	bra	u2057
  5379   00205A  D000               	nop2	
  5380   00205C                     
  5381                           ;color.c: 150:     LATEbits.LATE7 = 0;
  5382   00205C  9E7D               	bcf	125,7,c	;volatile
  5383   00205E                     
  5384                           ;color.c: 153:     LATAbits.LATA3 = 1;
  5385   00205E  8679               	bsf	121,3,c	;volatile
  5386   002060                     
  5387                           ;color.c: 154:     _delay((unsigned long)((100)*(64000000/4000.0)));
  5388   002060  0E09               	movlw	9
  5389   002062  6E10               	movwf	(??_readColors+1)^0,c
  5390   002064  0E1E               	movlw	30
  5391   002066  6E0F               	movwf	??_readColors^0,c
  5392   002068  0EE4               	movlw	228
  5393   00206A                     u2067:
  5394   00206A  2EE8               	decfsz	wreg,f,c
  5395   00206C  D7FE               	bra	u2067
  5396   00206E  2E0F               	decfsz	??_readColors^0,f,c
  5397   002070  D7FC               	bra	u2067
  5398   002072  2E10               	decfsz	(??_readColors+1)^0,f,c
  5399   002074  D7FA               	bra	u2067
  5400   002076  D000               	nop2	
  5401                           
  5402                           ;color.c: 155:     RGBC->blue = readBlueColor();
  5403   002078  EC7F  F013         	call	_readBlueColor	;wreg free
  5404   00207C  500E               	movf	readColors@RGBC^0,w,c
  5405   00207E  6ED9               	movwf	fsr2l,c
  5406   002080  6ADA               	clrf	fsr2h,c
  5407   002082  0E04               	movlw	4
  5408   002084  26D9               	addwf	fsr2l,f,c
  5409   002086  C007  FFDE         	movff	?_readBlueColor,postinc2
  5410   00208A  C008  FFDD         	movff	?_readBlueColor+1,postdec2
  5411   00208E                     
  5412                           ;color.c: 156:     _delay((unsigned long)((100)*(64000000/4000.0)));
  5413   00208E  0E09               	movlw	9
  5414   002090  6E10               	movwf	(??_readColors+1)^0,c
  5415   002092  0E1E               	movlw	30
  5416   002094  6E0F               	movwf	??_readColors^0,c
  5417   002096  0EE4               	movlw	228
  5418   002098                     u2077:
  5419   002098  2EE8               	decfsz	wreg,f,c
  5420   00209A  D7FE               	bra	u2077
  5421   00209C  2E0F               	decfsz	??_readColors^0,f,c
  5422   00209E  D7FC               	bra	u2077
  5423   0020A0  2E10               	decfsz	(??_readColors+1)^0,f,c
  5424   0020A2  D7FA               	bra	u2077
  5425   0020A4  D000               	nop2	
  5426   0020A6                     
  5427                           ;color.c: 157:     LATAbits.LATA3 = 0;
  5428   0020A6  9679               	bcf	121,3,c	;volatile
  5429   0020A8  0012               	return		;funcret
  5430   0020AA                     __end_of_readColors:
  5431                           	callstack 0
  5432                           
  5433 ;; *************** function _readRedColor *****************
  5434 ;; Defined at:
  5435 ;;		line 57 in file "color.c"
  5436 ;; Parameters:    Size  Location     Type
  5437 ;;		None
  5438 ;; Auto vars:     Size  Location     Type
  5439 ;;  tmp             2   11[COMRAM] unsigned int 
  5440 ;; Return value:  Size  Location     Type
  5441 ;;                  2    6[COMRAM] unsigned int 
  5442 ;; Registers used:
  5443 ;;		wreg, status,2, status,0, cstack
  5444 ;; Tracked objects:
  5445 ;;		On entry : 0/0
  5446 ;;		On exit  : 0/0
  5447 ;;		Unchanged: 0/0
  5448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5449 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5450 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5451 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5452 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5453 ;;Total ram usage:        7 bytes
  5454 ;; Hardware stack levels used: 1
  5455 ;; Hardware stack levels required when called: 6
  5456 ;; This function calls:
  5457 ;;		_I2C_2_Master_Read
  5458 ;;		_I2C_2_Master_RepStart
  5459 ;;		_I2C_2_Master_Start
  5460 ;;		_I2C_2_Master_Stop
  5461 ;;		_I2C_2_Master_Write
  5462 ;; This function is called by:
  5463 ;;		_readColors
  5464 ;; This function uses a non-reentrant model
  5465 ;;
  5466                           
  5467                           	psect	text35
  5468   00260E                     __ptext35:
  5469                           	callstack 0
  5470   00260E                     _readRedColor:
  5471                           	callstack 23
  5472   00260E                     
  5473                           ;color.c: 59:  unsigned int tmp;;color.c: 60:  I2C_2_Master_Start();
  5474   00260E  EC40  F015         	call	_I2C_2_Master_Start	;wreg free
  5475                           
  5476                           ;color.c: 61:  I2C_2_Master_Write(0x52 | 0x00);
  5477   002612  0E52               	movlw	82
  5478   002614  EC16  F015         	call	_I2C_2_Master_Write
  5479                           
  5480                           ;color.c: 62:  I2C_2_Master_Write(0xA0 | 0x16);
  5481   002618  0EB6               	movlw	182
  5482   00261A  EC16  F015         	call	_I2C_2_Master_Write
  5483                           
  5484                           ;color.c: 63:  I2C_2_Master_RepStart();
  5485   00261E  EC2C  F015         	call	_I2C_2_Master_RepStart	;wreg free
  5486                           
  5487                           ;color.c: 64:  I2C_2_Master_Write(0x52 | 0x01);
  5488   002622  0E53               	movlw	83
  5489   002624  EC16  F015         	call	_I2C_2_Master_Write
  5490                           
  5491                           ;color.c: 65:  tmp=I2C_2_Master_Read(1);
  5492   002628  0E01               	movlw	1
  5493   00262A  ECA7  F013         	call	_I2C_2_Master_Read
  5494   00262E  6E09               	movwf	??_readRedColor^0,c
  5495   002630  5009               	movf	??_readRedColor^0,w,c
  5496   002632  6E0C               	movwf	readRedColor@tmp^0,c
  5497   002634  6A0D               	clrf	(readRedColor@tmp+1)^0,c
  5498                           
  5499                           ;color.c: 66:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5500   002636  0E00               	movlw	0
  5501   002638  ECA7  F013         	call	_I2C_2_Master_Read
  5502   00263C  6E09               	movwf	??_readRedColor^0,c
  5503   00263E  5009               	movf	??_readRedColor^0,w,c
  5504   002640  6E0B               	movwf	(??_readRedColor+2)^0,c
  5505   002642  6A0A               	clrf	(??_readRedColor+1)^0,c
  5506   002644  500C               	movf	readRedColor@tmp^0,w,c
  5507   002646  100A               	iorwf	(??_readRedColor+1)^0,w,c
  5508   002648  6E0C               	movwf	readRedColor@tmp^0,c
  5509   00264A  500D               	movf	(readRedColor@tmp+1)^0,w,c
  5510   00264C  100B               	iorwf	(??_readRedColor+2)^0,w,c
  5511   00264E  6E0D               	movwf	(readRedColor@tmp+1)^0,c
  5512                           
  5513                           ;color.c: 67:  I2C_2_Master_Stop();
  5514   002650  EC3B  F015         	call	_I2C_2_Master_Stop	;wreg free
  5515   002654                     
  5516                           ;color.c: 68:  return tmp;
  5517   002654  C00C  F007         	movff	readRedColor@tmp,?_readRedColor
  5518   002658  C00D  F008         	movff	readRedColor@tmp+1,?_readRedColor+1
  5519   00265C  0012               	return		;funcret
  5520   00265E                     __end_of_readRedColor:
  5521                           	callstack 0
  5522                           
  5523 ;; *************** function _readGreenColor *****************
  5524 ;; Defined at:
  5525 ;;		line 72 in file "color.c"
  5526 ;; Parameters:    Size  Location     Type
  5527 ;;		None
  5528 ;; Auto vars:     Size  Location     Type
  5529 ;;  tmp             2   11[COMRAM] unsigned int 
  5530 ;; Return value:  Size  Location     Type
  5531 ;;                  2    6[COMRAM] unsigned int 
  5532 ;; Registers used:
  5533 ;;		wreg, status,2, status,0, cstack
  5534 ;; Tracked objects:
  5535 ;;		On entry : 0/0
  5536 ;;		On exit  : 0/0
  5537 ;;		Unchanged: 0/0
  5538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5539 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5540 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5541 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5542 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5543 ;;Total ram usage:        7 bytes
  5544 ;; Hardware stack levels used: 1
  5545 ;; Hardware stack levels required when called: 6
  5546 ;; This function calls:
  5547 ;;		_I2C_2_Master_Read
  5548 ;;		_I2C_2_Master_RepStart
  5549 ;;		_I2C_2_Master_Start
  5550 ;;		_I2C_2_Master_Stop
  5551 ;;		_I2C_2_Master_Write
  5552 ;; This function is called by:
  5553 ;;		_readColors
  5554 ;; This function uses a non-reentrant model
  5555 ;;
  5556                           
  5557                           	psect	text36
  5558   00265E                     __ptext36:
  5559                           	callstack 0
  5560   00265E                     _readGreenColor:
  5561                           	callstack 23
  5562   00265E                     
  5563                           ;color.c: 74:  unsigned int tmp;;color.c: 75:  I2C_2_Master_Start();
  5564   00265E  EC40  F015         	call	_I2C_2_Master_Start	;wreg free
  5565                           
  5566                           ;color.c: 76:  I2C_2_Master_Write(0x52 | 0x00);
  5567   002662  0E52               	movlw	82
  5568   002664  EC16  F015         	call	_I2C_2_Master_Write
  5569                           
  5570                           ;color.c: 77:  I2C_2_Master_Write(0xA0 | 0x18);
  5571   002668  0EB8               	movlw	184
  5572   00266A  EC16  F015         	call	_I2C_2_Master_Write
  5573                           
  5574                           ;color.c: 78:  I2C_2_Master_RepStart();
  5575   00266E  EC2C  F015         	call	_I2C_2_Master_RepStart	;wreg free
  5576                           
  5577                           ;color.c: 79:  I2C_2_Master_Write(0x52 | 0x01);
  5578   002672  0E53               	movlw	83
  5579   002674  EC16  F015         	call	_I2C_2_Master_Write
  5580                           
  5581                           ;color.c: 80:  tmp=I2C_2_Master_Read(1);
  5582   002678  0E01               	movlw	1
  5583   00267A  ECA7  F013         	call	_I2C_2_Master_Read
  5584   00267E  6E09               	movwf	??_readGreenColor^0,c
  5585   002680  5009               	movf	??_readGreenColor^0,w,c
  5586   002682  6E0C               	movwf	readGreenColor@tmp^0,c
  5587   002684  6A0D               	clrf	(readGreenColor@tmp+1)^0,c
  5588                           
  5589                           ;color.c: 81:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5590   002686  0E00               	movlw	0
  5591   002688  ECA7  F013         	call	_I2C_2_Master_Read
  5592   00268C  6E09               	movwf	??_readGreenColor^0,c
  5593   00268E  5009               	movf	??_readGreenColor^0,w,c
  5594   002690  6E0B               	movwf	(??_readGreenColor+2)^0,c
  5595   002692  6A0A               	clrf	(??_readGreenColor+1)^0,c
  5596   002694  500C               	movf	readGreenColor@tmp^0,w,c
  5597   002696  100A               	iorwf	(??_readGreenColor+1)^0,w,c
  5598   002698  6E0C               	movwf	readGreenColor@tmp^0,c
  5599   00269A  500D               	movf	(readGreenColor@tmp+1)^0,w,c
  5600   00269C  100B               	iorwf	(??_readGreenColor+2)^0,w,c
  5601   00269E  6E0D               	movwf	(readGreenColor@tmp+1)^0,c
  5602                           
  5603                           ;color.c: 82:  I2C_2_Master_Stop();
  5604   0026A0  EC3B  F015         	call	_I2C_2_Master_Stop	;wreg free
  5605   0026A4                     
  5606                           ;color.c: 83:  return tmp;
  5607   0026A4  C00C  F007         	movff	readGreenColor@tmp,?_readGreenColor
  5608   0026A8  C00D  F008         	movff	readGreenColor@tmp+1,?_readGreenColor+1
  5609   0026AC  0012               	return		;funcret
  5610   0026AE                     __end_of_readGreenColor:
  5611                           	callstack 0
  5612                           
  5613 ;; *************** function _readClearColor *****************
  5614 ;; Defined at:
  5615 ;;		line 102 in file "color.c"
  5616 ;; Parameters:    Size  Location     Type
  5617 ;;		None
  5618 ;; Auto vars:     Size  Location     Type
  5619 ;;  tmp             2   11[COMRAM] unsigned int 
  5620 ;; Return value:  Size  Location     Type
  5621 ;;                  2    6[COMRAM] unsigned int 
  5622 ;; Registers used:
  5623 ;;		wreg, status,2, status,0, cstack
  5624 ;; Tracked objects:
  5625 ;;		On entry : 0/0
  5626 ;;		On exit  : 0/0
  5627 ;;		Unchanged: 0/0
  5628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5629 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5630 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5631 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5632 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5633 ;;Total ram usage:        7 bytes
  5634 ;; Hardware stack levels used: 1
  5635 ;; Hardware stack levels required when called: 6
  5636 ;; This function calls:
  5637 ;;		_I2C_2_Master_Read
  5638 ;;		_I2C_2_Master_RepStart
  5639 ;;		_I2C_2_Master_Start
  5640 ;;		_I2C_2_Master_Stop
  5641 ;;		_I2C_2_Master_Write
  5642 ;; This function is called by:
  5643 ;;		_readColors
  5644 ;; This function uses a non-reentrant model
  5645 ;;
  5646                           
  5647                           	psect	text37
  5648   0026AE                     __ptext37:
  5649                           	callstack 0
  5650   0026AE                     _readClearColor:
  5651                           	callstack 23
  5652   0026AE                     
  5653                           ;color.c: 104:  unsigned int tmp;;color.c: 105:  I2C_2_Master_Start();
  5654   0026AE  EC40  F015         	call	_I2C_2_Master_Start	;wreg free
  5655                           
  5656                           ;color.c: 106:  I2C_2_Master_Write(0x52 | 0x00);
  5657   0026B2  0E52               	movlw	82
  5658   0026B4  EC16  F015         	call	_I2C_2_Master_Write
  5659                           
  5660                           ;color.c: 107:  I2C_2_Master_Write(0xA0 | 0x14);
  5661   0026B8  0EB4               	movlw	180
  5662   0026BA  EC16  F015         	call	_I2C_2_Master_Write
  5663                           
  5664                           ;color.c: 108:  I2C_2_Master_RepStart();
  5665   0026BE  EC2C  F015         	call	_I2C_2_Master_RepStart	;wreg free
  5666                           
  5667                           ;color.c: 109:  I2C_2_Master_Write(0x52 | 0x01);
  5668   0026C2  0E53               	movlw	83
  5669   0026C4  EC16  F015         	call	_I2C_2_Master_Write
  5670                           
  5671                           ;color.c: 110:  tmp=I2C_2_Master_Read(1);
  5672   0026C8  0E01               	movlw	1
  5673   0026CA  ECA7  F013         	call	_I2C_2_Master_Read
  5674   0026CE  6E09               	movwf	??_readClearColor^0,c
  5675   0026D0  5009               	movf	??_readClearColor^0,w,c
  5676   0026D2  6E0C               	movwf	readClearColor@tmp^0,c
  5677   0026D4  6A0D               	clrf	(readClearColor@tmp+1)^0,c
  5678                           
  5679                           ;color.c: 111:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5680   0026D6  0E00               	movlw	0
  5681   0026D8  ECA7  F013         	call	_I2C_2_Master_Read
  5682   0026DC  6E09               	movwf	??_readClearColor^0,c
  5683   0026DE  5009               	movf	??_readClearColor^0,w,c
  5684   0026E0  6E0B               	movwf	(??_readClearColor+2)^0,c
  5685   0026E2  6A0A               	clrf	(??_readClearColor+1)^0,c
  5686   0026E4  500C               	movf	readClearColor@tmp^0,w,c
  5687   0026E6  100A               	iorwf	(??_readClearColor+1)^0,w,c
  5688   0026E8  6E0C               	movwf	readClearColor@tmp^0,c
  5689   0026EA  500D               	movf	(readClearColor@tmp+1)^0,w,c
  5690   0026EC  100B               	iorwf	(??_readClearColor+2)^0,w,c
  5691   0026EE  6E0D               	movwf	(readClearColor@tmp+1)^0,c
  5692                           
  5693                           ;color.c: 112:  I2C_2_Master_Stop();
  5694   0026F0  EC3B  F015         	call	_I2C_2_Master_Stop	;wreg free
  5695   0026F4                     
  5696                           ;color.c: 113:  return tmp;
  5697   0026F4  C00C  F007         	movff	readClearColor@tmp,?_readClearColor
  5698   0026F8  C00D  F008         	movff	readClearColor@tmp+1,?_readClearColor+1
  5699   0026FC  0012               	return		;funcret
  5700   0026FE                     __end_of_readClearColor:
  5701                           	callstack 0
  5702                           
  5703 ;; *************** function _readBlueColor *****************
  5704 ;; Defined at:
  5705 ;;		line 87 in file "color.c"
  5706 ;; Parameters:    Size  Location     Type
  5707 ;;		None
  5708 ;; Auto vars:     Size  Location     Type
  5709 ;;  tmp             2   11[COMRAM] unsigned int 
  5710 ;; Return value:  Size  Location     Type
  5711 ;;                  2    6[COMRAM] unsigned int 
  5712 ;; Registers used:
  5713 ;;		wreg, status,2, status,0, cstack
  5714 ;; Tracked objects:
  5715 ;;		On entry : 0/0
  5716 ;;		On exit  : 0/0
  5717 ;;		Unchanged: 0/0
  5718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5719 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5720 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5721 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5722 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5723 ;;Total ram usage:        7 bytes
  5724 ;; Hardware stack levels used: 1
  5725 ;; Hardware stack levels required when called: 6
  5726 ;; This function calls:
  5727 ;;		_I2C_2_Master_Read
  5728 ;;		_I2C_2_Master_RepStart
  5729 ;;		_I2C_2_Master_Start
  5730 ;;		_I2C_2_Master_Stop
  5731 ;;		_I2C_2_Master_Write
  5732 ;; This function is called by:
  5733 ;;		_readColors
  5734 ;; This function uses a non-reentrant model
  5735 ;;
  5736                           
  5737                           	psect	text38
  5738   0026FE                     __ptext38:
  5739                           	callstack 0
  5740   0026FE                     _readBlueColor:
  5741                           	callstack 23
  5742   0026FE                     
  5743                           ;color.c: 89:  unsigned int tmp;;color.c: 90:  I2C_2_Master_Start();
  5744   0026FE  EC40  F015         	call	_I2C_2_Master_Start	;wreg free
  5745                           
  5746                           ;color.c: 91:  I2C_2_Master_Write(0x52 | 0x00);
  5747   002702  0E52               	movlw	82
  5748   002704  EC16  F015         	call	_I2C_2_Master_Write
  5749                           
  5750                           ;color.c: 92:  I2C_2_Master_Write(0xA0 | 0x1A);
  5751   002708  0EBA               	movlw	186
  5752   00270A  EC16  F015         	call	_I2C_2_Master_Write
  5753                           
  5754                           ;color.c: 93:  I2C_2_Master_RepStart();
  5755   00270E  EC2C  F015         	call	_I2C_2_Master_RepStart	;wreg free
  5756                           
  5757                           ;color.c: 94:  I2C_2_Master_Write(0x52 | 0x01);
  5758   002712  0E53               	movlw	83
  5759   002714  EC16  F015         	call	_I2C_2_Master_Write
  5760                           
  5761                           ;color.c: 95:  tmp=I2C_2_Master_Read(1);
  5762   002718  0E01               	movlw	1
  5763   00271A  ECA7  F013         	call	_I2C_2_Master_Read
  5764   00271E  6E09               	movwf	??_readBlueColor^0,c
  5765   002720  5009               	movf	??_readBlueColor^0,w,c
  5766   002722  6E0C               	movwf	readBlueColor@tmp^0,c
  5767   002724  6A0D               	clrf	(readBlueColor@tmp+1)^0,c
  5768                           
  5769                           ;color.c: 96:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5770   002726  0E00               	movlw	0
  5771   002728  ECA7  F013         	call	_I2C_2_Master_Read
  5772   00272C  6E09               	movwf	??_readBlueColor^0,c
  5773   00272E  5009               	movf	??_readBlueColor^0,w,c
  5774   002730  6E0B               	movwf	(??_readBlueColor+2)^0,c
  5775   002732  6A0A               	clrf	(??_readBlueColor+1)^0,c
  5776   002734  500C               	movf	readBlueColor@tmp^0,w,c
  5777   002736  100A               	iorwf	(??_readBlueColor+1)^0,w,c
  5778   002738  6E0C               	movwf	readBlueColor@tmp^0,c
  5779   00273A  500D               	movf	(readBlueColor@tmp+1)^0,w,c
  5780   00273C  100B               	iorwf	(??_readBlueColor+2)^0,w,c
  5781   00273E  6E0D               	movwf	(readBlueColor@tmp+1)^0,c
  5782                           
  5783                           ;color.c: 97:  I2C_2_Master_Stop();
  5784   002740  EC3B  F015         	call	_I2C_2_Master_Stop	;wreg free
  5785   002744                     
  5786                           ;color.c: 98:  return tmp;
  5787   002744  C00C  F007         	movff	readBlueColor@tmp,?_readBlueColor
  5788   002748  C00D  F008         	movff	readBlueColor@tmp+1,?_readBlueColor+1
  5789   00274C  0012               	return		;funcret
  5790   00274E                     __end_of_readBlueColor:
  5791                           	callstack 0
  5792                           
  5793 ;; *************** function _I2C_2_Master_RepStart *****************
  5794 ;; Defined at:
  5795 ;;		line 37 in file "i2c.c"
  5796 ;; Parameters:    Size  Location     Type
  5797 ;;		None
  5798 ;; Auto vars:     Size  Location     Type
  5799 ;;		None
  5800 ;; Return value:  Size  Location     Type
  5801 ;;                  1    wreg      void 
  5802 ;; Registers used:
  5803 ;;		wreg, status,2, status,0, cstack
  5804 ;; Tracked objects:
  5805 ;;		On entry : 0/0
  5806 ;;		On exit  : 0/0
  5807 ;;		Unchanged: 0/0
  5808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5810 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5812 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5813 ;;Total ram usage:        0 bytes
  5814 ;; Hardware stack levels used: 1
  5815 ;; Hardware stack levels required when called: 5
  5816 ;; This function calls:
  5817 ;;		_I2C_2_Master_Idle
  5818 ;; This function is called by:
  5819 ;;		_readRedColor
  5820 ;;		_readGreenColor
  5821 ;;		_readBlueColor
  5822 ;;		_readClearColor
  5823 ;;		_color_readdoublefromaddress
  5824 ;;		_color_readfromaddress
  5825 ;; This function uses a non-reentrant model
  5826 ;;
  5827                           
  5828                           	psect	text39
  5829   002A58                     __ptext39:
  5830                           	callstack 0
  5831   002A58                     _I2C_2_Master_RepStart:
  5832                           	callstack 23
  5833   002A58                     
  5834                           ;i2c.c: 39:   I2C_2_Master_Idle();
  5835   002A58  EC3E  F014         	call	_I2C_2_Master_Idle	;wreg free
  5836   002A5C                     
  5837                           ;i2c.c: 40:   SSP2CON2bits.RSEN = 1;
  5838   002A5C  010E               	movlb	14	; () banked
  5839   002A5E  83DA               	bsf	218,1,b	;volatile
  5840   002A60                     
  5841                           ; BSR set to: 14
  5842   002A60  0012               	return		;funcret
  5843   002A62                     __end_of_I2C_2_Master_RepStart:
  5844                           	callstack 0
  5845                           
  5846 ;; *************** function _I2C_2_Master_Read *****************
  5847 ;; Defined at:
  5848 ;;		line 55 in file "i2c.c"
  5849 ;; Parameters:    Size  Location     Type
  5850 ;;  ack             1    wreg     unsigned char 
  5851 ;; Auto vars:     Size  Location     Type
  5852 ;;  ack             1    4[COMRAM] unsigned char 
  5853 ;;  tmp             1    5[COMRAM] unsigned char 
  5854 ;; Return value:  Size  Location     Type
  5855 ;;                  1    wreg      unsigned char 
  5856 ;; Registers used:
  5857 ;;		wreg, status,2, status,0, cstack
  5858 ;; Tracked objects:
  5859 ;;		On entry : 0/0
  5860 ;;		On exit  : 0/0
  5861 ;;		Unchanged: 0/0
  5862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5863 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5864 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5865 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5866 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5867 ;;Total ram usage:        3 bytes
  5868 ;; Hardware stack levels used: 1
  5869 ;; Hardware stack levels required when called: 5
  5870 ;; This function calls:
  5871 ;;		_I2C_2_Master_Idle
  5872 ;; This function is called by:
  5873 ;;		_readRedColor
  5874 ;;		_readGreenColor
  5875 ;;		_readBlueColor
  5876 ;;		_readClearColor
  5877 ;;		_color_readdoublefromaddress
  5878 ;;		_color_readfromaddress
  5879 ;; This function uses a non-reentrant model
  5880 ;;
  5881                           
  5882                           	psect	text40
  5883   00274E                     __ptext40:
  5884                           	callstack 0
  5885   00274E                     _I2C_2_Master_Read:
  5886                           	callstack 23
  5887                           
  5888                           ; BSR set to: 14
  5889                           ;incstack = 0
  5890                           ;I2C_2_Master_Read@ack stored from wreg
  5891   00274E  6E05               	movwf	I2C_2_Master_Read@ack^0,c
  5892   002750                     
  5893                           ;i2c.c: 55: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 56: {;i2c.c: 57:  
      +                           unsigned char tmp;;i2c.c: 58:   I2C_2_Master_Idle();
  5894   002750  EC3E  F014         	call	_I2C_2_Master_Idle	;wreg free
  5895   002754                     
  5896                           ;i2c.c: 59:   SSP2CON2bits.RCEN = 1;
  5897   002754  010E               	movlb	14	; () banked
  5898   002756  87DA               	bsf	218,3,b	;volatile
  5899                           
  5900                           ;i2c.c: 60:   I2C_2_Master_Idle();
  5901   002758  EC3E  F014         	call	_I2C_2_Master_Idle	;wreg free
  5902   00275C                     
  5903                           ;i2c.c: 61:   tmp = SSP2BUF;
  5904   00275C  CED5 F006          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  5905                           
  5906                           ;i2c.c: 62:   I2C_2_Master_Idle();
  5907   002760  EC3E  F014         	call	_I2C_2_Master_Idle	;wreg free
  5908   002764                     
  5909                           ;i2c.c: 63:   SSP2CON2bits.ACKDT = !ack;
  5910   002764  5005               	movf	I2C_2_Master_Read@ack^0,w,c
  5911   002766  B4D8               	btfsc	status,2,c
  5912   002768  EFB8  F013         	goto	u961
  5913   00276C  EFBC  F013         	goto	u960
  5914   002770                     u961:
  5915   002770  6A04               	clrf	??_I2C_2_Master_Read^0,c
  5916   002772  2A04               	incf	??_I2C_2_Master_Read^0,f,c
  5917   002774  EFBD  F013         	goto	u978
  5918   002778                     u960:
  5919   002778  6A04               	clrf	??_I2C_2_Master_Read^0,c
  5920   00277A                     u978:
  5921   00277A  3A04               	swapf	??_I2C_2_Master_Read^0,f,c
  5922   00277C  4604               	rlncf	??_I2C_2_Master_Read^0,f,c
  5923   00277E  010E               	movlb	14	; () banked
  5924   002780  51DA               	movf	218,w,b	;volatile
  5925   002782  1804               	xorwf	??_I2C_2_Master_Read^0,w,c
  5926   002784  0BDF               	andlw	-33
  5927   002786  1804               	xorwf	??_I2C_2_Master_Read^0,w,c
  5928   002788  6FDA               	movwf	218,b	;volatile
  5929   00278A                     
  5930                           ; BSR set to: 14
  5931                           ;i2c.c: 64:   SSP2CON2bits.ACKEN = 1;
  5932   00278A  89DA               	bsf	218,4,b	;volatile
  5933   00278C                     
  5934                           ; BSR set to: 14
  5935                           ;i2c.c: 65:   return tmp;
  5936   00278C  5006               	movf	I2C_2_Master_Read@tmp^0,w,c
  5937   00278E                     
  5938                           ; BSR set to: 14
  5939   00278E  0012               	return		;funcret
  5940   002790                     __end_of_I2C_2_Master_Read:
  5941                           	callstack 0
  5942                           
  5943 ;; *************** function _LEDturnON *****************
  5944 ;; Defined at:
  5945 ;;		line 25 in file "interact.c"
  5946 ;; Parameters:    Size  Location     Type
  5947 ;;		None
  5948 ;; Auto vars:     Size  Location     Type
  5949 ;;		None
  5950 ;; Return value:  Size  Location     Type
  5951 ;;                  1    wreg      void 
  5952 ;; Registers used:
  5953 ;;		None
  5954 ;; Tracked objects:
  5955 ;;		On entry : 0/0
  5956 ;;		On exit  : 0/0
  5957 ;;		Unchanged: 0/0
  5958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5959 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5960 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5961 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5962 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5963 ;;Total ram usage:        0 bytes
  5964 ;; Hardware stack levels used: 1
  5965 ;; Hardware stack levels required when called: 4
  5966 ;; This function calls:
  5967 ;;		Nothing
  5968 ;; This function is called by:
  5969 ;;		_readColors
  5970 ;;		_decideColor
  5971 ;;		_main
  5972 ;; This function uses a non-reentrant model
  5973 ;;
  5974                           
  5975                           	psect	text41
  5976   002A62                     __ptext41:
  5977                           	callstack 0
  5978   002A62                     _LEDturnON:
  5979                           	callstack 25
  5980   002A62                     
  5981                           ;interact.c: 26:     LATDbits.LATD3 = 1;
  5982   002A62  867C               	bsf	124,3,c	;volatile
  5983                           
  5984                           ;interact.c: 28:     LATGbits.LATG0 = 1;
  5985   002A64  807F               	bsf	127,0,c	;volatile
  5986                           
  5987                           ;interact.c: 29:     LATEbits.LATE7 = 1;
  5988   002A66  8E7D               	bsf	125,7,c	;volatile
  5989                           
  5990                           ;interact.c: 30:     LATAbits.LATA3 = 1;
  5991   002A68  8679               	bsf	121,3,c	;volatile
  5992   002A6A  0012               	return		;funcret
  5993   002A6C                     __end_of_LEDturnON:
  5994                           	callstack 0
  5995                           
  5996 ;; *************** function _LEDturnOFF *****************
  5997 ;; Defined at:
  5998 ;;		line 33 in file "interact.c"
  5999 ;; Parameters:    Size  Location     Type
  6000 ;;		None
  6001 ;; Auto vars:     Size  Location     Type
  6002 ;;		None
  6003 ;; Return value:  Size  Location     Type
  6004 ;;                  1    wreg      void 
  6005 ;; Registers used:
  6006 ;;		None
  6007 ;; Tracked objects:
  6008 ;;		On entry : 0/0
  6009 ;;		On exit  : 0/0
  6010 ;;		Unchanged: 0/0
  6011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6012 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6013 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6014 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6015 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6016 ;;Total ram usage:        0 bytes
  6017 ;; Hardware stack levels used: 1
  6018 ;; Hardware stack levels required when called: 4
  6019 ;; This function calls:
  6020 ;;		Nothing
  6021 ;; This function is called by:
  6022 ;;		_readColors
  6023 ;; This function uses a non-reentrant model
  6024 ;;
  6025                           
  6026                           	psect	text42
  6027   002A6C                     __ptext42:
  6028                           	callstack 0
  6029   002A6C                     _LEDturnOFF:
  6030                           	callstack 25
  6031   002A6C                     
  6032                           ;interact.c: 34:     LATDbits.LATD3 = 0;
  6033   002A6C  967C               	bcf	124,3,c	;volatile
  6034                           
  6035                           ;interact.c: 37:     LATGbits.LATG0 = 0;
  6036   002A6E  907F               	bcf	127,0,c	;volatile
  6037                           
  6038                           ;interact.c: 38:     LATEbits.LATE7 = 0;
  6039   002A70  9E7D               	bcf	125,7,c	;volatile
  6040                           
  6041                           ;interact.c: 39:     LATAbits.LATA3 = 0;
  6042   002A72  9679               	bcf	121,3,c	;volatile
  6043   002A74  0012               	return		;funcret
  6044   002A76                     __end_of_LEDturnOFF:
  6045                           	callstack 0
  6046                           
  6047 ;; *************** function _normalizeColors *****************
  6048 ;; Defined at:
  6049 ;;		line 118 in file "color.c"
  6050 ;; Parameters:    Size  Location     Type
  6051 ;;  RGBC            1   15[COMRAM] PTR struct colors
  6052 ;;		 -> main@RGBC(8), 
  6053 ;;  normRGB         1   16[COMRAM] PTR struct normColors
  6054 ;;		 -> main@normRGB(8), 
  6055 ;; Auto vars:     Size  Location     Type
  6056 ;;  sum             2   25[COMRAM] unsigned int 
  6057 ;; Return value:  Size  Location     Type
  6058 ;;                  1    wreg      void 
  6059 ;; Registers used:
  6060 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  6061 ;; Tracked objects:
  6062 ;;		On entry : 0/0
  6063 ;;		On exit  : 0/0
  6064 ;;		Unchanged: 0/0
  6065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6066 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6067 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6068 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6069 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6070 ;;Total ram usage:       14 bytes
  6071 ;; Hardware stack levels used: 1
  6072 ;; Hardware stack levels required when called: 5
  6073 ;; This function calls:
  6074 ;;		___lwdiv
  6075 ;; This function is called by:
  6076 ;;		_decideColor
  6077 ;;		_main
  6078 ;; This function uses a non-reentrant model
  6079 ;;
  6080                           
  6081                           	psect	text43
  6082   001740                     __ptext43:
  6083                           	callstack 0
  6084   001740                     _normalizeColors:
  6085                           	callstack 25
  6086   001740                     
  6087                           ;color.c: 119:     unsigned int sum = (RGBC->red) + (RGBC->green) + (RGBC->blue);
  6088   001740  5010               	movf	normalizeColors@RGBC^0,w,c
  6089   001742  6ED9               	movwf	fsr2l,c
  6090   001744  6ADA               	clrf	fsr2h,c
  6091   001746  0E04               	movlw	4
  6092   001748  26D9               	addwf	fsr2l,f,c
  6093   00174A  CFDE F012          	movff	postinc2,??_normalizeColors
  6094   00174E  CFDD F013          	movff	postdec2,??_normalizeColors+1
  6095   001752  5010               	movf	normalizeColors@RGBC^0,w,c
  6096   001754  6ED9               	movwf	fsr2l,c
  6097   001756  6ADA               	clrf	fsr2h,c
  6098   001758  0E02               	movlw	2
  6099   00175A  26D9               	addwf	fsr2l,f,c
  6100   00175C  CFDE F014          	movff	postinc2,??_normalizeColors+2
  6101   001760  CFDD F015          	movff	postdec2,??_normalizeColors+3
  6102   001764  5010               	movf	normalizeColors@RGBC^0,w,c
  6103   001766  6ED9               	movwf	fsr2l,c
  6104   001768  6ADA               	clrf	fsr2h,c
  6105   00176A  CFDE F016          	movff	postinc2,??_normalizeColors+4
  6106   00176E  CFDD F017          	movff	postdec2,??_normalizeColors+5
  6107   001772  5014               	movf	(??_normalizeColors+2)^0,w,c
  6108   001774  2416               	addwf	(??_normalizeColors+4)^0,w,c
  6109   001776  6E18               	movwf	(??_normalizeColors+6)^0,c
  6110   001778  5015               	movf	(??_normalizeColors+3)^0,w,c
  6111   00177A  2017               	addwfc	(??_normalizeColors+5)^0,w,c
  6112   00177C  6E19               	movwf	(??_normalizeColors+7)^0,c
  6113   00177E  5012               	movf	??_normalizeColors^0,w,c
  6114   001780  2418               	addwf	(??_normalizeColors+6)^0,w,c
  6115   001782  6E1A               	movwf	normalizeColors@sum^0,c
  6116   001784  5013               	movf	(??_normalizeColors+1)^0,w,c
  6117   001786  2019               	addwfc	(??_normalizeColors+7)^0,w,c
  6118   001788  6E1B               	movwf	(normalizeColors@sum+1)^0,c
  6119   00178A                     
  6120                           ;color.c: 123:     normRGB->normRed = (RGBC->red) / ((sum)/100);
  6121   00178A  0E00               	movlw	0
  6122   00178C  6E0C               	movwf	(___lwdiv@divisor+1)^0,c
  6123   00178E  0E64               	movlw	100
  6124   001790  6E0B               	movwf	___lwdiv@divisor^0,c
  6125   001792  C01A  F009         	movff	normalizeColors@sum,___lwdiv@dividend
  6126   001796  C01B  F00A         	movff	normalizeColors@sum+1,___lwdiv@dividend+1
  6127   00179A  EC3B  F012         	call	___lwdiv	;wreg free
  6128   00179E  C009  F01C         	movff	?___lwdiv,_normalizeColors$3124
  6129   0017A2  C00A  F01D         	movff	?___lwdiv+1,_normalizeColors$3124+1
  6130   0017A6                     
  6131                           ;color.c: 123:     normRGB->normRed = (RGBC->red) / ((sum)/100);
  6132   0017A6  5010               	movf	normalizeColors@RGBC^0,w,c
  6133   0017A8  6ED9               	movwf	fsr2l,c
  6134   0017AA  6ADA               	clrf	fsr2h,c
  6135   0017AC  CFDE F009          	movff	postinc2,___lwdiv@dividend
  6136   0017B0  CFDD F00A          	movff	postdec2,___lwdiv@dividend+1
  6137   0017B4  C01C  F00B         	movff	_normalizeColors$3124,___lwdiv@divisor
  6138   0017B8  C01D  F00C         	movff	_normalizeColors$3124+1,___lwdiv@divisor+1
  6139   0017BC  EC3B  F012         	call	___lwdiv	;wreg free
  6140   0017C0  5011               	movf	normalizeColors@normRGB^0,w,c
  6141   0017C2  6ED9               	movwf	fsr2l,c
  6142   0017C4  6ADA               	clrf	fsr2h,c
  6143   0017C6  C009  FFDE         	movff	?___lwdiv,postinc2
  6144   0017CA  C00A  FFDD         	movff	?___lwdiv+1,postdec2
  6145   0017CE                     
  6146                           ;color.c: 124:     normRGB->normGreen = (RGBC->green) / ((sum)/100);
  6147   0017CE  0E00               	movlw	0
  6148   0017D0  6E0C               	movwf	(___lwdiv@divisor+1)^0,c
  6149   0017D2  0E64               	movlw	100
  6150   0017D4  6E0B               	movwf	___lwdiv@divisor^0,c
  6151   0017D6  C01A  F009         	movff	normalizeColors@sum,___lwdiv@dividend
  6152   0017DA  C01B  F00A         	movff	normalizeColors@sum+1,___lwdiv@dividend+1
  6153   0017DE  EC3B  F012         	call	___lwdiv	;wreg free
  6154   0017E2  C009  F01C         	movff	?___lwdiv,_normalizeColors$3124
  6155   0017E6  C00A  F01D         	movff	?___lwdiv+1,_normalizeColors$3124+1
  6156   0017EA                     
  6157                           ;color.c: 124:     normRGB->normGreen = (RGBC->green) / ((sum)/100);
  6158   0017EA  5010               	movf	normalizeColors@RGBC^0,w,c
  6159   0017EC  6ED9               	movwf	fsr2l,c
  6160   0017EE  6ADA               	clrf	fsr2h,c
  6161   0017F0  0E02               	movlw	2
  6162   0017F2  26D9               	addwf	fsr2l,f,c
  6163   0017F4  CFDE F009          	movff	postinc2,___lwdiv@dividend
  6164   0017F8  CFDD F00A          	movff	postdec2,___lwdiv@dividend+1
  6165   0017FC  C01C  F00B         	movff	_normalizeColors$3124,___lwdiv@divisor
  6166   001800  C01D  F00C         	movff	_normalizeColors$3124+1,___lwdiv@divisor+1
  6167   001804  EC3B  F012         	call	___lwdiv	;wreg free
  6168   001808  5011               	movf	normalizeColors@normRGB^0,w,c
  6169   00180A  6ED9               	movwf	fsr2l,c
  6170   00180C  6ADA               	clrf	fsr2h,c
  6171   00180E  0E02               	movlw	2
  6172   001810  26D9               	addwf	fsr2l,f,c
  6173   001812  C009  FFDE         	movff	?___lwdiv,postinc2
  6174   001816  C00A  FFDD         	movff	?___lwdiv+1,postdec2
  6175   00181A                     
  6176                           ;color.c: 125:     normRGB->normBlue = (RGBC->blue) / ((sum)/100);
  6177   00181A  0E00               	movlw	0
  6178   00181C  6E0C               	movwf	(___lwdiv@divisor+1)^0,c
  6179   00181E  0E64               	movlw	100
  6180   001820  6E0B               	movwf	___lwdiv@divisor^0,c
  6181   001822  C01A  F009         	movff	normalizeColors@sum,___lwdiv@dividend
  6182   001826  C01B  F00A         	movff	normalizeColors@sum+1,___lwdiv@dividend+1
  6183   00182A  EC3B  F012         	call	___lwdiv	;wreg free
  6184   00182E  C009  F01C         	movff	?___lwdiv,_normalizeColors$3124
  6185   001832  C00A  F01D         	movff	?___lwdiv+1,_normalizeColors$3124+1
  6186   001836                     
  6187                           ;color.c: 125:     normRGB->normBlue = (RGBC->blue) / ((sum)/100);
  6188   001836  5010               	movf	normalizeColors@RGBC^0,w,c
  6189   001838  6ED9               	movwf	fsr2l,c
  6190   00183A  6ADA               	clrf	fsr2h,c
  6191   00183C  0E04               	movlw	4
  6192   00183E  26D9               	addwf	fsr2l,f,c
  6193   001840  CFDE F009          	movff	postinc2,___lwdiv@dividend
  6194   001844  CFDD F00A          	movff	postdec2,___lwdiv@dividend+1
  6195   001848  C01C  F00B         	movff	_normalizeColors$3124,___lwdiv@divisor
  6196   00184C  C01D  F00C         	movff	_normalizeColors$3124+1,___lwdiv@divisor+1
  6197   001850  EC3B  F012         	call	___lwdiv	;wreg free
  6198   001854  5011               	movf	normalizeColors@normRGB^0,w,c
  6199   001856  6ED9               	movwf	fsr2l,c
  6200   001858  6ADA               	clrf	fsr2h,c
  6201   00185A  0E04               	movlw	4
  6202   00185C  26D9               	addwf	fsr2l,f,c
  6203   00185E  C009  FFDE         	movff	?___lwdiv,postinc2
  6204   001862  C00A  FFDD         	movff	?___lwdiv+1,postdec2
  6205   001866                     
  6206                           ;color.c: 126:     normRGB->clear = RGBC->clear;
  6207   001866  5010               	movf	normalizeColors@RGBC^0,w,c
  6208   001868  6ED9               	movwf	fsr2l,c
  6209   00186A  6ADA               	clrf	fsr2h,c
  6210   00186C  0E06               	movlw	6
  6211   00186E  26D9               	addwf	fsr2l,f,c
  6212   001870  5011               	movf	normalizeColors@normRGB^0,w,c
  6213   001872  6EE1               	movwf	fsr1l,c
  6214   001874  6AE2               	clrf	fsr1h,c
  6215   001876  0E06               	movlw	6
  6216   001878  26E1               	addwf	fsr1l,f,c
  6217   00187A  CFDE FFE6          	movff	postinc2,postinc1
  6218   00187E  CFDD FFE5          	movff	postdec2,postdec1
  6219   001882  0012               	return		;funcret
  6220   001884                     __end_of_normalizeColors:
  6221                           	callstack 0
  6222                           
  6223 ;; *************** function _creep *****************
  6224 ;; Defined at:
  6225 ;;		line 384 in file "dc_motor.c"
  6226 ;; Parameters:    Size  Location     Type
  6227 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  6228 ;;		 -> main@motorL(9), 
  6229 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  6230 ;;		 -> main@motorR(9), 
  6231 ;;  increments      2   29[COMRAM] int 
  6232 ;;  direction       1   31[COMRAM] unsigned char 
  6233 ;; Auto vars:     Size  Location     Type
  6234 ;;  i               2   37[COMRAM] int 
  6235 ;;  i               2   35[COMRAM] int 
  6236 ;;  creep_power     1   40[COMRAM] unsigned char 
  6237 ;;  current_powe    1   39[COMRAM] unsigned char 
  6238 ;; Return value:  Size  Location     Type
  6239 ;;                  1    wreg      void 
  6240 ;; Registers used:
  6241 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6242 ;; Tracked objects:
  6243 ;;		On entry : 0/0
  6244 ;;		On exit  : 0/0
  6245 ;;		Unchanged: 0/0
  6246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6247 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6248 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6249 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6250 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6251 ;;Total ram usage:       14 bytes
  6252 ;; Hardware stack levels used: 1
  6253 ;; Hardware stack levels required when called: 7
  6254 ;; This function calls:
  6255 ;;		_setMotorPWM
  6256 ;;		_stop
  6257 ;; This function is called by:
  6258 ;;		_decideColor
  6259 ;; This function uses a non-reentrant model
  6260 ;;
  6261                           
  6262                           	psect	text44
  6263   001318                     __ptext44:
  6264                           	callstack 0
  6265   001318                     _creep:
  6266                           	callstack 22
  6267   001318                     
  6268                           ;dc_motor.c: 385:     if (mL->power != 0 || mR->power != 0) {
  6269   001318  501C               	movf	creep@mL^0,w,c
  6270   00131A  6ED9               	movwf	fsr2l,c
  6271   00131C  6ADA               	clrf	fsr2h,c
  6272   00131E  50DF               	movf	indf2,w,c
  6273   001320  A4D8               	btfss	status,2,c
  6274   001322  EF95  F009         	goto	u1251
  6275   001326  EF97  F009         	goto	u1250
  6276   00132A                     u1251:
  6277   00132A  EFA2  F009         	goto	l2913
  6278   00132E                     u1250:
  6279   00132E  501D               	movf	creep@mR^0,w,c
  6280   001330  6ED9               	movwf	fsr2l,c
  6281   001332  6ADA               	clrf	fsr2h,c
  6282   001334  50DF               	movf	indf2,w,c
  6283   001336  B4D8               	btfsc	status,2,c
  6284   001338  EFA0  F009         	goto	u1261
  6285   00133C  EFA2  F009         	goto	u1260
  6286   001340                     u1261:
  6287   001340  EFA8  F009         	goto	l2915
  6288   001344                     u1260:
  6289   001344                     l2913:
  6290                           
  6291                           ;dc_motor.c: 386:         stop(mL, mR);
  6292   001344  C01C  F015         	movff	creep@mL,stop@mL
  6293   001348  C01D  F016         	movff	creep@mR,stop@mR
  6294   00134C  ECAA  F012         	call	_stop	;wreg free
  6295   001350                     l2915:
  6296                           
  6297                           ;dc_motor.c: 388:     increment = 0;
  6298   001350  0E00               	movlw	0
  6299   001352  0100               	movlb	0	; () banked
  6300   001354  6F89               	movwf	(_increment+1)& (0+255),b
  6301   001356  0E00               	movlw	0
  6302   001358  6F88               	movwf	_increment& (0+255),b
  6303   00135A                     
  6304                           ; BSR set to: 0
  6305                           ;dc_motor.c: 390:     mL->direction = direction;
  6306   00135A  501C               	movf	creep@mL^0,w,c
  6307   00135C  6ED9               	movwf	fsr2l,c
  6308   00135E  6ADA               	clrf	fsr2h,c
  6309   001360  0E01               	movlw	1
  6310   001362  26D9               	addwf	fsr2l,f,c
  6311   001364  C020  FFDF         	movff	creep@direction,indf2
  6312   001368                     
  6313                           ; BSR set to: 0
  6314                           ;dc_motor.c: 391:     mR->direction = direction;
  6315   001368  501D               	movf	creep@mR^0,w,c
  6316   00136A  6ED9               	movwf	fsr2l,c
  6317   00136C  6ADA               	clrf	fsr2h,c
  6318   00136E  0E01               	movlw	1
  6319   001370  26D9               	addwf	fsr2l,f,c
  6320   001372  C020  FFDF         	movff	creep@direction,indf2
  6321   001376                     
  6322                           ; BSR set to: 0
  6323                           ;dc_motor.c: 393:     char current_power = mL->power;
  6324   001376  501C               	movf	creep@mL^0,w,c
  6325   001378  6ED9               	movwf	fsr2l,c
  6326   00137A  6ADA               	clrf	fsr2h,c
  6327   00137C  50DF               	movf	indf2,w,c
  6328   00137E  6E28               	movwf	creep@current_power^0,c
  6329   001380                     
  6330                           ; BSR set to: 0
  6331                           ;dc_motor.c: 394:     char creep_power = 10;
  6332   001380  0E0A               	movlw	10
  6333   001382  6E29               	movwf	creep@creep_power^0,c
  6334   001384                     
  6335                           ; BSR set to: 0
  6336                           ;dc_motor.c: 396:     if (creep_power > current_power) {
  6337   001384  0E0A               	movlw	10
  6338   001386  6028               	cpfslt	creep@current_power^0,c
  6339   001388  EFC8  F009         	goto	u1271
  6340   00138C  EFCA  F009         	goto	u1270
  6341   001390                     u1271:
  6342   001390  EFFF  F009         	goto	l574
  6343   001394                     u1270:
  6344   001394                     
  6345                           ; BSR set to: 0
  6346                           ;dc_motor.c: 397:         for (int i=current_power; i<= creep_power; i++) {
  6347   001394  C028  F024         	movff	creep@current_power,creep@i
  6348   001398  6A25               	clrf	(creep@i+1)^0,c
  6349   00139A  EFEB  F009         	goto	l2939
  6350   00139E                     l2929:
  6351                           
  6352                           ;dc_motor.c: 398:             mL->power = i;
  6353   00139E  501C               	movf	creep@mL^0,w,c
  6354   0013A0  6ED9               	movwf	fsr2l,c
  6355   0013A2  6ADA               	clrf	fsr2h,c
  6356   0013A4  C024  FFDF         	movff	creep@i,indf2
  6357                           
  6358                           ;dc_motor.c: 399:             mR->power = i;
  6359   0013A8  501D               	movf	creep@mR^0,w,c
  6360   0013AA  6ED9               	movwf	fsr2l,c
  6361   0013AC  6ADA               	clrf	fsr2h,c
  6362   0013AE  C024  FFDF         	movff	creep@i,indf2
  6363   0013B2                     
  6364                           ;dc_motor.c: 400:             setMotorPWM(mL);
  6365   0013B2  C01C  F010         	movff	creep@mL,setMotorPWM@m
  6366   0013B6  ECF6  F00A         	call	_setMotorPWM	;wreg free
  6367   0013BA                     
  6368                           ;dc_motor.c: 401:             setMotorPWM(mR);
  6369   0013BA  C01D  F010         	movff	creep@mR,setMotorPWM@m
  6370   0013BE  ECF6  F00A         	call	_setMotorPWM	;wreg free
  6371   0013C2                     
  6372                           ;dc_motor.c: 402:             _delay((unsigned long)((5)*(64000000/4000.0)));
  6373   0013C2  0E68               	movlw	104
  6374   0013C4  6E21               	movwf	??_creep^0,c
  6375   0013C6  0EE4               	movlw	228
  6376   0013C8                     u2087:
  6377   0013C8  2EE8               	decfsz	wreg,f,c
  6378   0013CA  D7FE               	bra	u2087
  6379   0013CC  2E21               	decfsz	??_creep^0,f,c
  6380   0013CE  D7FC               	bra	u2087
  6381   0013D0  D000               	nop2	
  6382   0013D2                     
  6383                           ;dc_motor.c: 403:         }
  6384   0013D2  4A24               	infsnz	creep@i^0,f,c
  6385   0013D4  2A25               	incf	(creep@i+1)^0,f,c
  6386   0013D6                     l2939:
  6387   0013D6  5029               	movf	creep@creep_power^0,w,c
  6388   0013D8  6E21               	movwf	??_creep^0,c
  6389   0013DA  6A22               	clrf	(??_creep+1)^0,c
  6390   0013DC  5024               	movf	creep@i^0,w,c
  6391   0013DE  5C21               	subwf	??_creep^0,w,c
  6392   0013E0  5022               	movf	(??_creep+1)^0,w,c
  6393   0013E2  0A80               	xorlw	128
  6394   0013E4  6E23               	movwf	(??_creep+2)^0,c
  6395   0013E6  5025               	movf	(creep@i+1)^0,w,c
  6396   0013E8  0A80               	xorlw	128
  6397   0013EA  5823               	subwfb	(??_creep+2)^0,w,c
  6398   0013EC  B0D8               	btfsc	status,0,c
  6399   0013EE  EFFB  F009         	goto	u1281
  6400   0013F2  EFFD  F009         	goto	u1280
  6401   0013F6                     u1281:
  6402   0013F6  EFCF  F009         	goto	l2929
  6403   0013FA                     u1280:
  6404   0013FA  EF33  F00A         	goto	l2953
  6405   0013FE                     l574:
  6406                           
  6407                           ; BSR set to: 0
  6408                           ;dc_motor.c: 406:         for (int i=current_power; i>= creep_power; i--) {
  6409   0013FE  C028  F026         	movff	creep@current_power,creep@i_2186
  6410   001402  6A27               	clrf	(creep@i_2186+1)^0,c
  6411   001404  EF21  F00A         	goto	l2951
  6412   001408                     l2941:
  6413                           
  6414                           ;dc_motor.c: 407:             mL->power = i;
  6415   001408  501C               	movf	creep@mL^0,w,c
  6416   00140A  6ED9               	movwf	fsr2l,c
  6417   00140C  6ADA               	clrf	fsr2h,c
  6418   00140E  C026  FFDF         	movff	creep@i_2186,indf2
  6419                           
  6420                           ;dc_motor.c: 408:             mR->power = i;
  6421   001412  501D               	movf	creep@mR^0,w,c
  6422   001414  6ED9               	movwf	fsr2l,c
  6423   001416  6ADA               	clrf	fsr2h,c
  6424   001418  C026  FFDF         	movff	creep@i_2186,indf2
  6425   00141C                     
  6426                           ;dc_motor.c: 409:             setMotorPWM(mL);
  6427   00141C  C01C  F010         	movff	creep@mL,setMotorPWM@m
  6428   001420  ECF6  F00A         	call	_setMotorPWM	;wreg free
  6429   001424                     
  6430                           ;dc_motor.c: 410:             setMotorPWM(mR);
  6431   001424  C01D  F010         	movff	creep@mR,setMotorPWM@m
  6432   001428  ECF6  F00A         	call	_setMotorPWM	;wreg free
  6433   00142C                     
  6434                           ;dc_motor.c: 411:             _delay((unsigned long)((5)*(64000000/4000.0)));
  6435   00142C  0E68               	movlw	104
  6436   00142E  6E21               	movwf	??_creep^0,c
  6437   001430  0EE4               	movlw	228
  6438   001432                     u2097:
  6439   001432  2EE8               	decfsz	wreg,f,c
  6440   001434  D7FE               	bra	u2097
  6441   001436  2E21               	decfsz	??_creep^0,f,c
  6442   001438  D7FC               	bra	u2097
  6443   00143A  D000               	nop2	
  6444   00143C                     
  6445                           ;dc_motor.c: 412:         }
  6446   00143C  0626               	decf	creep@i_2186^0,f,c
  6447   00143E  A0D8               	btfss	status,0,c
  6448   001440  0627               	decf	(creep@i_2186+1)^0,f,c
  6449   001442                     l2951:
  6450   001442  5029               	movf	creep@creep_power^0,w,c
  6451   001444  6E21               	movwf	??_creep^0,c
  6452   001446  6A22               	clrf	(??_creep+1)^0,c
  6453   001448  5021               	movf	??_creep^0,w,c
  6454   00144A  5C26               	subwf	creep@i_2186^0,w,c
  6455   00144C  5027               	movf	(creep@i_2186+1)^0,w,c
  6456   00144E  0A80               	xorlw	128
  6457   001450  6E23               	movwf	(??_creep+2)^0,c
  6458   001452  5022               	movf	(??_creep+1)^0,w,c
  6459   001454  0A80               	xorlw	128
  6460   001456  5823               	subwfb	(??_creep+2)^0,w,c
  6461   001458  B0D8               	btfsc	status,0,c
  6462   00145A  EF31  F00A         	goto	u1291
  6463   00145E  EF33  F00A         	goto	u1290
  6464   001462                     u1291:
  6465   001462  EF04  F00A         	goto	l2941
  6466   001466                     u1290:
  6467   001466                     l2953:
  6468   001466  501E               	movf	creep@increments^0,w,c
  6469   001468  0100               	movlb	0	; () banked
  6470   00146A  5D88               	subwf	_increment& (0+255),w,b
  6471   00146C  5189               	movf	(_increment+1)& (0+255),w,b
  6472   00146E  0A80               	xorlw	128
  6473   001470  6E21               	movwf	??_creep^0,c
  6474   001472  501F               	movf	(creep@increments+1)^0,w,c
  6475   001474  0A80               	xorlw	128
  6476   001476  5821               	subwfb	??_creep^0,w,c
  6477   001478  A0D8               	btfss	status,0,c
  6478   00147A  EF41  F00A         	goto	u1301
  6479   00147E  EF43  F00A         	goto	u1300
  6480   001482                     u1301:
  6481   001482  EF33  F00A         	goto	l2953
  6482   001486                     u1300:
  6483   001486                     
  6484                           ; BSR set to: 0
  6485                           ;dc_motor.c: 415:     stop(mL, mR);
  6486   001486  C01C  F015         	movff	creep@mL,stop@mL
  6487   00148A  C01D  F016         	movff	creep@mR,stop@mR
  6488   00148E  ECAA  F012         	call	_stop	;wreg free
  6489   001492  0012               	return		;funcret
  6490   001494                     __end_of_creep:
  6491                           	callstack 0
  6492                           
  6493 ;; *************** function _stop *****************
  6494 ;; Defined at:
  6495 ;;		line 82 in file "dc_motor.c"
  6496 ;; Parameters:    Size  Location     Type
  6497 ;;  mL              1   20[COMRAM] PTR struct DC_motor
  6498 ;;		 -> main@motorL(9), 
  6499 ;;  mR              1   21[COMRAM] PTR struct DC_motor
  6500 ;;		 -> main@motorR(9), 
  6501 ;; Auto vars:     Size  Location     Type
  6502 ;;  i               2   25[COMRAM] int 
  6503 ;;  current_powe    2   23[COMRAM] unsigned int 
  6504 ;; Return value:  Size  Location     Type
  6505 ;;                  1    wreg      void 
  6506 ;; Registers used:
  6507 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6508 ;; Tracked objects:
  6509 ;;		On entry : 0/0
  6510 ;;		On exit  : 0/0
  6511 ;;		Unchanged: 0/0
  6512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6513 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6514 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6515 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6516 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6517 ;;Total ram usage:        7 bytes
  6518 ;; Hardware stack levels used: 1
  6519 ;; Hardware stack levels required when called: 6
  6520 ;; This function calls:
  6521 ;;		_setMotorPWM
  6522 ;; This function is called by:
  6523 ;;		_reverseRoute
  6524 ;;		_turnLeft
  6525 ;;		_turnRight
  6526 ;;		_turn180
  6527 ;;		_turnLeft135
  6528 ;;		_turnRight135
  6529 ;;		_creep
  6530 ;;		_timed_trundle
  6531 ;;		_trundleSquare
  6532 ;; This function uses a non-reentrant model
  6533 ;;
  6534                           
  6535                           	psect	text45
  6536   002554                     __ptext45:
  6537                           	callstack 0
  6538   002554                     _stop:
  6539                           	callstack 22
  6540   002554                     
  6541                           ;dc_motor.c: 82: void stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 83: {;dc_motor.c: 85:
      +                               unsigned int current_power = mL->power;
  6542   002554  5015               	movf	stop@mL^0,w,c
  6543   002556  6ED9               	movwf	fsr2l,c
  6544   002558  6ADA               	clrf	fsr2h,c
  6545   00255A  50DF               	movf	indf2,w,c
  6546   00255C  6E17               	movwf	??_stop^0,c
  6547   00255E  5017               	movf	??_stop^0,w,c
  6548   002560  6E18               	movwf	stop@current_power^0,c
  6549   002562  6A19               	clrf	(stop@current_power+1)^0,c
  6550   002564                     
  6551                           ;dc_motor.c: 87:     for (int i=current_power; i>= 0; i--) {
  6552   002564  C018  F01A         	movff	stop@current_power,stop@i
  6553   002568  C019  F01B         	movff	stop@current_power+1,stop@i+1
  6554   00256C                     l2481:
  6555   00256C  BE1B               	btfsc	(stop@i+1)^0,7,c
  6556   00256E  EFBD  F012         	goto	u950
  6557   002572  EFBB  F012         	goto	u951
  6558   002576                     u951:
  6559   002576  EFBF  F012         	goto	l2485
  6560   00257A                     u950:
  6561   00257A  EFDE  F012         	goto	l474
  6562   00257E                     l2485:
  6563                           
  6564                           ;dc_motor.c: 88:         mL->power = i;
  6565   00257E  5015               	movf	stop@mL^0,w,c
  6566   002580  6ED9               	movwf	fsr2l,c
  6567   002582  6ADA               	clrf	fsr2h,c
  6568   002584  C01A  FFDF         	movff	stop@i,indf2
  6569                           
  6570                           ;dc_motor.c: 89:         mR->power = i;
  6571   002588  5016               	movf	stop@mR^0,w,c
  6572   00258A  6ED9               	movwf	fsr2l,c
  6573   00258C  6ADA               	clrf	fsr2h,c
  6574   00258E  C01A  FFDF         	movff	stop@i,indf2
  6575   002592                     
  6576                           ;dc_motor.c: 90:         setMotorPWM(mL);
  6577   002592  C015  F010         	movff	stop@mL,setMotorPWM@m
  6578   002596  ECF6  F00A         	call	_setMotorPWM	;wreg free
  6579   00259A                     
  6580                           ;dc_motor.c: 91:         setMotorPWM(mR);
  6581   00259A  C016  F010         	movff	stop@mR,setMotorPWM@m
  6582   00259E  ECF6  F00A         	call	_setMotorPWM	;wreg free
  6583   0025A2                     
  6584                           ;dc_motor.c: 92:         _delay((unsigned long)((5)*(64000000/4000.0)));
  6585   0025A2  0E68               	movlw	104
  6586   0025A4  6E17               	movwf	??_stop^0,c
  6587   0025A6  0EE4               	movlw	228
  6588   0025A8                     u2107:
  6589   0025A8  2EE8               	decfsz	wreg,f,c
  6590   0025AA  D7FE               	bra	u2107
  6591   0025AC  2E17               	decfsz	??_stop^0,f,c
  6592   0025AE  D7FC               	bra	u2107
  6593   0025B0  D000               	nop2	
  6594   0025B2                     
  6595                           ;dc_motor.c: 93:     }
  6596   0025B2  061A               	decf	stop@i^0,f,c
  6597   0025B4  A0D8               	btfss	status,0,c
  6598   0025B6  061B               	decf	(stop@i+1)^0,f,c
  6599   0025B8  EFB6  F012         	goto	l2481
  6600   0025BC                     l474:
  6601   0025BC  0012               	return		;funcret
  6602   0025BE                     __end_of_stop:
  6603                           	callstack 0
  6604                           
  6605 ;; *************** function _setMotorPWM *****************
  6606 ;; Defined at:
  6607 ;;		line 59 in file "dc_motor.c"
  6608 ;; Parameters:    Size  Location     Type
  6609 ;;  m               1   15[COMRAM] PTR struct DC_motor
  6610 ;;		 -> main@motorR(9), main@motorL(9), 
  6611 ;; Auto vars:     Size  Location     Type
  6612 ;;  negDuty         1   19[COMRAM] unsigned char 
  6613 ;;  posDuty         1   18[COMRAM] unsigned char 
  6614 ;; Return value:  Size  Location     Type
  6615 ;;                  1    wreg      void 
  6616 ;; Registers used:
  6617 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6618 ;; Tracked objects:
  6619 ;;		On entry : 0/0
  6620 ;;		On exit  : 0/0
  6621 ;;		Unchanged: 0/0
  6622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6623 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6624 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6625 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6626 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6627 ;;Total ram usage:        5 bytes
  6628 ;; Hardware stack levels used: 1
  6629 ;; Hardware stack levels required when called: 5
  6630 ;; This function calls:
  6631 ;;		___lwdiv
  6632 ;;		___wmul
  6633 ;; This function is called by:
  6634 ;;		_main
  6635 ;;		_stop
  6636 ;;		_fastStop
  6637 ;;		_turnLeft
  6638 ;;		_turnRight
  6639 ;;		_turn180
  6640 ;;		_turnLeft135
  6641 ;;		_turnRight135
  6642 ;;		_trundle
  6643 ;;		_creep
  6644 ;;		_timed_trundle
  6645 ;;		_trundleSquare
  6646 ;;		_fullSpeedAhead
  6647 ;; This function uses a non-reentrant model
  6648 ;;
  6649                           
  6650                           	psect	text46
  6651   0015EC                     __ptext46:
  6652                           	callstack 0
  6653   0015EC                     _setMotorPWM:
  6654                           	callstack 24
  6655   0015EC                     
  6656                           ;dc_motor.c: 59: void setMotorPWM(DC_motor *m);dc_motor.c: 60: {;dc_motor.c: 61:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 63:     if(m->brakemode) {
  6657   0015EC  5010               	movf	setMotorPWM@m^0,w,c
  6658   0015EE  6ED9               	movwf	fsr2l,c
  6659   0015F0  6ADA               	clrf	fsr2h,c
  6660   0015F2  0E02               	movlw	2
  6661   0015F4  26D9               	addwf	fsr2l,f,c
  6662   0015F6  50DF               	movf	indf2,w,c
  6663   0015F8  B4D8               	btfsc	status,2,c
  6664   0015FA  EF01  F00B         	goto	u911
  6665   0015FE  EF03  F00B         	goto	u910
  6666   001602                     u911:
  6667   001602  EF33  F00B         	goto	l2463
  6668   001606                     u910:
  6669   001606                     
  6670                           ;dc_motor.c: 64:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  6671   001606  5010               	movf	setMotorPWM@m^0,w,c
  6672   001608  6ED9               	movwf	fsr2l,c
  6673   00160A  6ADA               	clrf	fsr2h,c
  6674   00160C  50DF               	movf	indf2,w,c
  6675   00160E  6E11               	movwf	??_setMotorPWM^0,c
  6676   001610  5011               	movf	??_setMotorPWM^0,w,c
  6677   001612  6E03               	movwf	___wmul@multiplier^0,c
  6678   001614  6A04               	clrf	(___wmul@multiplier+1)^0,c
  6679   001616  5010               	movf	setMotorPWM@m^0,w,c
  6680   001618  6ED9               	movwf	fsr2l,c
  6681   00161A  6ADA               	clrf	fsr2h,c
  6682   00161C  0E03               	movlw	3
  6683   00161E  26D9               	addwf	fsr2l,f,c
  6684   001620  CFDE F005          	movff	postinc2,___wmul@multiplicand
  6685   001624  CFDD F006          	movff	postdec2,___wmul@multiplicand+1
  6686   001628  EC79  F014         	call	___wmul	;wreg free
  6687   00162C  C003  F009         	movff	?___wmul,___lwdiv@dividend
  6688   001630  C004  F00A         	movff	?___wmul+1,___lwdiv@dividend+1
  6689   001634  0E00               	movlw	0
  6690   001636  6E0C               	movwf	(___lwdiv@divisor+1)^0,c
  6691   001638  0E64               	movlw	100
  6692   00163A  6E0B               	movwf	___lwdiv@divisor^0,c
  6693   00163C  EC3B  F012         	call	___lwdiv	;wreg free
  6694   001640  5010               	movf	setMotorPWM@m^0,w,c
  6695   001642  6ED9               	movwf	fsr2l,c
  6696   001644  6ADA               	clrf	fsr2h,c
  6697   001646  0E03               	movlw	3
  6698   001648  26D9               	addwf	fsr2l,f,c
  6699   00164A  50DF               	movf	indf2,w,c
  6700   00164C  6E12               	movwf	(??_setMotorPWM+1)^0,c
  6701   00164E  5009               	movf	?___lwdiv^0,w,c
  6702   001650  5C12               	subwf	(??_setMotorPWM+1)^0,w,c
  6703   001652  6E13               	movwf	setMotorPWM@posDuty^0,c
  6704   001654                     
  6705                           ;dc_motor.c: 65:         negDuty=m->PWMperiod;
  6706   001654  5010               	movf	setMotorPWM@m^0,w,c
  6707   001656  6ED9               	movwf	fsr2l,c
  6708   001658  6ADA               	clrf	fsr2h,c
  6709   00165A  0E03               	movlw	3
  6710   00165C  26D9               	addwf	fsr2l,f,c
  6711   00165E  50DF               	movf	indf2,w,c
  6712   001660  6E14               	movwf	setMotorPWM@negDuty^0,c
  6713                           
  6714                           ;dc_motor.c: 66:     }
  6715   001662  EF54  F00B         	goto	l2467
  6716   001666                     l2463:
  6717                           
  6718                           ;dc_motor.c: 68:         posDuty=0;
  6719   001666  0E00               	movlw	0
  6720   001668  6E13               	movwf	setMotorPWM@posDuty^0,c
  6721   00166A                     
  6722                           ;dc_motor.c: 69:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  6723   00166A  5010               	movf	setMotorPWM@m^0,w,c
  6724   00166C  6ED9               	movwf	fsr2l,c
  6725   00166E  6ADA               	clrf	fsr2h,c
  6726   001670  50DF               	movf	indf2,w,c
  6727   001672  6E11               	movwf	??_setMotorPWM^0,c
  6728   001674  5011               	movf	??_setMotorPWM^0,w,c
  6729   001676  6E03               	movwf	___wmul@multiplier^0,c
  6730   001678  6A04               	clrf	(___wmul@multiplier+1)^0,c
  6731   00167A  5010               	movf	setMotorPWM@m^0,w,c
  6732   00167C  6ED9               	movwf	fsr2l,c
  6733   00167E  6ADA               	clrf	fsr2h,c
  6734   001680  0E03               	movlw	3
  6735   001682  26D9               	addwf	fsr2l,f,c
  6736   001684  CFDE F005          	movff	postinc2,___wmul@multiplicand
  6737   001688  CFDD F006          	movff	postdec2,___wmul@multiplicand+1
  6738   00168C  EC79  F014         	call	___wmul	;wreg free
  6739   001690  C003  F009         	movff	?___wmul,___lwdiv@dividend
  6740   001694  C004  F00A         	movff	?___wmul+1,___lwdiv@dividend+1
  6741   001698  0E00               	movlw	0
  6742   00169A  6E0C               	movwf	(___lwdiv@divisor+1)^0,c
  6743   00169C  0E64               	movlw	100
  6744   00169E  6E0B               	movwf	___lwdiv@divisor^0,c
  6745   0016A0  EC3B  F012         	call	___lwdiv	;wreg free
  6746   0016A4  5009               	movf	?___lwdiv^0,w,c
  6747   0016A6  6E14               	movwf	setMotorPWM@negDuty^0,c
  6748   0016A8                     l2467:
  6749                           
  6750                           ;dc_motor.c: 72:     if (m->direction) {
  6751   0016A8  5010               	movf	setMotorPWM@m^0,w,c
  6752   0016AA  6ED9               	movwf	fsr2l,c
  6753   0016AC  6ADA               	clrf	fsr2h,c
  6754   0016AE  0E01               	movlw	1
  6755   0016B0  26D9               	addwf	fsr2l,f,c
  6756   0016B2  50DF               	movf	indf2,w,c
  6757   0016B4  B4D8               	btfsc	status,2,c
  6758   0016B6  EF5F  F00B         	goto	u921
  6759   0016BA  EF61  F00B         	goto	u920
  6760   0016BE                     u921:
  6761   0016BE  EF81  F00B         	goto	l2471
  6762   0016C2                     u920:
  6763   0016C2                     
  6764                           ;dc_motor.c: 73:         *(m->posDutyHighByte)=posDuty;
  6765   0016C2  5010               	movf	setMotorPWM@m^0,w,c
  6766   0016C4  6ED9               	movwf	fsr2l,c
  6767   0016C6  6ADA               	clrf	fsr2h,c
  6768   0016C8  0E05               	movlw	5
  6769   0016CA  26D9               	addwf	fsr2l,f,c
  6770   0016CC  CFDE F011          	movff	postinc2,??_setMotorPWM
  6771   0016D0  CFDD F012          	movff	postdec2,??_setMotorPWM+1
  6772   0016D4  C011  FFD9         	movff	??_setMotorPWM,fsr2l
  6773   0016D8  C012  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6774   0016DC  C013  FFDF         	movff	setMotorPWM@posDuty,indf2
  6775                           
  6776                           ;dc_motor.c: 74:         *(m->negDutyHighByte)=negDuty;
  6777   0016E0  5010               	movf	setMotorPWM@m^0,w,c
  6778   0016E2  6ED9               	movwf	fsr2l,c
  6779   0016E4  6ADA               	clrf	fsr2h,c
  6780   0016E6  0E07               	movlw	7
  6781   0016E8  26D9               	addwf	fsr2l,f,c
  6782   0016EA  CFDE F011          	movff	postinc2,??_setMotorPWM
  6783   0016EE  CFDD F012          	movff	postdec2,??_setMotorPWM+1
  6784   0016F2  C011  FFD9         	movff	??_setMotorPWM,fsr2l
  6785   0016F6  C012  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6786   0016FA  C014  FFDF         	movff	setMotorPWM@negDuty,indf2
  6787                           
  6788                           ;dc_motor.c: 75:     } else {
  6789   0016FE  EF9F  F00B         	goto	l469
  6790   001702                     l2471:
  6791                           
  6792                           ;dc_motor.c: 76:         *(m->posDutyHighByte)=negDuty;
  6793   001702  5010               	movf	setMotorPWM@m^0,w,c
  6794   001704  6ED9               	movwf	fsr2l,c
  6795   001706  6ADA               	clrf	fsr2h,c
  6796   001708  0E05               	movlw	5
  6797   00170A  26D9               	addwf	fsr2l,f,c
  6798   00170C  CFDE F011          	movff	postinc2,??_setMotorPWM
  6799   001710  CFDD F012          	movff	postdec2,??_setMotorPWM+1
  6800   001714  C011  FFD9         	movff	??_setMotorPWM,fsr2l
  6801   001718  C012  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6802   00171C  C014  FFDF         	movff	setMotorPWM@negDuty,indf2
  6803                           
  6804                           ;dc_motor.c: 77:         *(m->negDutyHighByte)=posDuty;
  6805   001720  5010               	movf	setMotorPWM@m^0,w,c
  6806   001722  6ED9               	movwf	fsr2l,c
  6807   001724  6ADA               	clrf	fsr2h,c
  6808   001726  0E07               	movlw	7
  6809   001728  26D9               	addwf	fsr2l,f,c
  6810   00172A  CFDE F011          	movff	postinc2,??_setMotorPWM
  6811   00172E  CFDD F012          	movff	postdec2,??_setMotorPWM+1
  6812   001732  C011  FFD9         	movff	??_setMotorPWM,fsr2l
  6813   001736  C012  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6814   00173A  C013  FFDF         	movff	setMotorPWM@posDuty,indf2
  6815   00173E                     l469:
  6816   00173E  0012               	return		;funcret
  6817   001740                     __end_of_setMotorPWM:
  6818                           	callstack 0
  6819                           
  6820 ;; *************** function ___wmul *****************
  6821 ;; Defined at:
  6822 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
  6823 ;; Parameters:    Size  Location     Type
  6824 ;;  multiplier      2    2[COMRAM] unsigned int 
  6825 ;;  multiplicand    2    4[COMRAM] unsigned int 
  6826 ;; Auto vars:     Size  Location     Type
  6827 ;;  product         2    6[COMRAM] unsigned int 
  6828 ;; Return value:  Size  Location     Type
  6829 ;;                  2    2[COMRAM] unsigned int 
  6830 ;; Registers used:
  6831 ;;		wreg, status,2, status,0, prodl, prodh
  6832 ;; Tracked objects:
  6833 ;;		On entry : 0/0
  6834 ;;		On exit  : 0/0
  6835 ;;		Unchanged: 0/0
  6836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6837 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6838 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6839 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6840 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6841 ;;Total ram usage:        6 bytes
  6842 ;; Hardware stack levels used: 1
  6843 ;; Hardware stack levels required when called: 4
  6844 ;; This function calls:
  6845 ;;		Nothing
  6846 ;; This function is called by:
  6847 ;;		_setMotorPWM
  6848 ;;		_checkBattery
  6849 ;; This function uses a non-reentrant model
  6850 ;;
  6851                           
  6852                           	psect	text47
  6853   0028F2                     __ptext47:
  6854                           	callstack 0
  6855   0028F2                     ___wmul:
  6856                           	callstack 24
  6857   0028F2  5003               	movf	___wmul@multiplier^0,w,c
  6858   0028F4  0205               	mulwf	___wmul@multiplicand^0,c
  6859   0028F6  CFF3 F007          	movff	prodl,___wmul@product
  6860   0028FA  CFF4 F008          	movff	prodh,___wmul@product+1
  6861   0028FE  5003               	movf	___wmul@multiplier^0,w,c
  6862   002900  0206               	mulwf	(___wmul@multiplicand+1)^0,c
  6863   002902  50F3               	movf	243,w,c
  6864   002904  2608               	addwf	(___wmul@product+1)^0,f,c
  6865   002906  5004               	movf	(___wmul@multiplier+1)^0,w,c
  6866   002908  0205               	mulwf	___wmul@multiplicand^0,c
  6867   00290A  50F3               	movf	243,w,c
  6868   00290C  2608               	addwf	(___wmul@product+1)^0,f,c
  6869   00290E  C007  F003         	movff	___wmul@product,?___wmul
  6870   002912  C008  F004         	movff	___wmul@product+1,?___wmul+1
  6871   002916  0012               	return		;funcret
  6872   002918                     __end_of___wmul:
  6873                           	callstack 0
  6874                           
  6875 ;; *************** function ___lwdiv *****************
  6876 ;; Defined at:
  6877 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
  6878 ;; Parameters:    Size  Location     Type
  6879 ;;  dividend        2    8[COMRAM] unsigned int 
  6880 ;;  divisor         2   10[COMRAM] unsigned int 
  6881 ;; Auto vars:     Size  Location     Type
  6882 ;;  quotient        2   12[COMRAM] unsigned int 
  6883 ;;  counter         1   14[COMRAM] unsigned char 
  6884 ;; Return value:  Size  Location     Type
  6885 ;;                  2    8[COMRAM] unsigned int 
  6886 ;; Registers used:
  6887 ;;		wreg, status,2, status,0
  6888 ;; Tracked objects:
  6889 ;;		On entry : 0/0
  6890 ;;		On exit  : 0/0
  6891 ;;		Unchanged: 0/0
  6892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6893 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6894 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6895 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6896 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6897 ;;Total ram usage:        7 bytes
  6898 ;; Hardware stack levels used: 1
  6899 ;; Hardware stack levels required when called: 4
  6900 ;; This function calls:
  6901 ;;		Nothing
  6902 ;; This function is called by:
  6903 ;;		_normalizeColors
  6904 ;;		_setMotorPWM
  6905 ;; This function uses a non-reentrant model
  6906 ;;
  6907                           
  6908                           	psect	text48
  6909   002476                     __ptext48:
  6910                           	callstack 0
  6911   002476                     ___lwdiv:
  6912                           	callstack 24
  6913   002476  0E00               	movlw	0
  6914   002478  6E0E               	movwf	(___lwdiv@quotient+1)^0,c
  6915   00247A  0E00               	movlw	0
  6916   00247C  6E0D               	movwf	___lwdiv@quotient^0,c
  6917   00247E  500B               	movf	___lwdiv@divisor^0,w,c
  6918   002480  100C               	iorwf	(___lwdiv@divisor+1)^0,w,c
  6919   002482  B4D8               	btfsc	status,2,c
  6920   002484  EF46  F012         	goto	u881
  6921   002488  EF48  F012         	goto	u880
  6922   00248C                     u881:
  6923   00248C  EF70  F012         	goto	l1159
  6924   002490                     u880:
  6925   002490  0E01               	movlw	1
  6926   002492  6E0F               	movwf	___lwdiv@counter^0,c
  6927   002494  EF50  F012         	goto	l2443
  6928   002498                     l2441:
  6929   002498  90D8               	bcf	status,0,c
  6930   00249A  360B               	rlcf	___lwdiv@divisor^0,f,c
  6931   00249C  360C               	rlcf	(___lwdiv@divisor+1)^0,f,c
  6932   00249E  2A0F               	incf	___lwdiv@counter^0,f,c
  6933   0024A0                     l2443:
  6934   0024A0  AE0C               	btfss	(___lwdiv@divisor+1)^0,7,c
  6935   0024A2  EF55  F012         	goto	u891
  6936   0024A6  EF57  F012         	goto	u890
  6937   0024AA                     u891:
  6938   0024AA  EF4C  F012         	goto	l2441
  6939   0024AE                     u890:
  6940   0024AE                     l2445:
  6941   0024AE  90D8               	bcf	status,0,c
  6942   0024B0  360D               	rlcf	___lwdiv@quotient^0,f,c
  6943   0024B2  360E               	rlcf	(___lwdiv@quotient+1)^0,f,c
  6944   0024B4  500B               	movf	___lwdiv@divisor^0,w,c
  6945   0024B6  5C09               	subwf	___lwdiv@dividend^0,w,c
  6946   0024B8  500C               	movf	(___lwdiv@divisor+1)^0,w,c
  6947   0024BA  580A               	subwfb	(___lwdiv@dividend+1)^0,w,c
  6948   0024BC  A0D8               	btfss	status,0,c
  6949   0024BE  EF63  F012         	goto	u901
  6950   0024C2  EF65  F012         	goto	u900
  6951   0024C6                     u901:
  6952   0024C6  EF6A  F012         	goto	l2453
  6953   0024CA                     u900:
  6954   0024CA  500B               	movf	___lwdiv@divisor^0,w,c
  6955   0024CC  5E09               	subwf	___lwdiv@dividend^0,f,c
  6956   0024CE  500C               	movf	(___lwdiv@divisor+1)^0,w,c
  6957   0024D0  5A0A               	subwfb	(___lwdiv@dividend+1)^0,f,c
  6958   0024D2  800D               	bsf	___lwdiv@quotient^0,0,c
  6959   0024D4                     l2453:
  6960   0024D4  90D8               	bcf	status,0,c
  6961   0024D6  320C               	rrcf	(___lwdiv@divisor+1)^0,f,c
  6962   0024D8  320B               	rrcf	___lwdiv@divisor^0,f,c
  6963   0024DA  2E0F               	decfsz	___lwdiv@counter^0,f,c
  6964   0024DC  EF57  F012         	goto	l2445
  6965   0024E0                     l1159:
  6966   0024E0  C00D  F009         	movff	___lwdiv@quotient,?___lwdiv
  6967   0024E4  C00E  F00A         	movff	___lwdiv@quotient+1,?___lwdiv+1
  6968   0024E8  0012               	return		;funcret
  6969   0024EA                     __end_of___lwdiv:
  6970                           	callstack 0
  6971                           
  6972 ;; *************** function _color_click_init *****************
  6973 ;; Defined at:
  6974 ;;		line 7 in file "color.c"
  6975 ;; Parameters:    Size  Location     Type
  6976 ;;		None
  6977 ;; Auto vars:     Size  Location     Type
  6978 ;;		None
  6979 ;; Return value:  Size  Location     Type
  6980 ;;                  1    wreg      void 
  6981 ;; Registers used:
  6982 ;;		wreg, status,2, status,0, cstack
  6983 ;; Tracked objects:
  6984 ;;		On entry : 0/0
  6985 ;;		On exit  : 0/0
  6986 ;;		Unchanged: 0/0
  6987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6988 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6989 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6990 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6991 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6992 ;;Total ram usage:        1 bytes
  6993 ;; Hardware stack levels used: 1
  6994 ;; Hardware stack levels required when called: 7
  6995 ;; This function calls:
  6996 ;;		_I2C_2_Master_Init
  6997 ;;		_color_writetoaddr
  6998 ;; This function is called by:
  6999 ;;		_main
  7000 ;; This function uses a non-reentrant model
  7001 ;;
  7002                           
  7003                           	psect	text49
  7004   002828                     __ptext49:
  7005                           	callstack 0
  7006   002828                     _color_click_init:
  7007                           	callstack 23
  7008   002828                     
  7009                           ;color.c: 10:     I2C_2_Master_Init();
  7010   002828  EC29  F014         	call	_I2C_2_Master_Init	;wreg free
  7011   00282C                     
  7012                           ;color.c: 13:  color_writetoaddr(0x01, 0xF6);
  7013   00282C  0EF6               	movlw	246
  7014   00282E  6E05               	movwf	color_writetoaddr@value^0,c
  7015   002830  0E01               	movlw	1
  7016   002832  EC9D  F014         	call	_color_writetoaddr
  7017   002836                     
  7018                           ;color.c: 16:     color_writetoaddr(0x00, 0x13);
  7019   002836  0E13               	movlw	19
  7020   002838  6E05               	movwf	color_writetoaddr@value^0,c
  7021   00283A  0E00               	movlw	0
  7022   00283C  EC9D  F014         	call	_color_writetoaddr
  7023   002840                     
  7024                           ;color.c: 17:     _delay((unsigned long)((3)*(64000000/4000.0)));
  7025   002840  0E3F               	movlw	63
  7026   002842  6E07               	movwf	??_color_click_init^0,c
  7027   002844  0E55               	movlw	85
  7028   002846                     u2117:
  7029   002846  2EE8               	decfsz	wreg,f,c
  7030   002848  D7FE               	bra	u2117
  7031   00284A  2E07               	decfsz	??_color_click_init^0,f,c
  7032   00284C  D7FC               	bra	u2117
  7033   00284E  0000               	nop	
  7034   002850  0012               	return		;funcret
  7035   002852                     __end_of_color_click_init:
  7036                           	callstack 0
  7037                           
  7038 ;; *************** function _color_writetoaddr *****************
  7039 ;; Defined at:
  7040 ;;		line 48 in file "color.c"
  7041 ;; Parameters:    Size  Location     Type
  7042 ;;  address         1    wreg     unsigned char 
  7043 ;;  value           1    4[COMRAM] unsigned char 
  7044 ;; Auto vars:     Size  Location     Type
  7045 ;;  address         1    5[COMRAM] unsigned char 
  7046 ;; Return value:  Size  Location     Type
  7047 ;;                  1    wreg      void 
  7048 ;; Registers used:
  7049 ;;		wreg, status,2, status,0, cstack
  7050 ;; Tracked objects:
  7051 ;;		On entry : 0/0
  7052 ;;		On exit  : 0/0
  7053 ;;		Unchanged: 0/0
  7054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7055 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7056 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7057 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7058 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7059 ;;Total ram usage:        2 bytes
  7060 ;; Hardware stack levels used: 1
  7061 ;; Hardware stack levels required when called: 6
  7062 ;; This function calls:
  7063 ;;		_I2C_2_Master_Start
  7064 ;;		_I2C_2_Master_Stop
  7065 ;;		_I2C_2_Master_Write
  7066 ;; This function is called by:
  7067 ;;		_color_click_init
  7068 ;;		_interrupts_init
  7069 ;; This function uses a non-reentrant model
  7070 ;;
  7071                           
  7072                           	psect	text50
  7073   00293A                     __ptext50:
  7074                           	callstack 0
  7075   00293A                     _color_writetoaddr:
  7076                           	callstack 23
  7077                           
  7078                           ;incstack = 0
  7079                           ;color_writetoaddr@address stored from wreg
  7080   00293A  6E06               	movwf	color_writetoaddr@address^0,c
  7081   00293C                     
  7082                           ;color.c: 49:     I2C_2_Master_Start();
  7083   00293C  EC40  F015         	call	_I2C_2_Master_Start	;wreg free
  7084                           
  7085                           ;color.c: 50:     I2C_2_Master_Write(0x52 | 0x00);
  7086   002940  0E52               	movlw	82
  7087   002942  EC16  F015         	call	_I2C_2_Master_Write
  7088                           
  7089                           ;color.c: 51:     I2C_2_Master_Write(0x80 | address);
  7090   002946  5006               	movf	color_writetoaddr@address^0,w,c
  7091   002948  0980               	iorlw	128
  7092   00294A  EC16  F015         	call	_I2C_2_Master_Write
  7093                           
  7094                           ;color.c: 52:     I2C_2_Master_Write(value);
  7095   00294E  5005               	movf	color_writetoaddr@value^0,w,c
  7096   002950  EC16  F015         	call	_I2C_2_Master_Write
  7097                           
  7098                           ;color.c: 53:     I2C_2_Master_Stop();
  7099   002954  EC3B  F015         	call	_I2C_2_Master_Stop	;wreg free
  7100   002958  0012               	return		;funcret
  7101   00295A                     __end_of_color_writetoaddr:
  7102                           	callstack 0
  7103                           
  7104 ;; *************** function _I2C_2_Master_Write *****************
  7105 ;; Defined at:
  7106 ;;		line 49 in file "i2c.c"
  7107 ;; Parameters:    Size  Location     Type
  7108 ;;  data_byte       1    wreg     unsigned char 
  7109 ;; Auto vars:     Size  Location     Type
  7110 ;;  data_byte       1    3[COMRAM] unsigned char 
  7111 ;; Return value:  Size  Location     Type
  7112 ;;                  1    wreg      void 
  7113 ;; Registers used:
  7114 ;;		wreg, status,2, status,0, cstack
  7115 ;; Tracked objects:
  7116 ;;		On entry : 0/0
  7117 ;;		On exit  : 0/0
  7118 ;;		Unchanged: 0/0
  7119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7120 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7121 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7122 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7123 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7124 ;;Total ram usage:        1 bytes
  7125 ;; Hardware stack levels used: 1
  7126 ;; Hardware stack levels required when called: 5
  7127 ;; This function calls:
  7128 ;;		_I2C_2_Master_Idle
  7129 ;; This function is called by:
  7130 ;;		_color_writetoaddr
  7131 ;;		_readRedColor
  7132 ;;		_readGreenColor
  7133 ;;		_readBlueColor
  7134 ;;		_readClearColor
  7135 ;;		_clearInterrupt
  7136 ;;		_color_readdoublefromaddress
  7137 ;;		_color_readfromaddress
  7138 ;; This function uses a non-reentrant model
  7139 ;;
  7140                           
  7141                           	psect	text51
  7142   002A2C                     __ptext51:
  7143                           	callstack 0
  7144   002A2C                     _I2C_2_Master_Write:
  7145                           	callstack 23
  7146                           
  7147                           ;incstack = 0
  7148                           ;I2C_2_Master_Write@data_byte stored from wreg
  7149   002A2C  6E04               	movwf	I2C_2_Master_Write@data_byte^0,c
  7150   002A2E                     
  7151                           ;i2c.c: 49: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 50: {;i2c.c: 51:   I
      +                          2C_2_Master_Idle();
  7152   002A2E  EC3E  F014         	call	_I2C_2_Master_Idle	;wreg free
  7153   002A32                     
  7154                           ;i2c.c: 52:   SSP2BUF = data_byte;
  7155   002A32  C004  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  7156   002A36  0012               	return		;funcret
  7157   002A38                     __end_of_I2C_2_Master_Write:
  7158                           	callstack 0
  7159                           
  7160 ;; *************** function _I2C_2_Master_Stop *****************
  7161 ;; Defined at:
  7162 ;;		line 43 in file "i2c.c"
  7163 ;; Parameters:    Size  Location     Type
  7164 ;;		None
  7165 ;; Auto vars:     Size  Location     Type
  7166 ;;		None
  7167 ;; Return value:  Size  Location     Type
  7168 ;;                  1    wreg      void 
  7169 ;; Registers used:
  7170 ;;		wreg, status,2, status,0, cstack
  7171 ;; Tracked objects:
  7172 ;;		On entry : 0/0
  7173 ;;		On exit  : 0/0
  7174 ;;		Unchanged: 0/0
  7175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7176 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7177 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7178 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7179 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7180 ;;Total ram usage:        0 bytes
  7181 ;; Hardware stack levels used: 1
  7182 ;; Hardware stack levels required when called: 5
  7183 ;; This function calls:
  7184 ;;		_I2C_2_Master_Idle
  7185 ;; This function is called by:
  7186 ;;		_color_writetoaddr
  7187 ;;		_readRedColor
  7188 ;;		_readGreenColor
  7189 ;;		_readBlueColor
  7190 ;;		_readClearColor
  7191 ;;		_clearInterrupt
  7192 ;;		_color_readdoublefromaddress
  7193 ;; This function uses a non-reentrant model
  7194 ;;
  7195                           
  7196                           	psect	text52
  7197   002A76                     __ptext52:
  7198                           	callstack 0
  7199   002A76                     _I2C_2_Master_Stop:
  7200                           	callstack 23
  7201   002A76                     
  7202                           ;i2c.c: 45:   I2C_2_Master_Idle();
  7203   002A76  EC3E  F014         	call	_I2C_2_Master_Idle	;wreg free
  7204   002A7A                     
  7205                           ;i2c.c: 46:   SSP2CON2bits.PEN = 1;
  7206   002A7A  010E               	movlb	14	; () banked
  7207   002A7C  85DA               	bsf	218,2,b	;volatile
  7208   002A7E                     
  7209                           ; BSR set to: 14
  7210   002A7E  0012               	return		;funcret
  7211   002A80                     __end_of_I2C_2_Master_Stop:
  7212                           	callstack 0
  7213                           
  7214 ;; *************** function _I2C_2_Master_Start *****************
  7215 ;; Defined at:
  7216 ;;		line 31 in file "i2c.c"
  7217 ;; Parameters:    Size  Location     Type
  7218 ;;		None
  7219 ;; Auto vars:     Size  Location     Type
  7220 ;;		None
  7221 ;; Return value:  Size  Location     Type
  7222 ;;                  1    wreg      void 
  7223 ;; Registers used:
  7224 ;;		wreg, status,2, status,0, cstack
  7225 ;; Tracked objects:
  7226 ;;		On entry : 0/0
  7227 ;;		On exit  : 0/0
  7228 ;;		Unchanged: 0/0
  7229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7230 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7231 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7232 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7233 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7234 ;;Total ram usage:        0 bytes
  7235 ;; Hardware stack levels used: 1
  7236 ;; Hardware stack levels required when called: 5
  7237 ;; This function calls:
  7238 ;;		_I2C_2_Master_Idle
  7239 ;; This function is called by:
  7240 ;;		_color_writetoaddr
  7241 ;;		_readRedColor
  7242 ;;		_readGreenColor
  7243 ;;		_readBlueColor
  7244 ;;		_readClearColor
  7245 ;;		_clearInterrupt
  7246 ;;		_color_readdoublefromaddress
  7247 ;;		_color_readfromaddress
  7248 ;; This function uses a non-reentrant model
  7249 ;;
  7250                           
  7251                           	psect	text53
  7252   002A80                     __ptext53:
  7253                           	callstack 0
  7254   002A80                     _I2C_2_Master_Start:
  7255                           	callstack 23
  7256   002A80                     
  7257                           ;i2c.c: 33:   I2C_2_Master_Idle();
  7258   002A80  EC3E  F014         	call	_I2C_2_Master_Idle	;wreg free
  7259   002A84                     
  7260                           ;i2c.c: 34:   SSP2CON2bits.SEN = 1;
  7261   002A84  010E               	movlb	14	; () banked
  7262   002A86  81DA               	bsf	218,0,b	;volatile
  7263   002A88                     
  7264                           ; BSR set to: 14
  7265   002A88  0012               	return		;funcret
  7266   002A8A                     __end_of_I2C_2_Master_Start:
  7267                           	callstack 0
  7268                           
  7269 ;; *************** function _I2C_2_Master_Idle *****************
  7270 ;; Defined at:
  7271 ;;		line 26 in file "i2c.c"
  7272 ;; Parameters:    Size  Location     Type
  7273 ;;		None
  7274 ;; Auto vars:     Size  Location     Type
  7275 ;;		None
  7276 ;; Return value:  Size  Location     Type
  7277 ;;                  1    wreg      void 
  7278 ;; Registers used:
  7279 ;;		wreg, status,2, status,0
  7280 ;; Tracked objects:
  7281 ;;		On entry : 0/0
  7282 ;;		On exit  : 0/0
  7283 ;;		Unchanged: 0/0
  7284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7285 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7286 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7287 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7288 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7289 ;;Total ram usage:        1 bytes
  7290 ;; Hardware stack levels used: 1
  7291 ;; Hardware stack levels required when called: 4
  7292 ;; This function calls:
  7293 ;;		Nothing
  7294 ;; This function is called by:
  7295 ;;		_I2C_2_Master_Start
  7296 ;;		_I2C_2_Master_RepStart
  7297 ;;		_I2C_2_Master_Stop
  7298 ;;		_I2C_2_Master_Write
  7299 ;;		_I2C_2_Master_Read
  7300 ;; This function uses a non-reentrant model
  7301 ;;
  7302                           
  7303                           	psect	text54
  7304   00287C                     __ptext54:
  7305                           	callstack 0
  7306   00287C                     _I2C_2_Master_Idle:
  7307                           	callstack 23
  7308   00287C                     l104:
  7309   00287C  010E               	movlb	14	; () banked
  7310   00287E  B5D8               	btfsc	216,2,b	;volatile
  7311   002880  EF44  F014         	goto	u931
  7312   002884  EF46  F014         	goto	u930
  7313   002888                     u931:
  7314   002888  EF3E  F014         	goto	l104
  7315   00288C                     u930:
  7316   00288C                     
  7317                           ; BSR set to: 14
  7318   00288C  CEDA F003          	movff	3802,??_I2C_2_Master_Idle	;volatile
  7319   002890  0E1F               	movlw	31
  7320   002892  1603               	andwf	??_I2C_2_Master_Idle^0,f,c
  7321   002894  A4D8               	btfss	status,2,c
  7322   002896  EF4F  F014         	goto	u941
  7323   00289A  EF51  F014         	goto	u940
  7324   00289E                     u941:
  7325   00289E  EF3E  F014         	goto	l104
  7326   0028A2                     u940:
  7327   0028A2                     
  7328                           ; BSR set to: 14
  7329   0028A2  0012               	return		;funcret
  7330   0028A4                     __end_of_I2C_2_Master_Idle:
  7331                           	callstack 0
  7332                           
  7333 ;; *************** function _I2C_2_Master_Init *****************
  7334 ;; Defined at:
  7335 ;;		line 8 in file "i2c.c"
  7336 ;; Parameters:    Size  Location     Type
  7337 ;;		None
  7338 ;; Auto vars:     Size  Location     Type
  7339 ;;		None
  7340 ;; Return value:  Size  Location     Type
  7341 ;;                  1    wreg      void 
  7342 ;; Registers used:
  7343 ;;		wreg, status,2
  7344 ;; Tracked objects:
  7345 ;;		On entry : 0/0
  7346 ;;		On exit  : 0/0
  7347 ;;		Unchanged: 0/0
  7348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7349 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7350 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7351 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7352 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7353 ;;Total ram usage:        0 bytes
  7354 ;; Hardware stack levels used: 1
  7355 ;; Hardware stack levels required when called: 4
  7356 ;; This function calls:
  7357 ;;		Nothing
  7358 ;; This function is called by:
  7359 ;;		_color_click_init
  7360 ;; This function uses a non-reentrant model
  7361 ;;
  7362                           
  7363                           	psect	text55
  7364   002852                     __ptext55:
  7365                           	callstack 0
  7366   002852                     _I2C_2_Master_Init:
  7367                           	callstack 25
  7368   002852                     
  7369                           ;i2c.c: 11:   SSP2CON1bits.SSPM= 0b1000;
  7370   002852  010E               	movlb	14	; () banked
  7371   002854  51D9               	movf	217,w,b	;volatile
  7372   002856  0BF0               	andlw	-16
  7373   002858  0908               	iorlw	8
  7374   00285A  6FD9               	movwf	217,b	;volatile
  7375   00285C                     
  7376                           ; BSR set to: 14
  7377                           ;i2c.c: 12:   SSP2CON1bits.SSPEN = 1;
  7378   00285C  8BD9               	bsf	217,5,b	;volatile
  7379                           
  7380                           ;i2c.c: 13:   SSP2ADD = (64000000/(4*100000))-1;
  7381   00285E  0E9F               	movlw	159
  7382   002860  6FD6               	movwf	214,b	;volatile
  7383   002862                     
  7384                           ; BSR set to: 14
  7385                           ;i2c.c: 16:   TRISDbits.TRISD5 = 1;
  7386   002862  8A84               	bsf	132,5,c	;volatile
  7387   002864                     
  7388                           ; BSR set to: 14
  7389                           ;i2c.c: 17:   TRISDbits.TRISD6 = 1;
  7390   002864  8C84               	bsf	132,6,c	;volatile
  7391   002866                     
  7392                           ; BSR set to: 14
  7393                           ;i2c.c: 18:   ANSELDbits.ANSELD5=0;
  7394   002866  9BA7               	bcf	167,5,b	;volatile
  7395   002868                     
  7396                           ; BSR set to: 14
  7397                           ;i2c.c: 19:   ANSELDbits.ANSELD6=0;
  7398   002868  9DA7               	bcf	167,6,b	;volatile
  7399                           
  7400                           ;i2c.c: 20:   SSP2DATPPS=0x1D;
  7401   00286A  0E1D               	movlw	29
  7402   00286C  6F1D               	movwf	29,b	;volatile
  7403                           
  7404                           ;i2c.c: 21:   SSP2CLKPPS=0x1E;
  7405   00286E  0E1E               	movlw	30
  7406   002870  6F1C               	movwf	28,b	;volatile
  7407                           
  7408                           ;i2c.c: 22:   RD5PPS=0x1C;
  7409   002872  0E1C               	movlw	28
  7410   002874  6F6F               	movwf	111,b	;volatile
  7411                           
  7412                           ;i2c.c: 23:   RD6PPS=0x1B;
  7413   002876  0E1B               	movlw	27
  7414   002878  6F70               	movwf	112,b	;volatile
  7415   00287A                     
  7416                           ; BSR set to: 14
  7417   00287A  0012               	return		;funcret
  7418   00287C                     __end_of_I2C_2_Master_Init:
  7419                           	callstack 0
  7420                           
  7421 ;; *************** function _Timer0_init *****************
  7422 ;; Defined at:
  7423 ;;		line 60 in file "interrupts.c"
  7424 ;; Parameters:    Size  Location     Type
  7425 ;;		None
  7426 ;; Auto vars:     Size  Location     Type
  7427 ;;		None
  7428 ;; Return value:  Size  Location     Type
  7429 ;;                  1    wreg      void 
  7430 ;; Registers used:
  7431 ;;		wreg, status,2
  7432 ;; Tracked objects:
  7433 ;;		On entry : 0/0
  7434 ;;		On exit  : 0/0
  7435 ;;		Unchanged: 0/0
  7436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7438 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7439 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7440 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7441 ;;Total ram usage:        0 bytes
  7442 ;; Hardware stack levels used: 1
  7443 ;; Hardware stack levels required when called: 4
  7444 ;; This function calls:
  7445 ;;		Nothing
  7446 ;; This function is called by:
  7447 ;;		_main
  7448 ;; This function uses a non-reentrant model
  7449 ;;
  7450                           
  7451                           	psect	text56
  7452   00295A                     __ptext56:
  7453                           	callstack 0
  7454   00295A                     _Timer0_init:
  7455                           	callstack 26
  7456   00295A                     
  7457                           ;interrupts.c: 62:     T0CON1bits.T0CS=0b010;
  7458   00295A  50D6               	movf	214,w,c	;volatile
  7459   00295C  0B1F               	andlw	-225
  7460   00295E  0940               	iorlw	64
  7461   002960  6ED6               	movwf	214,c	;volatile
  7462   002962                     
  7463                           ;interrupts.c: 63:     T0CON1bits.T0ASYNC=1;
  7464   002962  88D6               	bsf	214,4,c	;volatile
  7465                           
  7466                           ;interrupts.c: 64:     T0CON1bits.T0CKPS=0b0101;
  7467   002964  50D6               	movf	214,w,c	;volatile
  7468   002966  0BF0               	andlw	-16
  7469   002968  0905               	iorlw	5
  7470   00296A  6ED6               	movwf	214,c	;volatile
  7471   00296C                     
  7472                           ;interrupts.c: 65:     T0CON0bits.T016BIT=1;
  7473   00296C  88D5               	bsf	213,4,c	;volatile
  7474                           
  7475                           ;interrupts.c: 70:     TMR0H=0;
  7476   00296E  0E00               	movlw	0
  7477   002970  6ED4               	movwf	212,c	;volatile
  7478                           
  7479                           ;interrupts.c: 71:     TMR0L=0;
  7480   002972  0E00               	movlw	0
  7481   002974  6ED3               	movwf	211,c	;volatile
  7482   002976                     
  7483                           ;interrupts.c: 72:     T0CON0bits.T0EN=1;
  7484   002976  8ED5               	bsf	213,7,c	;volatile
  7485   002978  0012               	return		;funcret
  7486   00297A                     __end_of_Timer0_init:
  7487                           	callstack 0
  7488                           
  7489 ;; *************** function _High_ISR *****************
  7490 ;; Defined at:
  7491 ;;		line 76 in file "interrupts.c"
  7492 ;; Parameters:    Size  Location     Type
  7493 ;;		None
  7494 ;; Auto vars:     Size  Location     Type
  7495 ;;		None
  7496 ;; Return value:  Size  Location     Type
  7497 ;;                  1    wreg      void 
  7498 ;; Registers used:
  7499 ;;		wreg, status,2, status,0, cstack
  7500 ;; Tracked objects:
  7501 ;;		On entry : 0/0
  7502 ;;		On exit  : 0/0
  7503 ;;		Unchanged: 0/0
  7504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7505 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7506 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7508 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7509 ;;Total ram usage:        0 bytes
  7510 ;; Hardware stack levels used: 1
  7511 ;; Hardware stack levels required when called: 3
  7512 ;; This function calls:
  7513 ;;		i2_clearInterrupt
  7514 ;; This function is called by:
  7515 ;;		Interrupt level 2
  7516 ;; This function uses a non-reentrant model
  7517 ;;
  7518                           
  7519                           	psect	intcode
  7520   000008                     __pintcode:
  7521                           	callstack 0
  7522   000008                     _High_ISR:
  7523                           	callstack 20
  7524                           
  7525                           ;incstack = 0
  7526   000008  824C               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  7527   00000A                     
  7528                           ;interrupts.c: 77:     if (PIR0bits.INT0IF) {
  7529   00000A  010E               	movlb	14	; () banked
  7530   00000C  A133               	btfss	51,0,b	;volatile
  7531   00000E  EF0B  F000         	goto	i2u168_41
  7532   000012  EF0D  F000         	goto	i2u168_40
  7533   000016                     i2u168_41:
  7534   000016  EF16  F000         	goto	i2l3441
  7535   00001A                     i2u168_40:
  7536   00001A                     
  7537                           ; BSR set to: 14
  7538                           ;interrupts.c: 79:         LATDbits.LATD7 = 1;
  7539   00001A  8E7C               	bsf	124,7,c	;volatile
  7540   00001C                     
  7541                           ; BSR set to: 14
  7542                           ;interrupts.c: 80:         wall_detected = 1;
  7543   00001C  0E01               	movlw	1
  7544   00001E  0100               	movlb	0	; () banked
  7545   000020  6F8C               	movwf	_wall_detected& (0+255),b
  7546   000022                     
  7547                           ; BSR set to: 0
  7548                           ;interrupts.c: 82:         clearInterrupt();
  7549   000022  ECC8  F014         	call	i2_clearInterrupt	;wreg free
  7550   000026                     
  7551                           ;interrupts.c: 83:         PIR0bits.INT0IF = 0;
  7552   000026  010E               	movlb	14	; () banked
  7553   000028  9133               	bcf	51,0,b	;volatile
  7554   00002A                     
  7555                           ; BSR set to: 14
  7556                           ;interrupts.c: 87:         INTCONbits.GIE=0;
  7557   00002A  9EF2               	bcf	242,7,c	;volatile
  7558   00002C                     i2l3441:
  7559                           
  7560                           ; BSR set to: 14
  7561                           ;interrupts.c: 90:     if (PIR0bits.TMR0IF) {
  7562   00002C  AB33               	btfss	51,5,b	;volatile
  7563   00002E  EF1B  F000         	goto	i2u169_41
  7564   000032  EF1D  F000         	goto	i2u169_40
  7565   000036                     i2u169_41:
  7566   000036  EF21  F000         	goto	i2l285
  7567   00003A                     i2u169_40:
  7568   00003A                     
  7569                           ; BSR set to: 14
  7570                           ;interrupts.c: 91:         PIR0bits.TMR0IF = 0;
  7571   00003A  9B33               	bcf	51,5,b	;volatile
  7572   00003C                     
  7573                           ; BSR set to: 14
  7574                           ;interrupts.c: 92:         increment++;
  7575   00003C  0100               	movlb	0	; () banked
  7576   00003E  4B88               	infsnz	_increment& (0+255),f,b
  7577   000040  2B89               	incf	(_increment+1)& (0+255),f,b
  7578   000042                     i2l285:
  7579   000042  924C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  7580   000044  0011               	retfie		f
  7581   000046                     __end_of_High_ISR:
  7582                           	callstack 0
  7583                           
  7584 ;; *************** function i2_clearInterrupt *****************
  7585 ;; Defined at:
  7586 ;;		line 99 in file "interrupts.c"
  7587 ;; Parameters:    Size  Location     Type
  7588 ;;		None
  7589 ;; Auto vars:     Size  Location     Type
  7590 ;;		None
  7591 ;; Return value:  Size  Location     Type
  7592 ;;                  1    wreg      void 
  7593 ;; Registers used:
  7594 ;;		wreg, status,2, status,0, cstack
  7595 ;; Tracked objects:
  7596 ;;		On entry : 0/0
  7597 ;;		On exit  : 0/0
  7598 ;;		Unchanged: 0/0
  7599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7600 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7601 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7602 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7603 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7604 ;;Total ram usage:        0 bytes
  7605 ;; Hardware stack levels used: 1
  7606 ;; Hardware stack levels required when called: 2
  7607 ;; This function calls:
  7608 ;;		i2_I2C_2_Master_Start
  7609 ;;		i2_I2C_2_Master_Stop
  7610 ;;		i2_I2C_2_Master_Write
  7611 ;; This function is called by:
  7612 ;;		_High_ISR
  7613 ;; This function uses a non-reentrant model
  7614 ;;
  7615                           
  7616                           	psect	text58
  7617   002990                     __ptext58:
  7618                           	callstack 0
  7619   002990                     i2_clearInterrupt:
  7620                           	callstack 20
  7621   002990                     
  7622                           ;interrupts.c: 100:     I2C_2_Master_Start();
  7623   002990  EC4A  F015         	call	i2_I2C_2_Master_Start	;wreg free
  7624                           
  7625                           ;interrupts.c: 101:     I2C_2_Master_Write(0x52 | 0x00);
  7626   002994  0E52               	movlw	82
  7627   002996  EC1C  F015         	call	i2_I2C_2_Master_Write
  7628                           
  7629                           ;interrupts.c: 102:     I2C_2_Master_Write(0xe0 | 0x06 );
  7630   00299A  0EE6               	movlw	230
  7631   00299C  EC1C  F015         	call	i2_I2C_2_Master_Write
  7632                           
  7633                           ;interrupts.c: 103:     I2C_2_Master_Stop();
  7634   0029A0  EC45  F015         	call	i2_I2C_2_Master_Stop	;wreg free
  7635   0029A4  0012               	return		;funcret
  7636   0029A6                     __end_ofi2_clearInterrupt:
  7637                           	callstack 0
  7638                           
  7639 ;; *************** function i2_I2C_2_Master_Write *****************
  7640 ;; Defined at:
  7641 ;;		line 49 in file "i2c.c"
  7642 ;; Parameters:    Size  Location     Type
  7643 ;;  data_byte       1    wreg     unsigned char 
  7644 ;; Auto vars:     Size  Location     Type
  7645 ;;  data_byte       1    1[COMRAM] unsigned char 
  7646 ;; Return value:  Size  Location     Type
  7647 ;;                  1    wreg      void 
  7648 ;; Registers used:
  7649 ;;		wreg, status,2, status,0, cstack
  7650 ;; Tracked objects:
  7651 ;;		On entry : 0/0
  7652 ;;		On exit  : 0/0
  7653 ;;		Unchanged: 0/0
  7654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7655 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7656 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7657 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7658 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7659 ;;Total ram usage:        1 bytes
  7660 ;; Hardware stack levels used: 1
  7661 ;; Hardware stack levels required when called: 1
  7662 ;; This function calls:
  7663 ;;		i2_I2C_2_Master_Idle
  7664 ;; This function is called by:
  7665 ;;		i2_clearInterrupt
  7666 ;; This function uses a non-reentrant model
  7667 ;;
  7668                           
  7669                           	psect	text59
  7670   002A38                     __ptext59:
  7671                           	callstack 0
  7672   002A38                     i2_I2C_2_Master_Write:
  7673                           	callstack 20
  7674                           
  7675                           ;incstack = 0
  7676                           ;i2I2C_2_Master_Write@data_byte stored from wreg
  7677   002A38  6E02               	movwf	i2I2C_2_Master_Write@data_byte^0,c
  7678   002A3A                     
  7679                           ;i2c.c: 49: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 50: {;i2c.c: 51:   I
      +                          2C_2_Master_Idle();
  7680   002A3A  EC52  F014         	call	i2_I2C_2_Master_Idle	;wreg free
  7681   002A3E                     
  7682                           ;i2c.c: 52:   SSP2BUF = data_byte;
  7683   002A3E  C002  FED5         	movff	i2I2C_2_Master_Write@data_byte,3797	;volatile
  7684   002A42  0012               	return		;funcret
  7685   002A44                     __end_ofi2_I2C_2_Master_Write:
  7686                           	callstack 0
  7687                           
  7688 ;; *************** function i2_I2C_2_Master_Stop *****************
  7689 ;; Defined at:
  7690 ;;		line 43 in file "i2c.c"
  7691 ;; Parameters:    Size  Location     Type
  7692 ;;		None
  7693 ;; Auto vars:     Size  Location     Type
  7694 ;;		None
  7695 ;; Return value:  Size  Location     Type
  7696 ;;                  1    wreg      void 
  7697 ;; Registers used:
  7698 ;;		wreg, status,2, status,0, cstack
  7699 ;; Tracked objects:
  7700 ;;		On entry : 0/0
  7701 ;;		On exit  : 0/0
  7702 ;;		Unchanged: 0/0
  7703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7704 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7705 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7706 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7707 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7708 ;;Total ram usage:        0 bytes
  7709 ;; Hardware stack levels used: 1
  7710 ;; Hardware stack levels required when called: 1
  7711 ;; This function calls:
  7712 ;;		i2_I2C_2_Master_Idle
  7713 ;; This function is called by:
  7714 ;;		i2_clearInterrupt
  7715 ;; This function uses a non-reentrant model
  7716 ;;
  7717                           
  7718                           	psect	text60
  7719   002A8A                     __ptext60:
  7720                           	callstack 0
  7721   002A8A                     i2_I2C_2_Master_Stop:
  7722                           	callstack 20
  7723   002A8A                     
  7724                           ;i2c.c: 45:   I2C_2_Master_Idle();
  7725   002A8A  EC52  F014         	call	i2_I2C_2_Master_Idle	;wreg free
  7726   002A8E                     
  7727                           ;i2c.c: 46:   SSP2CON2bits.PEN = 1;
  7728   002A8E  010E               	movlb	14	; () banked
  7729   002A90  85DA               	bsf	218,2,b	;volatile
  7730   002A92                     
  7731                           ; BSR set to: 14
  7732   002A92  0012               	return		;funcret
  7733   002A94                     __end_ofi2_I2C_2_Master_Stop:
  7734                           	callstack 0
  7735                           
  7736 ;; *************** function i2_I2C_2_Master_Start *****************
  7737 ;; Defined at:
  7738 ;;		line 31 in file "i2c.c"
  7739 ;; Parameters:    Size  Location     Type
  7740 ;;		None
  7741 ;; Auto vars:     Size  Location     Type
  7742 ;;		None
  7743 ;; Return value:  Size  Location     Type
  7744 ;;                  1    wreg      void 
  7745 ;; Registers used:
  7746 ;;		wreg, status,2, status,0, cstack
  7747 ;; Tracked objects:
  7748 ;;		On entry : 0/0
  7749 ;;		On exit  : 0/0
  7750 ;;		Unchanged: 0/0
  7751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7752 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7753 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7754 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7755 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7756 ;;Total ram usage:        0 bytes
  7757 ;; Hardware stack levels used: 1
  7758 ;; Hardware stack levels required when called: 1
  7759 ;; This function calls:
  7760 ;;		i2_I2C_2_Master_Idle
  7761 ;; This function is called by:
  7762 ;;		i2_clearInterrupt
  7763 ;; This function uses a non-reentrant model
  7764 ;;
  7765                           
  7766                           	psect	text61
  7767   002A94                     __ptext61:
  7768                           	callstack 0
  7769   002A94                     i2_I2C_2_Master_Start:
  7770                           	callstack 20
  7771   002A94                     
  7772                           ;i2c.c: 33:   I2C_2_Master_Idle();
  7773   002A94  EC52  F014         	call	i2_I2C_2_Master_Idle	;wreg free
  7774   002A98                     
  7775                           ;i2c.c: 34:   SSP2CON2bits.SEN = 1;
  7776   002A98  010E               	movlb	14	; () banked
  7777   002A9A  81DA               	bsf	218,0,b	;volatile
  7778   002A9C                     
  7779                           ; BSR set to: 14
  7780   002A9C  0012               	return		;funcret
  7781   002A9E                     __end_ofi2_I2C_2_Master_Start:
  7782                           	callstack 0
  7783                           
  7784 ;; *************** function i2_I2C_2_Master_Idle *****************
  7785 ;; Defined at:
  7786 ;;		line 26 in file "i2c.c"
  7787 ;; Parameters:    Size  Location     Type
  7788 ;;		None
  7789 ;; Auto vars:     Size  Location     Type
  7790 ;;		None
  7791 ;; Return value:  Size  Location     Type
  7792 ;;                  1    wreg      void 
  7793 ;; Registers used:
  7794 ;;		wreg, status,2, status,0
  7795 ;; Tracked objects:
  7796 ;;		On entry : 0/0
  7797 ;;		On exit  : 0/0
  7798 ;;		Unchanged: 0/0
  7799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7800 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7801 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7802 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7803 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7804 ;;Total ram usage:        1 bytes
  7805 ;; Hardware stack levels used: 1
  7806 ;; This function calls:
  7807 ;;		Nothing
  7808 ;; This function is called by:
  7809 ;;		i2_I2C_2_Master_Start
  7810 ;;		i2_I2C_2_Master_Stop
  7811 ;;		i2_I2C_2_Master_Write
  7812 ;; This function uses a non-reentrant model
  7813 ;;
  7814                           
  7815                           	psect	text62
  7816   0028A4                     __ptext62:
  7817                           	callstack 0
  7818   0028A4                     i2_I2C_2_Master_Idle:
  7819                           	callstack 20
  7820   0028A4                     i2l104:
  7821   0028A4  010E               	movlb	14	; () banked
  7822   0028A6  B5D8               	btfsc	216,2,b	;volatile
  7823   0028A8  EF58  F014         	goto	i2u123_41
  7824   0028AC  EF5A  F014         	goto	i2u123_40
  7825   0028B0                     i2u123_41:
  7826   0028B0  EF52  F014         	goto	i2l104
  7827   0028B4                     i2u123_40:
  7828   0028B4                     
  7829                           ; BSR set to: 14
  7830   0028B4  CEDA F001          	movff	3802,??i2_I2C_2_Master_Idle	;volatile
  7831   0028B8  0E1F               	movlw	31
  7832   0028BA  1601               	andwf	??i2_I2C_2_Master_Idle^0,f,c
  7833   0028BC  A4D8               	btfss	status,2,c
  7834   0028BE  EF63  F014         	goto	i2u124_41
  7835   0028C2  EF65  F014         	goto	i2u124_40
  7836   0028C6                     i2u124_41:
  7837   0028C6  EF52  F014         	goto	i2l104
  7838   0028CA                     i2u124_40:
  7839   0028CA                     
  7840                           ; BSR set to: 14
  7841   0028CA  0012               	return		;funcret
  7842   0028CC                     __end_ofi2_I2C_2_Master_Idle:
  7843                           	callstack 0
  7844                           
  7845                           	psect	smallconst
  7846   000E00                     __psmallconst:
  7847                           	callstack 0
  7848   000E00  00                 	db	0
  7849   000E01  00                 	db	0	; dummy byte at the end
  7850   000000                     
  7851                           	psect	rparam
  7852   000000                     
  7853                           	psect	temp
  7854   00004C                     btemp:
  7855                           	callstack 0
  7856   00004C                     	ds	1
  7857   000000                     int$flags	set	btemp
  7858   000000                     wtemp8	set	btemp+1
  7859   000000                     ttemp5	set	btemp+1
  7860   000000                     ttemp6	set	btemp+4
  7861   000000                     ttemp7	set	btemp+8
  7862                           
  7863                           	psect	config
  7864                           
  7865                           ;Config register CONFIG1L @ 0x300000
  7866                           ;	External Oscillator mode Selection bits
  7867                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  7868                           ;	Power-up default value for COSC bits
  7869                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  7870   300000                     	org	3145728
  7871   300000  AA                 	db	170
  7872                           
  7873                           ;Config register CONFIG1H @ 0x300001
  7874                           ;	unspecified, using default values
  7875                           ;	Clock Out Enable bit
  7876                           ;	CLKOUTEN = 0x1, unprogrammed default
  7877                           ;	Clock Switch Enable bit
  7878                           ;	CSWEN = 0x1, unprogrammed default
  7879                           ;	Fail-Safe Clock Monitor Enable bit
  7880                           ;	FCMEN = 0x1, unprogrammed default
  7881   300001                     	org	3145729
  7882   300001  FF                 	db	255
  7883                           
  7884                           ;Config register CONFIG3L @ 0x300004
  7885                           ;	WDT Period Select bits
  7886                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  7887                           ;	WDT operating mode
  7888                           ;	WDTE = OFF, WDT Disabled
  7889   300004                     	org	3145732
  7890   300004  9F                 	db	159
  7891                           
  7892                           ;Config register CONFIG3H @ 0x300005
  7893                           ;	unspecified, using default values
  7894                           ;	WDT Window Select bits
  7895                           ;	WDTCWS = 0x7, unprogrammed default
  7896                           ;	WDT input clock selector
  7897                           ;	WDTCCS = 0x7, unprogrammed default
  7898   300005                     	org	3145733
  7899   300005  FF                 	db	255
  7900                           tosu	equ	0xFFF
  7901                           tosh	equ	0xFFE
  7902                           tosl	equ	0xFFD
  7903                           stkptr	equ	0xFFC
  7904                           pclatu	equ	0xFFB
  7905                           pclath	equ	0xFFA
  7906                           pcl	equ	0xFF9
  7907                           tblptru	equ	0xFF8
  7908                           tblptrh	equ	0xFF7
  7909                           tblptrl	equ	0xFF6
  7910                           tablat	equ	0xFF5
  7911                           prodh	equ	0xFF4
  7912                           prodl	equ	0xFF3
  7913                           indf0	equ	0xFEF
  7914                           postinc0	equ	0xFEE
  7915                           postdec0	equ	0xFED
  7916                           preinc0	equ	0xFEC
  7917                           plusw0	equ	0xFEB
  7918                           fsr0h	equ	0xFEA
  7919                           fsr0l	equ	0xFE9
  7920                           wreg	equ	0xFE8
  7921                           indf1	equ	0xFE7
  7922                           postinc1	equ	0xFE6
  7923                           postdec1	equ	0xFE5
  7924                           preinc1	equ	0xFE4
  7925                           plusw1	equ	0xFE3
  7926                           fsr1h	equ	0xFE2
  7927                           fsr1l	equ	0xFE1
  7928                           bsr	equ	0xFE0
  7929                           indf2	equ	0xFDF
  7930                           postinc2	equ	0xFDE
  7931                           postdec2	equ	0xFDD
  7932                           preinc2	equ	0xFDC
  7933                           plusw2	equ	0xFDB
  7934                           fsr2h	equ	0xFDA
  7935                           fsr2l	equ	0xFD9
  7936                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        10
    BSS         46
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     64      75
    BANK0           160     35      80
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    Black@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    Black@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    Blue@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    Blue@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    creep@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    creep@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    creep@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    creep@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    creep@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    creep@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    decideColor@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    decideColor@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    decideColor@normRGB	PTR struct normColors size(1) Largest target is 8
		 -> main@normRGB(BANK0[8]), 

    decideColor@RGBC	PTR struct colors size(1) Largest target is 8
		 -> main@RGBC(BANK0[8]), 

    executeInstruction@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    executeInstruction@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    fastStop@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    fastStop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    fastStop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    fastStop@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    fastStop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    fastStop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    fullSpeedAhead@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    fullSpeedAhead@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    fullSpeedAhead@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    fullSpeedAhead@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    Green@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    Green@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    leftCali@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    leftCali@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    LightBlue@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    LightBlue@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    normalizeColors@normRGB	PTR struct normColors size(1) Largest target is 8
		 -> main@normRGB(BANK0[8]), 

    normalizeColors@RGBC	PTR struct colors size(1) Largest target is 8
		 -> main@RGBC(BANK0[8]), 

    Orange@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    Orange@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    Pink@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    Pink@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    readColors@RGBC	PTR struct colors size(1) Largest target is 8
		 -> main@RGBC(BANK0[8]), 

    Red@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    Red@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    reverseLightBlue@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    reverseLightBlue@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    reverseOrange@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    reverseOrange@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    reversePink@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    reversePink@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    reverseRoute@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    reverseRoute@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    reverseYellow@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    reverseYellow@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    S271DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    S271DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), main@motorR(BANK0[9]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    stop@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    stop@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    timed_trundle@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    timed_trundle@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    timed_trundle@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    timed_trundle@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    timed_trundle@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    timed_trundle@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    trundle@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    trundle@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    trundle@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    trundle@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    trundle@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    trundle@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    trundleSquare@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    trundleSquare@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    trundleSquare@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    trundleSquare@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    trundleSquare@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    trundleSquare@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    turn180@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turn180@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    turn180@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    turn180@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turn180@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    turn180@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    turnLeft135@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnLeft135@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    turnLeft135@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    turnLeft135@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnLeft135@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    turnLeft135@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    turnLeft@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnLeft@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    turnLeft@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    turnLeft@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnLeft@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    turnLeft@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    turnRight135@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnRight135@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    turnRight135@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    turnRight135@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnRight135@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    turnRight135@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    turnRight@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnRight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    turnRight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    turnRight@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnRight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRhlllll[1]), 

    turnRight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRhlllll[1]), 

    White@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    White@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    Yellow@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    Yellow@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 


Critical Paths under _main in COMRAM

    _main->_reverseRoute
    _trundle->_setMotorPWM
    _reverseRoute->_executeInstruction
    _timed_trundle->_stop
    _executeInstruction->_Pink
    _executeInstruction->_Yellow
    _executeInstruction->_reversePink
    _executeInstruction->_reverseYellow
    _reverseYellow->_trundleSquare
    _reversePink->_trundleSquare
    _reverseOrange->_turnRight135
    _reverseLightBlue->_turnLeft135
    _Yellow->_trundleSquare
    _Red->_turnRight
    _turnRight->_stop
    _Pink->_trundleSquare
    _trundleSquare->_stop
    _Orange->_turnRight135
    _turnRight135->_stop
    _LightBlue->_turnLeft135
    _turnLeft135->_stop
    _Green->_turnLeft
    _Blue->_turn180
    _turn180->_stop
    _leftCali->_turnLeft
    _turnLeft->_stop
    _interrupts_init->_color_writetoaddr
    _clearInterrupt->_I2C_2_Master_Write
    _fastStop->_setMotorPWM
    _decideColor->_creep
    _readColors->_readBlueColor
    _readColors->_readClearColor
    _readColors->_readGreenColor
    _readColors->_readRedColor
    _readRedColor->_I2C_2_Master_Read
    _readGreenColor->_I2C_2_Master_Read
    _readClearColor->_I2C_2_Master_Read
    _readBlueColor->_I2C_2_Master_Read
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    _normalizeColors->___lwdiv
    _creep->_stop
    _stop->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle

Critical Paths under _High_ISR in COMRAM

    i2_clearInterrupt->i2_I2C_2_Master_Write
    i2_I2C_2_Master_Write->i2_I2C_2_Master_Idle
    i2_I2C_2_Master_Stop->i2_I2C_2_Master_Idle
    i2_I2C_2_Master_Start->i2_I2C_2_Master_Idle

Critical Paths under _main in BANK0

    None.

Critical Paths under _High_ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _High_ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _High_ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _High_ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _High_ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _High_ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _High_ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _High_ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _High_ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _High_ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _High_ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _High_ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _High_ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _High_ISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                39    39      0  556778
                                             62 COMRAM     2     2      0
                                              0 BANK0     35    35      0
                          _LEDturnON
                        _Timer0_init
                     _clearInterrupt
                   _color_click_init
                        _decideColor
                 _executeInstruction
                           _fastStop
                _indicateInstruction
                      _initBoardLEDs
                        _initButtons
                    _initDCmotorsPWM
                   _init_buttons_LED
                    _interrupts_init
                           _leftCali
                    _normalizeColors
                         _readColors
                       _reverseRoute
                        _setMotorPWM
                            _trundle
 ---------------------------------------------------------------------------------
 (1) _trundle                                             11     9      2    5827
                                             20 COMRAM    11     9      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _reverseRoute                                        16    14      2  269398
                                             46 COMRAM    16    14      2
                 _executeInstruction
                               _stop
                      _timed_trundle
                            _turn180
 ---------------------------------------------------------------------------------
 (2) _timed_trundle                                       13     9      4   13495
                                             27 COMRAM    13     9      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (2) _executeInstruction                                   5     2      3  234692
                                             41 COMRAM     5     2      3
                              _Black
                               _Blue
                              _Green
                          _LightBlue
                             _Orange
                               _Pink
                                _Red
                              _White
                             _Yellow
                   _reverseLightBlue
                      _reverseOrange
                        _reversePink
                      _reverseYellow
 ---------------------------------------------------------------------------------
 (3) _reverseYellow                                        2     0      2   41648
                                             39 COMRAM     2     0      2
                      _trundleSquare
                            _turn180
                           _turnLeft
 ---------------------------------------------------------------------------------
 (3) _reversePink                                          2     0      2   41170
                                             39 COMRAM     2     0      2
                      _trundleSquare
                            _turn180
                          _turnRight
 ---------------------------------------------------------------------------------
 (3) _reverseOrange                                        2     0      2   13384
                                             37 COMRAM     2     0      2
                       _turnRight135
 ---------------------------------------------------------------------------------
 (3) _reverseLightBlue                                     2     0      2   13384
                                             37 COMRAM     2     0      2
                        _turnLeft135
 ---------------------------------------------------------------------------------
 (3) _Yellow                                               2     0      2   27634
                                             39 COMRAM     2     0      2
                      _trundleSquare
                          _turnRight
 ---------------------------------------------------------------------------------
 (3) _White                                                2     0      2     152
                                              2 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _Red                                                  2     0      2   13536
                                             37 COMRAM     2     0      2
                          _turnRight
 ---------------------------------------------------------------------------------
 (4) _turnRight                                           10     8      2   13340
                                             27 COMRAM    10     8      2
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (3) _Pink                                                 2     0      2   28112
                                             39 COMRAM     2     0      2
                      _trundleSquare
                           _turnLeft
 ---------------------------------------------------------------------------------
 (4) _trundleSquare                                       12     8      4   14054
                                             27 COMRAM    12     8      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (3) _Orange                                               2     0      2   13384
                                             37 COMRAM     2     0      2
                       _turnRight135
 ---------------------------------------------------------------------------------
 (4) _turnRight135                                        10     8      2   13188
                                             27 COMRAM    10     8      2
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (3) _LightBlue                                            2     0      2   13384
                                             37 COMRAM     2     0      2
                        _turnLeft135
 ---------------------------------------------------------------------------------
 (4) _turnLeft135                                         10     8      2   13188
                                             27 COMRAM    10     8      2
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (3) _Green                                                2     0      2   14014
                                             38 COMRAM     2     0      2
                           _turnLeft
 ---------------------------------------------------------------------------------
 (3) _Blue                                                 2     0      2   13688
                                             37 COMRAM     2     0      2
                            _turn180
 ---------------------------------------------------------------------------------
 (2) _turn180                                             10     8      2   13492
                                             27 COMRAM    10     8      2
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (3) _Black                                                2     0      2     152
                                              2 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _leftCali                                             5     3      2   14061
                                             38 COMRAM     5     3      2
                           _turnLeft
 ---------------------------------------------------------------------------------
 (4) _turnLeft                                            11     8      3   13818
                                             27 COMRAM    11     8      3
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (1) _interrupts_init                                      0     0      0     620
                     _clearInterrupt
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _clearInterrupt                                       0     0      0      22
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (1) _init_buttons_LED                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              2 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _initButtons                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initBoardLEDs                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _indicateInstruction                                  8     8      0      92
                                              2 COMRAM     8     8      0
 ---------------------------------------------------------------------------------
 (1) _fastStop                                             7     5      2    5538
                                             20 COMRAM     7     5      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _decideColor                                          6     2      4   17199
                                             41 COMRAM     6     2      4
                          _LEDturnON
                              _creep
                    _normalizeColors
                         _readColors
 ---------------------------------------------------------------------------------
 (1) _readColors                                           3     2      1     692
                                             13 COMRAM     3     2      1
                         _LEDturnOFF
                          _LEDturnON
                      _readBlueColor
                     _readClearColor
                     _readGreenColor
                       _readRedColor
 ---------------------------------------------------------------------------------
 (2) _readRedColor                                         7     5      2     113
                                              6 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _readGreenColor                                       7     5      2     113
                                              6 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _readClearColor                                       7     5      2     113
                                              6 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _readBlueColor                                        7     5      2     113
                                              6 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Read                                    3     3      0      45
                                              3 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _LEDturnON                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LEDturnOFF                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _normalizeColors                                     14    12      2    1790
                                             15 COMRAM    14    12      2
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (2) _creep                                               14     9      5   13995
                                             27 COMRAM    14     9      5
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (3) _stop                                                 7     5      2    7210
                                             20 COMRAM     7     5      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          5     4      1    5163
                                             15 COMRAM     5     4      1
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     507
                                              2 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4    1108
                                              8 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     598
                                              6 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     598
                                              4 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      22
                                              3 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              2 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _High_ISR                                             0     0      0      22
                   i2_clearInterrupt
 ---------------------------------------------------------------------------------
 (9) i2_clearInterrupt                                     0     0      0      22
               i2_I2C_2_Master_Start
                i2_I2C_2_Master_Stop
               i2_I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (10) i2_I2C_2_Master_Write                                1     1      0      22
                                              1 COMRAM     1     1      0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (10) i2_I2C_2_Master_Stop                                 0     0      0       0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (10) i2_I2C_2_Master_Start                                0     0      0       0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (11) i2_I2C_2_Master_Idle                                 1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LEDturnON
   _Timer0_init
   _clearInterrupt
     _I2C_2_Master_Start
       _I2C_2_Master_Idle
     _I2C_2_Master_Stop
       _I2C_2_Master_Idle
     _I2C_2_Master_Write
       _I2C_2_Master_Idle
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _decideColor
     _LEDturnON
     _creep
       _setMotorPWM
         ___lwdiv
           ___wmul (ARG)
         ___wmul
       _stop
         _setMotorPWM
     _normalizeColors
       ___lwdiv
     _readColors
       _LEDturnOFF
       _LEDturnON
       _readBlueColor
         _I2C_2_Master_Read
           _I2C_2_Master_Idle
         _I2C_2_Master_RepStart
           _I2C_2_Master_Idle
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _readClearColor
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _readGreenColor
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _readRedColor
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
   _executeInstruction
     _Black
     _Blue
       _turn180
         _setMotorPWM
         _stop
     _Green
       _turnLeft
         _setMotorPWM
         _stop
     _LightBlue
       _turnLeft135
         _setMotorPWM
         _stop
     _Orange
       _turnRight135
         _setMotorPWM
         _stop
     _Pink
       _trundleSquare
         _setMotorPWM
         _stop
       _turnLeft
     _Red
       _turnRight
         _setMotorPWM
         _stop
     _White
     _Yellow
       _trundleSquare
       _turnRight
     _reverseLightBlue
       _turnLeft135
     _reverseOrange
       _turnRight135
     _reversePink
       _trundleSquare
       _turn180
       _turnRight
     _reverseYellow
       _trundleSquare
       _turn180
       _turnLeft
   _fastStop
     _setMotorPWM
   _indicateInstruction
   _initBoardLEDs
   _initButtons
   _initDCmotorsPWM
   _init_buttons_LED
   _interrupts_init
     _clearInterrupt
     _color_writetoaddr
   _leftCali
     _turnLeft
   _normalizeColors
   _readColors
   _reverseRoute
     _executeInstruction
     _stop
     _timed_trundle
       _setMotorPWM
       _stop
     _turn180
   _setMotorPWM
   _trundle
     _setMotorPWM

 _High_ISR (ROOT)
   i2_clearInterrupt
     i2_I2C_2_Master_Start
       i2_I2C_2_Master_Idle
     i2_I2C_2_Master_Stop
       i2_I2C_2_Master_Idle
     i2_I2C_2_Master_Write
       i2_I2C_2_Master_Idle

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      65        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     23      50       5       50.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     40      4B       1       79.8%
BITBIGSFRhlllll     46      0       0      48        0.0%
BITBIGSFRlllhlh     35      0       0      58        0.0%
BITBIGSFRhlllhl     31      0       0      46        0.0%
BITBIGSFRllllh      2B      0       0      62        0.0%
BITBIGSFRllhh       20      0       0      50        0.0%
BITBIGSFRhhhhlh     1B      0       0      33        0.0%
BITBIGSFRhhhllh     17      0       0      38        0.0%
BITBIGSFRhlllhh     14      0       0      43        0.0%
BITBIGSFRhhhhll     13      0       0      34        0.0%
BITBIGSFRlllhhl     11      0       0      53        0.0%
BITBIGSFRlllhhl     11      0       0      54        0.0%
BITBIGSFRhhhhll      E      0       0      35        0.0%
BITBIGSFRhhhhh       D      0       0      32        0.0%
BITBIGSFRlllhhh      C      0       0      52        0.0%
BITBIGSFRllhl        C      0       0      51        0.0%
BITBIGSFRlllhll      9      0       0      60        0.0%
BITBIGSFRlllhlh      9      0       0      59        0.0%
BITBIGSFRhlllhh      6      0       0      45        0.0%
BITBIGSFRlllhlh      5      0       0      57        0.0%
BITBIGSFRhhhlll      5      0       0      39        0.0%
BITBIGSFRhlllhh      3      0       0      44        0.0%
BITBIGSFRlllhhl      3      0       0      56        0.0%
BITBIGSFRhllllh      2      0       0      47        0.0%
BITBIGSFRhhhlh       2      0       0      37        0.0%
BITBIGSFRhllh        2      0       0      42        0.0%
BITBIGSFRlllhhl      1      0       0      55        0.0%
BITBIGSFRhhlh        1      0       0      40        0.0%
BITBIGSFRhhhhll      1      0       0      36        0.0%
BITBIGSFRlllhll      1      0       0      61        0.0%
BITBIGSFRlh          1      0       0      49        0.0%
BITBIGSFRhlh         1      0       0      41        0.0%
BITBIGSFRlllll       1      0       0      63        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      9B      64        0.0%
DATA                 0      0      9B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Tue Mar 12 11:51:38 2024

           ??_init_buttons_LED 0003     __end_of_executeInstruction 15EC                             l33 2850  
                           l42 2958                             l51 274C                             l60 20A8  
                           l45 265C                             l54 26FC                             l48 26AC  
                           l64 0FF4                             l57 1882            ___wmul@multiplicand 0005  
                          l101 287A                            l110 2A88                            l104 287C  
                          l113 2A60                            l122 278E                            l107 28A2  
                          l116 2A7E                            l230 29B8                            l119 2A36  
                          l233 2A6A                            l401 29E6                            l411 227E  
                          l236 2A74                            l408 2270                            l530 1E76  
                          l362 15EA                            l602 1316                            l275 260C  
                          l371 2A1E                            l611 1F54                            l195 10A0  
                          l508 1AEC                            l380 2A02                            l541 1D48  
                          l365 29F4                            l278 2978                            l462 2474  
                          l374 2938                            l198 10B8                            l383 2A10  
                          l615 1F96                            l519 19B8                            l640 2A56  
                          l288 298E                            l368 29CA                            l552 1C1A  
                          l392 27F8                            l560 214E                            l377 28F0  
                          l474 25BC                            l482 22BE                            l386 2AA4  
                          l643 2A2A                            l395 2826                            l492 2344  
                          l469 173E                            l653 2390                            l477 2280  
                          l389 2AA6                            l574 13FE                            l654 235C  
                          l398 29D8                            l487 2310                            l591 1282  
                          l656 23EC                            l568 21B6                            l585 1492  
                          l497 2552                            l668 2916                            u900 24CA  
                          u901 24C6                            u910 1606                            u911 1602  
                          u920 16C2                            u921 16BE                            u930 288C  
                          u931 2888                            u940 28A2                            u941 289E  
                          u950 257A                            u951 2576                            u880 2490  
                          u960 2778                            u881 248C                            u961 2770  
                          u890 24AE                            u891 24AA                            u980 189A  
                          u981 1896                            u990 18B0                            u991 18AC  
                          u978 277A                            _Red 29E8                ??_timed_trundle 0020  
                          wreg 0FE8                           ?_Red 0026                           l3001 11D4  
                         l3011 1208                           l3003 11DE                           l3101 0F2E  
                         l3021 1246                           l3013 1218                           l3005 11EC  
                         l1166 24E8                           l1159 24E0                           l3111 0F5C  
                         l3031 12A8                           l3023 1256                           l3015 1222  
                         l3007 11FA                           l3121 0FC4                           l3113 0F7A  
                         l3105 0F34                           l3201 2468                           l3041 130A  
                         l3033 12B0                           l3017 1236                           l3025 125A  
                         l3009 1204                           l3115 0F9C                           l3107 0F56  
                         l3203 2472                           l3211 22AE                           l3035 12C0  
                         l3027 128C                           l3019 123E                           l2501 2A2E  
                         l3061 2840                           l3141 2A4E                           l3213 22CC  
                         l3205 2280                           l3029 12A0                           l3037 12C6  
                         l3301 20E4                           l2503 2A32                           l3055 2828  
                         l2431 290E                           l2511 2754                           l3135 0FF2  
                         l3127 0FCA                           l3119 0FA2                           l3071 0E42  
                         l3063 0E02                           l3143 2A20                           l3151 25CA  
                         l3231 2342                           l3223 231E                           l3215 22DA  
                         l3207 228E                           l3039 12EA                           l3311 2122  
                         l3303 20EE                           l3057 282C                           l2441 2498  
                         l2513 275C                           l2505 2A58                           l3129 0FEC  
                         l3081 0EAA                           l3073 0E64                           l3065 0E24  
                         l3161 25EC                           l3153 25CC                           l3145 25BE  
                         l2601 1A94                           l3225 2324                           l3217 22F0  
                         l3209 2296                           l3321 217C                           l3305 2102  
                         l3313 2126                           l3401 112A                           l2523 2A76  
                         l3059 2836                           l2451 24D2                           l2443 24A0  
                         l2435 2476                           l2515 2764                           l2507 2A5C  
                         l3091 0ECC                           l3075 0E82                           l3067 0E3C  
                         l3251 2548                           l3243 2514                           l3235 24EA  
                         l3139 29A6                           l3171 260A                           l3163 25F6  
                         l3155 25CE                           l3147 25C4                           l2611 1ACA  
                         l2603 1A9C                           l3219 22FE                           l3227 2326  
                         l2531 18B0                           l3323 218C                           l3315 2158  
                         l3307 210A                           l3411 114E                           l3403 112C  
                         l3173 295A                           l2525 2A7A                           l2453 24D4  
                         l2445 24AE                           l2437 247E                           l2429 28F2  
                         l2461 1654                           l2517 278A                           l2509 2750  
                         l3093 0EE4                           l3245 2528                           l3237 24FA  
                         l3261 2350                           l3181 23EE                           l3165 2600  
                         l3157 25D8                           l3149 25C8                           l2613 1AD2  
                         l3229 2334                           l2621 1D60                           l2701 1B04  
                         l2541 18EA                           l2533 18BC                           l3317 216C  
                         l3325 2192                           l3309 2112                           l3421 1168  
                         l3413 1152                           l3405 113C                           l3341 0FFA  
                         l3175 2962                           l2455 24DA                           l2447 24B4  
                         l2439 2490                           l2471 1702                           l2463 1666  
                         l2519 278C                           l3095 0EEC                           l3087 0EB0  
                         l3079 0E88                           l3247 2530                           l3239 2502  
                         l3271 23CC                           l3263 235E                           l3255 2348  
                         l3191 244E                           l3183 23F6                           l3167 2604  
                         l3159 25E2                           l2615 1AE2                           l2607 1AAE  
                         l2631 1DA4                           l2623 1D76                           l2711 1B48  
                         l2703 1B1A                           l2543 18FE                           l2551 192A  
                         l2535 18CA                           l2527 1884                           l3511 157C  
                         l3319 2174                           l3423 1174                           l3415 1154  
                         l3407 1140                           l3351 100E                           l3343 0FFE  
                         l3177 296C                           l2473 287C                           l2449 24CA  
                         l2465 166A                           l2457 15EC                           l2481 256C  
                         l3097 0EF8                           l3089 0EB4                           l3249 2538  
                         l3265 2374                           l3193 2450                           l3185 241C  
                         l3169 2606                           l2609 1AC2                           l2641 1DE4  
                         l2633 1DB0                           l2625 1D82                           l2721 1B88  
                         l2713 1B54                           l2705 1B26                           l2561 197A  
                         l2553 1948                           l2545 1906                           l2537 18D6  
                         l2529 189A                           l3281 21F8                           l3273 21B8  
                         l3425 1182                           l3409 114A                           l3361 1030  
                         l3353 101A                           l3345 1002                           l3179 2976  
                         l2475 288C                           l2467 16A8                           l2459 1606  
                         l2491 25A2                           l2803 26FE                           l2811 26F4  
                         l3099 0F10                           l3267 238C                           l3195 245A  
                         l3187 2420                           l2635 1DC4                           l2643 1DE8  
                         l2627 1D8E                           l2619 1D4A                           l2715 1B68  
                         l2723 1B8C                           l2707 1B34                           l2563 198E  
                         l2555 1960                           l2547 190E                           l2539 18DE  
                         l3291 225E                           l3275 21C0                           l3427 1188  
                         l3419 1156                           l3371 1052                           l3363 1038  
                         l3355 1020                           l3347 1006                           l3339 0FF6  
                         l2469 16C2                           l2493 25B2                           l2485 257E  
                         l2477 2554                           l2805 2744                           l2901 205E  
                         l3269 23B4                           l3197 245C                           l3189 2444  
                         l2581 19FE                           l2573 19BA                           l2661 1E6C  
                         l2653 1E38                           l2645 1E06                           l2637 1DCC  
                         l2629 1D9C                           l2821 29BA                           l2741 1C10  
                         l2733 1BDC                           l2725 1BAA                           l2717 1B70  
                         l2709 1B40                           l2565 1996                           l2557 1968  
                         l2549 1926                           l3293 226A                           l3285 220A  
                         l3277 21E0                           l3381 1076                           l3373 1056  
                         l3365 1040                           l3357 1024                           l3349 100A  
                         l2487 2592                           l2479 2564                           l2911 132E  
                         l2815 2A62                           l2903 2060                           l3199 2466  
                         l2591 1A3A                           l2583 1A0C                           l2575 19D0  
                         l2655 1E4C                           l2647 1E1E                           l2639 1DD4  
                         l2823 2A12                           l2751 1C54                           l2831 2A04  
                         l2735 1BF0                           l2727 1BC2                           l2719 1B78  
                         l2671 1EB0                           l2567 199E                           l3287 2254  
                         l3279 21F2                           l3295 20AA                           l3391 10D6  
                         l3383 1084                           l3375 105E                           l3367 1048  
                         l3359 1028                           l2497 2A80                           l2489 259A  
                         l2921 1376                           l2913 1344                           l2817 2A6C  
                         l2809 26AE                           l2905 208E                           l2593 1A42  
                         l2585 1A12                           l2577 19E6                           l2657 1E54  
                         l2649 1E26                           l2761 1C96                           l2753 1C60  
                         l2745 1C1C                           l2737 1BF8                           l2729 1BCA  
                         l2673 1EC0                           l2665 1E78                           l2569 19AE  
                         l2833 2A9E                           l2825 2918                           l2841 29DA  
                         l3297 20C6                           l3393 10DE                           l3385 1088  
                         l3377 1066                           l3369 104E                           l2851 2862  
                         l2499 2A84                           l2931 13B2                           l2923 1380  
                         l2915 1350                           l2907 20A6                           l2595 1A5A  
                         l2587 1A1E                           l2579 19F2                           l2659 1E5C  
                         l2771 1CD8                           l2763 1C9E                           l2755 1C6E  
                         l2747 1C32                           l2739 1C00                           l2691 1F34  
                         l2683 1F00                           l2675 1EDC                           l2667 1E8E  
                         l2827 28CC                           l2819 29E8                           l2835 27C8  
                         l3299 20D0                           l3395 1102                           l3387 10AE  
                         l3379 106E                           l2853 2864                           l2941 1408  
                         l2933 13BA                           l2925 1384                           l2917 135A  
                         l2909 1318                           l2861 1740                           l2589 1A32  
                         l2597 1A5E                           l2781 1D1E                           l2773 1CF0  
                         l2765 1CA6                           l2757 1C76                           l2749 1C48  
                         l2829 29F6                           l2693 1F38                           l2685 1F14  
                         l2677 1EF8                           l2669 1EA4                           l2837 27FA  
                         l3397 1108                           l3389 10CA                           l2855 2866  
                         l2847 2852                           l2943 141C                           l2951 1442  
                         l2935 13C2                           l2927 1394                           l2919 1368  
                         l2871 181A                           l2863 178A                           l2791 260E  
                         l2599 1A7C                           l2783 1D26                           l2775 1CF8  
                         l2767 1CB6                           l2759 1C82                           l2695 1F58  
                         l2687 1F1C                           l2839 29CC                           l3399 111A  
                         l2857 2868                           l2849 285C                           l2945 1424  
                         l2953 1466                           l2937 13D2                           l2929 139E  
                         l2873 1836                           l2865 17A6                           l2793 2654  
                         l2881 1FB2                           l2785 1D2E                           l2769 1CBA  
                         l2697 1F8A                           l2689 1F24                           l2961 14A8  
                         l2859 293C                           l2955 1486                           l2947 142C  
                         l2939 13D6                           l2875 1866                           l2867 17CE  
                         l2891 2012                           l2883 1FCA                           l2787 1D3E  
                         l2779 1D0A                           l2699 1AEE                           l2971 14F8  
                         l2963 14B8                           l2949 143C                           l2869 17EA  
                         l2797 265E                           l2893 2014                           l2885 1FCE  
                         l2877 1F98                           l2981 1548                           l2973 1508  
                         l2965 14C8                           l2957 1494                           l2799 26A4  
                         l2895 2016                           l2887 1FD0                           l2879 1F9C  
                         l2983 1558                           l2975 1518                           l2967 14D8  
                         l2959 1498                           l2897 2044                           l2889 1FFA  
                         l2993 297A                           l2977 1528                           l2969 14E8  
                         l2899 205C                           l2979 1538                           l2987 1568  
                         l2995 119C                           l2997 11B2                           l2999 11C8  
                         u1000 1948                           u1001 1944                           u1010 1976  
                         u1011 1972                           u1020 19D0                           u1100 1E8E  
                         u1021 19CC                           u1101 1E8A                           u1030 19E6  
                         u1110 1EA4                           u1031 19E2                           u1111 1EA0  
                         u1040 1A7C                           u1200 1C48                           u1120 1EC0  
                         u1041 1A78                           u1201 1C44                           u1121 1EBC  
                         u1050 1AAA                           u1210 1CD8                           u1130 1F54  
                         u1051 1AA6                           u1211 1CD4                           u1131 1F50  
                         u1300 1486                           u1060 1D60                           u1220 1D06  
                         u1140 1F8A                           u1301 1482                           u1061 1D5C  
                         u1221 1D02                           u1141 1F86                           u1070 1D76  
                         u1150 1B04                           u1310 11B2                           u2007 0EBE  
                         u1071 1D72                           u1151 1B00                           u1311 11AE  
                         u1400 0EAA                           u1080 1E06                           u1160 1B1A  
                         u1320 11C8                           u2017 1FBC                           u1401 0EA6  
                         u1081 1E02                           u1161 1B16                           u1321 11C4  
                         u1250 132E                           u1410 0F2E                           u1090 1E34  
                         u1170 1BAA                           u1330 1218                           u2107 25A8  
                         u1251 132A                           u2027 1FDA                           u1411 0F2A  
                         u1091 1E30                           u1171 1BA6                           u1331 1214  
                         u1260 1344                           u1420 0F56                           u1500 22FE  
                         u1180 1BD8                           u1340 127E                           u2117 2846  
                         u1261 1340                           u2037 2004                           u1421 0F52  
                         u1501 22FA                           u1181 1BD4                           u1341 127A  
                         u1270 1394                           u1430 0F7A                           u1510 230C  
                         u1190 1C32                           u1350 12EA                           u1271 1390  
                         u2047 2020                           u1431 0F76                           u1511 2308  
                         u1191 1C2E                           u1351 12E6                           u1280 13FA  
                         u1440 0F9C                           u1520 231E                           u1360 130A  
                         u1600 227E                           u1281 13F6                           u2057 204E  
                         u1441 0F98                           u1521 231A                           u1361 1306  
                         u1601 227A                           u1290 1466                           u1450 0FC4  
                         u1370 0E24                           u1530 2334                           u1610 20E4  
                         u1291 1462                           u2067 206A                           u1451 0FC0  
                         u1371 0E20                           u1531 2330                           u1611 20E0  
                         u1460 0FEC                           u1380 0E64                           u1540 2342  
                         u1620 214A                           u2077 2098                           u1461 0FE8  
                         u1381 0E60                           u1541 233E                           u1621 2146  
                         u1390 0E82                           u1550 2510                           u1470 228E  
                         u1630 21B6                           u2087 13C8                           u1391 0E7E  
                         u1551 250C                           u1471 228A                           u1631 21B2  
                         u1560 23B4                           u1480 22CC                           u1640 10AE  
                         u2097 1432                           u1561 23B0                           u1481 22C8  
                         u1641 10AA                           u1570 23EC                           u1490 22DA  
                         u1650 10CA                           _T2PR 0FBC                           u1571 23E8  
                         u1491 22D6                           u1651 10C6                           u1660 1168  
                         u1581 21EA                           u1661 1164                           u1590 2206  
                         u1670 1182                           u1807 19A4                           u1591 2202  
                         u1671 117E                           u1817 1F2A                           u1737 1092  
                         u1907 1E62                           u1827 1B7E                           u1747 2118  
                         u1917 22A0                           u1837 1BB4                           u1757 2182  
                         u1927 22E4                           u1847 1C06                           u1767 124C  
                         u1937 1A4C                           u1857 1CAC                           u1777 12B6  
                         u1947 1A86                           u1867 1CE2                           u1787 1918  
                         u1957 1AD8                           u1877 1D34                           u1797 1952  
                         u1967 2368                           u1887 1DDA                           u1977 2380  
                         u1897 1E10                           u1987 23BE                           u1997 253E  
                         _Blue 2A12        timed_trundle@increments 001E        __end_of_interrupts_init 260E  
                         _Pink 28CC                    main@normRGB 008E                           _main 0FF6  
                         fsr1h 0FE2                           fsr2h 0FDA                           indf2 0FDF  
                         fsr1l 0FE1                           fsr2l 0FD9                           btemp 004C  
                         _stop 2554                           prodh 0FF4                           prodl 0FF3  
                         start 0046                    ?_LEDturnOFF 0001                   ___param_bank 0000  
                  _turnLeft135 1C1C             turnRight135@i_2129 0024                   ?_initButtons 0001  
                        ??_Red 0028             normalizeColors@sum 001A                          ?_Blue 0026  
                        ?_Pink 0028                          ?_main 0001                          _ADPCH 0F5F  
                        ?_stop 0015                    LightBlue@mL 0026                    LightBlue@mR 0027  
              __end_of___lwdiv 24EA                          i2l110 2A9C                          i2l104 28A4  
                        i2l107 28CA                          i2l116 2A92                          i2l119 2A42  
              readRedColor@tmp 000C                          i2l285 0042                          i2l288 29A4  
             i2_clearInterrupt 2990              turnLeft135@i_2111 0024                          _TMR0H 0FD4  
                        _TMR0L 0FD3                          Red@mL 0026                          Red@mR 0027  
                        _Black 2AA6                          _Green 29BA     __end_of_I2C_2_Master_Start 2A8A  
                        _White 2A9E     __end_of_I2C_2_Master_Write 2A38                          _creep 1318  
                        tablat 0FF5                          plusw1 0FE3                          plusw2 0FDB  
              __end_of_turn180 1E78                          ttemp5 004D                          ttemp6 0050  
                        ttemp7 0054                          stop@i 001A                          status 0FD8  
                        wtemp8 004D                __end_of_trundle 21B8          _I2C_2_Master_RepStart 2A58  
             __end_of_High_ISR 0046                   __end_of_Blue 2A20                __initialization 2790  
                 __end_of_Pink 28F2                   __end_of_main 119C                   __end_of_stop 25BE  
          normalizeColors@RGBC 0010                         ??_Blue 0028                turn180@maxpower 0020  
                       ??_Pink 002A                _normalizeColors 1740                         ??_main 003F  
                       ??_stop 0017                  decideColor@mL 002C                  decideColor@mR 002D  
                __activetblptr 0003                  ?_readRedColor 0007                   _turnRight135 1AEE  
                       ?_Black 0003                         ?_Green 0027      indicateInstruction@period 0006  
                       ?_White 0003             reverseRoute@F14289 0041                   ?_setMotorPWM 0010  
                       ?_creep 001C                         _ADRESH 0F64                         _CCPR1H 0FAA  
                       _CCPR2H 0FA6                         _CCPR3H 0F25                         _CCPR4H 0F21  
                       _RE2PPS 0E74                         _RC7PPS 0E69                         _RD5PPS 0E6F  
                       _RE4PPS 0E76                         _RD6PPS 0E70                         i2l3043 2A94  
                       i2l3051 2A3A                         i2l3045 2A98                         i2l3053 2A3E  
                       i2l3047 2A8A                         i2l3049 2A8E                         i2l3327 2990  
                       i2l3431 001A                         i2l3433 001C                         i2l3441 002C  
                       i2l3443 003A                         i2l3435 0022                         i2l3445 003C  
                       i2l3437 0026                         i2l3429 000A                         i2l3439 002A  
                       i2l2843 28A4                         i2l2845 28B4                         _RG6PPS 0E88  
                _initBoardLEDs 2A4E                         Blue@mL 0026                         Blue@mR 0027  
             ?_interrupts_init 0001              __end_of_LEDturnON 2A6C       __end_of_color_click_init 2852  
            readGreenColor@tmp 000C                         Pink@mL 0028                         Pink@mR 0029  
             __end_of_fastStop 2554                  ??_Timer0_init 0003                         _Orange 29F6  
                 _CCPTMRS0bits 0FAD                         _Yellow 2918               __end_of_leftCali 2346  
                       ___wmul 28F2                      ??___lwdiv 000D              readClearColor@tmp 000C  
                 ?_reversePink 0028                         clear_0 27B6                         isa$std 0001  
                       creep@i 0024                         _square 004A                 ??_readRedColor 0009  
                _readBlueColor 26FE                   __pdataCOMRAM 0041                   __mediumconst 0000  
                       tblptrh 0FF7                         tblptrl 0FF6                         tblptru 0FF8  
                    ??_turn180 001E                         stop@mL 0015                         stop@mR 0016  
            ??_initDCmotorsPWM 0005         normalizeColors@normRGB 0011                      ??_trundle 0017  
             __end_of_turnLeft 1AEE                 ?_initBoardLEDs 0001                     __accesstop 0060  
      __end_of__initialization 27BE     timed_trundle@current_power 0027                 _clearInterrupt 297A  
       ?_I2C_2_Master_RepStart 0001                  ___rparam_used 0001                  __end_of_Black 2AA8  
             _reverseLightBlue 29DA                  __end_of_Green 29CC                  turn180@i_2093 0024  
               __pcstackCOMRAM 0001        __end_of_normalizeColors 1884                  __end_of_White 2AA6  
            _instruction_array 0060                  __end_of_creep 1494            trundleSquare@square 001E  
          __end_of_Timer0_init 297A            _indicateInstruction 2346              __end_of_LightBlue 2A12  
               ?_readBlueColor 0007                  leftCali@power 002B     timed_trundle@trundle_power 0028  
                      ??_Black 0005                  _turnLeftPower 004B               creep@creep_power 0029  
                      ??_Green 0029             _executeInstruction 1494                        ??_White 0005  
                    ?_High_ISR 0001                        ??_creep 0021   trundleSquare@start_increment 0025  
       __end_of_clearInterrupt 2990                     __pbssBANK0 0060           ?_indicateInstruction 0001  
        __end_of_reverseOrange 29DA            ?_executeInstruction 002A          __end_of_reverseYellow 27FA  
             _reverseRouteFlag 008A       __end_ofi2_clearInterrupt 29A6                   ??_LEDturnOFF 0003  
            _color_writetoaddr 293A                   _T2CLKCONbits 0FBF                        ?_Orange 0026  
                 ?_turnLeft135 001C                        ?_Yellow 0028             ?_color_writetoaddr 0005  
                      ?___wmul 0003                 main@colourCode 008D           ??_executeInstruction 002D  
                _trundleSquare 1E78            ??_color_writetoaddr 0006           turnRight135@maxpower 0020  
                      Black@mL 0003                        Black@mR 0004                        _INT0PPS 0DF0  
 executeInstruction@colourCode 002C             __end_of_LEDturnOFF 2A76          __end_of_timed_trundle 1318  
                      _SSP2ADD 0ED6                     ??_High_ISR 0003                        _SSP2BUF 0ED5  
              ??_initBoardLEDs 0003                      ?_fastStop 0015                reverseOrange@mL 0026  
              reverseOrange@mR 0027                        Green@mL 0027                        Green@mR 0028  
                    ?_leftCali 0027                ?_clearInterrupt 0001          ??_indicateInstruction 0003  
       color_writetoaddr@value 0005      __end_of_color_writetoaddr 295A           __end_of_readRedColor 265E  
                    _ADREFbits 0F58             _I2C_2_Master_Start 2A80            i2_I2C_2_Master_Idle 28A4  
           _I2C_2_Master_Write 2A2C                        __Hparam 0000            i2_I2C_2_Master_Stop 2A8A  
                      __Lparam 0000                    _Timer0_init 295A                reverseYellow@mL 0028  
              reverseYellow@mR 0029        _instruction_array_index 008B               ?_normalizeColors 0010  
                      White@mL 0003                        White@mR 0004                     _readColors 1F98  
                ??_decideColor 002E            ?_I2C_2_Master_Start 0001                   turnLeft135@i 0022  
                      ___lwdiv 2476            ?_I2C_2_Master_Write 0001                   __psmallconst 0E00  
              ??_readBlueColor 0009                 ?_trundleSquare 001C                        __pcinit 2790  
                      __ramtop 0E00                      ?_turnLeft 001C                        __ptext0 0FF6  
                      __ptext1 20AA                        __ptext2 21B8                        __ptext3 119C  
                      __ptext4 1494                        __ptext5 27C8                        __ptext6 27FA  
                      __ptext7 29CC                        __ptext8 29DA                        __ptext9 2918  
         trundle@current_power 001E              stop@current_power 0018           ?i2_I2C_2_Master_Idle 0001  
                    _T2CONbits 0FBD                  ?_reverseRoute 002F           ?i2_I2C_2_Master_Stop 0001  
               _readClearColor 26AE                      _T2HLTbits 0FBE                        creep@mL 001C  
                      creep@mR 001D                     ??_fastStop 0017                        _turn180 1D4A  
         ??_I2C_2_Master_Start 0004           ??_I2C_2_Master_Write 0004            turnLeft135@maxpower 0020  
                      _trundle 20AA           end_of_initialization 27BE                     ??_leftCali 0029  
            ?_color_click_init 0001             ??_color_click_init 0007           trundle@trundle_power 001F  
                    _LEDturnON 2A62                        postdec1 0FE5                        postdec2 0FDD  
                      postinc0 0FEE                        postinc1 0FE6                        postinc2 0FDE  
              _initDCmotorsPWM 23EE                     fastStop@mL 0015                     fastStop@mR 0016  
                   ??_turnLeft 001F                      _PORTFbits 0F8E             setMotorPWM@negDuty 0014  
       __end_of_readClearColor 26FE          ??i2_I2C_2_Master_Idle 0001                 ??_reverseRoute 0031  
               readColors@RGBC 000E              __end_of_turnRight 19BA                 _readGreenColor 265E  
        ??i2_I2C_2_Master_Stop 0002               _init_buttons_LED 29A6            __end_of_decideColor 0FF6  
                    _TRISAbits 0F81             setMotorPWM@posDuty 0013                      _TRISCbits 0F83  
                    _TRISDbits 0F84                      _TRISEbits 0F85                      _TRISFbits 0F86  
                    _TRISGbits 0F87                      _TRISHbits 0F88       __end_of_reverseLightBlue 29E8  
     color_writetoaddr@address 0006        ??_I2C_2_Master_RepStart 0004                    _CCP1CONbits 0FAB  
                  _CCP2CONbits 0FA7                    _CCP3CONbits 0F26                    _CCP4CONbits 0F22  
                   main@motorL 00A7                     main@motorR 009E                     ?_LEDturnON 0001  
                   leftCali@mL 0027                     leftCali@mR 0028                    ?_readColors 000E  
               __end_of_Orange 2A04                ??_trundleSquare 0020                 __end_of_Yellow 293A  
               __end_of___wmul 2918                  __pidataCOMRAM 2A44         __end_of_readGreenColor 26AE  
              ?_readClearColor 0007           trundleSquare@reverse 001F            start_initialization 2790  
                    _LightBlue 2A04                    __end_of_Red 29F6              ?i2_clearInterrupt 0001  
                     ??_Orange 0028        __end_of_initDCmotorsPWM 2476             creep@current_power 0028  
                     ??_Yellow 002A             ??i2_clearInterrupt 0003                  ??_initButtons 0003  
                     ??___wmul 0007                    _decideColor 0E02  i2I2C_2_Master_Write@data_byte 0002  
              decideColor@RGBC 002B                ?_readGreenColor 0007   __end_ofi2_I2C_2_Master_Start 2A9E  
 __end_ofi2_I2C_2_Master_Write 2A44                   _readRedColor 260E                    __pbssCOMRAM 004B  
             ??_clearInterrupt 0005                  __pcstackBANK0 008D                     ?_LightBlue 0026  
         __end_of_reverseRoute 2280                    ??_LEDturnON 0003               ___lwdiv@dividend 0009  
                 ?_Timer0_init 0001                      __pintcode 0008                       ?___lwdiv 0009  
              turnRight@i_2075 0024                 turnLeft@i_2057 0025           I2C_2_Master_Read@ack 0005  
            ??_interrupts_init 0007           I2C_2_Master_Read@tmp 0006                creep@increments 001E  
          __end_of_initButtons 2A2C                    __smallconst 0E00                  ?_turnRight135 001C  
            _I2C_2_Master_Idle 287C              _I2C_2_Master_Init 2852              _I2C_2_Master_Read 274E  
            _I2C_2_Master_Stop 2A76    __end_of_indicateInstruction 23EE                 reverseRoute@mL 002F  
               reverseRoute@mR 0030                      _increment 0088             ?_I2C_2_Master_Idle 0001  
           ?_I2C_2_Master_Init 0001             ?_I2C_2_Master_Read 0001                  ??_setMotorPWM 0011  
                     ?_turn180 001C             ?_I2C_2_Master_Stop 0001               ___lwdiv@quotient 000D  
         indicateInstruction@i 0009           indicateInstruction@j 0007       initDCmotorsPWM@PWMperiod 0003  
                     ?_trundle 0015          __end_of_initBoardLEDs 2A58            ??_I2C_2_Master_Idle 0003  
          ??_I2C_2_Master_Init 0003            ??_I2C_2_Master_Read 0004                 ___wmul@product 0007  
                     _LATAbits 0F79            ??_I2C_2_Master_Stop 0004                       _LATDbits 0F7C  
                     _LATEbits 0F7D                       _LATGbits 0F7F                       _LATHbits 0F80  
                     _IPR0bits 0E1F                       _PIE0bits 0E29       __end_of_init_buttons_LED 29BA  
                     i2u123_40 28B4                       i2u123_41 28B0                       i2u124_40 28CA  
                     i2u124_41 28C6                    turnRight@mL 001C                    turnRight@mR 001D  
                     _PIR0bits 0E33                       i2u168_40 001A                       i2u168_41 0016  
                     i2u169_40 003A                       i2u169_41 0036               readBlueColor@tmp 000C  
             ?_initDCmotorsPWM 0003                       _SSP2CON2 0EDA                      fastStop@i 001A  
                     _SSP2STAT 0ED8                  ??_reversePink 002A                     _ADCON0bits 0F60  
    __end_of_I2C_2_Master_Idle 28A4          __end_of_readBlueColor 274E      __end_of_I2C_2_Master_Init 287C  
    __end_of_I2C_2_Master_Read 2790              ___wmul@multiplier 0003                 ??_turnRight135 001E  
    __end_of_I2C_2_Master_Stop 2A80                   setMotorPWM@m 0010    I2C_2_Master_Write@data_byte 0004  
  reverseRoute@last_increments 003B                    ??_LightBlue 0028                       _High_ISR 0008  
                    _turnRight 1884              ?_reverseLightBlue 0026                      copy_data0 27A4  
           reverseLightBlue@mL 0026             reverseLightBlue@mR 0027             ??_reverseLightBlue 0028  
                _wall_detected 008C  __end_of_I2C_2_Master_RepStart 2A62                  _reverseOrange 29CC  
                     Orange@mL 0026                       Orange@mR 0027            __end_of_setMotorPWM 1740  
                _reverseYellow 27C8           i2_I2C_2_Master_Start 2A94           i2_I2C_2_Master_Write 2A38  
                     __Hrparam 0000            timed_trundle@i_2206 0025                       __Lrparam 0000  
              timed_trundle@mL 001C                timed_trundle@mR 001D                   ??_readColors 000F  
                  _initButtons 2A20    __end_ofi2_I2C_2_Master_Idle 28CC              turnRight@maxpower 0020  
             ??_readClearColor 0009    __end_ofi2_I2C_2_Master_Stop 2A94                 turnRight135@mL 001C  
               turnRight135@mR 001D                       Yellow@mL 0028                       Yellow@mR 0029  
                turnLeft135@mL 001C                  turnLeft135@mR 001D               turnLeft@maxpower 0021  
               creep@direction 0020                     _ANSELBbits 0E9A                     _ANSELDbits 0EA7  
                   _ANSELFbits 0EB4                     _T0CON0bits 0FD5            __end_of_reversePink 2828  
                   _T0CON1bits 0FD6                ___lwdiv@divisor 000B                ___lwdiv@counter 000F  
                   ?_turnRight 001C                       __ptext10 2A9E                       __ptext11 29E8  
                     __ptext20 2A12                       __ptext12 1884                       __ptext21 1D4A  
                     __ptext13 28CC                       __ptext30 2A4E                       __ptext22 2AA6  
                     __ptext14 1E78                       __ptext31 2346                       __ptext23 2280  
                     __ptext15 29F6                       __ptext40 274E                       __ptext32 24EA  
                     __ptext24 19BA                       __ptext16 1AEE                       __ptext41 2A62  
                     __ptext33 0E02                       __ptext25 25BE                       __ptext17 2A04  
                     __ptext50 293A                       __ptext42 2A6C                       __ptext34 1F98  
                     __ptext26 297A                       __ptext18 1C1C                       __ptext51 2A2C  
                     __ptext43 1740                       __ptext35 260E                       __ptext27 29A6  
                     __ptext19 29BA                       __ptext60 2A8A                       __ptext52 2A76  
                     __ptext44 1318                       __ptext36 265E                       __ptext28 23EE  
                     __ptext61 2A94                       __ptext53 2A80                       __ptext45 2554  
                     __ptext37 26AE                       __ptext29 2A20                       __ptext62 28A4  
                     __ptext54 287C                       __ptext46 15EC                       __ptext38 26FE  
                     __ptext55 2852                       __ptext47 28F2                       __ptext39 2A58  
                     __ptext56 295A                       __ptext48 2476                       __ptext49 2828  
                     __ptext58 2990                       __ptext59 2A38                       _fastStop 24EA  
                _timed_trundle 119C                  reversePink@mL 0028                  reversePink@mR 0029  
                 _SSP2CON1bits 0ED9                   _SSP2CON2bits 0EDA                       _leftCali 2280  
           __end_of_readColors 20AA           _normalizeColors$3124 001C                 ?_reverseOrange 0026  
                reverseRoute@i 003D                 ?_reverseYellow 0028                  turnLeft@power 001E  
                   turnLeft@mL 001C                     turnLeft@mR 001D          ?i2_I2C_2_Master_Start 0001  
        ?i2_I2C_2_Master_Write 0001                     turnRight@i 0022                  ??_turnLeft135 001E  
                     isa$xinst 0000               ??_readGreenColor 0009                       main@RGBC 0096  
                     int$flags 004C                   ?_decideColor 002A          __end_of_trundleSquare 1F98  
                     _turnLeft 19BA                trundleSquare@mL 001C                trundleSquare@mR 001D  
                    turn180@mL 001C                      turn180@mR 001D                     _INTCONbits 0FF2  
                 _reverseRoute 21B8                 timed_trundle@i 0023                 ?_timed_trundle 001C  
                  _setMotorPWM 15EC              ??_normalizeColors 0012                  turnRight135@i 0022  
                     intlevel2 0000           __end_of_turnRight135 1C1C                     _LEDturnOFF 2A6C  
                    turnLeft@i 0023                  trundle@i_2165 001C                _interrupts_init 25BE  
                    trundle@mL 0015                      trundle@mR 0016                 trundleSquare@i 0026  
                     turn180@i 0022                    _reversePink 27FA               _color_click_init 2828  
        fastStop@current_power 0018            __end_of_turnLeft135 1D4A                     _SSP2DATPPS 0E1D  
                   _SSP2CLKPPS 0E1C                    creep@i_2186 0026                       trundle@i 001A  
   reverseRoute@reverseMapping 0032                    ??_turnRight 001E           executeInstruction@mL 002A  
         executeInstruction@mR 002B                ??_reverseOrange 0028                ??_reverseYellow 002A  
       ??i2_I2C_2_Master_Start 0002         ??i2_I2C_2_Master_Write 0002             decideColor@normRGB 002A  
            ?_init_buttons_LED 0001  
